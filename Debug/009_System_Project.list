
009_System_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b68c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800b81c  0800b81c  0001b81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be74  0800be74  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be7c  0800be7c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be7c  0800be7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be80  0800be80  0001be80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800be84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          00002930  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200029b8  200029b8  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00015e7d  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000030f3  00000000  00000000  00035f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001440  00000000  00000000  00039070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fcb  00000000  00000000  0003a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025427  00000000  00000000  0003b47b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b26a  00000000  00000000  000608a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de5ee  00000000  00000000  0007bb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d00  00000000  00000000  0015a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0015fdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b804 	.word	0x0800b804

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800b804 	.word	0x0800b804

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b970 	b.w	8000e90 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0xe2>
 8000bde:	fab2 f382 	clz	r3, r2
 8000be2:	b143      	cbz	r3, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be8:	f1c3 0220 	rsb	r2, r3, #32
 8000bec:	409f      	lsls	r7, r3
 8000bee:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf2:	4317      	orrs	r7, r2
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfa:	fa1f f58c 	uxth.w	r5, ip
 8000bfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c02:	0c22      	lsrs	r2, r4, #16
 8000c04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c0c:	fb01 f005 	mul.w	r0, r1, r5
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c1c:	f080 811c 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f240 8119 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4462      	add	r2, ip
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3a:	fb00 f505 	mul.w	r5, r0, r5
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x90>
 8000c42:	eb1c 0404 	adds.w	r4, ip, r4
 8000c46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4a:	f080 8107 	bcs.w	8000e5c <__udivmoddi4+0x294>
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	f240 8104 	bls.w	8000e5c <__udivmoddi4+0x294>
 8000c54:	4464      	add	r4, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11e      	cbz	r6, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40dc      	lsrs	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0xbc>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ed 	beq.w	8000e52 <__udivmoddi4+0x28a>
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	fab3 f183 	clz	r1, r3
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d149      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	d302      	bcc.n	8000c96 <__udivmoddi4+0xce>
 8000c90:	4282      	cmp	r2, r0
 8000c92:	f200 80f8 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000c96:	1a84      	subs	r4, r0, r2
 8000c98:	eb65 0203 	sbc.w	r2, r5, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d0e2      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca8:	e7df      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000caa:	b902      	cbnz	r2, 8000cae <__udivmoddi4+0xe6>
 8000cac:	deff      	udf	#255	; 0xff
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ccc:	0c22      	lsrs	r2, r4, #16
 8000cce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd2:	fb0e f005 	mul.w	r0, lr, r5
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cda:	eb1c 0202 	adds.w	r2, ip, r2
 8000cde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000cea:	4645      	mov	r5, r8
 8000cec:	1a12      	subs	r2, r2, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2c2>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d1e:	e79f      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d20:	f1c1 0720 	rsb	r7, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	40fd      	lsrs	r5, r7
 8000d38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4a:	0c1c      	lsrs	r4, r3, #16
 8000d4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d50:	fb08 f50e 	mul.w	r5, r8, lr
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	42a5      	cmp	r5, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	b29d      	uxth	r5, r3
 8000d7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d80:	fb09 4413 	mls	r4, r9, r3, r4
 8000d84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da6:	fba3 9502 	umull	r9, r5, r3, r2
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	42ac      	cmp	r4, r5
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46ae      	mov	lr, r5
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x29c>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x298>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x208>
 8000dba:	ebb0 0208 	subs.w	r2, r0, r8
 8000dbe:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40ca      	lsrs	r2, r1
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	f1c3 0120 	rsb	r1, r3, #32
 8000ddc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de0:	fa20 f201 	lsr.w	r2, r0, r1
 8000de4:	fa25 f101 	lsr.w	r1, r5, r1
 8000de8:	409d      	lsls	r5, r3
 8000dea:	432a      	orrs	r2, r5
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dfc:	0c11      	lsrs	r1, r2, #16
 8000dfe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e02:	fb00 f50e 	mul.w	r5, r0, lr
 8000e06:	428d      	cmp	r5, r1
 8000e08:	fa04 f403 	lsl.w	r4, r4, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x258>
 8000e0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	428d      	cmp	r5, r1
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1b49      	subs	r1, r1, r5
 8000e22:	b292      	uxth	r2, r2
 8000e24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e28:	fb07 1115 	mls	r1, r7, r5, r1
 8000e2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e30:	fb05 f10e 	mul.w	r1, r5, lr
 8000e34:	4291      	cmp	r1, r2
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x282>
 8000e38:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e46:	3d02      	subs	r5, #2
 8000e48:	4462      	add	r2, ip
 8000e4a:	1a52      	subs	r2, r2, r1
 8000e4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0xfc>
 8000e52:	4631      	mov	r1, r6
 8000e54:	4630      	mov	r0, r6
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000e58:	4639      	mov	r1, r7
 8000e5a:	e6e6      	b.n	8000c2a <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e6fb      	b.n	8000c58 <__udivmoddi4+0x90>
 8000e60:	4548      	cmp	r0, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e70:	4645      	mov	r5, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e74:	462b      	mov	r3, r5
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x258>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3d02      	subs	r5, #2
 8000e82:	4462      	add	r2, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x124>
 8000e86:	4608      	mov	r0, r1
 8000e88:	e70a      	b.n	8000ca0 <__udivmoddi4+0xd8>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x14e>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2140      	movs	r1, #64	; 0x40
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <SELECT+0x18>)
 8000e9e:	f004 f8cb 	bl	8005038 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f002 fce4 	bl	8003870 <HAL_Delay>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020400 	.word	0x40020400

08000eb0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <DESELECT+0x18>)
 8000eba:	f004 f8bd 	bl	8005038 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f002 fcd6 	bl	8003870 <HAL_Delay>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40020400 	.word	0x40020400

08000ecc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ed6:	bf00      	nop
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <SPI_TxByte+0x30>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d1f8      	bne.n	8000ed8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ee6:	1df9      	adds	r1, r7, #7
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <SPI_TxByte+0x30>)
 8000eee:	f004 fdde 	bl	8005aae <HAL_SPI_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000ac 	.word	0x200000ac

08000f00 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f0c:	bf00      	nop
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <SPI_TxBuffer+0x30>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d1f8      	bne.n	8000f0e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f1c:	887a      	ldrh	r2, [r7, #2]
 8000f1e:	2364      	movs	r3, #100	; 0x64
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <SPI_TxBuffer+0x30>)
 8000f24:	f004 fdc3 	bl	8005aae <HAL_SPI_Transmit>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000ac 	.word	0x200000ac

08000f34 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
 8000f3c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f3e:	bf00      	nop
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <SPI_RxByte+0x34>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d1f8      	bne.n	8000f40 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f4e:	1dba      	adds	r2, r7, #6
 8000f50:	1df9      	adds	r1, r7, #7
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <SPI_RxByte+0x34>)
 8000f5a:	f004 feeb 	bl	8005d34 <HAL_SPI_TransmitReceive>

	return data;
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000ac 	.word	0x200000ac

08000f6c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f74:	f7ff ffde 	bl	8000f34 <SPI_RxByte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <SD_ReadyWait+0x30>)
 8000f90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f94:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000f96:	f7ff ffcd 	bl	8000f34 <SPI_RxByte>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2bff      	cmp	r3, #255	; 0xff
 8000fa2:	d003      	beq.n	8000fac <SD_ReadyWait+0x24>
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SD_ReadyWait+0x30>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f4      	bne.n	8000f96 <SD_ReadyWait+0xe>

	return res;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000a6 	.word	0x200000a6

08000fbc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000fc2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fc6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000fc8:	f7ff ff72 	bl	8000eb0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	e005      	b.n	8000fde <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000fd2:	20ff      	movs	r0, #255	; 0xff
 8000fd4:	f7ff ff7a 	bl	8000ecc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	ddf6      	ble.n	8000fd2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000fe4:	f7ff ff56 	bl	8000e94 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000fe8:	2340      	movs	r3, #64	; 0x40
 8000fea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ffc:	2395      	movs	r3, #149	; 0x95
 8000ffe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001000:	463b      	mov	r3, r7
 8001002:	2106      	movs	r1, #6
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff7b 	bl	8000f00 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800100a:	e002      	b.n	8001012 <SD_PowerOn+0x56>
	{
		cnt--;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3b01      	subs	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001012:	f7ff ff8f 	bl	8000f34 <SPI_RxByte>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	d002      	beq.n	8001022 <SD_PowerOn+0x66>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f4      	bne.n	800100c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001022:	f7ff ff45 	bl	8000eb0 <DESELECT>
	SPI_TxByte(0XFF);
 8001026:	20ff      	movs	r0, #255	; 0xff
 8001028:	f7ff ff50 	bl	8000ecc <SPI_TxByte>

	PowerFlag = 1;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <SD_PowerOn+0x80>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000a9 	.word	0x200000a9

08001040 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <SD_PowerOff+0x14>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	200000a9 	.word	0x200000a9

08001058 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <SD_CheckPower+0x14>)
 800105e:	781b      	ldrb	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200000a9 	.word	0x200000a9

08001070 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <SD_RxDataBlock+0x58>)
 800107c:	22c8      	movs	r2, #200	; 0xc8
 800107e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001080:	f7ff ff58 	bl	8000f34 <SPI_RxByte>
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	d103      	bne.n	8001096 <SD_RxDataBlock+0x26>
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <SD_RxDataBlock+0x58>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f4      	bne.n	8001080 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2bfe      	cmp	r3, #254	; 0xfe
 800109a:	d001      	beq.n	80010a0 <SD_RxDataBlock+0x30>
 800109c:	2300      	movs	r3, #0
 800109e:	e00f      	b.n	80010c0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff60 	bl	8000f6c <SPI_RxBytePtr>
	} while(len--);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	1e5a      	subs	r2, r3, #1
 80010b0:	603a      	str	r2, [r7, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f4      	bne.n	80010a0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80010b6:	f7ff ff3d 	bl	8000f34 <SPI_RxByte>
	SPI_RxByte();
 80010ba:	f7ff ff3b 	bl	8000f34 <SPI_RxByte>

	return TRUE;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000a4 	.word	0x200000a4

080010cc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010dc:	f7ff ff54 	bl	8000f88 <SD_ReadyWait>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d001      	beq.n	80010ea <SD_TxDataBlock+0x1e>
 80010e6:	2300      	movs	r3, #0
 80010e8:	e02f      	b.n	800114a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff feed 	bl	8000ecc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2bfd      	cmp	r3, #253	; 0xfd
 80010f6:	d020      	beq.n	800113a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80010f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff feff 	bl	8000f00 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001102:	f7ff ff17 	bl	8000f34 <SPI_RxByte>
		SPI_RxByte();
 8001106:	f7ff ff15 	bl	8000f34 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800110a:	e00b      	b.n	8001124 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800110c:	f7ff ff12 	bl	8000f34 <SPI_RxByte>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	2b05      	cmp	r3, #5
 800111c:	d006      	beq.n	800112c <SD_TxDataBlock+0x60>
			i++;
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	3301      	adds	r3, #1
 8001122:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	2b40      	cmp	r3, #64	; 0x40
 8001128:	d9f0      	bls.n	800110c <SD_TxDataBlock+0x40>
 800112a:	e000      	b.n	800112e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800112c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800112e:	bf00      	nop
 8001130:	f7ff ff00 	bl	8000f34 <SPI_RxByte>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fa      	beq.n	8001130 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	2b05      	cmp	r3, #5
 8001142:	d101      	bne.n	8001148 <SD_TxDataBlock+0x7c>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	6039      	str	r1, [r7, #0]
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800115e:	f7ff ff13 	bl	8000f88 <SD_ReadyWait>
 8001162:	4603      	mov	r3, r0
 8001164:	2bff      	cmp	r3, #255	; 0xff
 8001166:	d001      	beq.n	800116c <SD_SendCmd+0x1a>
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	e042      	b.n	80011f2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff feac 	bl	8000ecc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	0e1b      	lsrs	r3, r3, #24
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fea6 	bl	8000ecc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	0c1b      	lsrs	r3, r3, #16
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fea0 	bl	8000ecc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fe9a 	bl	8000ecc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe95 	bl	8000ecc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b40      	cmp	r3, #64	; 0x40
 80011a6:	d102      	bne.n	80011ae <SD_SendCmd+0x5c>
 80011a8:	2395      	movs	r3, #149	; 0x95
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e007      	b.n	80011be <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b48      	cmp	r3, #72	; 0x48
 80011b2:	d102      	bne.n	80011ba <SD_SendCmd+0x68>
 80011b4:	2387      	movs	r3, #135	; 0x87
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e001      	b.n	80011be <SD_SendCmd+0x6c>
	else crc = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe83 	bl	8000ecc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b4c      	cmp	r3, #76	; 0x4c
 80011ca:	d101      	bne.n	80011d0 <SD_SendCmd+0x7e>
 80011cc:	f7ff feb2 	bl	8000f34 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011d0:	230a      	movs	r3, #10
 80011d2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011d4:	f7ff feae 	bl	8000f34 <SPI_RxByte>
 80011d8:	4603      	mov	r3, r0
 80011da:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80011dc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da05      	bge.n	80011f0 <SD_SendCmd+0x9e>
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	73bb      	strb	r3, [r7, #14]
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f1      	bne.n	80011d4 <SD_SendCmd+0x82>

	return res;
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SD_disk_initialize+0x14>
 800120c:	2301      	movs	r3, #1
 800120e:	e0d1      	b.n	80013b4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <SD_disk_initialize+0x1c0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <SD_disk_initialize+0x2a>
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <SD_disk_initialize+0x1c0>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	e0c6      	b.n	80013b4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001226:	f7ff fec9 	bl	8000fbc <SD_PowerOn>

	/* slave select */
	SELECT();
 800122a:	f7ff fe33 	bl	8000e94 <SELECT>

	/* check disk type */
	type = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001232:	2100      	movs	r1, #0
 8001234:	2040      	movs	r0, #64	; 0x40
 8001236:	f7ff ff8c 	bl	8001152 <SD_SendCmd>
 800123a:	4603      	mov	r3, r0
 800123c:	2b01      	cmp	r3, #1
 800123e:	f040 80a1 	bne.w	8001384 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001242:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <SD_disk_initialize+0x1c4>)
 8001244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001248:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800124a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800124e:	2048      	movs	r0, #72	; 0x48
 8001250:	f7ff ff7f 	bl	8001152 <SD_SendCmd>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d155      	bne.n	8001306 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e00c      	b.n	800127a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001260:	7bfc      	ldrb	r4, [r7, #15]
 8001262:	f7ff fe67 	bl	8000f34 <SPI_RxByte>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	f104 0310 	add.w	r3, r4, #16
 800126e:	443b      	add	r3, r7
 8001270:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	3301      	adds	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d9ef      	bls.n	8001260 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001280:	7abb      	ldrb	r3, [r7, #10]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d17e      	bne.n	8001384 <SD_disk_initialize+0x188>
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	2baa      	cmp	r3, #170	; 0xaa
 800128a:	d17b      	bne.n	8001384 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800128c:	2100      	movs	r1, #0
 800128e:	2077      	movs	r0, #119	; 0x77
 8001290:	f7ff ff5f 	bl	8001152 <SD_SendCmd>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d807      	bhi.n	80012aa <SD_disk_initialize+0xae>
 800129a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800129e:	2069      	movs	r0, #105	; 0x69
 80012a0:	f7ff ff57 	bl	8001152 <SD_SendCmd>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <SD_disk_initialize+0x1c4>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ec      	bne.n	800128c <SD_disk_initialize+0x90>
 80012b2:	e000      	b.n	80012b6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012b4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <SD_disk_initialize+0x1c4>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d062      	beq.n	8001384 <SD_disk_initialize+0x188>
 80012be:	2100      	movs	r1, #0
 80012c0:	207a      	movs	r0, #122	; 0x7a
 80012c2:	f7ff ff46 	bl	8001152 <SD_SendCmd>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d15b      	bne.n	8001384 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e00c      	b.n	80012ec <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012d2:	7bfc      	ldrb	r4, [r7, #15]
 80012d4:	f7ff fe2e 	bl	8000f34 <SPI_RxByte>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	f104 0310 	add.w	r3, r4, #16
 80012e0:	443b      	add	r3, r7
 80012e2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	3301      	adds	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d9ef      	bls.n	80012d2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80012f2:	7a3b      	ldrb	r3, [r7, #8]
 80012f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SD_disk_initialize+0x104>
 80012fc:	230c      	movs	r3, #12
 80012fe:	e000      	b.n	8001302 <SD_disk_initialize+0x106>
 8001300:	2304      	movs	r3, #4
 8001302:	73bb      	strb	r3, [r7, #14]
 8001304:	e03e      	b.n	8001384 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001306:	2100      	movs	r1, #0
 8001308:	2077      	movs	r0, #119	; 0x77
 800130a:	f7ff ff22 	bl	8001152 <SD_SendCmd>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	d808      	bhi.n	8001326 <SD_disk_initialize+0x12a>
 8001314:	2100      	movs	r1, #0
 8001316:	2069      	movs	r0, #105	; 0x69
 8001318:	f7ff ff1b 	bl	8001152 <SD_SendCmd>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d801      	bhi.n	8001326 <SD_disk_initialize+0x12a>
 8001322:	2302      	movs	r3, #2
 8001324:	e000      	b.n	8001328 <SD_disk_initialize+0x12c>
 8001326:	2301      	movs	r3, #1
 8001328:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d10e      	bne.n	800134e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001330:	2100      	movs	r1, #0
 8001332:	2077      	movs	r0, #119	; 0x77
 8001334:	f7ff ff0d 	bl	8001152 <SD_SendCmd>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d80e      	bhi.n	800135c <SD_disk_initialize+0x160>
 800133e:	2100      	movs	r1, #0
 8001340:	2069      	movs	r0, #105	; 0x69
 8001342:	f7ff ff06 	bl	8001152 <SD_SendCmd>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <SD_disk_initialize+0x160>
 800134c:	e00c      	b.n	8001368 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800134e:	2100      	movs	r1, #0
 8001350:	2041      	movs	r0, #65	; 0x41
 8001352:	f7ff fefe 	bl	8001152 <SD_SendCmd>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <SD_disk_initialize+0x1c4>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e2      	bne.n	800132a <SD_disk_initialize+0x12e>
 8001364:	e000      	b.n	8001368 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001366:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <SD_disk_initialize+0x1c4>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <SD_disk_initialize+0x184>
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	2050      	movs	r0, #80	; 0x50
 8001376:	f7ff feec 	bl	8001152 <SD_SendCmd>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SD_disk_initialize+0x188>
 8001380:	2300      	movs	r3, #0
 8001382:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <SD_disk_initialize+0x1c8>)
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800138a:	f7ff fd91 	bl	8000eb0 <DESELECT>
	SPI_RxByte();
 800138e:	f7ff fdd1 	bl	8000f34 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <SD_disk_initialize+0x1c0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SD_disk_initialize+0x1c0>)
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	e001      	b.n	80013ae <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80013aa:	f7ff fe49 	bl	8001040 <SD_PowerOff>
	}

	return Stat;
 80013ae:	4b03      	ldr	r3, [pc, #12]	; (80013bc <SD_disk_initialize+0x1c0>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	200000a4 	.word	0x200000a4
 80013c4:	200000a8 	.word	0x200000a8

080013c8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SD_disk_status+0x14>
 80013d8:	2301      	movs	r3, #1
 80013da:	e002      	b.n	80013e2 <SD_disk_status+0x1a>
	return Stat;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <SD_disk_status+0x28>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000

080013f4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <SD_disk_read+0x1c>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <SD_disk_read+0x20>
 8001410:	2304      	movs	r3, #4
 8001412:	e051      	b.n	80014b8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <SD_disk_read+0xcc>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SD_disk_read+0x32>
 8001422:	2303      	movs	r3, #3
 8001424:	e048      	b.n	80014b8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <SD_disk_read+0xd0>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <SD_disk_read+0x44>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	607b      	str	r3, [r7, #4]

	SELECT();
 8001438:	f7ff fd2c 	bl	8000e94 <SELECT>

	if (count == 1)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d111      	bne.n	8001466 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	2051      	movs	r0, #81	; 0x51
 8001446:	f7ff fe84 	bl	8001152 <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d129      	bne.n	80014a4 <SD_disk_read+0xb0>
 8001450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f7ff fe0b 	bl	8001070 <SD_RxDataBlock>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d021      	beq.n	80014a4 <SD_disk_read+0xb0>
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	e01e      	b.n	80014a4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	2052      	movs	r0, #82	; 0x52
 800146a:	f7ff fe72 	bl	8001152 <SD_SendCmd>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d117      	bne.n	80014a4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001478:	68b8      	ldr	r0, [r7, #8]
 800147a:	f7ff fdf9 	bl	8001070 <SD_RxDataBlock>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <SD_disk_read+0xa6>
				buff += 512;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800148a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ed      	bne.n	8001474 <SD_disk_read+0x80>
 8001498:	e000      	b.n	800149c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800149a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	204c      	movs	r0, #76	; 0x4c
 80014a0:	f7ff fe57 	bl	8001152 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80014a4:	f7ff fd04 	bl	8000eb0 <DESELECT>
	SPI_RxByte();
 80014a8:	f7ff fd44 	bl	8000f34 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf14      	ite	ne
 80014b2:	2301      	movne	r3, #1
 80014b4:	2300      	moveq	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	200000a8 	.word	0x200000a8

080014c8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <SD_disk_write+0x1c>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <SD_disk_write+0x20>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e06b      	b.n	80015c0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014e8:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <SD_disk_write+0x100>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SD_disk_write+0x32>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e062      	b.n	80015c0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80014fa:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <SD_disk_write+0x100>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SD_disk_write+0x44>
 8001508:	2302      	movs	r3, #2
 800150a:	e059      	b.n	80015c0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <SD_disk_write+0x104>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <SD_disk_write+0x56>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	025b      	lsls	r3, r3, #9
 800151c:	607b      	str	r3, [r7, #4]

	SELECT();
 800151e:	f7ff fcb9 	bl	8000e94 <SELECT>

	if (count == 1)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d110      	bne.n	800154a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	2058      	movs	r0, #88	; 0x58
 800152c:	f7ff fe11 	bl	8001152 <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d13a      	bne.n	80015ac <SD_disk_write+0xe4>
 8001536:	21fe      	movs	r1, #254	; 0xfe
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff fdc7 	bl	80010cc <SD_TxDataBlock>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d033      	beq.n	80015ac <SD_disk_write+0xe4>
			count = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	e030      	b.n	80015ac <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <SD_disk_write+0x104>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001556:	2100      	movs	r1, #0
 8001558:	2077      	movs	r0, #119	; 0x77
 800155a:	f7ff fdfa 	bl	8001152 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	2057      	movs	r0, #87	; 0x57
 8001562:	f7ff fdf6 	bl	8001152 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	2059      	movs	r0, #89	; 0x59
 800156a:	f7ff fdf2 	bl	8001152 <SD_SendCmd>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d11b      	bne.n	80015ac <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001574:	21fc      	movs	r1, #252	; 0xfc
 8001576:	68b8      	ldr	r0, [r7, #8]
 8001578:	f7ff fda8 	bl	80010cc <SD_TxDataBlock>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00a      	beq.n	8001598 <SD_disk_write+0xd0>
				buff += 512;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001588:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ee      	bne.n	8001574 <SD_disk_write+0xac>
 8001596:	e000      	b.n	800159a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001598:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800159a:	21fd      	movs	r1, #253	; 0xfd
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fd95 	bl	80010cc <SD_TxDataBlock>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <SD_disk_write+0xe4>
			{
				count = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80015ac:	f7ff fc80 	bl	8000eb0 <DESELECT>
	SPI_RxByte();
 80015b0:	f7ff fcc0 	bl	8000f34 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	200000a8 	.word	0x200000a8

080015d0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	603a      	str	r2, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	460b      	mov	r3, r1
 80015de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SD_disk_ioctl+0x1e>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e115      	b.n	800181a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d124      	bne.n	8001644 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d012      	beq.n	8001628 <SD_disk_ioctl+0x58>
 8001602:	2b02      	cmp	r3, #2
 8001604:	dc1a      	bgt.n	800163c <SD_disk_ioctl+0x6c>
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <SD_disk_ioctl+0x40>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d006      	beq.n	800161c <SD_disk_ioctl+0x4c>
 800160e:	e015      	b.n	800163c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001610:	f7ff fd16 	bl	8001040 <SD_PowerOff>
			res = RES_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800161a:	e0fc      	b.n	8001816 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800161c:	f7ff fcce 	bl	8000fbc <SD_PowerOn>
			res = RES_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001626:	e0f6      	b.n	8001816 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	1c5c      	adds	r4, r3, #1
 800162c:	f7ff fd14 	bl	8001058 <SD_CheckPower>
 8001630:	4603      	mov	r3, r0
 8001632:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800163a:	e0ec      	b.n	8001816 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800163c:	2304      	movs	r3, #4
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001642:	e0e8      	b.n	8001816 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001644:	4b77      	ldr	r3, [pc, #476]	; (8001824 <SD_disk_ioctl+0x254>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SD_disk_ioctl+0x86>
 8001652:	2303      	movs	r3, #3
 8001654:	e0e1      	b.n	800181a <SD_disk_ioctl+0x24a>

		SELECT();
 8001656:	f7ff fc1d 	bl	8000e94 <SELECT>

		switch (ctrl)
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	2b0d      	cmp	r3, #13
 800165e:	f200 80cb 	bhi.w	80017f8 <SD_disk_ioctl+0x228>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <SD_disk_ioctl+0x98>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001763 	.word	0x08001763
 800166c:	080016a1 	.word	0x080016a1
 8001670:	08001753 	.word	0x08001753
 8001674:	080017f9 	.word	0x080017f9
 8001678:	080017f9 	.word	0x080017f9
 800167c:	080017f9 	.word	0x080017f9
 8001680:	080017f9 	.word	0x080017f9
 8001684:	080017f9 	.word	0x080017f9
 8001688:	080017f9 	.word	0x080017f9
 800168c:	080017f9 	.word	0x080017f9
 8001690:	080017f9 	.word	0x080017f9
 8001694:	08001775 	.word	0x08001775
 8001698:	08001799 	.word	0x08001799
 800169c:	080017bd 	.word	0x080017bd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016a0:	2100      	movs	r1, #0
 80016a2:	2049      	movs	r0, #73	; 0x49
 80016a4:	f7ff fd55 	bl	8001152 <SD_SendCmd>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 80a8 	bne.w	8001800 <SD_disk_ioctl+0x230>
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2110      	movs	r1, #16
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fcda 	bl	8001070 <SD_RxDataBlock>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 809e 	beq.w	8001800 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80016c4:	7b3b      	ldrb	r3, [r7, #12]
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10e      	bne.n	80016ec <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016ce:	7d7b      	ldrb	r3, [r7, #21]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	7d3b      	ldrb	r3, [r7, #20]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4413      	add	r3, r2
 80016dc:	b29b      	uxth	r3, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80016e2:	8bfb      	ldrh	r3, [r7, #30]
 80016e4:	029a      	lsls	r2, r3, #10
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e02e      	b.n	800174a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016ec:	7c7b      	ldrb	r3, [r7, #17]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	7dbb      	ldrb	r3, [r7, #22]
 80016f6:	09db      	lsrs	r3, r3, #7
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	7d7b      	ldrb	r3, [r7, #21]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f003 0306 	and.w	r3, r3, #6
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4413      	add	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3302      	adds	r3, #2
 8001710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001714:	7d3b      	ldrb	r3, [r7, #20]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	b2db      	uxtb	r3, r3
 800171a:	b29a      	uxth	r2, r3
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	b29b      	uxth	r3, r3
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29a      	uxth	r2, r3
 8001728:	7cbb      	ldrb	r3, [r7, #18]
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	b29b      	uxth	r3, r3
 800172e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001732:	b29b      	uxth	r3, r3
 8001734:	4413      	add	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	3301      	adds	r3, #1
 800173a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800173c:	8bfa      	ldrh	r2, [r7, #30]
 800173e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001742:	3b09      	subs	r3, #9
 8001744:	409a      	lsls	r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001750:	e056      	b.n	8001800 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001758:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001760:	e055      	b.n	800180e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001762:	f7ff fc11 	bl	8000f88 <SD_ReadyWait>
 8001766:	4603      	mov	r3, r0
 8001768:	2bff      	cmp	r3, #255	; 0xff
 800176a:	d14b      	bne.n	8001804 <SD_disk_ioctl+0x234>
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001772:	e047      	b.n	8001804 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001774:	2100      	movs	r1, #0
 8001776:	2049      	movs	r0, #73	; 0x49
 8001778:	f7ff fceb 	bl	8001152 <SD_SendCmd>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d142      	bne.n	8001808 <SD_disk_ioctl+0x238>
 8001782:	2110      	movs	r1, #16
 8001784:	6a38      	ldr	r0, [r7, #32]
 8001786:	f7ff fc73 	bl	8001070 <SD_RxDataBlock>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03b      	beq.n	8001808 <SD_disk_ioctl+0x238>
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001796:	e037      	b.n	8001808 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001798:	2100      	movs	r1, #0
 800179a:	204a      	movs	r0, #74	; 0x4a
 800179c:	f7ff fcd9 	bl	8001152 <SD_SendCmd>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d132      	bne.n	800180c <SD_disk_ioctl+0x23c>
 80017a6:	2110      	movs	r1, #16
 80017a8:	6a38      	ldr	r0, [r7, #32]
 80017aa:	f7ff fc61 	bl	8001070 <SD_RxDataBlock>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02b      	beq.n	800180c <SD_disk_ioctl+0x23c>
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ba:	e027      	b.n	800180c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80017bc:	2100      	movs	r1, #0
 80017be:	207a      	movs	r0, #122	; 0x7a
 80017c0:	f7ff fcc7 	bl	8001152 <SD_SendCmd>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017d0:	e00b      	b.n	80017ea <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80017d2:	6a3c      	ldr	r4, [r7, #32]
 80017d4:	1c63      	adds	r3, r4, #1
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	f7ff fbac 	bl	8000f34 <SPI_RxByte>
 80017dc:	4603      	mov	r3, r0
 80017de:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80017e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017e4:	3301      	adds	r3, #1
 80017e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d9ef      	bls.n	80017d2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80017f8:	2304      	movs	r3, #4
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017fe:	e006      	b.n	800180e <SD_disk_ioctl+0x23e>
			break;
 8001800:	bf00      	nop
 8001802:	e004      	b.n	800180e <SD_disk_ioctl+0x23e>
			break;
 8001804:	bf00      	nop
 8001806:	e002      	b.n	800180e <SD_disk_ioctl+0x23e>
			break;
 8001808:	bf00      	nop
 800180a:	e000      	b.n	800180e <SD_disk_ioctl+0x23e>
			break;
 800180c:	bf00      	nop
		}

		DESELECT();
 800180e:	f7ff fb4f 	bl	8000eb0 <DESELECT>
		SPI_RxByte();
 8001812:	f7ff fb8f 	bl	8000f34 <SPI_RxByte>
	}

	return res;
 8001816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800181a:	4618      	mov	r0, r3
 800181c:	372c      	adds	r7, #44	; 0x2c
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000

08001828 <transmit_uart>:
char nextion_Buffer[50];
char buffer[100];

//SD karta yazmada kullanılan transmit_uart'ın fonskiyonu.
void transmit_uart(char *string)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
     uint8_t len = strlen(string);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7fe fccd 	bl	80001d0 <strlen>
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]
     HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 200);
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	b29a      	uxth	r2, r3
 800183e:	23c8      	movs	r3, #200	; 0xc8
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <transmit_uart+0x28>)
 8001844:	f005 f9c8 	bl	8006bd8 <HAL_UART_Transmit>
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	2000234c 	.word	0x2000234c

08001854 <nextion_Send>:



//Nextion'a değer göndermede kullanılan fonksiyon.
void nextion_Send(char *obj, uint32_t num ) //obj parametresine num değeri gönderilir.
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]


	uint8_t *nextion_Buffer = malloc(30*sizeof(char)); //buffer için bellek tahsis edilir.
 800185e:	201e      	movs	r0, #30
 8001860:	f009 fa16 	bl	800ac90 <malloc>
 8001864:	4603      	mov	r3, r0
 8001866:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *)nextion_Buffer, "%s.val=%ld", obj, num); //nextion ekranına gönderilecek komut
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <nextion_Send+0x4c>)
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f009 faca 	bl	800ae08 <siprintf>
 8001874:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart2, nextion_Buffer, len, 1000);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	b29a      	uxth	r2, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	4808      	ldr	r0, [pc, #32]	; (80018a4 <nextion_Send+0x50>)
 8001882:	f005 f9a9 	bl	8006bd8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, end_Command, 3, 100);
 8001886:	2364      	movs	r3, #100	; 0x64
 8001888:	2203      	movs	r2, #3
 800188a:	4907      	ldr	r1, [pc, #28]	; (80018a8 <nextion_Send+0x54>)
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <nextion_Send+0x50>)
 800188e:	f005 f9a3 	bl	8006bd8 <HAL_UART_Transmit>
	free(nextion_Buffer); //bellek serbest bırakılır.
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f009 fa04 	bl	800aca0 <free>


}
 8001898:	bf00      	nop
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	0800b81c 	.word	0x0800b81c
 80018a4:	20002304 	.word	0x20002304
 80018a8:	20000004 	.word	0x20000004

080018ac <map>:

//Bu fonksiyon belirli bir değer aralığını başka bir değer aralığına dönüştürür.
uint32_t map(uint32_t min1, uint32_t max1, uint32_t min2, uint32_t max2, uint32_t width)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
	return (min1*width)/min2;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	fb03 f202 	mul.w	r2, r3, r2
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_UART_RxCpltCallback>:

//DAC ile alınan verinin gönderimi
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af02      	add	r7, sp, #8
 80018da:	6078      	str	r0, [r7, #4]
	 if (huart == &huart2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a4b      	ldr	r2, [pc, #300]	; (8001a0c <HAL_UART_RxCpltCallback+0x138>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	f040 8197 	bne.w	8001c14 <HAL_UART_RxCpltCallback+0x340>
	 {

		 if(RX_Data[1] == 0x31)
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_UART_RxCpltCallback+0x13c>)
 80018e8:	785b      	ldrb	r3, [r3, #1]
 80018ea:	2b31      	cmp	r3, #49	; 0x31
 80018ec:	d116      	bne.n	800191c <HAL_UART_RxCpltCallback+0x48>
		 {
		 nextion_Send("n2", iVin);
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <HAL_UART_RxCpltCallback+0x140>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4848      	ldr	r0, [pc, #288]	; (8001a18 <HAL_UART_RxCpltCallback+0x144>)
 80018f6:	f7ff ffad 	bl	8001854 <nextion_Send>
		 nextion_Send("n3", iIin);
 80018fa:	4b48      	ldr	r3, [pc, #288]	; (8001a1c <HAL_UART_RxCpltCallback+0x148>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	4847      	ldr	r0, [pc, #284]	; (8001a20 <HAL_UART_RxCpltCallback+0x14c>)
 8001902:	f7ff ffa7 	bl	8001854 <nextion_Send>
		 nextion_Send("n4", 666);
 8001906:	f240 219a 	movw	r1, #666	; 0x29a
 800190a:	4846      	ldr	r0, [pc, #280]	; (8001a24 <HAL_UART_RxCpltCallback+0x150>)
 800190c:	f7ff ffa2 	bl	8001854 <nextion_Send>
		 nextion_Send("n5", 777);
 8001910:	f240 3109 	movw	r1, #777	; 0x309
 8001914:	4844      	ldr	r0, [pc, #272]	; (8001a28 <HAL_UART_RxCpltCallback+0x154>)
 8001916:	f7ff ff9d 	bl	8001854 <nextion_Send>
 800191a:	e0d3      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x32)
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <HAL_UART_RxCpltCallback+0x13c>)
 800191e:	785b      	ldrb	r3, [r3, #1]
 8001920:	2b32      	cmp	r3, #50	; 0x32
 8001922:	d116      	bne.n	8001952 <HAL_UART_RxCpltCallback+0x7e>
		 {
		 nextion_Send("n6", iVout);
 8001924:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_UART_RxCpltCallback+0x158>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	4841      	ldr	r0, [pc, #260]	; (8001a30 <HAL_UART_RxCpltCallback+0x15c>)
 800192c:	f7ff ff92 	bl	8001854 <nextion_Send>
		 nextion_Send("n7", iIout);
 8001930:	4b40      	ldr	r3, [pc, #256]	; (8001a34 <HAL_UART_RxCpltCallback+0x160>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	4840      	ldr	r0, [pc, #256]	; (8001a38 <HAL_UART_RxCpltCallback+0x164>)
 8001938:	f7ff ff8c 	bl	8001854 <nextion_Send>
		 nextion_Send("n8", 666);
 800193c:	f240 219a 	movw	r1, #666	; 0x29a
 8001940:	483e      	ldr	r0, [pc, #248]	; (8001a3c <HAL_UART_RxCpltCallback+0x168>)
 8001942:	f7ff ff87 	bl	8001854 <nextion_Send>
		 nextion_Send("n9", 777);
 8001946:	f240 3109 	movw	r1, #777	; 0x309
 800194a:	483d      	ldr	r0, [pc, #244]	; (8001a40 <HAL_UART_RxCpltCallback+0x16c>)
 800194c:	f7ff ff82 	bl	8001854 <nextion_Send>
 8001950:	e0b8      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x33)
 8001952:	4b2f      	ldr	r3, [pc, #188]	; (8001a10 <HAL_UART_RxCpltCallback+0x13c>)
 8001954:	785b      	ldrb	r3, [r3, #1]
 8001956:	2b33      	cmp	r3, #51	; 0x33
 8001958:	d124      	bne.n	80019a4 <HAL_UART_RxCpltCallback+0xd0>
		 {
		 nextion_Send("n10", iV1L);
 800195a:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_UART_RxCpltCallback+0x170>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	4839      	ldr	r0, [pc, #228]	; (8001a48 <HAL_UART_RxCpltCallback+0x174>)
 8001962:	f7ff ff77 	bl	8001854 <nextion_Send>
		 nextion_Send("n11", iI1L);
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_UART_RxCpltCallback+0x178>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4619      	mov	r1, r3
 800196c:	4838      	ldr	r0, [pc, #224]	; (8001a50 <HAL_UART_RxCpltCallback+0x17c>)
 800196e:	f7ff ff71 	bl	8001854 <nextion_Send>
		 nextion_Send("n12", iV2L);
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_UART_RxCpltCallback+0x180>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	4837      	ldr	r0, [pc, #220]	; (8001a58 <HAL_UART_RxCpltCallback+0x184>)
 800197a:	f7ff ff6b 	bl	8001854 <nextion_Send>
		 nextion_Send("n13", iI2L);
 800197e:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_UART_RxCpltCallback+0x188>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	4836      	ldr	r0, [pc, #216]	; (8001a60 <HAL_UART_RxCpltCallback+0x18c>)
 8001986:	f7ff ff65 	bl	8001854 <nextion_Send>
		 nextion_Send("n14", iV3L);
 800198a:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_UART_RxCpltCallback+0x190>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4619      	mov	r1, r3
 8001990:	4835      	ldr	r0, [pc, #212]	; (8001a68 <HAL_UART_RxCpltCallback+0x194>)
 8001992:	f7ff ff5f 	bl	8001854 <nextion_Send>
		 nextion_Send("n15", iI3L);
 8001996:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <HAL_UART_RxCpltCallback+0x198>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4619      	mov	r1, r3
 800199c:	4834      	ldr	r0, [pc, #208]	; (8001a70 <HAL_UART_RxCpltCallback+0x19c>)
 800199e:	f7ff ff59 	bl	8001854 <nextion_Send>
 80019a2:	e08f      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x34)
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <HAL_UART_RxCpltCallback+0x13c>)
 80019a6:	785b      	ldrb	r3, [r3, #1]
 80019a8:	2b34      	cmp	r3, #52	; 0x34
 80019aa:	d124      	bne.n	80019f6 <HAL_UART_RxCpltCallback+0x122>
		 {
		 nextion_Send("n16", iV12L);
 80019ac:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <HAL_UART_RxCpltCallback+0x1a0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4831      	ldr	r0, [pc, #196]	; (8001a78 <HAL_UART_RxCpltCallback+0x1a4>)
 80019b4:	f7ff ff4e 	bl	8001854 <nextion_Send>
		 nextion_Send("n17", iI12L);
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_UART_RxCpltCallback+0x1a8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	4830      	ldr	r0, [pc, #192]	; (8001a80 <HAL_UART_RxCpltCallback+0x1ac>)
 80019c0:	f7ff ff48 	bl	8001854 <nextion_Send>
		 nextion_Send("n18", iV23L);
 80019c4:	4b2f      	ldr	r3, [pc, #188]	; (8001a84 <HAL_UART_RxCpltCallback+0x1b0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	482f      	ldr	r0, [pc, #188]	; (8001a88 <HAL_UART_RxCpltCallback+0x1b4>)
 80019cc:	f7ff ff42 	bl	8001854 <nextion_Send>
		 nextion_Send("n19", iI23L);
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_UART_RxCpltCallback+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	482e      	ldr	r0, [pc, #184]	; (8001a90 <HAL_UART_RxCpltCallback+0x1bc>)
 80019d8:	f7ff ff3c 	bl	8001854 <nextion_Send>
		 nextion_Send("n20", iV13L);
 80019dc:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_UART_RxCpltCallback+0x1c0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	482d      	ldr	r0, [pc, #180]	; (8001a98 <HAL_UART_RxCpltCallback+0x1c4>)
 80019e4:	f7ff ff36 	bl	8001854 <nextion_Send>
		 nextion_Send("n21", iI13L);
 80019e8:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <HAL_UART_RxCpltCallback+0x1c8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	482c      	ldr	r0, [pc, #176]	; (8001aa0 <HAL_UART_RxCpltCallback+0x1cc>)
 80019f0:	f7ff ff30 	bl	8001854 <nextion_Send>
 80019f4:	e066      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x35)
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_UART_RxCpltCallback+0x13c>)
 80019f8:	785b      	ldrb	r3, [r3, #1]
 80019fa:	2b35      	cmp	r3, #53	; 0x35
 80019fc:	d156      	bne.n	8001aac <HAL_UART_RxCpltCallback+0x1d8>
		 {
		 nextion_Send("n22", itemp);
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HAL_UART_RxCpltCallback+0x1d0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4619      	mov	r1, r3
 8001a04:	4828      	ldr	r0, [pc, #160]	; (8001aa8 <HAL_UART_RxCpltCallback+0x1d4>)
 8001a06:	f7ff ff25 	bl	8001854 <nextion_Send>
 8001a0a:	e05b      	b.n	8001ac4 <HAL_UART_RxCpltCallback+0x1f0>
 8001a0c:	20002304 	.word	0x20002304
 8001a10:	2000253c 	.word	0x2000253c
 8001a14:	20002518 	.word	0x20002518
 8001a18:	0800b828 	.word	0x0800b828
 8001a1c:	2000251c 	.word	0x2000251c
 8001a20:	0800b82c 	.word	0x0800b82c
 8001a24:	0800b830 	.word	0x0800b830
 8001a28:	0800b834 	.word	0x0800b834
 8001a2c:	2000250c 	.word	0x2000250c
 8001a30:	0800b838 	.word	0x0800b838
 8001a34:	20002514 	.word	0x20002514
 8001a38:	0800b83c 	.word	0x0800b83c
 8001a3c:	0800b840 	.word	0x0800b840
 8001a40:	0800b844 	.word	0x0800b844
 8001a44:	200024f4 	.word	0x200024f4
 8001a48:	0800b848 	.word	0x0800b848
 8001a4c:	20002500 	.word	0x20002500
 8001a50:	0800b84c 	.word	0x0800b84c
 8001a54:	200024f8 	.word	0x200024f8
 8001a58:	0800b850 	.word	0x0800b850
 8001a5c:	20002504 	.word	0x20002504
 8001a60:	0800b854 	.word	0x0800b854
 8001a64:	200024fc 	.word	0x200024fc
 8001a68:	0800b858 	.word	0x0800b858
 8001a6c:	20002508 	.word	0x20002508
 8001a70:	0800b85c 	.word	0x0800b85c
 8001a74:	20002520 	.word	0x20002520
 8001a78:	0800b860 	.word	0x0800b860
 8001a7c:	2000252c 	.word	0x2000252c
 8001a80:	0800b864 	.word	0x0800b864
 8001a84:	20002524 	.word	0x20002524
 8001a88:	0800b868 	.word	0x0800b868
 8001a8c:	20002530 	.word	0x20002530
 8001a90:	0800b86c 	.word	0x0800b86c
 8001a94:	20002528 	.word	0x20002528
 8001a98:	0800b870 	.word	0x0800b870
 8001a9c:	20002534 	.word	0x20002534
 8001aa0:	0800b874 	.word	0x0800b874
 8001aa4:	20002510 	.word	0x20002510
 8001aa8:	0800b878 	.word	0x0800b878
		 }

		 else
		 {
		 nextion_Send("n0", send_V);
 8001aac:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <HAL_UART_RxCpltCallback+0x348>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	485b      	ldr	r0, [pc, #364]	; (8001c20 <HAL_UART_RxCpltCallback+0x34c>)
 8001ab4:	f7ff fece 	bl	8001854 <nextion_Send>
		 nextion_Send("n1", send_I);
 8001ab8:	4b5a      	ldr	r3, [pc, #360]	; (8001c24 <HAL_UART_RxCpltCallback+0x350>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	485a      	ldr	r0, [pc, #360]	; (8001c28 <HAL_UART_RxCpltCallback+0x354>)
 8001ac0:	f7ff fec8 	bl	8001854 <nextion_Send>
		 }



		if(RX_Data[2] == 0x03)
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <HAL_UART_RxCpltCallback+0x358>)
 8001ac6:	789b      	ldrb	r3, [r3, #2]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d126      	bne.n	8001b1a <HAL_UART_RxCpltCallback+0x246>
		{
			dac_V -= 0.5;
 8001acc:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd17 	bl	8000504 <__aeabi_ui2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_UART_RxCpltCallback+0x360>)
 8001adc:	f7fe fbd4 	bl	8000288 <__aeabi_dsub>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f7ff f836 	bl	8000b58 <__aeabi_d2uiz>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001af0:	6013      	str	r3, [r2, #0]
			if(dac_V == 20) dac_V = 20;
 8001af2:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b14      	cmp	r3, #20
 8001af8:	d102      	bne.n	8001b00 <HAL_UART_RxCpltCallback+0x22c>
 8001afa:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001afc:	2214      	movs	r2, #20
 8001afe:	601a      	str	r2, [r3, #0]
			send_V = map(dac_V,0,20,0,1275);
 8001b00:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2214      	movs	r2, #20
 8001b0e:	2100      	movs	r1, #0
 8001b10:	f7ff fecc 	bl	80018ac <map>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a41      	ldr	r2, [pc, #260]	; (8001c1c <HAL_UART_RxCpltCallback+0x348>)
 8001b18:	6013      	str	r3, [r2, #0]
		}

		if(RX_Data[2] == 0x04)
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <HAL_UART_RxCpltCallback+0x358>)
 8001b1c:	789b      	ldrb	r3, [r3, #2]
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d126      	bne.n	8001b70 <HAL_UART_RxCpltCallback+0x29c>
		{
			dac_V += 0.5;
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcec 	bl	8000504 <__aeabi_ui2d>
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <HAL_UART_RxCpltCallback+0x360>)
 8001b32:	f7fe fbab 	bl	800028c <__adddf3>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f80b 	bl	8000b58 <__aeabi_d2uiz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a3a      	ldr	r2, [pc, #232]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001b46:	6013      	str	r3, [r2, #0]
			if(dac_V == 0) dac_V = 0;
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <HAL_UART_RxCpltCallback+0x282>
 8001b50:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
			send_V = map(dac_V,0,20,0,1275);
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <HAL_UART_RxCpltCallback+0x35c>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2300      	movs	r3, #0
 8001b62:	2214      	movs	r2, #20
 8001b64:	2100      	movs	r1, #0
 8001b66:	f7ff fea1 	bl	80018ac <map>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a2b      	ldr	r2, [pc, #172]	; (8001c1c <HAL_UART_RxCpltCallback+0x348>)
 8001b6e:	6013      	str	r3, [r2, #0]
		}

		if(RX_Data[2] == 0x05)
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_UART_RxCpltCallback+0x358>)
 8001b72:	789b      	ldrb	r3, [r3, #2]
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d11c      	bne.n	8001bb2 <HAL_UART_RxCpltCallback+0x2de>
		{
			dac_I -= 50;
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3b32      	subs	r3, #50	; 0x32
 8001b7e:	4a2e      	ldr	r2, [pc, #184]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001b80:	6013      	str	r3, [r2, #0]
			if(dac_I == 3000) dac_I = 3000;
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d103      	bne.n	8001b96 <HAL_UART_RxCpltCallback+0x2c2>
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001b90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b94:	601a      	str	r2, [r3, #0]
			send_I = map(dac_I,0,3000,0,1275);
 8001b96:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f7ff fe80 	bl	80018ac <map>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_UART_RxCpltCallback+0x350>)
 8001bb0:	6013      	str	r3, [r2, #0]
		}
		if(RX_Data[2] == 0x06)
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_UART_RxCpltCallback+0x358>)
 8001bb4:	789b      	ldrb	r3, [r3, #2]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d119      	bne.n	8001bee <HAL_UART_RxCpltCallback+0x31a>
		{
			dac_I += 50;
 8001bba:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3332      	adds	r3, #50	; 0x32
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001bc2:	6013      	str	r3, [r2, #0]
			if(dac_I == 0) dac_I = 0;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d102      	bne.n	8001bd2 <HAL_UART_RxCpltCallback+0x2fe>
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
			send_I = map(dac_I,0,3000,0,1275);
 8001bd2:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_UART_RxCpltCallback+0x364>)
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001be2:	2100      	movs	r1, #0
 8001be4:	f7ff fe62 	bl	80018ac <map>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <HAL_UART_RxCpltCallback+0x350>)
 8001bec:	6013      	str	r3, [r2, #0]
		}


		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,send_V);
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_UART_RxCpltCallback+0x348>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4811      	ldr	r0, [pc, #68]	; (8001c3c <HAL_UART_RxCpltCallback+0x368>)
 8001bf8:	f002 fbfd 	bl	80043f6 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,send_I);
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_UART_RxCpltCallback+0x350>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	2110      	movs	r1, #16
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <HAL_UART_RxCpltCallback+0x368>)
 8001c06:	f002 fbf6 	bl	80043f6 <HAL_DAC_SetValue>

	   HAL_UART_Receive_IT(&huart2, RX_Data, 4);
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <HAL_UART_RxCpltCallback+0x358>)
 8001c0e:	480c      	ldr	r0, [pc, #48]	; (8001c40 <HAL_UART_RxCpltCallback+0x36c>)
 8001c10:	f005 f86d 	bl	8006cee <HAL_UART_Receive_IT>
	 }



}
 8001c14:	bf00      	nop
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20002548 	.word	0x20002548
 8001c20:	0800b87c 	.word	0x0800b87c
 8001c24:	2000254c 	.word	0x2000254c
 8001c28:	0800b880 	.word	0x0800b880
 8001c2c:	2000253c 	.word	0x2000253c
 8001c30:	20002540 	.word	0x20002540
 8001c34:	3fe00000 	.word	0x3fe00000
 8001c38:	20002544 	.word	0x20002544
 8001c3c:	20002218 	.word	0x20002218
 8001c40:	20002304 	.word	0x20002304
 8001c44:	00000000 	.word	0x00000000

08001c48 <HAL_ADC_ConvCpltCallback>:


//Timer1 50us'de bir kesmeye girdi ve ADC1 bu kısımda örnek almaya başladı.

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]


while(count<1600)
 8001c50:	f000 bcd2 	b.w	80025f8 <HAL_ADC_ConvCpltCallback+0x9b0>
	{

	switch(k)
 8001c54:	4b9d      	ldr	r3, [pc, #628]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b0b      	cmp	r3, #11
 8001c5a:	f200 8126 	bhi.w	8001eaa <HAL_ADC_ConvCpltCallback+0x262>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c95 	.word	0x08001c95
 8001c68:	08001cc1 	.word	0x08001cc1
 8001c6c:	08001ced 	.word	0x08001ced
 8001c70:	08001d19 	.word	0x08001d19
 8001c74:	08001d45 	.word	0x08001d45
 8001c78:	08001d71 	.word	0x08001d71
 8001c7c:	08001d9d 	.word	0x08001d9d
 8001c80:	08001dc9 	.word	0x08001dc9
 8001c84:	08001df5 	.word	0x08001df5
 8001c88:	08001e21 	.word	0x08001e21
 8001c8c:	08001e4d 	.word	0x08001e4d
 8001c90:	08001e79 	.word	0x08001e79
		{

			case 0: //REF
				adc1_Value[k] += adc_Buffer[k];
 8001c94:	4b8d      	ldr	r3, [pc, #564]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a8d      	ldr	r2, [pc, #564]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001c9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c9e:	4b8b      	ldr	r3, [pc, #556]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a8c      	ldr	r2, [pc, #560]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001ca4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca8:	4b88      	ldr	r3, [pc, #544]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	440a      	add	r2, r1
 8001cae:	4988      	ldr	r1, [pc, #544]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001cb4:	4b85      	ldr	r3, [pc, #532]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a84      	ldr	r2, [pc, #528]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001cbc:	6013      	str	r3, [r2, #0]
				break;
 8001cbe:	e0f4      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>


			case 1: //VL1
				adc1_Value[k] += adc_Buffer[k];
 8001cc0:	4b82      	ldr	r3, [pc, #520]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a82      	ldr	r2, [pc, #520]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001cc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cca:	4b80      	ldr	r3, [pc, #512]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a81      	ldr	r2, [pc, #516]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001cd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd4:	4b7d      	ldr	r3, [pc, #500]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	440a      	add	r2, r1
 8001cda:	497d      	ldr	r1, [pc, #500]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001ce0:	4b7a      	ldr	r3, [pc, #488]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a79      	ldr	r2, [pc, #484]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001ce8:	6013      	str	r3, [r2, #0]
				break;
 8001cea:	e0de      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 2: //VL2
				adc1_Value[k] += adc_Buffer[k];
 8001cec:	4b77      	ldr	r3, [pc, #476]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a77      	ldr	r2, [pc, #476]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001cf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cf6:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a76      	ldr	r2, [pc, #472]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001cfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d00:	4b72      	ldr	r3, [pc, #456]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	440a      	add	r2, r1
 8001d06:	4972      	ldr	r1, [pc, #456]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a6e      	ldr	r2, [pc, #440]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d14:	6013      	str	r3, [r2, #0]
				break;
 8001d16:	e0c8      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 3: //VL3
				adc1_Value[k] += adc_Buffer[k];
 8001d18:	4b6c      	ldr	r3, [pc, #432]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a6c      	ldr	r2, [pc, #432]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001d1e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d22:	4b6a      	ldr	r3, [pc, #424]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6b      	ldr	r2, [pc, #428]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001d28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d2c:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	440a      	add	r2, r1
 8001d32:	4967      	ldr	r1, [pc, #412]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001d38:	4b64      	ldr	r3, [pc, #400]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	4a63      	ldr	r2, [pc, #396]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d40:	6013      	str	r3, [r2, #0]
				break;
 8001d42:	e0b2      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 4: //IL1
				adc1_Value[k] += adc_Buffer[k];
 8001d44:	4b61      	ldr	r3, [pc, #388]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a61      	ldr	r2, [pc, #388]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001d4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d4e:	4b5f      	ldr	r3, [pc, #380]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a60      	ldr	r2, [pc, #384]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001d54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d58:	4b5c      	ldr	r3, [pc, #368]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	440a      	add	r2, r1
 8001d5e:	495c      	ldr	r1, [pc, #368]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d6c:	6013      	str	r3, [r2, #0]
				break;
 8001d6e:	e09c      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 5: //IL2
				adc1_Value[k] += adc_Buffer[k];
 8001d70:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001d76:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d7a:	4b54      	ldr	r3, [pc, #336]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a55      	ldr	r2, [pc, #340]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d84:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	440a      	add	r2, r1
 8001d8a:	4951      	ldr	r1, [pc, #324]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001d90:	4b4e      	ldr	r3, [pc, #312]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	4a4d      	ldr	r2, [pc, #308]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d98:	6013      	str	r3, [r2, #0]
				break;
 8001d9a:	e086      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 6: //IL3
				adc1_Value[k] += adc_Buffer[k];
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a4b      	ldr	r2, [pc, #300]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001da2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4a      	ldr	r2, [pc, #296]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001db0:	4b46      	ldr	r3, [pc, #280]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	440a      	add	r2, r1
 8001db6:	4946      	ldr	r1, [pc, #280]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001dbc:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	4a42      	ldr	r2, [pc, #264]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001dc4:	6013      	str	r3, [r2, #0]
				break;
 8001dc6:	e070      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 7: //BARA+
				adc1_Value[k] += adc_Buffer[k];
 8001dc8:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a40      	ldr	r2, [pc, #256]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001dce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a3f      	ldr	r2, [pc, #252]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001dd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	440a      	add	r2, r1
 8001de2:	493b      	ldr	r1, [pc, #236]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	4a37      	ldr	r2, [pc, #220]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001df0:	6013      	str	r3, [r2, #0]
				break;
 8001df2:	e05a      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 8: //BARA-
				adc1_Value[k] += adc_Buffer[k];
 8001df4:	4b35      	ldr	r3, [pc, #212]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001dfa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e08:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	440a      	add	r2, r1
 8001e0e:	4930      	ldr	r1, [pc, #192]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	4a2c      	ldr	r2, [pc, #176]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e1c:	6013      	str	r3, [r2, #0]
				break;
 8001e1e:	e044      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 9: //FB VOLTAGE
				adc1_Value[k] += adc_Buffer[k];
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2a      	ldr	r2, [pc, #168]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	440a      	add	r2, r1
 8001e3a:	4925      	ldr	r1, [pc, #148]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e40:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e48:	6013      	str	r3, [r2, #0]
				break;
 8001e4a:	e02e      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 10: //T_SAMPLE
				adc1_Value[k] += adc_Buffer[k];
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e52:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	440a      	add	r2, r1
 8001e66:	491a      	ldr	r1, [pc, #104]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e74:	6013      	str	r3, [r2, #0]
				break;
 8001e76:	e018      	b.n	8001eaa <HAL_ADC_ConvCpltCallback+0x262>

			case 11: //AKIM
				adc1_Value[k] += adc_Buffer[k];
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a14      	ldr	r2, [pc, #80]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	440a      	add	r2, r1
 8001e92:	490f      	ldr	r1, [pc, #60]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				count++;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0x290>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0x290>)
 8001ea0:	6013      	str	r3, [r2, #0]
				k=0;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_ADC_ConvCpltCallback+0x284>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
				break;
 8001ea8:	bf00      	nop
		}




		if(count==1600)
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0x290>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001eb2:	f040 83a1 	bne.w	80025f8 <HAL_ADC_ConvCpltCallback+0x9b0>
		{

				adc1_Mean[0] = adc1_Value[0] / 1600;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x288>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_ADC_ConvCpltCallback+0x294>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	0a5b      	lsrs	r3, r3, #9
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_ADC_ConvCpltCallback+0x298>)
 8001ec4:	6013      	str	r3, [r2, #0]

			for(uint8_t t=1;t<7;t++)
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e05f      	b.n	8001f8c <HAL_ADC_ConvCpltCallback+0x344>
 8001ecc:	2000248c 	.word	0x2000248c
 8001ed0:	200023cc 	.word	0x200023cc
 8001ed4:	2000239c 	.word	0x2000239c
 8001ed8:	20002490 	.word	0x20002490
 8001edc:	51eb851f 	.word	0x51eb851f
 8001ee0:	2000245c 	.word	0x2000245c
				{
				//RMS Değer Hesabı
				adc1_Mean[t] = adc1_Value[t] / 1600; //Alınan değerler toplamı toplam sayıya bölündü ve ort değer elde edildi.
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	4a7e      	ldr	r2, [pc, #504]	; (80020e0 <HAL_ADC_ConvCpltCallback+0x498>)
 8001ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	497d      	ldr	r1, [pc, #500]	; (80020e4 <HAL_ADC_ConvCpltCallback+0x49c>)
 8001ef0:	fba1 1202 	umull	r1, r2, r1, r2
 8001ef4:	0a52      	lsrs	r2, r2, #9
 8001ef6:	497c      	ldr	r1, [pc, #496]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				adc1_Square[t] = (adc1_Mean[t]-adc1_Mean[0]) * (adc1_Mean[t]-adc1_Mean[0]); //Ortalama değerin karesi alındı.
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	4a7a      	ldr	r2, [pc, #488]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001f00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f04:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	1ad2      	subs	r2, r2, r3
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	4976      	ldr	r1, [pc, #472]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001f0e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f12:	4b75      	ldr	r3, [pc, #468]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	1ac9      	subs	r1, r1, r3
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	fb01 f202 	mul.w	r2, r1, r2
 8001f1e:	4973      	ldr	r1, [pc, #460]	; (80020ec <HAL_ADC_ConvCpltCallback+0x4a4>)
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				adc1_Square_Root[t] = 331 * sqrt(adc1_Square[t]  * 0.707 / 868.8); //Karesi alınan değerlerin karekökü alındı. 331:Gerilim Bölücü  0.707:RMS Hesabı(sqrt(2)/2)  868.8:Kalibrasyon Çarpanı
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	4a71      	ldr	r2, [pc, #452]	; (80020ec <HAL_ADC_ConvCpltCallback+0x4a4>)
 8001f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fae9 	bl	8000504 <__aeabi_ui2d>
 8001f32:	a363      	add	r3, pc, #396	; (adr r3, 80020c0 <HAL_ADC_ConvCpltCallback+0x478>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb5e 	bl	80005f8 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	a360      	add	r3, pc, #384	; (adr r3, 80020c8 <HAL_ADC_ConvCpltCallback+0x480>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe fc7f 	bl	800084c <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	ec43 2b17 	vmov	d7, r2, r3
 8001f56:	eeb0 0a47 	vmov.f32	s0, s14
 8001f5a:	eef0 0a67 	vmov.f32	s1, s15
 8001f5e:	f009 fb4a 	bl	800b5f6 <sqrt>
 8001f62:	ec51 0b10 	vmov	r0, r1, d0
 8001f66:	a35a      	add	r3, pc, #360	; (adr r3, 80020d0 <HAL_ADC_ConvCpltCallback+0x488>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fb44 	bl	80005f8 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	7bfc      	ldrb	r4, [r7, #15]
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fded 	bl	8000b58 <__aeabi_d2uiz>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a5b      	ldr	r2, [pc, #364]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8001f82:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t t=1;t<7;t++)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d9a8      	bls.n	8001ee4 <HAL_ADC_ConvCpltCallback+0x29c>
				}


				V1L=adc1_Square_Root[1];  //V1L
 8001f92:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_ADC_ConvCpltCallback+0x4ac>)
 8001f98:	6013      	str	r3, [r2, #0]
				V2L=adc1_Square_Root[2];  //V2L
 8001f9a:	4b55      	ldr	r3, [pc, #340]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4a56      	ldr	r2, [pc, #344]	; (80020f8 <HAL_ADC_ConvCpltCallback+0x4b0>)
 8001fa0:	6013      	str	r3, [r2, #0]
				V3L=adc1_Square_Root[3];  //V3L
 8001fa2:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	4a55      	ldr	r2, [pc, #340]	; (80020fc <HAL_ADC_ConvCpltCallback+0x4b4>)
 8001fa8:	6013      	str	r3, [r2, #0]

				I1L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[4])); // IL1  330,55:Direnç ve kalibrasyon çarpanı
 8001faa:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_ADC_ConvCpltCallback+0x4a4>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe faa8 	bl	8000504 <__aeabi_ui2d>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	ec43 2b10 	vmov	d0, r2, r3
 8001fbc:	f009 fb1b 	bl	800b5f6 <sqrt>
 8001fc0:	ec51 0b10 	vmov	r0, r1, d0
 8001fc4:	a344      	add	r3, pc, #272	; (adr r3, 80020d8 <HAL_ADC_ConvCpltCallback+0x490>)
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	f7fe fb15 	bl	80005f8 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b49      	ldr	r3, [pc, #292]	; (8002100 <HAL_ADC_ConvCpltCallback+0x4b8>)
 8001fdc:	f7fe fb0c 	bl	80005f8 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fdb6 	bl	8000b58 <__aeabi_d2uiz>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a45      	ldr	r2, [pc, #276]	; (8002104 <HAL_ADC_ConvCpltCallback+0x4bc>)
 8001ff0:	6013      	str	r3, [r2, #0]
				I2L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[5])); // IL2
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_ADC_ConvCpltCallback+0x4a4>)
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa84 	bl	8000504 <__aeabi_ui2d>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	ec43 2b10 	vmov	d0, r2, r3
 8002004:	f009 faf7 	bl	800b5f6 <sqrt>
 8002008:	ec51 0b10 	vmov	r0, r1, d0
 800200c:	a332      	add	r3, pc, #200	; (adr r3, 80020d8 <HAL_ADC_ConvCpltCallback+0x490>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	f7fe faf1 	bl	80005f8 <__aeabi_dmul>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <HAL_ADC_ConvCpltCallback+0x4b8>)
 8002024:	f7fe fae8 	bl	80005f8 <__aeabi_dmul>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fd92 	bl	8000b58 <__aeabi_d2uiz>
 8002034:	4603      	mov	r3, r0
 8002036:	4a34      	ldr	r2, [pc, #208]	; (8002108 <HAL_ADC_ConvCpltCallback+0x4c0>)
 8002038:	6013      	str	r3, [r2, #0]
				I3L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[6])); //IL3
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_ADC_ConvCpltCallback+0x4a4>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa60 	bl	8000504 <__aeabi_ui2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	ec43 2b10 	vmov	d0, r2, r3
 800204c:	f009 fad3 	bl	800b5f6 <sqrt>
 8002050:	ec51 0b10 	vmov	r0, r1, d0
 8002054:	a320      	add	r3, pc, #128	; (adr r3, 80020d8 <HAL_ADC_ConvCpltCallback+0x490>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe facd 	bl	80005f8 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_ADC_ConvCpltCallback+0x4b8>)
 800206c:	f7fe fac4 	bl	80005f8 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4610      	mov	r0, r2
 8002076:	4619      	mov	r1, r3
 8002078:	f7fe fd6e 	bl	8000b58 <__aeabi_d2uiz>
 800207c:	4603      	mov	r3, r0
 800207e:	4a23      	ldr	r2, [pc, #140]	; (800210c <HAL_ADC_ConvCpltCallback+0x4c4>)
 8002080:	6013      	str	r3, [r2, #0]

				Vin = (V1L+V2L+V3L) / 3;
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <HAL_ADC_ConvCpltCallback+0x4ac>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <HAL_ADC_ConvCpltCallback+0x4b0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	441a      	add	r2, r3
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_ADC_ConvCpltCallback+0x4b4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4413      	add	r3, r2
 8002092:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <HAL_ADC_ConvCpltCallback+0x4c8>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <HAL_ADC_ConvCpltCallback+0x4cc>)
 800209c:	6013      	str	r3, [r2, #0]
				Iin = (I1L+I2L+I3L) / 3;
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_ADC_ConvCpltCallback+0x4bc>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_ADC_ConvCpltCallback+0x4c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	441a      	add	r2, r3
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_ADC_ConvCpltCallback+0x4c4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a18      	ldr	r2, [pc, #96]	; (8002110 <HAL_ADC_ConvCpltCallback+0x4c8>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	085b      	lsrs	r3, r3, #1
 80020b6:	4a18      	ldr	r2, [pc, #96]	; (8002118 <HAL_ADC_ConvCpltCallback+0x4d0>)
 80020b8:	6013      	str	r3, [r2, #0]

				for(uint8_t j=7;j<12;j++) adc1_Mean[j] = adc1_Value[j] / 1600;
 80020ba:	2307      	movs	r3, #7
 80020bc:	73bb      	strb	r3, [r7, #14]
 80020be:	e03c      	b.n	800213a <HAL_ADC_ConvCpltCallback+0x4f2>
 80020c0:	76c8b439 	.word	0x76c8b439
 80020c4:	3fe69fbe 	.word	0x3fe69fbe
 80020c8:	66666666 	.word	0x66666666
 80020cc:	408b2666 	.word	0x408b2666
 80020d0:	00000000 	.word	0x00000000
 80020d4:	4074b000 	.word	0x4074b000
 80020d8:	ad67a347 	.word	0xad67a347
 80020dc:	3f73ce09 	.word	0x3f73ce09
 80020e0:	200023cc 	.word	0x200023cc
 80020e4:	51eb851f 	.word	0x51eb851f
 80020e8:	2000245c 	.word	0x2000245c
 80020ec:	200023fc 	.word	0x200023fc
 80020f0:	2000242c 	.word	0x2000242c
 80020f4:	200024a4 	.word	0x200024a4
 80020f8:	200024a8 	.word	0x200024a8
 80020fc:	200024ac 	.word	0x200024ac
 8002100:	40490000 	.word	0x40490000
 8002104:	20002498 	.word	0x20002498
 8002108:	2000249c 	.word	0x2000249c
 800210c:	200024a0 	.word	0x200024a0
 8002110:	aaaaaaab 	.word	0xaaaaaaab
 8002114:	200024e0 	.word	0x200024e0
 8002118:	200024e4 	.word	0x200024e4
 800211c:	7bbb      	ldrb	r3, [r7, #14]
 800211e:	4ac8      	ldr	r2, [pc, #800]	; (8002440 <HAL_ADC_ConvCpltCallback+0x7f8>)
 8002120:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	49c7      	ldr	r1, [pc, #796]	; (8002444 <HAL_ADC_ConvCpltCallback+0x7fc>)
 8002128:	fba1 1202 	umull	r1, r2, r1, r2
 800212c:	0a52      	lsrs	r2, r2, #9
 800212e:	49c6      	ldr	r1, [pc, #792]	; (8002448 <HAL_ADC_ConvCpltCallback+0x800>)
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	3301      	adds	r3, #1
 8002138:	73bb      	strb	r3, [r7, #14]
 800213a:	7bbb      	ldrb	r3, [r7, #14]
 800213c:	2b0b      	cmp	r3, #11
 800213e:	d9ed      	bls.n	800211c <HAL_ADC_ConvCpltCallback+0x4d4>

				bara_Arti=adc1_Mean[7] * 3.3 / 4096; //bara+
 8002140:	4bc1      	ldr	r3, [pc, #772]	; (8002448 <HAL_ADC_ConvCpltCallback+0x800>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f9dd 	bl	8000504 <__aeabi_ui2d>
 800214a:	a3b1      	add	r3, pc, #708	; (adr r3, 8002410 <HAL_ADC_ConvCpltCallback+0x7c8>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe fa52 	bl	80005f8 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4bba      	ldr	r3, [pc, #744]	; (800244c <HAL_ADC_ConvCpltCallback+0x804>)
 8002162:	f7fe fb73 	bl	800084c <__aeabi_ddiv>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fcf3 	bl	8000b58 <__aeabi_d2uiz>
 8002172:	4603      	mov	r3, r0
 8002174:	4ab6      	ldr	r2, [pc, #728]	; (8002450 <HAL_ADC_ConvCpltCallback+0x808>)
 8002176:	6013      	str	r3, [r2, #0]
				bara_Eksi=adc1_Mean[8] * 3.3 / 4096; //bara-
 8002178:	4bb3      	ldr	r3, [pc, #716]	; (8002448 <HAL_ADC_ConvCpltCallback+0x800>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f9c1 	bl	8000504 <__aeabi_ui2d>
 8002182:	a3a3      	add	r3, pc, #652	; (adr r3, 8002410 <HAL_ADC_ConvCpltCallback+0x7c8>)
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	f7fe fa36 	bl	80005f8 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4bac      	ldr	r3, [pc, #688]	; (800244c <HAL_ADC_ConvCpltCallback+0x804>)
 800219a:	f7fe fb57 	bl	800084c <__aeabi_ddiv>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe fcd7 	bl	8000b58 <__aeabi_d2uiz>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4aa9      	ldr	r2, [pc, #676]	; (8002454 <HAL_ADC_ConvCpltCallback+0x80c>)
 80021ae:	6013      	str	r3, [r2, #0]
				Vout=adc1_Mean[9] * 3.3 / 4096 * 0.9615; // Vout
 80021b0:	4ba5      	ldr	r3, [pc, #660]	; (8002448 <HAL_ADC_ConvCpltCallback+0x800>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f9a5 	bl	8000504 <__aeabi_ui2d>
 80021ba:	a395      	add	r3, pc, #596	; (adr r3, 8002410 <HAL_ADC_ConvCpltCallback+0x7c8>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe fa1a 	bl	80005f8 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	4b9e      	ldr	r3, [pc, #632]	; (800244c <HAL_ADC_ConvCpltCallback+0x804>)
 80021d2:	f7fe fb3b 	bl	800084c <__aeabi_ddiv>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	a38e      	add	r3, pc, #568	; (adr r3, 8002418 <HAL_ADC_ConvCpltCallback+0x7d0>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe fa08 	bl	80005f8 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fcb2 	bl	8000b58 <__aeabi_d2uiz>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a98      	ldr	r2, [pc, #608]	; (8002458 <HAL_ADC_ConvCpltCallback+0x810>)
 80021f8:	6013      	str	r3, [r2, #0]
				t_sample=adc1_Mean[10] * 3.3 / 4096; //s_sample sıcaklık
 80021fa:	4b93      	ldr	r3, [pc, #588]	; (8002448 <HAL_ADC_ConvCpltCallback+0x800>)
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe f980 	bl	8000504 <__aeabi_ui2d>
 8002204:	a382      	add	r3, pc, #520	; (adr r3, 8002410 <HAL_ADC_ConvCpltCallback+0x7c8>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fe f9f5 	bl	80005f8 <__aeabi_dmul>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b8c      	ldr	r3, [pc, #560]	; (800244c <HAL_ADC_ConvCpltCallback+0x804>)
 800221c:	f7fe fb16 	bl	800084c <__aeabi_ddiv>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fc96 	bl	8000b58 <__aeabi_d2uiz>
 800222c:	4603      	mov	r3, r0
 800222e:	4a8b      	ldr	r2, [pc, #556]	; (800245c <HAL_ADC_ConvCpltCallback+0x814>)
 8002230:	6013      	str	r3, [r2, #0]
				akim=adc1_Mean[11] * 3.3 / 4096; //akım
 8002232:	4b85      	ldr	r3, [pc, #532]	; (8002448 <HAL_ADC_ConvCpltCallback+0x800>)
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe f964 	bl	8000504 <__aeabi_ui2d>
 800223c:	a374      	add	r3, pc, #464	; (adr r3, 8002410 <HAL_ADC_ConvCpltCallback+0x7c8>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fe f9d9 	bl	80005f8 <__aeabi_dmul>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b7e      	ldr	r3, [pc, #504]	; (800244c <HAL_ADC_ConvCpltCallback+0x804>)
 8002254:	f7fe fafa 	bl	800084c <__aeabi_ddiv>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fc7a 	bl	8000b58 <__aeabi_d2uiz>
 8002264:	4603      	mov	r3, r0
 8002266:	4a7e      	ldr	r2, [pc, #504]	; (8002460 <HAL_ADC_ConvCpltCallback+0x818>)
 8002268:	6013      	str	r3, [r2, #0]
				Iout=map(adc1_Mean[11],180,995,0,3680)-697; // Iout
 800226a:	4b77      	ldr	r3, [pc, #476]	; (8002448 <HAL_ADC_ConvCpltCallback+0x800>)
 800226c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800226e:	f44f 6366 	mov.w	r3, #3680	; 0xe60
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	f240 32e3 	movw	r2, #995	; 0x3e3
 800227a:	21b4      	movs	r1, #180	; 0xb4
 800227c:	f7ff fb16 	bl	80018ac <map>
 8002280:	4603      	mov	r3, r0
 8002282:	f2a3 23b9 	subw	r3, r3, #697	; 0x2b9
 8002286:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_ADC_ConvCpltCallback+0x81c>)
 8002288:	6013      	str	r3, [r2, #0]
				if(Iout<0) Iout=0;
				bara_Toplam=bara_Arti-bara_Eksi;
 800228a:	4b71      	ldr	r3, [pc, #452]	; (8002450 <HAL_ADC_ConvCpltCallback+0x808>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b71      	ldr	r3, [pc, #452]	; (8002454 <HAL_ADC_ConvCpltCallback+0x80c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	4a74      	ldr	r2, [pc, #464]	; (8002468 <HAL_ADC_ConvCpltCallback+0x820>)
 8002296:	6013      	str	r3, [r2, #0]

				//Sıcaklık hesabı
				temp = 16.628 * t_sample * t_sample + 535.2484 * t_sample -16.129 ;
 8002298:	4b70      	ldr	r3, [pc, #448]	; (800245c <HAL_ADC_ConvCpltCallback+0x814>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe f931 	bl	8000504 <__aeabi_ui2d>
 80022a2:	a35f      	add	r3, pc, #380	; (adr r3, 8002420 <HAL_ADC_ConvCpltCallback+0x7d8>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fe f9a6 	bl	80005f8 <__aeabi_dmul>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	4b69      	ldr	r3, [pc, #420]	; (800245c <HAL_ADC_ConvCpltCallback+0x814>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f923 	bl	8000504 <__aeabi_ui2d>
 80022be:	4602      	mov	r2, r0
 80022c0:	460b      	mov	r3, r1
 80022c2:	4620      	mov	r0, r4
 80022c4:	4629      	mov	r1, r5
 80022c6:	f7fe f997 	bl	80005f8 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4614      	mov	r4, r2
 80022d0:	461d      	mov	r5, r3
 80022d2:	4b62      	ldr	r3, [pc, #392]	; (800245c <HAL_ADC_ConvCpltCallback+0x814>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe f914 	bl	8000504 <__aeabi_ui2d>
 80022dc:	a352      	add	r3, pc, #328	; (adr r3, 8002428 <HAL_ADC_ConvCpltCallback+0x7e0>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fe f989 	bl	80005f8 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fd ffcd 	bl	800028c <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	a34d      	add	r3, pc, #308	; (adr r3, 8002430 <HAL_ADC_ConvCpltCallback+0x7e8>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fd ffc2 	bl	8000288 <__aeabi_dsub>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc24 	bl	8000b58 <__aeabi_d2uiz>
 8002310:	4603      	mov	r3, r0
 8002312:	4a56      	ldr	r2, [pc, #344]	; (800246c <HAL_ADC_ConvCpltCallback+0x824>)
 8002314:	6013      	str	r3, [r2, #0]


				//Faz-Faz arası gerilim ve akımlar
				V12L=sqrt(3)*(adc1_Square_Root[1] + adc1_Square_Root[2] / 2);
 8002316:	4b56      	ldr	r3, [pc, #344]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4b55      	ldr	r3, [pc, #340]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f8ee 	bl	8000504 <__aeabi_ui2d>
 8002328:	a343      	add	r3, pc, #268	; (adr r3, 8002438 <HAL_ADC_ConvCpltCallback+0x7f0>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f963 	bl	80005f8 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f7fe fc0d 	bl	8000b58 <__aeabi_d2uiz>
 800233e:	4603      	mov	r3, r0
 8002340:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_ADC_ConvCpltCallback+0x82c>)
 8002342:	6013      	str	r3, [r2, #0]
				V23L=sqrt(3)*(adc1_Square_Root[2] + adc1_Square_Root[3] / 2);
 8002344:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	4b49      	ldr	r3, [pc, #292]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	085b      	lsrs	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f8d7 	bl	8000504 <__aeabi_ui2d>
 8002356:	a338      	add	r3, pc, #224	; (adr r3, 8002438 <HAL_ADC_ConvCpltCallback+0x7f0>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	f7fe f94c 	bl	80005f8 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fbf6 	bl	8000b58 <__aeabi_d2uiz>
 800236c:	4603      	mov	r3, r0
 800236e:	4a42      	ldr	r2, [pc, #264]	; (8002478 <HAL_ADC_ConvCpltCallback+0x830>)
 8002370:	6013      	str	r3, [r2, #0]
				V13L=sqrt(3)*(adc1_Square_Root[1] + adc1_Square_Root[3] / 2);
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	085b      	lsrs	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8c0 	bl	8000504 <__aeabi_ui2d>
 8002384:	a32c      	add	r3, pc, #176	; (adr r3, 8002438 <HAL_ADC_ConvCpltCallback+0x7f0>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f935 	bl	80005f8 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f7fe fbdf 	bl	8000b58 <__aeabi_d2uiz>
 800239a:	4603      	mov	r3, r0
 800239c:	4a37      	ldr	r2, [pc, #220]	; (800247c <HAL_ADC_ConvCpltCallback+0x834>)
 800239e:	6013      	str	r3, [r2, #0]
				I12L=sqrt(3)*(adc1_Square_Root[4] + adc1_Square_Root[5] / 2);
 80023a0:	4b33      	ldr	r3, [pc, #204]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8a9 	bl	8000504 <__aeabi_ui2d>
 80023b2:	a321      	add	r3, pc, #132	; (adr r3, 8002438 <HAL_ADC_ConvCpltCallback+0x7f0>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f91e 	bl	80005f8 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe fbc8 	bl	8000b58 <__aeabi_d2uiz>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4a2d      	ldr	r2, [pc, #180]	; (8002480 <HAL_ADC_ConvCpltCallback+0x838>)
 80023cc:	6013      	str	r3, [r2, #0]
				I23L=sqrt(3)*(adc1_Square_Root[5] + adc1_Square_Root[6] / 2);
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe f892 	bl	8000504 <__aeabi_ui2d>
 80023e0:	a315      	add	r3, pc, #84	; (adr r3, 8002438 <HAL_ADC_ConvCpltCallback+0x7f0>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f907 	bl	80005f8 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7fe fbb1 	bl	8000b58 <__aeabi_d2uiz>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <HAL_ADC_ConvCpltCallback+0x83c>)
 80023fa:	6013      	str	r3, [r2, #0]
				I13L=sqrt(3)*(adc1_Square_Root[4] + adc1_Square_Root[6] / 2);
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_ADC_ConvCpltCallback+0x828>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	085b      	lsrs	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f87b 	bl	8000504 <__aeabi_ui2d>
 800240e:	e03b      	b.n	8002488 <HAL_ADC_ConvCpltCallback+0x840>
 8002410:	66666666 	.word	0x66666666
 8002414:	400a6666 	.word	0x400a6666
 8002418:	a5e353f8 	.word	0xa5e353f8
 800241c:	3feec49b 	.word	0x3feec49b
 8002420:	9ba5e354 	.word	0x9ba5e354
 8002424:	4030a0c4 	.word	0x4030a0c4
 8002428:	b923a29c 	.word	0xb923a29c
 800242c:	4080b9fc 	.word	0x4080b9fc
 8002430:	24dd2f1b 	.word	0x24dd2f1b
 8002434:	40302106 	.word	0x40302106
 8002438:	e8584caa 	.word	0xe8584caa
 800243c:	3ffbb67a 	.word	0x3ffbb67a
 8002440:	200023cc 	.word	0x200023cc
 8002444:	51eb851f 	.word	0x51eb851f
 8002448:	2000245c 	.word	0x2000245c
 800244c:	40b00000 	.word	0x40b00000
 8002450:	200024c8 	.word	0x200024c8
 8002454:	200024cc 	.word	0x200024cc
 8002458:	200024d0 	.word	0x200024d0
 800245c:	200024d4 	.word	0x200024d4
 8002460:	200024d8 	.word	0x200024d8
 8002464:	200024dc 	.word	0x200024dc
 8002468:	200024ec 	.word	0x200024ec
 800246c:	200024e8 	.word	0x200024e8
 8002470:	2000242c 	.word	0x2000242c
 8002474:	200024b0 	.word	0x200024b0
 8002478:	200024b4 	.word	0x200024b4
 800247c:	200024b8 	.word	0x200024b8
 8002480:	200024bc 	.word	0x200024bc
 8002484:	200024c0 	.word	0x200024c0
 8002488:	a397      	add	r3, pc, #604	; (adr r3, 80026e8 <HAL_ADC_ConvCpltCallback+0xaa0>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe f8b3 	bl	80005f8 <__aeabi_dmul>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	f7fe fb5d 	bl	8000b58 <__aeabi_d2uiz>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a5d      	ldr	r2, [pc, #372]	; (8002618 <HAL_ADC_ConvCpltCallback+0x9d0>)
 80024a2:	6013      	str	r3, [r2, #0]


				//Değerler int'e çevriliyor.
				iMean=(int)adc1_Mean[0];
 80024a4:	4b5d      	ldr	r3, [pc, #372]	; (800261c <HAL_ADC_ConvCpltCallback+0x9d4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <HAL_ADC_ConvCpltCallback+0x9d8>)
 80024ac:	601a      	str	r2, [r3, #0]
				iV1L = (int)V1L;
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <HAL_ADC_ConvCpltCallback+0x9dc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b5c      	ldr	r3, [pc, #368]	; (8002628 <HAL_ADC_ConvCpltCallback+0x9e0>)
 80024b6:	601a      	str	r2, [r3, #0]
				iV2L = (int)V2L;
 80024b8:	4b5c      	ldr	r3, [pc, #368]	; (800262c <HAL_ADC_ConvCpltCallback+0x9e4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b5c      	ldr	r3, [pc, #368]	; (8002630 <HAL_ADC_ConvCpltCallback+0x9e8>)
 80024c0:	601a      	str	r2, [r3, #0]
				iV3L = (int)V3L;
 80024c2:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <HAL_ADC_ConvCpltCallback+0x9ec>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <HAL_ADC_ConvCpltCallback+0x9f0>)
 80024ca:	601a      	str	r2, [r3, #0]
				iI1L = (int)I1L;
 80024cc:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_ADC_ConvCpltCallback+0x9f4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <HAL_ADC_ConvCpltCallback+0x9f8>)
 80024d4:	601a      	str	r2, [r3, #0]
				iI2L = (int)I2L;
 80024d6:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <HAL_ADC_ConvCpltCallback+0x9fc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <HAL_ADC_ConvCpltCallback+0xa00>)
 80024de:	601a      	str	r2, [r3, #0]
				iI3L = (int)I3L;
 80024e0:	4b5a      	ldr	r3, [pc, #360]	; (800264c <HAL_ADC_ConvCpltCallback+0xa04>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b5a      	ldr	r3, [pc, #360]	; (8002650 <HAL_ADC_ConvCpltCallback+0xa08>)
 80024e8:	601a      	str	r2, [r3, #0]
				iVout = (int)Vout;
 80024ea:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_ADC_ConvCpltCallback+0xa0c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_ADC_ConvCpltCallback+0xa10>)
 80024f2:	601a      	str	r2, [r3, #0]
				itemp = (int)temp;
 80024f4:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_ADC_ConvCpltCallback+0xa14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_ADC_ConvCpltCallback+0xa18>)
 80024fc:	601a      	str	r2, [r3, #0]
				iIout = (int)Iout;
 80024fe:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_ADC_ConvCpltCallback+0xa1c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	4b58      	ldr	r3, [pc, #352]	; (8002668 <HAL_ADC_ConvCpltCallback+0xa20>)
 8002506:	601a      	str	r2, [r3, #0]
				iVin = (int)Vin;
 8002508:	4b58      	ldr	r3, [pc, #352]	; (800266c <HAL_ADC_ConvCpltCallback+0xa24>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b58      	ldr	r3, [pc, #352]	; (8002670 <HAL_ADC_ConvCpltCallback+0xa28>)
 8002510:	601a      	str	r2, [r3, #0]
				iIin = (int)Iin;
 8002512:	4b58      	ldr	r3, [pc, #352]	; (8002674 <HAL_ADC_ConvCpltCallback+0xa2c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_ADC_ConvCpltCallback+0xa30>)
 800251a:	601a      	str	r2, [r3, #0]
				iV12L = (int)V12L;
 800251c:	4b57      	ldr	r3, [pc, #348]	; (800267c <HAL_ADC_ConvCpltCallback+0xa34>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_ADC_ConvCpltCallback+0xa38>)
 8002524:	601a      	str	r2, [r3, #0]
				iV23L = (int)V23L;
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <HAL_ADC_ConvCpltCallback+0xa3c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	4b56      	ldr	r3, [pc, #344]	; (8002688 <HAL_ADC_ConvCpltCallback+0xa40>)
 800252e:	601a      	str	r2, [r3, #0]
				iV13L = (int)V13L;
 8002530:	4b56      	ldr	r3, [pc, #344]	; (800268c <HAL_ADC_ConvCpltCallback+0xa44>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b56      	ldr	r3, [pc, #344]	; (8002690 <HAL_ADC_ConvCpltCallback+0xa48>)
 8002538:	601a      	str	r2, [r3, #0]
				iI12L = (int)I12L;
 800253a:	4b56      	ldr	r3, [pc, #344]	; (8002694 <HAL_ADC_ConvCpltCallback+0xa4c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	4b55      	ldr	r3, [pc, #340]	; (8002698 <HAL_ADC_ConvCpltCallback+0xa50>)
 8002542:	601a      	str	r2, [r3, #0]
				iI23L = (int)I23L;
 8002544:	4b55      	ldr	r3, [pc, #340]	; (800269c <HAL_ADC_ConvCpltCallback+0xa54>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <HAL_ADC_ConvCpltCallback+0xa58>)
 800254c:	601a      	str	r2, [r3, #0]
				iI13L = (int)I13L;
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_ADC_ConvCpltCallback+0x9d0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_ADC_ConvCpltCallback+0xa5c>)
 8002556:	601a      	str	r2, [r3, #0]
				ibara_Toplam = (int)bara_Toplam;
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_ADC_ConvCpltCallback+0xa60>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	4b53      	ldr	r3, [pc, #332]	; (80026ac <HAL_ADC_ConvCpltCallback+0xa64>)
 8002560:	601a      	str	r2, [r3, #0]




				//int değerler char'a çevriliyor
				sprintf(adc1_Last0, "%d", 0); //geçen süre yazması gerekiyor.
 8002562:	2200      	movs	r2, #0
 8002564:	4952      	ldr	r1, [pc, #328]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002566:	4853      	ldr	r0, [pc, #332]	; (80026b4 <HAL_ADC_ConvCpltCallback+0xa6c>)
 8002568:	f008 fc4e 	bl	800ae08 <siprintf>
				sprintf(adc1_Last1, "%d", iV1L);
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_ADC_ConvCpltCallback+0x9e0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	494f      	ldr	r1, [pc, #316]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002574:	4850      	ldr	r0, [pc, #320]	; (80026b8 <HAL_ADC_ConvCpltCallback+0xa70>)
 8002576:	f008 fc47 	bl	800ae08 <siprintf>
				sprintf(adc1_Last2, "%d", iV2L);
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_ADC_ConvCpltCallback+0x9e8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	494b      	ldr	r1, [pc, #300]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002582:	484e      	ldr	r0, [pc, #312]	; (80026bc <HAL_ADC_ConvCpltCallback+0xa74>)
 8002584:	f008 fc40 	bl	800ae08 <siprintf>
				sprintf(adc1_Last3, "%d", iV3L);
 8002588:	4b2b      	ldr	r3, [pc, #172]	; (8002638 <HAL_ADC_ConvCpltCallback+0x9f0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4948      	ldr	r1, [pc, #288]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002590:	484b      	ldr	r0, [pc, #300]	; (80026c0 <HAL_ADC_ConvCpltCallback+0xa78>)
 8002592:	f008 fc39 	bl	800ae08 <siprintf>
				sprintf(adc1_Last4, "%d", iI1L);
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_ADC_ConvCpltCallback+0x9f8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	4944      	ldr	r1, [pc, #272]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 800259e:	4849      	ldr	r0, [pc, #292]	; (80026c4 <HAL_ADC_ConvCpltCallback+0xa7c>)
 80025a0:	f008 fc32 	bl	800ae08 <siprintf>
				sprintf(adc1_Last5, "%d", iI2L);
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_ADC_ConvCpltCallback+0xa00>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4941      	ldr	r1, [pc, #260]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 80025ac:	4846      	ldr	r0, [pc, #280]	; (80026c8 <HAL_ADC_ConvCpltCallback+0xa80>)
 80025ae:	f008 fc2b 	bl	800ae08 <siprintf>
				sprintf(adc1_Last6, "%d", iI3L);
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_ADC_ConvCpltCallback+0xa08>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	493d      	ldr	r1, [pc, #244]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 80025ba:	4844      	ldr	r0, [pc, #272]	; (80026cc <HAL_ADC_ConvCpltCallback+0xa84>)
 80025bc:	f008 fc24 	bl	800ae08 <siprintf>
				sprintf(adc1_Last7, "%d", ibara_Toplam);
 80025c0:	4b3a      	ldr	r3, [pc, #232]	; (80026ac <HAL_ADC_ConvCpltCallback+0xa64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	493a      	ldr	r1, [pc, #232]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 80025c8:	4841      	ldr	r0, [pc, #260]	; (80026d0 <HAL_ADC_ConvCpltCallback+0xa88>)
 80025ca:	f008 fc1d 	bl	800ae08 <siprintf>
				sprintf(adc1_Last8, "%d", iVout);
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <HAL_ADC_ConvCpltCallback+0xa10>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	4936      	ldr	r1, [pc, #216]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 80025d6:	483f      	ldr	r0, [pc, #252]	; (80026d4 <HAL_ADC_ConvCpltCallback+0xa8c>)
 80025d8:	f008 fc16 	bl	800ae08 <siprintf>
				sprintf(adc1_Last9, "%d", iIout);
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_ADC_ConvCpltCallback+0xa20>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	4933      	ldr	r1, [pc, #204]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 80025e4:	483c      	ldr	r0, [pc, #240]	; (80026d8 <HAL_ADC_ConvCpltCallback+0xa90>)
 80025e6:	f008 fc0f 	bl	800ae08 <siprintf>
				sprintf(adc1_Last10, "%d", itemp);
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_ADC_ConvCpltCallback+0xa18>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	492f      	ldr	r1, [pc, #188]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa68>)
 80025f2:	483a      	ldr	r0, [pc, #232]	; (80026dc <HAL_ADC_ConvCpltCallback+0xa94>)
 80025f4:	f008 fc08 	bl	800ae08 <siprintf>
while(count<1600)
 80025f8:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <HAL_ADC_ConvCpltCallback+0xa98>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002600:	f4ff ab28 	bcc.w	8001c54 <HAL_ADC_ConvCpltCallback+0xc>



	}

	sd_Flag=1;
 8002604:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <HAL_ADC_ConvCpltCallback+0xa9c>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]


}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bdb0      	pop	{r4, r5, r7, pc}
 8002612:	bf00      	nop
 8002614:	f3af 8000 	nop.w
 8002618:	200024c4 	.word	0x200024c4
 800261c:	2000245c 	.word	0x2000245c
 8002620:	200024f0 	.word	0x200024f0
 8002624:	200024a4 	.word	0x200024a4
 8002628:	200024f4 	.word	0x200024f4
 800262c:	200024a8 	.word	0x200024a8
 8002630:	200024f8 	.word	0x200024f8
 8002634:	200024ac 	.word	0x200024ac
 8002638:	200024fc 	.word	0x200024fc
 800263c:	20002498 	.word	0x20002498
 8002640:	20002500 	.word	0x20002500
 8002644:	2000249c 	.word	0x2000249c
 8002648:	20002504 	.word	0x20002504
 800264c:	200024a0 	.word	0x200024a0
 8002650:	20002508 	.word	0x20002508
 8002654:	200024d0 	.word	0x200024d0
 8002658:	2000250c 	.word	0x2000250c
 800265c:	200024e8 	.word	0x200024e8
 8002660:	20002510 	.word	0x20002510
 8002664:	200024dc 	.word	0x200024dc
 8002668:	20002514 	.word	0x20002514
 800266c:	200024e0 	.word	0x200024e0
 8002670:	20002518 	.word	0x20002518
 8002674:	200024e4 	.word	0x200024e4
 8002678:	2000251c 	.word	0x2000251c
 800267c:	200024b0 	.word	0x200024b0
 8002680:	20002520 	.word	0x20002520
 8002684:	200024b4 	.word	0x200024b4
 8002688:	20002524 	.word	0x20002524
 800268c:	200024b8 	.word	0x200024b8
 8002690:	20002528 	.word	0x20002528
 8002694:	200024bc 	.word	0x200024bc
 8002698:	2000252c 	.word	0x2000252c
 800269c:	200024c0 	.word	0x200024c0
 80026a0:	20002530 	.word	0x20002530
 80026a4:	20002534 	.word	0x20002534
 80026a8:	200024ec 	.word	0x200024ec
 80026ac:	20002538 	.word	0x20002538
 80026b0:	0800b884 	.word	0x0800b884
 80026b4:	20002550 	.word	0x20002550
 80026b8:	20002564 	.word	0x20002564
 80026bc:	20002578 	.word	0x20002578
 80026c0:	2000258c 	.word	0x2000258c
 80026c4:	200025a0 	.word	0x200025a0
 80026c8:	200025b4 	.word	0x200025b4
 80026cc:	200025c8 	.word	0x200025c8
 80026d0:	200025dc 	.word	0x200025dc
 80026d4:	200025f0 	.word	0x200025f0
 80026d8:	20002604 	.word	0x20002604
 80026dc:	20002618 	.word	0x20002618
 80026e0:	20002490 	.word	0x20002490
 80026e4:	20002494 	.word	0x20002494
 80026e8:	e8584caa 	.word	0xe8584caa
 80026ec:	3ffbb67a 	.word	0x3ffbb67a

080026f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026f6:	f001 f849 	bl	800378c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fa:	f000 f939 	bl	8002970 <SystemClock_Config>
  */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026fe:	f000 fc37 	bl	8002f70 <MX_GPIO_Init>
  MX_DMA_Init();
 8002702:	f000 fc15 	bl	8002f30 <MX_DMA_Init>
  MX_ADC1_Init();
 8002706:	f000 f99d 	bl	8002a44 <MX_ADC1_Init>
  MX_TIM1_Init();
 800270a:	f000 faf1 	bl	8002cf0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800270e:	f000 fbbb 	bl	8002e88 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8002712:	f000 fa83 	bl	8002c1c <MX_DAC_Init>
  MX_SPI1_Init();
 8002716:	f000 fab5 	bl	8002c84 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800271a:	f000 fbdf 	bl	8002edc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800271e:	f005 fa61 	bl	8007be4 <MX_FATFS_Init>
  MX_UART4_Init();
 8002722:	f000 fb87 	bl	8002e34 <MX_UART4_Init>
  MX_TIM8_Init();
 8002726:	f000 fb33 	bl	8002d90 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);  // Örnekleme için timer kesmesi başlangıcı USER CODE 4'e git.
 800272a:	486e      	ldr	r0, [pc, #440]	; (80028e4 <main+0x1f4>)
 800272c:	f003 fdde 	bl	80062ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);  // HMI Ekrana her 1s'de yazması için timer kesmesi başlangıcı
 8002730:	486d      	ldr	r0, [pc, #436]	; (80028e8 <main+0x1f8>)
 8002732:	f003 fddb 	bl	80062ec <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002736:	2100      	movs	r1, #0
 8002738:	486c      	ldr	r0, [pc, #432]	; (80028ec <main+0x1fc>)
 800273a:	f001 fe05 	bl	8004348 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800273e:	2110      	movs	r1, #16
 8002740:	486a      	ldr	r0, [pc, #424]	; (80028ec <main+0x1fc>)
 8002742:	f001 fe01 	bl	8004348 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(sd_Flag==1)
 8002746:	4b6a      	ldr	r3, [pc, #424]	; (80028f0 <main+0x200>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d1fb      	bne.n	8002746 <main+0x56>
	  {
		    fres = f_mount(&fs, "", 0);
 800274e:	2200      	movs	r2, #0
 8002750:	4968      	ldr	r1, [pc, #416]	; (80028f4 <main+0x204>)
 8002752:	4869      	ldr	r0, [pc, #420]	; (80028f8 <main+0x208>)
 8002754:	f007 fc90 	bl	800a078 <f_mount>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	4b67      	ldr	r3, [pc, #412]	; (80028fc <main+0x20c>)
 800275e:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002760:	4b66      	ldr	r3, [pc, #408]	; (80028fc <main+0x20c>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <main+0x80>
				transmit_uart("Micro SD card is mounted successfully!\n");
 8002768:	4865      	ldr	r0, [pc, #404]	; (8002900 <main+0x210>)
 800276a:	f7ff f85d 	bl	8001828 <transmit_uart>
 800276e:	e006      	b.n	800277e <main+0x8e>
			} else if (fres != FR_OK) {
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <main+0x20c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <main+0x8e>
				transmit_uart("Micro SD card's mount error!\n");
 8002778:	4862      	ldr	r0, [pc, #392]	; (8002904 <main+0x214>)
 800277a:	f7ff f855 	bl	8001828 <transmit_uart>
			}

			// FA_OPEN_APPEND opens file if it exists and if not then creates it,
			// the pointer is set at the end of the file for appending
			fres = f_open(&fil, "log-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 800277e:	2233      	movs	r2, #51	; 0x33
 8002780:	4961      	ldr	r1, [pc, #388]	; (8002908 <main+0x218>)
 8002782:	4862      	ldr	r0, [pc, #392]	; (800290c <main+0x21c>)
 8002784:	f007 fcbe 	bl	800a104 <f_open>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	4b5b      	ldr	r3, [pc, #364]	; (80028fc <main+0x20c>)
 800278e:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002790:	4b5a      	ldr	r3, [pc, #360]	; (80028fc <main+0x20c>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d103      	bne.n	80027a0 <main+0xb0>
				transmit_uart("File opened for reading and checking the free space.\n");
 8002798:	485d      	ldr	r0, [pc, #372]	; (8002910 <main+0x220>)
 800279a:	f7ff f845 	bl	8001828 <transmit_uart>
 800279e:	e006      	b.n	80027ae <main+0xbe>
			} else if (fres != FR_OK) {
 80027a0:	4b56      	ldr	r3, [pc, #344]	; (80028fc <main+0x20c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <main+0xbe>
				transmit_uart("File was not opened for reading and checking the free space!\n");
 80027a8:	485a      	ldr	r0, [pc, #360]	; (8002914 <main+0x224>)
 80027aa:	f7ff f83d 	bl	8001828 <transmit_uart>


			 //ADC değerlerinin char'a dönüştürülüp sd karta yazdırıldığı bölüm

//				 f_puts("(s) VL1 VL2 VL3 IL1 IL2 IL3 VBARA VOUT IOUT TBARA \n", &fil);
				 f_puts(adc1_Last0, &fil);   // ADC değerleri metin dosyasına yazdırıldı.
 80027ae:	4957      	ldr	r1, [pc, #348]	; (800290c <main+0x21c>)
 80027b0:	4859      	ldr	r0, [pc, #356]	; (8002918 <main+0x228>)
 80027b2:	f008 f926 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 80027b6:	4955      	ldr	r1, [pc, #340]	; (800290c <main+0x21c>)
 80027b8:	4858      	ldr	r0, [pc, #352]	; (800291c <main+0x22c>)
 80027ba:	f008 f922 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last1, &fil);
 80027be:	4953      	ldr	r1, [pc, #332]	; (800290c <main+0x21c>)
 80027c0:	4857      	ldr	r0, [pc, #348]	; (8002920 <main+0x230>)
 80027c2:	f008 f91e 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 80027c6:	4951      	ldr	r1, [pc, #324]	; (800290c <main+0x21c>)
 80027c8:	4854      	ldr	r0, [pc, #336]	; (800291c <main+0x22c>)
 80027ca:	f008 f91a 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last2, &fil);
 80027ce:	494f      	ldr	r1, [pc, #316]	; (800290c <main+0x21c>)
 80027d0:	4854      	ldr	r0, [pc, #336]	; (8002924 <main+0x234>)
 80027d2:	f008 f916 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 80027d6:	494d      	ldr	r1, [pc, #308]	; (800290c <main+0x21c>)
 80027d8:	4850      	ldr	r0, [pc, #320]	; (800291c <main+0x22c>)
 80027da:	f008 f912 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last3, &fil);
 80027de:	494b      	ldr	r1, [pc, #300]	; (800290c <main+0x21c>)
 80027e0:	4851      	ldr	r0, [pc, #324]	; (8002928 <main+0x238>)
 80027e2:	f008 f90e 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 80027e6:	4949      	ldr	r1, [pc, #292]	; (800290c <main+0x21c>)
 80027e8:	484c      	ldr	r0, [pc, #304]	; (800291c <main+0x22c>)
 80027ea:	f008 f90a 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last4, &fil);
 80027ee:	4947      	ldr	r1, [pc, #284]	; (800290c <main+0x21c>)
 80027f0:	484e      	ldr	r0, [pc, #312]	; (800292c <main+0x23c>)
 80027f2:	f008 f906 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 80027f6:	4945      	ldr	r1, [pc, #276]	; (800290c <main+0x21c>)
 80027f8:	4848      	ldr	r0, [pc, #288]	; (800291c <main+0x22c>)
 80027fa:	f008 f902 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last5, &fil);
 80027fe:	4943      	ldr	r1, [pc, #268]	; (800290c <main+0x21c>)
 8002800:	484b      	ldr	r0, [pc, #300]	; (8002930 <main+0x240>)
 8002802:	f008 f8fe 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 8002806:	4941      	ldr	r1, [pc, #260]	; (800290c <main+0x21c>)
 8002808:	4844      	ldr	r0, [pc, #272]	; (800291c <main+0x22c>)
 800280a:	f008 f8fa 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last6, &fil);
 800280e:	493f      	ldr	r1, [pc, #252]	; (800290c <main+0x21c>)
 8002810:	4848      	ldr	r0, [pc, #288]	; (8002934 <main+0x244>)
 8002812:	f008 f8f6 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 8002816:	493d      	ldr	r1, [pc, #244]	; (800290c <main+0x21c>)
 8002818:	4840      	ldr	r0, [pc, #256]	; (800291c <main+0x22c>)
 800281a:	f008 f8f2 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last7, &fil);
 800281e:	493b      	ldr	r1, [pc, #236]	; (800290c <main+0x21c>)
 8002820:	4845      	ldr	r0, [pc, #276]	; (8002938 <main+0x248>)
 8002822:	f008 f8ee 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 8002826:	4939      	ldr	r1, [pc, #228]	; (800290c <main+0x21c>)
 8002828:	483c      	ldr	r0, [pc, #240]	; (800291c <main+0x22c>)
 800282a:	f008 f8ea 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last8, &fil);
 800282e:	4937      	ldr	r1, [pc, #220]	; (800290c <main+0x21c>)
 8002830:	4842      	ldr	r0, [pc, #264]	; (800293c <main+0x24c>)
 8002832:	f008 f8e6 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 8002836:	4935      	ldr	r1, [pc, #212]	; (800290c <main+0x21c>)
 8002838:	4838      	ldr	r0, [pc, #224]	; (800291c <main+0x22c>)
 800283a:	f008 f8e2 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last9, &fil);
 800283e:	4933      	ldr	r1, [pc, #204]	; (800290c <main+0x21c>)
 8002840:	483f      	ldr	r0, [pc, #252]	; (8002940 <main+0x250>)
 8002842:	f008 f8de 	bl	800aa02 <f_puts>
				 f_puts(" ", &fil);
 8002846:	4931      	ldr	r1, [pc, #196]	; (800290c <main+0x21c>)
 8002848:	4834      	ldr	r0, [pc, #208]	; (800291c <main+0x22c>)
 800284a:	f008 f8da 	bl	800aa02 <f_puts>
				 f_puts(adc1_Last10, &fil);
 800284e:	492f      	ldr	r1, [pc, #188]	; (800290c <main+0x21c>)
 8002850:	483c      	ldr	r0, [pc, #240]	; (8002944 <main+0x254>)
 8002852:	f008 f8d6 	bl	800aa02 <f_puts>
				 f_puts("\n", &fil);
 8002856:	492d      	ldr	r1, [pc, #180]	; (800290c <main+0x21c>)
 8002858:	483b      	ldr	r0, [pc, #236]	; (8002948 <main+0x258>)
 800285a:	f008 f8d2 	bl	800aa02 <f_puts>




			fres = f_close(&fil);
 800285e:	482b      	ldr	r0, [pc, #172]	; (800290c <main+0x21c>)
 8002860:	f008 f82e 	bl	800a8c0 <f_close>
 8002864:	4603      	mov	r3, r0
 8002866:	461a      	mov	r2, r3
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <main+0x20c>)
 800286a:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <main+0x20c>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <main+0x18c>
				transmit_uart("The file is closed.\n");
 8002874:	4835      	ldr	r0, [pc, #212]	; (800294c <main+0x25c>)
 8002876:	f7fe ffd7 	bl	8001828 <transmit_uart>
 800287a:	e006      	b.n	800288a <main+0x19a>
			} else if (fres != FR_OK) {
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <main+0x20c>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <main+0x19a>
				transmit_uart("The file was not closed.\n");}
 8002884:	4832      	ldr	r0, [pc, #200]	; (8002950 <main+0x260>)
 8002886:	f7fe ffcf 	bl	8001828 <transmit_uart>

			sd_Flag=0;
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <main+0x200>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
			count=0;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <main+0x264>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
			k=0;
 8002896:	4b30      	ldr	r3, [pc, #192]	; (8002958 <main+0x268>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

		for(uint8_t y=0;y<12;y++)
 800289c:	2300      	movs	r3, #0
 800289e:	71fb      	strb	r3, [r7, #7]
 80028a0:	e01b      	b.n	80028da <main+0x1ea>
			{
				adc_Buffer[y]=0;
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <main+0x26c>)
 80028a6:	2100      	movs	r1, #0
 80028a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Value[y]=0;
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <main+0x270>)
 80028b0:	2100      	movs	r1, #0
 80028b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Mean[y]=0;
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <main+0x274>)
 80028ba:	2100      	movs	r1, #0
 80028bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Square[y]=0;
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4a29      	ldr	r2, [pc, #164]	; (8002968 <main+0x278>)
 80028c4:	2100      	movs	r1, #0
 80028c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Square_Root[y]=0;
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <main+0x27c>)
 80028ce:	2100      	movs	r1, #0
 80028d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint8_t y=0;y<12;y++)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	3301      	adds	r3, #1
 80028d8:	71fb      	strb	r3, [r7, #7]
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b0b      	cmp	r3, #11
 80028de:	d9e0      	bls.n	80028a2 <main+0x1b2>
	  if(sd_Flag==1)
 80028e0:	e731      	b.n	8002746 <main+0x56>
 80028e2:	bf00      	nop
 80028e4:	2000222c 	.word	0x2000222c
 80028e8:	20002274 	.word	0x20002274
 80028ec:	20002218 	.word	0x20002218
 80028f0:	20002494 	.word	0x20002494
 80028f4:	0800b888 	.word	0x0800b888
 80028f8:	20000104 	.word	0x20000104
 80028fc:	2000216c 	.word	0x2000216c
 8002900:	0800b88c 	.word	0x0800b88c
 8002904:	0800b8b4 	.word	0x0800b8b4
 8002908:	0800b8d4 	.word	0x0800b8d4
 800290c:	2000113c 	.word	0x2000113c
 8002910:	0800b8e4 	.word	0x0800b8e4
 8002914:	0800b91c 	.word	0x0800b91c
 8002918:	20002550 	.word	0x20002550
 800291c:	0800b95c 	.word	0x0800b95c
 8002920:	20002564 	.word	0x20002564
 8002924:	20002578 	.word	0x20002578
 8002928:	2000258c 	.word	0x2000258c
 800292c:	200025a0 	.word	0x200025a0
 8002930:	200025b4 	.word	0x200025b4
 8002934:	200025c8 	.word	0x200025c8
 8002938:	200025dc 	.word	0x200025dc
 800293c:	200025f0 	.word	0x200025f0
 8002940:	20002604 	.word	0x20002604
 8002944:	20002618 	.word	0x20002618
 8002948:	0800b960 	.word	0x0800b960
 800294c:	0800b964 	.word	0x0800b964
 8002950:	0800b97c 	.word	0x0800b97c
 8002954:	20002490 	.word	0x20002490
 8002958:	2000248c 	.word	0x2000248c
 800295c:	2000239c 	.word	0x2000239c
 8002960:	200023cc 	.word	0x200023cc
 8002964:	2000245c 	.word	0x2000245c
 8002968:	200023fc 	.word	0x200023fc
 800296c:	2000242c 	.word	0x2000242c

08002970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b094      	sub	sp, #80	; 0x50
 8002974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002976:	f107 0320 	add.w	r3, r7, #32
 800297a:	2230      	movs	r2, #48	; 0x30
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f008 fa62 	bl	800ae48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <SystemClock_Config+0xcc>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	4a27      	ldr	r2, [pc, #156]	; (8002a3c <SystemClock_Config+0xcc>)
 800299e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a2:	6413      	str	r3, [r2, #64]	; 0x40
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <SystemClock_Config+0xcc>)
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	60bb      	str	r3, [r7, #8]
 80029ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029b0:	2300      	movs	r3, #0
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <SystemClock_Config+0xd0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <SystemClock_Config+0xd0>)
 80029ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <SystemClock_Config+0xd0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029cc:	2301      	movs	r3, #1
 80029ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029d6:	2302      	movs	r3, #2
 80029d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80029e0:	2304      	movs	r3, #4
 80029e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029e4:	23a8      	movs	r3, #168	; 0xa8
 80029e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029e8:	2302      	movs	r3, #2
 80029ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80029ec:	2307      	movs	r3, #7
 80029ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029f0:	f107 0320 	add.w	r3, r7, #32
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fb39 	bl	800506c <HAL_RCC_OscConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a00:	f000 fb66 	bl	80030d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a04:	230f      	movs	r3, #15
 8002a06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2105      	movs	r1, #5
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 fd9a 	bl	800555c <HAL_RCC_ClockConfig>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a2e:	f000 fb4f 	bl	80030d0 <Error_Handler>
  }
}
 8002a32:	bf00      	nop
 8002a34:	3750      	adds	r7, #80	; 0x50
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000

08002a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a4a:	463b      	mov	r3, r7
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002a56:	4b6e      	ldr	r3, [pc, #440]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a58:	4a6e      	ldr	r2, [pc, #440]	; (8002c14 <MX_ADC1_Init+0x1d0>)
 8002a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a5c:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002a6a:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002a70:	4b67      	ldr	r3, [pc, #412]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a76:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a7e:	4b64      	ldr	r3, [pc, #400]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a84:	4b62      	ldr	r3, [pc, #392]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a86:	4a64      	ldr	r2, [pc, #400]	; (8002c18 <MX_ADC1_Init+0x1d4>)
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a8a:	4b61      	ldr	r3, [pc, #388]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8002a90:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a92:	220c      	movs	r2, #12
 8002a94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002a96:	4b5e      	ldr	r3, [pc, #376]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a9e:	4b5c      	ldr	r3, [pc, #368]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002aa4:	485a      	ldr	r0, [pc, #360]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002aa6:	f000 ff07 	bl	80038b8 <HAL_ADC_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ab0:	f000 fb0e 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002abc:	2307      	movs	r3, #7
 8002abe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4852      	ldr	r0, [pc, #328]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002ac6:	f001 f85f 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ad0:	f000 fafe 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002adc:	463b      	mov	r3, r7
 8002ade:	4619      	mov	r1, r3
 8002ae0:	484b      	ldr	r0, [pc, #300]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002ae2:	f001 f851 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002aec:	f000 faf0 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002af0:	2302      	movs	r3, #2
 8002af2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002af4:	2303      	movs	r3, #3
 8002af6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002af8:	463b      	mov	r3, r7
 8002afa:	4619      	mov	r1, r3
 8002afc:	4844      	ldr	r0, [pc, #272]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002afe:	f001 f843 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002b08:	f000 fae2 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002b10:	2304      	movs	r3, #4
 8002b12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b14:	463b      	mov	r3, r7
 8002b16:	4619      	mov	r1, r3
 8002b18:	483d      	ldr	r0, [pc, #244]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002b1a:	f001 f835 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002b24:	f000 fad4 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002b28:	2306      	movs	r3, #6
 8002b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002b2c:	2305      	movs	r3, #5
 8002b2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b30:	463b      	mov	r3, r7
 8002b32:	4619      	mov	r1, r3
 8002b34:	4836      	ldr	r0, [pc, #216]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002b36:	f001 f827 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002b40:	f000 fac6 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002b44:	2307      	movs	r3, #7
 8002b46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002b48:	2306      	movs	r3, #6
 8002b4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	4619      	mov	r1, r3
 8002b50:	482f      	ldr	r0, [pc, #188]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002b52:	f001 f819 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002b5c:	f000 fab8 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002b60:	2308      	movs	r3, #8
 8002b62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002b64:	2307      	movs	r3, #7
 8002b66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b68:	463b      	mov	r3, r7
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4828      	ldr	r0, [pc, #160]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002b6e:	f001 f80b 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002b78:	f000 faaa 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002b7c:	2309      	movs	r3, #9
 8002b7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002b80:	2308      	movs	r3, #8
 8002b82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b84:	463b      	mov	r3, r7
 8002b86:	4619      	mov	r1, r3
 8002b88:	4821      	ldr	r0, [pc, #132]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002b8a:	f000 fffd 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002b94:	f000 fa9c 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002b98:	230a      	movs	r3, #10
 8002b9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002b9c:	2309      	movs	r3, #9
 8002b9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	481a      	ldr	r0, [pc, #104]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002ba6:	f000 ffef 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002bb0:	f000 fa8e 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002bb4:	230b      	movs	r3, #11
 8002bb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002bb8:	230a      	movs	r3, #10
 8002bba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bbc:	463b      	mov	r3, r7
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4813      	ldr	r0, [pc, #76]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002bc2:	f000 ffe1 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002bcc:	f000 fa80 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002bd0:	230d      	movs	r3, #13
 8002bd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002bd4:	230b      	movs	r3, #11
 8002bd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd8:	463b      	mov	r3, r7
 8002bda:	4619      	mov	r1, r3
 8002bdc:	480c      	ldr	r0, [pc, #48]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002bde:	f000 ffd3 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002be8:	f000 fa72 	bl	80030d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002bec:	230f      	movs	r3, #15
 8002bee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bf4:	463b      	mov	r3, r7
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4805      	ldr	r0, [pc, #20]	; (8002c10 <MX_ADC1_Init+0x1cc>)
 8002bfa:	f000 ffc5 	bl	8003b88 <HAL_ADC_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002c04:	f000 fa64 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20002170 	.word	0x20002170
 8002c14:	40012000 	.word	0x40012000
 8002c18:	0f000001 	.word	0x0f000001

08002c1c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002c22:	463b      	mov	r3, r7
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_DAC_Init+0x60>)
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <MX_DAC_Init+0x64>)
 8002c2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002c30:	4812      	ldr	r0, [pc, #72]	; (8002c7c <MX_DAC_Init+0x60>)
 8002c32:	f001 fb67 	bl	8004304 <HAL_DAC_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002c3c:	f000 fa48 	bl	80030d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c48:	463b      	mov	r3, r7
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	480b      	ldr	r0, [pc, #44]	; (8002c7c <MX_DAC_Init+0x60>)
 8002c50:	f001 fbfb 	bl	800444a <HAL_DAC_ConfigChannel>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002c5a:	f000 fa39 	bl	80030d0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002c5e:	463b      	mov	r3, r7
 8002c60:	2210      	movs	r2, #16
 8002c62:	4619      	mov	r1, r3
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <MX_DAC_Init+0x60>)
 8002c66:	f001 fbf0 	bl	800444a <HAL_DAC_ConfigChannel>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002c70:	f000 fa2e 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002c74:	bf00      	nop
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20002218 	.word	0x20002218
 8002c80:	40007400 	.word	0x40007400

08002c84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c88:	4b17      	ldr	r3, [pc, #92]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002c8a:	4a18      	ldr	r2, [pc, #96]	; (8002cec <MX_SPI1_Init+0x68>)
 8002c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002cd0:	220a      	movs	r2, #10
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cd4:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <MX_SPI1_Init+0x64>)
 8002cd6:	f002 fe61 	bl	800599c <HAL_SPI_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ce0:	f000 f9f6 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ce4:	bf00      	nop
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	200000ac 	.word	0x200000ac
 8002cec:	40013000 	.word	0x40013000

08002cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf6:	f107 0308 	add.w	r3, r7, #8
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d04:	463b      	mov	r3, r7
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <MX_TIM1_Init+0x9c>)
 8002d10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d20:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002d24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d26:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d38:	4813      	ldr	r0, [pc, #76]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d3a:	f003 fa87 	bl	800624c <HAL_TIM_Base_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002d44:	f000 f9c4 	bl	80030d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d4e:	f107 0308 	add.w	r3, r7, #8
 8002d52:	4619      	mov	r1, r3
 8002d54:	480c      	ldr	r0, [pc, #48]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d56:	f003 fc29 	bl	80065ac <HAL_TIM_ConfigClockSource>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002d60:	f000 f9b6 	bl	80030d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d64:	2320      	movs	r3, #32
 8002d66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d6c:	463b      	mov	r3, r7
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4805      	ldr	r0, [pc, #20]	; (8002d88 <MX_TIM1_Init+0x98>)
 8002d72:	f003 fe51 	bl	8006a18 <HAL_TIMEx_MasterConfigSynchronization>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002d7c:	f000 f9a8 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	2000222c 	.word	0x2000222c
 8002d8c:	40010000 	.word	0x40010000

08002d90 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d96:	f107 0308 	add.w	r3, r7, #8
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da4:	463b      	mov	r3, r7
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002dac:	4b1f      	ldr	r3, [pc, #124]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002dae:	4a20      	ldr	r2, [pc, #128]	; (8002e30 <MX_TIM8_Init+0xa0>)
 8002db0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20000-1;
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002db4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002db8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8400-1;
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002dc2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002dc6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002dda:	4814      	ldr	r0, [pc, #80]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002ddc:	f003 fa36 	bl	800624c <HAL_TIM_Base_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002de6:	f000 f973 	bl	80030d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	4619      	mov	r1, r3
 8002df6:	480d      	ldr	r0, [pc, #52]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002df8:	f003 fbd8 	bl	80065ac <HAL_TIM_ConfigClockSource>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002e02:	f000 f965 	bl	80030d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e06:	2320      	movs	r3, #32
 8002e08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e0e:	463b      	mov	r3, r7
 8002e10:	4619      	mov	r1, r3
 8002e12:	4806      	ldr	r0, [pc, #24]	; (8002e2c <MX_TIM8_Init+0x9c>)
 8002e14:	f003 fe00 	bl	8006a18 <HAL_TIMEx_MasterConfigSynchronization>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8002e1e:	f000 f957 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20002274 	.word	0x20002274
 8002e30:	40010400 	.word	0x40010400

08002e34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e3a:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <MX_UART4_Init+0x50>)
 8002e3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	; (8002e80 <MX_UART4_Init+0x4c>)
 8002e6c:	f003 fe64 	bl	8006b38 <HAL_UART_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002e76:	f000 f92b 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	200022bc 	.word	0x200022bc
 8002e84:	40004c00 	.word	0x40004c00

08002e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002e8e:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <MX_USART2_UART_Init+0x50>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002e94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <MX_USART2_UART_Init+0x4c>)
 8002ec0:	f003 fe3a 	bl	8006b38 <HAL_UART_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002eca:	f000 f901 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20002304 	.word	0x20002304
 8002ed8:	40004400 	.word	0x40004400

08002edc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002ee2:	4a12      	ldr	r2, [pc, #72]	; (8002f2c <MX_USART3_UART_Init+0x50>)
 8002ee4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002ee8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002eec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002f02:	220c      	movs	r2, #12
 8002f04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f12:	4805      	ldr	r0, [pc, #20]	; (8002f28 <MX_USART3_UART_Init+0x4c>)
 8002f14:	f003 fe10 	bl	8006b38 <HAL_UART_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f1e:	f000 f8d7 	bl	80030d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	2000234c 	.word	0x2000234c
 8002f2c:	40004800 	.word	0x40004800

08002f30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <MX_DMA_Init+0x3c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <MX_DMA_Init+0x3c>)
 8002f40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <MX_DMA_Init+0x3c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	607b      	str	r3, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	2038      	movs	r0, #56	; 0x38
 8002f58:	f001 f991 	bl	800427e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002f5c:	2038      	movs	r0, #56	; 0x38
 8002f5e:	f001 f9aa 	bl	80042b6 <HAL_NVIC_EnableIRQ>

}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800

08002f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	4b33      	ldr	r3, [pc, #204]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a32      	ldr	r2, [pc, #200]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a24      	ldr	r2, [pc, #144]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <MX_GPIO_Init+0xe8>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	4a16      	ldr	r2, [pc, #88]	; (8003058 <MX_GPIO_Init+0xe8>)
 8003000:	f043 0308 	orr.w	r3, r3, #8
 8003004:	6313      	str	r3, [r2, #48]	; 0x30
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_GPIO_Init+0xe8>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003012:	2201      	movs	r2, #1
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	4811      	ldr	r0, [pc, #68]	; (800305c <MX_GPIO_Init+0xec>)
 8003018:	f002 f80e 	bl	8005038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : REF_Pin */
  GPIO_InitStruct.Pin = REF_Pin;
 800301c:	2301      	movs	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003020:	2303      	movs	r3, #3
 8003022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REF_GPIO_Port, &GPIO_InitStruct);
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	4619      	mov	r1, r3
 800302e:	480c      	ldr	r0, [pc, #48]	; (8003060 <MX_GPIO_Init+0xf0>)
 8003030:	f001 fe66 	bl	8004d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003034:	2340      	movs	r3, #64	; 0x40
 8003036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003038:	2301      	movs	r3, #1
 800303a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003040:	2301      	movs	r3, #1
 8003042:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	4619      	mov	r1, r3
 800304a:	4804      	ldr	r0, [pc, #16]	; (800305c <MX_GPIO_Init+0xec>)
 800304c:	f001 fe58 	bl	8004d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003050:	bf00      	nop
 8003052:	3728      	adds	r7, #40	; 0x28
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40023800 	.word	0x40023800
 800305c:	40020400 	.word	0x40020400
 8003060:	40020000 	.word	0x40020000

08003064 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  /* TIMER CAGRILDI  */
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == TIM1)  // 50US'DE BIR KESMEYE GIRIP DEGER TOPLAYACAK.
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d109      	bne.n	800308a <HAL_TIM_PeriodElapsedCallback+0x26>
	 {
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_Buffer, sizeof(adc_Buffer)); /* ADC1 BASLADI VE DEGERLER ADC1'DEN CEKILDI */
 8003076:	2230      	movs	r2, #48	; 0x30
 8003078:	490e      	ldr	r1, [pc, #56]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800307a:	480f      	ldr	r0, [pc, #60]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800307c:	f000 fc60 	bl	8003940 <HAL_ADC_Start_DMA>
		 sec1++;
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003088:	6013      	str	r3, [r2, #0]
	 }

	 if(htim->Instance == TIM8) // 1s'de bir tft ekrana verileri gönderecek.
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d109      	bne.n	80030a8 <HAL_TIM_PeriodElapsedCallback+0x44>
	 {


		 HAL_UART_Receive_IT(&huart2, RX_Data, 4);  //UART CallBack'e git ve basılan butona göre değer gönder ekrana.
 8003094:	2204      	movs	r2, #4
 8003096:	490b      	ldr	r1, [pc, #44]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003098:	480b      	ldr	r0, [pc, #44]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800309a:	f003 fe28 	bl	8006cee <HAL_UART_Receive_IT>
		 sec8++;
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3301      	adds	r3, #1
 80030a4:	4a09      	ldr	r2, [pc, #36]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80030a6:	6013      	str	r3, [r2, #0]

	 }


}
 80030a8:	bf00      	nop
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40010000 	.word	0x40010000
 80030b4:	2000239c 	.word	0x2000239c
 80030b8:	20002170 	.word	0x20002170
 80030bc:	20002394 	.word	0x20002394
 80030c0:	40010400 	.word	0x40010400
 80030c4:	2000253c 	.word	0x2000253c
 80030c8:	20002304 	.word	0x20002304
 80030cc:	20002398 	.word	0x20002398

080030d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030d4:	b672      	cpsid	i
}
 80030d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030d8:	e7fe      	b.n	80030d8 <Error_Handler+0x8>
	...

080030dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_MspInit+0x4c>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_MspInit+0x4c>)
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f0:	6453      	str	r3, [r2, #68]	; 0x44
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <HAL_MspInit+0x4c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4b09      	ldr	r3, [pc, #36]	; (8003128 <HAL_MspInit+0x4c>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <HAL_MspInit+0x4c>)
 8003108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_MspInit+0x4c>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800311a:	2007      	movs	r0, #7
 800311c:	f001 f8a4 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800

0800312c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08c      	sub	sp, #48	; 0x30
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 031c 	add.w	r3, r7, #28
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a49      	ldr	r2, [pc, #292]	; (8003270 <HAL_ADC_MspInit+0x144>)
 800314a:	4293      	cmp	r3, r2
 800314c:	f040 808c 	bne.w	8003268 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	4b47      	ldr	r3, [pc, #284]	; (8003274 <HAL_ADC_MspInit+0x148>)
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	4a46      	ldr	r2, [pc, #280]	; (8003274 <HAL_ADC_MspInit+0x148>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315e:	6453      	str	r3, [r2, #68]	; 0x44
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_ADC_MspInit+0x148>)
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	4b40      	ldr	r3, [pc, #256]	; (8003274 <HAL_ADC_MspInit+0x148>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4a3f      	ldr	r2, [pc, #252]	; (8003274 <HAL_ADC_MspInit+0x148>)
 8003176:	f043 0304 	orr.w	r3, r3, #4
 800317a:	6313      	str	r3, [r2, #48]	; 0x30
 800317c:	4b3d      	ldr	r3, [pc, #244]	; (8003274 <HAL_ADC_MspInit+0x148>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003188:	2300      	movs	r3, #0
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <HAL_ADC_MspInit+0x148>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	4a38      	ldr	r2, [pc, #224]	; (8003274 <HAL_ADC_MspInit+0x148>)
 8003192:	f043 0301 	orr.w	r3, r3, #1
 8003196:	6313      	str	r3, [r2, #48]	; 0x30
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <HAL_ADC_MspInit+0x148>)
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	4b32      	ldr	r3, [pc, #200]	; (8003274 <HAL_ADC_MspInit+0x148>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	4a31      	ldr	r2, [pc, #196]	; (8003274 <HAL_ADC_MspInit+0x148>)
 80031ae:	f043 0302 	orr.w	r3, r3, #2
 80031b2:	6313      	str	r3, [r2, #48]	; 0x30
 80031b4:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_ADC_MspInit+0x148>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_OLC2_Pin|ADC1_OLC3_Pin|ADC1_OLC5_Pin|AKIM_FB_Pin;
 80031c0:	232b      	movs	r3, #43	; 0x2b
 80031c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031c4:	2303      	movs	r3, #3
 80031c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031cc:	f107 031c 	add.w	r3, r7, #28
 80031d0:	4619      	mov	r1, r3
 80031d2:	4829      	ldr	r0, [pc, #164]	; (8003278 <HAL_ADC_MspInit+0x14c>)
 80031d4:	f001 fd94 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = REF_Pin|L1_OLC_Pin|L2_OLC_Pin|L3_OLC_Pin
 80031d8:	23cf      	movs	r3, #207	; 0xcf
 80031da:	61fb      	str	r3, [r7, #28]
                          |I1_OLC_Pin|I2_OLC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031dc:	2303      	movs	r3, #3
 80031de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e4:	f107 031c 	add.w	r3, r7, #28
 80031e8:	4619      	mov	r1, r3
 80031ea:	4824      	ldr	r0, [pc, #144]	; (800327c <HAL_ADC_MspInit+0x150>)
 80031ec:	f001 fd88 	bl	8004d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I3_OLC_Pin|ADC1_OLC_Pin;
 80031f0:	2303      	movs	r3, #3
 80031f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031f4:	2303      	movs	r3, #3
 80031f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	4619      	mov	r1, r3
 8003202:	481f      	ldr	r0, [pc, #124]	; (8003280 <HAL_ADC_MspInit+0x154>)
 8003204:	f001 fd7c 	bl	8004d00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003208:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <HAL_ADC_MspInit+0x158>)
 800320a:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_ADC_MspInit+0x15c>)
 800320c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <HAL_ADC_MspInit+0x158>)
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_ADC_MspInit+0x158>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <HAL_ADC_MspInit+0x158>)
 800321c:	2200      	movs	r2, #0
 800321e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_ADC_MspInit+0x158>)
 8003222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003226:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_ADC_MspInit+0x158>)
 800322a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800322e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003230:	4b14      	ldr	r3, [pc, #80]	; (8003284 <HAL_ADC_MspInit+0x158>)
 8003232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003236:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_ADC_MspInit+0x158>)
 800323a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800323e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <HAL_ADC_MspInit+0x158>)
 8003242:	2200      	movs	r2, #0
 8003244:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HAL_ADC_MspInit+0x158>)
 8003248:	2200      	movs	r2, #0
 800324a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800324c:	480d      	ldr	r0, [pc, #52]	; (8003284 <HAL_ADC_MspInit+0x158>)
 800324e:	f001 f955 	bl	80044fc <HAL_DMA_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003258:	f7ff ff3a 	bl	80030d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_ADC_MspInit+0x158>)
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
 8003262:	4a08      	ldr	r2, [pc, #32]	; (8003284 <HAL_ADC_MspInit+0x158>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003268:	bf00      	nop
 800326a:	3730      	adds	r7, #48	; 0x30
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40012000 	.word	0x40012000
 8003274:	40023800 	.word	0x40023800
 8003278:	40020800 	.word	0x40020800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	200021b8 	.word	0x200021b8
 8003288:	40026410 	.word	0x40026410

0800328c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a17      	ldr	r2, [pc, #92]	; (8003308 <HAL_DAC_MspInit+0x7c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d127      	bne.n	80032fe <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <HAL_DAC_MspInit+0x80>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a15      	ldr	r2, [pc, #84]	; (800330c <HAL_DAC_MspInit+0x80>)
 80032b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b13      	ldr	r3, [pc, #76]	; (800330c <HAL_DAC_MspInit+0x80>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_DAC_MspInit+0x80>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_DAC_MspInit+0x80>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_DAC_MspInit+0x80>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = DAC_VOLTAJ_OUT_Pin|DAC_AKIM_OUT_Pin;
 80032e6:	2330      	movs	r3, #48	; 0x30
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ea:	2303      	movs	r3, #3
 80032ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f2:	f107 0314 	add.w	r3, r7, #20
 80032f6:	4619      	mov	r1, r3
 80032f8:	4805      	ldr	r0, [pc, #20]	; (8003310 <HAL_DAC_MspInit+0x84>)
 80032fa:	f001 fd01 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80032fe:	bf00      	nop
 8003300:	3728      	adds	r7, #40	; 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40007400 	.word	0x40007400
 800330c:	40023800 	.word	0x40023800
 8003310:	40020000 	.word	0x40020000

08003314 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	; (8003398 <HAL_SPI_MspInit+0x84>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d12b      	bne.n	800338e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	4b18      	ldr	r3, [pc, #96]	; (800339c <HAL_SPI_MspInit+0x88>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	4a17      	ldr	r2, [pc, #92]	; (800339c <HAL_SPI_MspInit+0x88>)
 8003340:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003344:	6453      	str	r3, [r2, #68]	; 0x44
 8003346:	4b15      	ldr	r3, [pc, #84]	; (800339c <HAL_SPI_MspInit+0x88>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_SPI_MspInit+0x88>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a10      	ldr	r2, [pc, #64]	; (800339c <HAL_SPI_MspInit+0x88>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <HAL_SPI_MspInit+0x88>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800336e:	2338      	movs	r3, #56	; 0x38
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800337e:	2305      	movs	r3, #5
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	4805      	ldr	r0, [pc, #20]	; (80033a0 <HAL_SPI_MspInit+0x8c>)
 800338a:	f001 fcb9 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800338e:	bf00      	nop
 8003390:	3728      	adds	r7, #40	; 0x28
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40013000 	.word	0x40013000
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020400 	.word	0x40020400

080033a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_TIM_Base_MspInit+0x80>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d116      	bne.n	80033e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_TIM_Base_MspInit+0x84>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	4a1a      	ldr	r2, [pc, #104]	; (8003428 <HAL_TIM_Base_MspInit+0x84>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6453      	str	r3, [r2, #68]	; 0x44
 80033c6:	4b18      	ldr	r3, [pc, #96]	; (8003428 <HAL_TIM_Base_MspInit+0x84>)
 80033c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	2019      	movs	r0, #25
 80033d8:	f000 ff51 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033dc:	2019      	movs	r0, #25
 80033de:	f000 ff6a 	bl	80042b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80033e2:	e01a      	b.n	800341a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM8)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a10      	ldr	r2, [pc, #64]	; (800342c <HAL_TIM_Base_MspInit+0x88>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d115      	bne.n	800341a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_TIM_Base_MspInit+0x84>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	4a0c      	ldr	r2, [pc, #48]	; (8003428 <HAL_TIM_Base_MspInit+0x84>)
 80033f8:	f043 0302 	orr.w	r3, r3, #2
 80033fc:	6453      	str	r3, [r2, #68]	; 0x44
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <HAL_TIM_Base_MspInit+0x84>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800340a:	2200      	movs	r2, #0
 800340c:	2100      	movs	r1, #0
 800340e:	202c      	movs	r0, #44	; 0x2c
 8003410:	f000 ff35 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003414:	202c      	movs	r0, #44	; 0x2c
 8003416:	f000 ff4e 	bl	80042b6 <HAL_NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40010000 	.word	0x40010000
 8003428:	40023800 	.word	0x40023800
 800342c:	40010400 	.word	0x40010400

08003430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	60da      	str	r2, [r3, #12]
 8003446:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a54      	ldr	r2, [pc, #336]	; (80035a0 <HAL_UART_MspInit+0x170>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d12d      	bne.n	80034ae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	623b      	str	r3, [r7, #32]
 8003456:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <HAL_UART_MspInit+0x174>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <HAL_UART_MspInit+0x174>)
 800345c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003460:	6413      	str	r3, [r2, #64]	; 0x40
 8003462:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <HAL_UART_MspInit+0x174>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800346a:	623b      	str	r3, [r7, #32]
 800346c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	4b4c      	ldr	r3, [pc, #304]	; (80035a4 <HAL_UART_MspInit+0x174>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a4b      	ldr	r2, [pc, #300]	; (80035a4 <HAL_UART_MspInit+0x174>)
 8003478:	f043 0304 	orr.w	r3, r3, #4
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b49      	ldr	r3, [pc, #292]	; (80035a4 <HAL_UART_MspInit+0x174>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	61fb      	str	r3, [r7, #28]
 8003488:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800348a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003498:	2303      	movs	r3, #3
 800349a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800349c:	2308      	movs	r3, #8
 800349e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a4:	4619      	mov	r1, r3
 80034a6:	4840      	ldr	r0, [pc, #256]	; (80035a8 <HAL_UART_MspInit+0x178>)
 80034a8:	f001 fc2a 	bl	8004d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034ac:	e073      	b.n	8003596 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3e      	ldr	r2, [pc, #248]	; (80035ac <HAL_UART_MspInit+0x17c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d134      	bne.n	8003522 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <HAL_UART_MspInit+0x174>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	4a38      	ldr	r2, [pc, #224]	; (80035a4 <HAL_UART_MspInit+0x174>)
 80034c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c6:	6413      	str	r3, [r2, #64]	; 0x40
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_UART_MspInit+0x174>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	61bb      	str	r3, [r7, #24]
 80034d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_UART_MspInit+0x174>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	4a31      	ldr	r2, [pc, #196]	; (80035a4 <HAL_UART_MspInit+0x174>)
 80034de:	f043 0308 	orr.w	r3, r3, #8
 80034e2:	6313      	str	r3, [r2, #48]	; 0x30
 80034e4:	4b2f      	ldr	r3, [pc, #188]	; (80035a4 <HAL_UART_MspInit+0x174>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NEXTION_TX_Pin|NEXTION_RX_Pin;
 80034f0:	2360      	movs	r3, #96	; 0x60
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fc:	2303      	movs	r3, #3
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003500:	2307      	movs	r3, #7
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003508:	4619      	mov	r1, r3
 800350a:	4829      	ldr	r0, [pc, #164]	; (80035b0 <HAL_UART_MspInit+0x180>)
 800350c:	f001 fbf8 	bl	8004d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003510:	2200      	movs	r2, #0
 8003512:	2100      	movs	r1, #0
 8003514:	2026      	movs	r0, #38	; 0x26
 8003516:	f000 feb2 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800351a:	2026      	movs	r0, #38	; 0x26
 800351c:	f000 fecb 	bl	80042b6 <HAL_NVIC_EnableIRQ>
}
 8003520:	e039      	b.n	8003596 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <HAL_UART_MspInit+0x184>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d134      	bne.n	8003596 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_UART_MspInit+0x174>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_UART_MspInit+0x174>)
 8003536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800353a:	6413      	str	r3, [r2, #64]	; 0x40
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_UART_MspInit+0x174>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_UART_MspInit+0x174>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_UART_MspInit+0x174>)
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	6313      	str	r3, [r2, #48]	; 0x30
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_UART_MspInit+0x174>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_CARD_TX_Pin|SD_CARD_RX_Pin;
 8003564:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356a:	2302      	movs	r3, #2
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003572:	2303      	movs	r3, #3
 8003574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003576:	2307      	movs	r3, #7
 8003578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800357a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357e:	4619      	mov	r1, r3
 8003580:	480d      	ldr	r0, [pc, #52]	; (80035b8 <HAL_UART_MspInit+0x188>)
 8003582:	f001 fbbd 	bl	8004d00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	2027      	movs	r0, #39	; 0x27
 800358c:	f000 fe77 	bl	800427e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003590:	2027      	movs	r0, #39	; 0x27
 8003592:	f000 fe90 	bl	80042b6 <HAL_NVIC_EnableIRQ>
}
 8003596:	bf00      	nop
 8003598:	3738      	adds	r7, #56	; 0x38
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40004c00 	.word	0x40004c00
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40020800 	.word	0x40020800
 80035ac:	40004400 	.word	0x40004400
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40004800 	.word	0x40004800
 80035b8:	40020400 	.word	0x40020400

080035bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035c0:	e7fe      	b.n	80035c0 <NMI_Handler+0x4>

080035c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c2:	b480      	push	{r7}
 80035c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c6:	e7fe      	b.n	80035c6 <HardFault_Handler+0x4>

080035c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035cc:	e7fe      	b.n	80035cc <MemManage_Handler+0x4>

080035ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ce:	b480      	push	{r7}
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d2:	e7fe      	b.n	80035d2 <BusFault_Handler+0x4>

080035d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d8:	e7fe      	b.n	80035d8 <UsageFault_Handler+0x4>

080035da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <SysTick_Handler+0x38>)
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <SysTick_Handler+0x18>
	   Timer1--;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <SysTick_Handler+0x38>)
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <SysTick_Handler+0x38>)
 800361a:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <SysTick_Handler+0x3c>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <SysTick_Handler+0x2c>
	   Timer2--;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <SysTick_Handler+0x3c>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	4b04      	ldr	r3, [pc, #16]	; (8003640 <SysTick_Handler+0x3c>)
 800362e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003630:	f000 f8fe 	bl	8003830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003634:	f000 fe59 	bl	80042ea <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200000a4 	.word	0x200000a4
 8003640:	200000a6 	.word	0x200000a6

08003644 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800364a:	f002 febf 	bl	80063cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000222c 	.word	0x2000222c

08003658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <USART2_IRQHandler+0x10>)
 800365e:	f003 fb6b 	bl	8006d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20002304 	.word	0x20002304

0800366c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <USART3_IRQHandler+0x10>)
 8003672:	f003 fb61 	bl	8006d38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	2000234c 	.word	0x2000234c

08003680 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003686:	f002 fea1 	bl	80063cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20002274 	.word	0x20002274

08003694 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003698:	4802      	ldr	r0, [pc, #8]	; (80036a4 <DMA2_Stream0_IRQHandler+0x10>)
 800369a:	f001 f8c7 	bl	800482c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200021b8 	.word	0x200021b8

080036a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <_sbrk+0x5c>)
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <_sbrk+0x60>)
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <_sbrk+0x64>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <_sbrk+0x64>)
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <_sbrk+0x68>)
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d207      	bcs.n	80036e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d8:	f007 fbce 	bl	800ae78 <__errno>
 80036dc:	4603      	mov	r3, r0
 80036de:	220c      	movs	r2, #12
 80036e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	e009      	b.n	80036fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <_sbrk+0x64>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <_sbrk+0x64>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	4a05      	ldr	r2, [pc, #20]	; (800370c <_sbrk+0x64>)
 80036f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20020000 	.word	0x20020000
 8003708:	00000400 	.word	0x00000400
 800370c:	2000262c 	.word	0x2000262c
 8003710:	200029b8 	.word	0x200029b8

08003714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <SystemInit+0x20>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <SystemInit+0x20>)
 8003720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003770 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800373c:	f7ff ffea 	bl	8003714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003740:	480c      	ldr	r0, [pc, #48]	; (8003774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003742:	490d      	ldr	r1, [pc, #52]	; (8003778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003744:	4a0d      	ldr	r2, [pc, #52]	; (800377c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003748:	e002      	b.n	8003750 <LoopCopyDataInit>

0800374a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800374a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800374c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800374e:	3304      	adds	r3, #4

08003750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003754:	d3f9      	bcc.n	800374a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003758:	4c0a      	ldr	r4, [pc, #40]	; (8003784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800375c:	e001      	b.n	8003762 <LoopFillZerobss>

0800375e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800375e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003760:	3204      	adds	r2, #4

08003762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003764:	d3fb      	bcc.n	800375e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003766:	f007 fb8d 	bl	800ae84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376a:	f7fe ffc1 	bl	80026f0 <main>
  bx  lr    
 800376e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003778:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800377c:	0800be84 	.word	0x0800be84
  ldr r2, =_sbss
 8003780:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003784:	200029b8 	.word	0x200029b8

08003788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003788:	e7fe      	b.n	8003788 <ADC_IRQHandler>
	...

0800378c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003790:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0d      	ldr	r2, [pc, #52]	; (80037cc <HAL_Init+0x40>)
 8003796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800379c:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_Init+0x40>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_Init+0x40>)
 80037a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a07      	ldr	r2, [pc, #28]	; (80037cc <HAL_Init+0x40>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b4:	2003      	movs	r0, #3
 80037b6:	f000 fd57 	bl	8004268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f000 f808 	bl	80037d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c0:	f7ff fc8c 	bl	80030dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023c00 	.word	0x40023c00

080037d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_InitTick+0x54>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_InitTick+0x58>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fd6f 	bl	80042d2 <HAL_SYSTICK_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00e      	b.n	800381c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d80a      	bhi.n	800381a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003804:	2200      	movs	r2, #0
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	f000 fd37 	bl	800427e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003810:	4a06      	ldr	r2, [pc, #24]	; (800382c <HAL_InitTick+0x5c>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e000      	b.n	800381c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000008 	.word	0x20000008
 8003828:	20000010 	.word	0x20000010
 800382c:	2000000c 	.word	0x2000000c

08003830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_IncTick+0x20>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_IncTick+0x24>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4413      	add	r3, r2
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <HAL_IncTick+0x24>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000010 	.word	0x20000010
 8003854:	20002630 	.word	0x20002630

08003858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return uwTick;
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_GetTick+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20002630 	.word	0x20002630

08003870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff ffee 	bl	8003858 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d005      	beq.n	8003896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388a:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <HAL_Delay+0x44>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003896:	bf00      	nop
 8003898:	f7ff ffde 	bl	8003858 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d8f7      	bhi.n	8003898 <HAL_Delay+0x28>
  {
  }
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000010 	.word	0x20000010

080038b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e033      	b.n	8003936 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fc28 	bl	800312c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038fe:	f023 0302 	bic.w	r3, r3, #2
 8003902:	f043 0202 	orr.w	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa5e 	bl	8003dcc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	f043 0201 	orr.w	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
 8003926:	e001      	b.n	800392c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_ADC_Start_DMA+0x1e>
 800395a:	2302      	movs	r3, #2
 800395c:	e0e9      	b.n	8003b32 <HAL_ADC_Start_DMA+0x1f2>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d018      	beq.n	80039a6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003984:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_ADC_Start_DMA+0x1fc>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6d      	ldr	r2, [pc, #436]	; (8003b40 <HAL_ADC_Start_DMA+0x200>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	0c9a      	lsrs	r2, r3, #18
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003998:	e002      	b.n	80039a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	3b01      	subs	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f9      	bne.n	800399a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b4:	d107      	bne.n	80039c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	f040 80a1 	bne.w	8003b18 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a14:	d106      	bne.n	8003a24 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f023 0206 	bic.w	r2, r3, #6
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
 8003a22:	e002      	b.n	8003a2a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a32:	4b44      	ldr	r3, [pc, #272]	; (8003b44 <HAL_ADC_Start_DMA+0x204>)
 8003a34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	4a43      	ldr	r2, [pc, #268]	; (8003b48 <HAL_ADC_Start_DMA+0x208>)
 8003a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a42:	4a42      	ldr	r2, [pc, #264]	; (8003b4c <HAL_ADC_Start_DMA+0x20c>)
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	4a41      	ldr	r2, [pc, #260]	; (8003b50 <HAL_ADC_Start_DMA+0x210>)
 8003a4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a66:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a76:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	334c      	adds	r3, #76	; 0x4c
 8003a82:	4619      	mov	r1, r3
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f000 fde6 	bl	8004658 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d12a      	bne.n	8003aee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a2d      	ldr	r2, [pc, #180]	; (8003b54 <HAL_ADC_Start_DMA+0x214>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d015      	beq.n	8003ace <HAL_ADC_Start_DMA+0x18e>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <HAL_ADC_Start_DMA+0x218>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d105      	bne.n	8003ab8 <HAL_ADC_Start_DMA+0x178>
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_ADC_Start_DMA+0x204>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <HAL_ADC_Start_DMA+0x21c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d136      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
 8003ac2:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_ADC_Start_DMA+0x204>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d130      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d129      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e020      	b.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <HAL_ADC_Start_DMA+0x214>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d11b      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d114      	bne.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	e00b      	b.n	8003b30 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	f043 0210 	orr.w	r2, r3, #16
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	20000008 	.word	0x20000008
 8003b40:	431bde83 	.word	0x431bde83
 8003b44:	40012300 	.word	0x40012300
 8003b48:	08003fc5 	.word	0x08003fc5
 8003b4c:	0800407f 	.word	0x0800407f
 8003b50:	0800409b 	.word	0x0800409b
 8003b54:	40012000 	.word	0x40012000
 8003b58:	40012100 	.word	0x40012100
 8003b5c:	40012200 	.word	0x40012200

08003b60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADC_ConfigChannel+0x1c>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e105      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x228>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	d925      	bls.n	8003c00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68d9      	ldr	r1, [r3, #12]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	4413      	add	r3, r2
 8003bc8:	3b1e      	subs	r3, #30
 8003bca:	2207      	movs	r2, #7
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43da      	mvns	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68d9      	ldr	r1, [r3, #12]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	4618      	mov	r0, r3
 8003bec:	4603      	mov	r3, r0
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	4403      	add	r3, r0
 8003bf2:	3b1e      	subs	r3, #30
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	60da      	str	r2, [r3, #12]
 8003bfe:	e022      	b.n	8003c46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6919      	ldr	r1, [r3, #16]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4613      	mov	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4413      	add	r3, r2
 8003c14:	2207      	movs	r2, #7
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43da      	mvns	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	400a      	ands	r2, r1
 8003c22:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6919      	ldr	r1, [r3, #16]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	4618      	mov	r0, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4403      	add	r3, r0
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b06      	cmp	r3, #6
 8003c4c:	d824      	bhi.n	8003c98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	3b05      	subs	r3, #5
 8003c60:	221f      	movs	r2, #31
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43da      	mvns	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	3b05      	subs	r3, #5
 8003c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34
 8003c96:	e04c      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d824      	bhi.n	8003cea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	3b23      	subs	r3, #35	; 0x23
 8003cb2:	221f      	movs	r2, #31
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	43da      	mvns	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	3b23      	subs	r3, #35	; 0x23
 8003cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce8:	e023      	b.n	8003d32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b41      	subs	r3, #65	; 0x41
 8003cfc:	221f      	movs	r2, #31
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43da      	mvns	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	400a      	ands	r2, r1
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	3b41      	subs	r3, #65	; 0x41
 8003d26:	fa00 f203 	lsl.w	r2, r0, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <HAL_ADC_ConfigChannel+0x234>)
 8003d34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <HAL_ADC_ConfigChannel+0x238>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d109      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x1cc>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b12      	cmp	r3, #18
 8003d46:	d105      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <HAL_ADC_ConfigChannel+0x238>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d123      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x21e>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d003      	beq.n	8003d6e <HAL_ADC_ConfigChannel+0x1e6>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b11      	cmp	r3, #17
 8003d6c:	d11b      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b10      	cmp	r3, #16
 8003d80:	d111      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_ADC_ConfigChannel+0x23c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a10      	ldr	r2, [pc, #64]	; (8003dc8 <HAL_ADC_ConfigChannel+0x240>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	0c9a      	lsrs	r2, r3, #18
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003d98:	e002      	b.n	8003da0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f9      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40012300 	.word	0x40012300
 8003dc0:	40012000 	.word	0x40012000
 8003dc4:	20000008 	.word	0x20000008
 8003dc8:	431bde83 	.word	0x431bde83

08003dcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003dd4:	4b79      	ldr	r3, [pc, #484]	; (8003fbc <ADC_Init+0x1f0>)
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6859      	ldr	r1, [r3, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	021a      	lsls	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6899      	ldr	r1, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	4a58      	ldr	r2, [pc, #352]	; (8003fc0 <ADC_Init+0x1f4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d022      	beq.n	8003eaa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6899      	ldr	r1, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6899      	ldr	r1, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	e00f      	b.n	8003eca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ec8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0202 	bic.w	r2, r2, #2
 8003ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	7e1b      	ldrb	r3, [r3, #24]
 8003ee4:	005a      	lsls	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d01b      	beq.n	8003f30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f06:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	3b01      	subs	r3, #1
 8003f24:	035a      	lsls	r2, r3, #13
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	e007      	b.n	8003f40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	051a      	lsls	r2, r3, #20
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f82:	025a      	lsls	r2, r3, #9
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6899      	ldr	r1, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	029a      	lsls	r2, r3, #10
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40012300 	.word	0x40012300
 8003fc0:	0f000001 	.word	0x0f000001

08003fc4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d13c      	bne.n	8004058 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d12b      	bne.n	8004050 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d127      	bne.n	8004050 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004018:	2b00      	cmp	r3, #0
 800401a:	d119      	bne.n	8004050 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0220 	bic.w	r2, r2, #32
 800402a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7fd fdf9 	bl	8001c48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004056:	e00e      	b.n	8004076 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff fd85 	bl	8003b74 <HAL_ADC_ErrorCallback>
}
 800406a:	e004      	b.n	8004076 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff fd67 	bl	8003b60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2240      	movs	r2, #64	; 0x40
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff fd5a 	bl	8003b74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e4:	4013      	ands	r3, r2
 80040e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fa:	4a04      	ldr	r2, [pc, #16]	; (800410c <__NVIC_SetPriorityGrouping+0x44>)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	60d3      	str	r3, [r2, #12]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__NVIC_GetPriorityGrouping+0x18>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	0a1b      	lsrs	r3, r3, #8
 800411a:	f003 0307 	and.w	r3, r3, #7
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	2b00      	cmp	r3, #0
 800413c:	db0b      	blt.n	8004156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	4907      	ldr	r1, [pc, #28]	; (8004164 <__NVIC_EnableIRQ+0x38>)
 8004146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2001      	movs	r0, #1
 800414e:	fa00 f202 	lsl.w	r2, r0, r2
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	e000e100 	.word	0xe000e100

08004168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004178:	2b00      	cmp	r3, #0
 800417a:	db0a      	blt.n	8004192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	490c      	ldr	r1, [pc, #48]	; (80041b4 <__NVIC_SetPriority+0x4c>)
 8004182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	440b      	add	r3, r1
 800418c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004190:	e00a      	b.n	80041a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4908      	ldr	r1, [pc, #32]	; (80041b8 <__NVIC_SetPriority+0x50>)
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	3b04      	subs	r3, #4
 80041a0:	0112      	lsls	r2, r2, #4
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	761a      	strb	r2, [r3, #24]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000e100 	.word	0xe000e100
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f1c3 0307 	rsb	r3, r3, #7
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf28      	it	cs
 80041da:	2304      	movcs	r3, #4
 80041dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3304      	adds	r3, #4
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d902      	bls.n	80041ec <NVIC_EncodePriority+0x30>
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3b03      	subs	r3, #3
 80041ea:	e000      	b.n	80041ee <NVIC_EncodePriority+0x32>
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	f04f 32ff 	mov.w	r2, #4294967295
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	401a      	ands	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004204:	f04f 31ff 	mov.w	r1, #4294967295
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa01 f303 	lsl.w	r3, r1, r3
 800420e:	43d9      	mvns	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004214:	4313      	orrs	r3, r2
         );
}
 8004216:	4618      	mov	r0, r3
 8004218:	3724      	adds	r7, #36	; 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
	...

08004224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004234:	d301      	bcc.n	800423a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004236:	2301      	movs	r3, #1
 8004238:	e00f      	b.n	800425a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800423a:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <SysTick_Config+0x40>)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004242:	210f      	movs	r1, #15
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	f7ff ff8e 	bl	8004168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <SysTick_Config+0x40>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <SysTick_Config+0x40>)
 8004254:	2207      	movs	r2, #7
 8004256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	e000e010 	.word	0xe000e010

08004268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff29 	bl	80040c8 <__NVIC_SetPriorityGrouping>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004290:	f7ff ff3e 	bl	8004110 <__NVIC_GetPriorityGrouping>
 8004294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68b9      	ldr	r1, [r7, #8]
 800429a:	6978      	ldr	r0, [r7, #20]
 800429c:	f7ff ff8e 	bl	80041bc <NVIC_EncodePriority>
 80042a0:	4602      	mov	r2, r0
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	4611      	mov	r1, r2
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff5d 	bl	8004168 <__NVIC_SetPriority>
}
 80042ae:	bf00      	nop
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7ff ff31 	bl	800412c <__NVIC_EnableIRQ>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff ffa2 	bl	8004224 <SysTick_Config>
 80042e0:	4603      	mov	r3, r0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80042ee:	f000 f802 	bl	80042f6 <HAL_SYSTICK_Callback>
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80042f6:	b480      	push	{r7}
 80042f8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e014      	b.n	8004340 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	791b      	ldrb	r3, [r3, #4]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	d105      	bne.n	800432c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fe ffb0 	bl	800328c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e046      	b.n	80043ea <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	795b      	ldrb	r3, [r3, #5]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_DAC_Start+0x20>
 8004364:	2302      	movs	r3, #2
 8004366:	e040      	b.n	80043ea <HAL_DAC_Start+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6819      	ldr	r1, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2201      	movs	r2, #1
 8004382:	409a      	lsls	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800439c:	2b3c      	cmp	r3, #60	; 0x3c
 800439e:	d11d      	bne.n	80043dc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	e014      	b.n	80043dc <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f003 0310 	and.w	r3, r3, #16
 80043c2:	213c      	movs	r1, #60	; 0x3c
 80043c4:	fa01 f303 	lsl.w	r3, r1, r3
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d107      	bne.n	80043dc <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0202 	orr.w	r2, r2, #2
 80043da:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e015      	b.n	800443e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d105      	bne.n	800442a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3308      	adds	r3, #8
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	e004      	b.n	8004434 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4413      	add	r3, r2
 8004430:	3314      	adds	r3, #20
 8004432:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	461a      	mov	r2, r3
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800444a:	b480      	push	{r7}
 800444c:	b089      	sub	sp, #36	; 0x24
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_DAC_ConfigChannel+0x1c>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e042      	b.n	80044f0 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	795b      	ldrb	r3, [r3, #5]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <HAL_DAC_ConfigChannel+0x2c>
 8004472:	2302      	movs	r3, #2
 8004474:	e03c      	b.n	80044f0 <HAL_DAC_ConfigChannel+0xa6>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2202      	movs	r2, #2
 8004480:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f003 0310 	and.w	r3, r3, #16
 8004490:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	22c0      	movs	r2, #192	; 0xc0
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43da      	mvns	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	400a      	ands	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80044ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3724      	adds	r7, #36	; 0x24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004508:	f7ff f9a6 	bl	8003858 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e099      	b.n	800464c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004538:	e00f      	b.n	800455a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800453a:	f7ff f98d 	bl	8003858 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b05      	cmp	r3, #5
 8004546:	d908      	bls.n	800455a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2203      	movs	r2, #3
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e078      	b.n	800464c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e8      	bne.n	800453a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4b38      	ldr	r3, [pc, #224]	; (8004654 <HAL_DMA_Init+0x158>)
 8004574:	4013      	ands	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004586:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800459e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d107      	bne.n	80045c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4313      	orrs	r3, r2
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d117      	bne.n	800461e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00e      	beq.n	800461e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fb01 	bl	8004c08 <DMA_CheckFifoParam>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d008      	beq.n	800461e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2240      	movs	r2, #64	; 0x40
 8004610:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800461a:	2301      	movs	r3, #1
 800461c:	e016      	b.n	800464c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fab8 	bl	8004b9c <DMA_CalcBaseAndBitshift>
 800462c:	4603      	mov	r3, r0
 800462e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	223f      	movs	r2, #63	; 0x3f
 8004636:	409a      	lsls	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	f010803f 	.word	0xf010803f

08004658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_DMA_Start_IT+0x26>
 800467a:	2302      	movs	r3, #2
 800467c:	e040      	b.n	8004700 <HAL_DMA_Start_IT+0xa8>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b01      	cmp	r3, #1
 8004690:	d12f      	bne.n	80046f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2202      	movs	r2, #2
 8004696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fa4a 	bl	8004b40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	223f      	movs	r2, #63	; 0x3f
 80046b2:	409a      	lsls	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0216 	orr.w	r2, r2, #22
 80046c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d007      	beq.n	80046e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0208 	orr.w	r2, r2, #8
 80046de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e005      	b.n	80046fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
 80046fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004716:	f7ff f89f 	bl	8003858 <HAL_GetTick>
 800471a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d008      	beq.n	800473a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2280      	movs	r2, #128	; 0x80
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e052      	b.n	80047e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0216 	bic.w	r2, r2, #22
 8004748:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004758:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d103      	bne.n	800476a <HAL_DMA_Abort+0x62>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	d007      	beq.n	800477a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0208 	bic.w	r2, r2, #8
 8004778:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478a:	e013      	b.n	80047b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800478c:	f7ff f864 	bl	8003858 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b05      	cmp	r3, #5
 8004798:	d90c      	bls.n	80047b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2203      	movs	r2, #3
 80047a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e015      	b.n	80047e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e4      	bne.n	800478c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c6:	223f      	movs	r2, #63	; 0x3f
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2280      	movs	r2, #128	; 0x80
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e00c      	b.n	8004820 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2205      	movs	r2, #5
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0201 	bic.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004838:	4b8e      	ldr	r3, [pc, #568]	; (8004a74 <HAL_DMA_IRQHandler+0x248>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a8e      	ldr	r2, [pc, #568]	; (8004a78 <HAL_DMA_IRQHandler+0x24c>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	0a9b      	lsrs	r3, r3, #10
 8004844:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	2208      	movs	r2, #8
 8004858:	409a      	lsls	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01a      	beq.n	8004898 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d013      	beq.n	8004898 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0204 	bic.w	r2, r2, #4
 800487e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	2208      	movs	r2, #8
 8004886:	409a      	lsls	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	f043 0201 	orr.w	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489c:	2201      	movs	r2, #1
 800489e:	409a      	lsls	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d012      	beq.n	80048ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	2201      	movs	r2, #1
 80048bc:	409a      	lsls	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f043 0202 	orr.w	r2, r3, #2
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d2:	2204      	movs	r2, #4
 80048d4:	409a      	lsls	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d012      	beq.n	8004904 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	2204      	movs	r2, #4
 80048f2:	409a      	lsls	r2, r3
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	f043 0204 	orr.w	r2, r3, #4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	2210      	movs	r2, #16
 800490a:	409a      	lsls	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d043      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d03c      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	2210      	movs	r2, #16
 8004928:	409a      	lsls	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d018      	beq.n	800496e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d108      	bne.n	800495c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d024      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
 800495a:	e01f      	b.n	800499c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	4798      	blx	r3
 800496c:	e016      	b.n	800499c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d107      	bne.n	800498c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0208 	bic.w	r2, r2, #8
 800498a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a0:	2220      	movs	r2, #32
 80049a2:	409a      	lsls	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 808f 	beq.w	8004acc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8087 	beq.w	8004acc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c2:	2220      	movs	r2, #32
 80049c4:	409a      	lsls	r2, r3
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d136      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0216 	bic.w	r2, r2, #22
 80049e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695a      	ldr	r2, [r3, #20]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <HAL_DMA_IRQHandler+0x1da>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0208 	bic.w	r2, r2, #8
 8004a14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1a:	223f      	movs	r2, #63	; 0x3f
 8004a1c:	409a      	lsls	r2, r3
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d07e      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	4798      	blx	r3
        }
        return;
 8004a42:	e079      	b.n	8004b38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01d      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10d      	bne.n	8004a7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d031      	beq.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
 8004a70:	e02c      	b.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
 8004a72:	bf00      	nop
 8004a74:	20000008 	.word	0x20000008
 8004a78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d023      	beq.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
 8004a8c:	e01e      	b.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10f      	bne.n	8004abc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0210 	bic.w	r2, r2, #16
 8004aaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d032      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d022      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d307      	bcc.n	8004b14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f2      	bne.n	8004af8 <HAL_DMA_IRQHandler+0x2cc>
 8004b12:	e000      	b.n	8004b16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
 8004b36:	e000      	b.n	8004b3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b38:	bf00      	nop
    }
  }
}
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d108      	bne.n	8004b80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b7e:	e007      	b.n	8004b90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	60da      	str	r2, [r3, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	3b10      	subs	r3, #16
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <DMA_CalcBaseAndBitshift+0x64>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bb6:	4a13      	ldr	r2, [pc, #76]	; (8004c04 <DMA_CalcBaseAndBitshift+0x68>)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d909      	bls.n	8004bde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	659a      	str	r2, [r3, #88]	; 0x58
 8004bdc:	e007      	b.n	8004bee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	aaaaaaab 	.word	0xaaaaaaab
 8004c04:	0800b9f8 	.word	0x0800b9f8

08004c08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11f      	bne.n	8004c62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b03      	cmp	r3, #3
 8004c26:	d856      	bhi.n	8004cd6 <DMA_CheckFifoParam+0xce>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <DMA_CheckFifoParam+0x28>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c41 	.word	0x08004c41
 8004c34:	08004c53 	.word	0x08004c53
 8004c38:	08004c41 	.word	0x08004c41
 8004c3c:	08004cd7 	.word	0x08004cd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d046      	beq.n	8004cda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e043      	b.n	8004cda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c5a:	d140      	bne.n	8004cde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e03d      	b.n	8004cde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6a:	d121      	bne.n	8004cb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d837      	bhi.n	8004ce2 <DMA_CheckFifoParam+0xda>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <DMA_CheckFifoParam+0x70>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c8f 	.word	0x08004c8f
 8004c80:	08004c89 	.word	0x08004c89
 8004c84:	08004ca1 	.word	0x08004ca1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8c:	e030      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d025      	beq.n	8004ce6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c9e:	e022      	b.n	8004ce6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca8:	d11f      	bne.n	8004cea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cae:	e01c      	b.n	8004cea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d903      	bls.n	8004cbe <DMA_CheckFifoParam+0xb6>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d003      	beq.n	8004cc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cbc:	e018      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc2:	e015      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00e      	beq.n	8004cee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e00b      	b.n	8004cee <DMA_CheckFifoParam+0xe6>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e00a      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e008      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e006      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e004      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e002      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
    }
  } 
  
  return status; 
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop

08004d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	; 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e16b      	b.n	8004ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	f040 815a 	bne.w	8004fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d005      	beq.n	8004d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d130      	bne.n	8004db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d88:	2201      	movs	r2, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 0201 	and.w	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d017      	beq.n	8004df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d123      	bne.n	8004e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	08da      	lsrs	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3208      	adds	r2, #8
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	220f      	movs	r2, #15
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	08da      	lsrs	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3208      	adds	r2, #8
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2203      	movs	r2, #3
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0203 	and.w	r2, r3, #3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80b4 	beq.w	8004fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	4b60      	ldr	r3, [pc, #384]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	4a5f      	ldr	r2, [pc, #380]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e94:	6453      	str	r3, [r2, #68]	; 0x44
 8004e96:	4b5d      	ldr	r3, [pc, #372]	; (800500c <HAL_GPIO_Init+0x30c>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea2:	4a5b      	ldr	r2, [pc, #364]	; (8005010 <HAL_GPIO_Init+0x310>)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	220f      	movs	r2, #15
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a52      	ldr	r2, [pc, #328]	; (8005014 <HAL_GPIO_Init+0x314>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d02b      	beq.n	8004f26 <HAL_GPIO_Init+0x226>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a51      	ldr	r2, [pc, #324]	; (8005018 <HAL_GPIO_Init+0x318>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d025      	beq.n	8004f22 <HAL_GPIO_Init+0x222>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a50      	ldr	r2, [pc, #320]	; (800501c <HAL_GPIO_Init+0x31c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01f      	beq.n	8004f1e <HAL_GPIO_Init+0x21e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a4f      	ldr	r2, [pc, #316]	; (8005020 <HAL_GPIO_Init+0x320>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d019      	beq.n	8004f1a <HAL_GPIO_Init+0x21a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a4e      	ldr	r2, [pc, #312]	; (8005024 <HAL_GPIO_Init+0x324>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_GPIO_Init+0x216>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a4d      	ldr	r2, [pc, #308]	; (8005028 <HAL_GPIO_Init+0x328>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00d      	beq.n	8004f12 <HAL_GPIO_Init+0x212>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a4c      	ldr	r2, [pc, #304]	; (800502c <HAL_GPIO_Init+0x32c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <HAL_GPIO_Init+0x20e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4b      	ldr	r2, [pc, #300]	; (8005030 <HAL_GPIO_Init+0x330>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <HAL_GPIO_Init+0x20a>
 8004f06:	2307      	movs	r3, #7
 8004f08:	e00e      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	e00c      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f0e:	2306      	movs	r3, #6
 8004f10:	e00a      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f12:	2305      	movs	r3, #5
 8004f14:	e008      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e006      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e004      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e002      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <HAL_GPIO_Init+0x228>
 8004f26:	2300      	movs	r3, #0
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	f002 0203 	and.w	r2, r2, #3
 8004f2e:	0092      	lsls	r2, r2, #2
 8004f30:	4093      	lsls	r3, r2
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f38:	4935      	ldr	r1, [pc, #212]	; (8005010 <HAL_GPIO_Init+0x310>)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	3302      	adds	r3, #2
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f46:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f6a:	4a32      	ldr	r2, [pc, #200]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f70:	4b30      	ldr	r3, [pc, #192]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f9a:	4b26      	ldr	r3, [pc, #152]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fe8:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_GPIO_Init+0x334>)
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	f67f ae90 	bls.w	8004d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	3724      	adds	r7, #36	; 0x24
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800
 8005010:	40013800 	.word	0x40013800
 8005014:	40020000 	.word	0x40020000
 8005018:	40020400 	.word	0x40020400
 800501c:	40020800 	.word	0x40020800
 8005020:	40020c00 	.word	0x40020c00
 8005024:	40021000 	.word	0x40021000
 8005028:	40021400 	.word	0x40021400
 800502c:	40021800 	.word	0x40021800
 8005030:	40021c00 	.word	0x40021c00
 8005034:	40013c00 	.word	0x40013c00

08005038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
 8005044:	4613      	mov	r3, r2
 8005046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005048:	787b      	ldrb	r3, [r7, #1]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005054:	e003      	b.n	800505e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	041a      	lsls	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b086      	sub	sp, #24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e267      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d075      	beq.n	8005176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800508a:	4b88      	ldr	r3, [pc, #544]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 030c 	and.w	r3, r3, #12
 8005092:	2b04      	cmp	r3, #4
 8005094:	d00c      	beq.n	80050b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005096:	4b85      	ldr	r3, [pc, #532]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d112      	bne.n	80050c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050a2:	4b82      	ldr	r3, [pc, #520]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ae:	d10b      	bne.n	80050c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b0:	4b7e      	ldr	r3, [pc, #504]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d05b      	beq.n	8005174 <HAL_RCC_OscConfig+0x108>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d157      	bne.n	8005174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e242      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d0:	d106      	bne.n	80050e0 <HAL_RCC_OscConfig+0x74>
 80050d2:	4b76      	ldr	r3, [pc, #472]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a75      	ldr	r2, [pc, #468]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e01d      	b.n	800511c <HAL_RCC_OscConfig+0xb0>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e8:	d10c      	bne.n	8005104 <HAL_RCC_OscConfig+0x98>
 80050ea:	4b70      	ldr	r3, [pc, #448]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6f      	ldr	r2, [pc, #444]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80050f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	4b6d      	ldr	r3, [pc, #436]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a6c      	ldr	r2, [pc, #432]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80050fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	e00b      	b.n	800511c <HAL_RCC_OscConfig+0xb0>
 8005104:	4b69      	ldr	r3, [pc, #420]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a68      	ldr	r2, [pc, #416]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 800510a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	4b66      	ldr	r3, [pc, #408]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a65      	ldr	r2, [pc, #404]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800511a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d013      	beq.n	800514c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005124:	f7fe fb98 	bl	8003858 <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512a:	e008      	b.n	800513e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800512c:	f7fe fb94 	bl	8003858 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	2b64      	cmp	r3, #100	; 0x64
 8005138:	d901      	bls.n	800513e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e207      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513e:	4b5b      	ldr	r3, [pc, #364]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <HAL_RCC_OscConfig+0xc0>
 800514a:	e014      	b.n	8005176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fe fb84 	bl	8003858 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005154:	f7fe fb80 	bl	8003858 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b64      	cmp	r3, #100	; 0x64
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e1f3      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005166:	4b51      	ldr	r3, [pc, #324]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0xe8>
 8005172:	e000      	b.n	8005176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d063      	beq.n	800524a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005182:	4b4a      	ldr	r3, [pc, #296]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 030c 	and.w	r3, r3, #12
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00b      	beq.n	80051a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518e:	4b47      	ldr	r3, [pc, #284]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005196:	2b08      	cmp	r3, #8
 8005198:	d11c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800519a:	4b44      	ldr	r3, [pc, #272]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d116      	bne.n	80051d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a6:	4b41      	ldr	r3, [pc, #260]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d005      	beq.n	80051be <HAL_RCC_OscConfig+0x152>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d001      	beq.n	80051be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e1c7      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051be:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4937      	ldr	r1, [pc, #220]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d2:	e03a      	b.n	800524a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051dc:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <HAL_RCC_OscConfig+0x244>)
 80051de:	2201      	movs	r2, #1
 80051e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e2:	f7fe fb39 	bl	8003858 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ea:	f7fe fb35 	bl	8003858 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e1a8      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fc:	4b2b      	ldr	r3, [pc, #172]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005208:	4b28      	ldr	r3, [pc, #160]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4925      	ldr	r1, [pc, #148]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005218:	4313      	orrs	r3, r2
 800521a:	600b      	str	r3, [r1, #0]
 800521c:	e015      	b.n	800524a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800521e:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <HAL_RCC_OscConfig+0x244>)
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005224:	f7fe fb18 	bl	8003858 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800522c:	f7fe fb14 	bl	8003858 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e187      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523e:	4b1b      	ldr	r3, [pc, #108]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f0      	bne.n	800522c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0308 	and.w	r3, r3, #8
 8005252:	2b00      	cmp	r3, #0
 8005254:	d036      	beq.n	80052c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800525e:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <HAL_RCC_OscConfig+0x248>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fe faf8 	bl	8003858 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800526c:	f7fe faf4 	bl	8003858 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e167      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527e:	4b0b      	ldr	r3, [pc, #44]	; (80052ac <HAL_RCC_OscConfig+0x240>)
 8005280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f0      	beq.n	800526c <HAL_RCC_OscConfig+0x200>
 800528a:	e01b      	b.n	80052c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800528c:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <HAL_RCC_OscConfig+0x248>)
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005292:	f7fe fae1 	bl	8003858 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005298:	e00e      	b.n	80052b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800529a:	f7fe fadd 	bl	8003858 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d907      	bls.n	80052b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e150      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
 80052ac:	40023800 	.word	0x40023800
 80052b0:	42470000 	.word	0x42470000
 80052b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	4b88      	ldr	r3, [pc, #544]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80052ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ea      	bne.n	800529a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8097 	beq.w	8005400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d6:	4b81      	ldr	r3, [pc, #516]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	4b7d      	ldr	r3, [pc, #500]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	4a7c      	ldr	r2, [pc, #496]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80052ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f0:	6413      	str	r3, [r2, #64]	; 0x40
 80052f2:	4b7a      	ldr	r3, [pc, #488]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fa:	60bb      	str	r3, [r7, #8]
 80052fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005302:	4b77      	ldr	r3, [pc, #476]	; (80054e0 <HAL_RCC_OscConfig+0x474>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d118      	bne.n	8005340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800530e:	4b74      	ldr	r3, [pc, #464]	; (80054e0 <HAL_RCC_OscConfig+0x474>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a73      	ldr	r2, [pc, #460]	; (80054e0 <HAL_RCC_OscConfig+0x474>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531a:	f7fe fa9d 	bl	8003858 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005322:	f7fe fa99 	bl	8003858 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e10c      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005334:	4b6a      	ldr	r3, [pc, #424]	; (80054e0 <HAL_RCC_OscConfig+0x474>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0f0      	beq.n	8005322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d106      	bne.n	8005356 <HAL_RCC_OscConfig+0x2ea>
 8005348:	4b64      	ldr	r3, [pc, #400]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	4a63      	ldr	r2, [pc, #396]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	6713      	str	r3, [r2, #112]	; 0x70
 8005354:	e01c      	b.n	8005390 <HAL_RCC_OscConfig+0x324>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b05      	cmp	r3, #5
 800535c:	d10c      	bne.n	8005378 <HAL_RCC_OscConfig+0x30c>
 800535e:	4b5f      	ldr	r3, [pc, #380]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	4a5e      	ldr	r2, [pc, #376]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 8005364:	f043 0304 	orr.w	r3, r3, #4
 8005368:	6713      	str	r3, [r2, #112]	; 0x70
 800536a:	4b5c      	ldr	r3, [pc, #368]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 800536c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536e:	4a5b      	ldr	r2, [pc, #364]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 8005370:	f043 0301 	orr.w	r3, r3, #1
 8005374:	6713      	str	r3, [r2, #112]	; 0x70
 8005376:	e00b      	b.n	8005390 <HAL_RCC_OscConfig+0x324>
 8005378:	4b58      	ldr	r3, [pc, #352]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 800537a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537c:	4a57      	ldr	r2, [pc, #348]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 800537e:	f023 0301 	bic.w	r3, r3, #1
 8005382:	6713      	str	r3, [r2, #112]	; 0x70
 8005384:	4b55      	ldr	r3, [pc, #340]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a54      	ldr	r2, [pc, #336]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 800538a:	f023 0304 	bic.w	r3, r3, #4
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d015      	beq.n	80053c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005398:	f7fe fa5e 	bl	8003858 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053a0:	f7fe fa5a 	bl	8003858 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0cb      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b6:	4b49      	ldr	r3, [pc, #292]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0ee      	beq.n	80053a0 <HAL_RCC_OscConfig+0x334>
 80053c2:	e014      	b.n	80053ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c4:	f7fe fa48 	bl	8003858 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ca:	e00a      	b.n	80053e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053cc:	f7fe fa44 	bl	8003858 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e0b5      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e2:	4b3e      	ldr	r3, [pc, #248]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80053e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1ee      	bne.n	80053cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d105      	bne.n	8005400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f4:	4b39      	ldr	r3, [pc, #228]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	4a38      	ldr	r2, [pc, #224]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80053fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80a1 	beq.w	800554c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800540a:	4b34      	ldr	r3, [pc, #208]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	2b08      	cmp	r3, #8
 8005414:	d05c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d141      	bne.n	80054a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541e:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <HAL_RCC_OscConfig+0x478>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005424:	f7fe fa18 	bl	8003858 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542c:	f7fe fa14 	bl	8003858 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e087      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543e:	4b27      	ldr	r3, [pc, #156]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	69da      	ldr	r2, [r3, #28]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	431a      	orrs	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	019b      	lsls	r3, r3, #6
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	3b01      	subs	r3, #1
 8005464:	041b      	lsls	r3, r3, #16
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	061b      	lsls	r3, r3, #24
 800546e:	491b      	ldr	r1, [pc, #108]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 8005470:	4313      	orrs	r3, r2
 8005472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005474:	4b1b      	ldr	r3, [pc, #108]	; (80054e4 <HAL_RCC_OscConfig+0x478>)
 8005476:	2201      	movs	r2, #1
 8005478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547a:	f7fe f9ed 	bl	8003858 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005482:	f7fe f9e9 	bl	8003858 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e05c      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f0      	beq.n	8005482 <HAL_RCC_OscConfig+0x416>
 80054a0:	e054      	b.n	800554c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054a2:	4b10      	ldr	r3, [pc, #64]	; (80054e4 <HAL_RCC_OscConfig+0x478>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fe f9d6 	bl	8003858 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fe f9d2 	bl	8003858 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e045      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c2:	4b06      	ldr	r3, [pc, #24]	; (80054dc <HAL_RCC_OscConfig+0x470>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x444>
 80054ce:	e03d      	b.n	800554c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e038      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
 80054dc:	40023800 	.word	0x40023800
 80054e0:	40007000 	.word	0x40007000
 80054e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_RCC_OscConfig+0x4ec>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d028      	beq.n	8005548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d121      	bne.n	8005548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550e:	429a      	cmp	r2, r3
 8005510:	d11a      	bne.n	8005548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800551e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005520:	4293      	cmp	r3, r2
 8005522:	d111      	bne.n	8005548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	3b01      	subs	r3, #1
 8005532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005534:	429a      	cmp	r2, r3
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d001      	beq.n	800554c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40023800 	.word	0x40023800

0800555c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0cc      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005570:	4b68      	ldr	r3, [pc, #416]	; (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d90c      	bls.n	8005598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557e:	4b65      	ldr	r3, [pc, #404]	; (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005586:	4b63      	ldr	r3, [pc, #396]	; (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d001      	beq.n	8005598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0b8      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d020      	beq.n	80055e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055b0:	4b59      	ldr	r3, [pc, #356]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4a58      	ldr	r2, [pc, #352]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c8:	4b53      	ldr	r3, [pc, #332]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	4a52      	ldr	r2, [pc, #328]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d4:	4b50      	ldr	r3, [pc, #320]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	494d      	ldr	r1, [pc, #308]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d044      	beq.n	800567c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d107      	bne.n	800560a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	4b47      	ldr	r3, [pc, #284]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d119      	bne.n	800563a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e07f      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d003      	beq.n	800561a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005616:	2b03      	cmp	r3, #3
 8005618:	d107      	bne.n	800562a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800561a:	4b3f      	ldr	r3, [pc, #252]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e06f      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562a:	4b3b      	ldr	r3, [pc, #236]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e067      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800563a:	4b37      	ldr	r3, [pc, #220]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f023 0203 	bic.w	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4934      	ldr	r1, [pc, #208]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	4313      	orrs	r3, r2
 800564a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800564c:	f7fe f904 	bl	8003858 <HAL_GetTick>
 8005650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005652:	e00a      	b.n	800566a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005654:	f7fe f900 	bl	8003858 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005662:	4293      	cmp	r3, r2
 8005664:	d901      	bls.n	800566a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e04f      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800566a:	4b2b      	ldr	r3, [pc, #172]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 020c 	and.w	r2, r3, #12
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	429a      	cmp	r2, r3
 800567a:	d1eb      	bne.n	8005654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800567c:	4b25      	ldr	r3, [pc, #148]	; (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d20c      	bcs.n	80056a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b22      	ldr	r3, [pc, #136]	; (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b20      	ldr	r3, [pc, #128]	; (8005714 <HAL_RCC_ClockConfig+0x1b8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e032      	b.n	800570a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056b0:	4b19      	ldr	r3, [pc, #100]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4916      	ldr	r1, [pc, #88]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d009      	beq.n	80056e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ce:	4b12      	ldr	r3, [pc, #72]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	490e      	ldr	r1, [pc, #56]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056e2:	f000 f821 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80056e6:	4602      	mov	r2, r0
 80056e8:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	490a      	ldr	r1, [pc, #40]	; (800571c <HAL_RCC_ClockConfig+0x1c0>)
 80056f4:	5ccb      	ldrb	r3, [r1, r3]
 80056f6:	fa22 f303 	lsr.w	r3, r2, r3
 80056fa:	4a09      	ldr	r2, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x1c4>)
 80056fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <HAL_RCC_ClockConfig+0x1c8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe f864 	bl	80037d0 <HAL_InitTick>

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40023c00 	.word	0x40023c00
 8005718:	40023800 	.word	0x40023800
 800571c:	0800b9e0 	.word	0x0800b9e0
 8005720:	20000008 	.word	0x20000008
 8005724:	2000000c 	.word	0x2000000c

08005728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800572c:	b094      	sub	sp, #80	; 0x50
 800572e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005730:	2300      	movs	r3, #0
 8005732:	647b      	str	r3, [r7, #68]	; 0x44
 8005734:	2300      	movs	r3, #0
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	2300      	movs	r3, #0
 800573a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005740:	4b79      	ldr	r3, [pc, #484]	; (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b08      	cmp	r3, #8
 800574a:	d00d      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x40>
 800574c:	2b08      	cmp	r3, #8
 800574e:	f200 80e1 	bhi.w	8005914 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0x34>
 8005756:	2b04      	cmp	r3, #4
 8005758:	d003      	beq.n	8005762 <HAL_RCC_GetSysClockFreq+0x3a>
 800575a:	e0db      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800575c:	4b73      	ldr	r3, [pc, #460]	; (800592c <HAL_RCC_GetSysClockFreq+0x204>)
 800575e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005760:	e0db      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005762:	4b73      	ldr	r3, [pc, #460]	; (8005930 <HAL_RCC_GetSysClockFreq+0x208>)
 8005764:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005766:	e0d8      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005768:	4b6f      	ldr	r3, [pc, #444]	; (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005770:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005772:	4b6d      	ldr	r3, [pc, #436]	; (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d063      	beq.n	8005846 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577e:	4b6a      	ldr	r3, [pc, #424]	; (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	099b      	lsrs	r3, r3, #6
 8005784:	2200      	movs	r2, #0
 8005786:	63bb      	str	r3, [r7, #56]	; 0x38
 8005788:	63fa      	str	r2, [r7, #60]	; 0x3c
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005790:	633b      	str	r3, [r7, #48]	; 0x30
 8005792:	2300      	movs	r3, #0
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
 8005796:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800579a:	4622      	mov	r2, r4
 800579c:	462b      	mov	r3, r5
 800579e:	f04f 0000 	mov.w	r0, #0
 80057a2:	f04f 0100 	mov.w	r1, #0
 80057a6:	0159      	lsls	r1, r3, #5
 80057a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ac:	0150      	lsls	r0, r2, #5
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4621      	mov	r1, r4
 80057b4:	1a51      	subs	r1, r2, r1
 80057b6:	6139      	str	r1, [r7, #16]
 80057b8:	4629      	mov	r1, r5
 80057ba:	eb63 0301 	sbc.w	r3, r3, r1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057cc:	4659      	mov	r1, fp
 80057ce:	018b      	lsls	r3, r1, #6
 80057d0:	4651      	mov	r1, sl
 80057d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80057d6:	4651      	mov	r1, sl
 80057d8:	018a      	lsls	r2, r1, #6
 80057da:	4651      	mov	r1, sl
 80057dc:	ebb2 0801 	subs.w	r8, r2, r1
 80057e0:	4659      	mov	r1, fp
 80057e2:	eb63 0901 	sbc.w	r9, r3, r1
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057fa:	4690      	mov	r8, r2
 80057fc:	4699      	mov	r9, r3
 80057fe:	4623      	mov	r3, r4
 8005800:	eb18 0303 	adds.w	r3, r8, r3
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	462b      	mov	r3, r5
 8005808:	eb49 0303 	adc.w	r3, r9, r3
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800581a:	4629      	mov	r1, r5
 800581c:	024b      	lsls	r3, r1, #9
 800581e:	4621      	mov	r1, r4
 8005820:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005824:	4621      	mov	r1, r4
 8005826:	024a      	lsls	r2, r1, #9
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582e:	2200      	movs	r2, #0
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005834:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005838:	f7fb f9ae 	bl	8000b98 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005844:	e058      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005846:	4b38      	ldr	r3, [pc, #224]	; (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	099b      	lsrs	r3, r3, #6
 800584c:	2200      	movs	r2, #0
 800584e:	4618      	mov	r0, r3
 8005850:	4611      	mov	r1, r2
 8005852:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005856:	623b      	str	r3, [r7, #32]
 8005858:	2300      	movs	r3, #0
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
 800585c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	f04f 0000 	mov.w	r0, #0
 8005868:	f04f 0100 	mov.w	r1, #0
 800586c:	0159      	lsls	r1, r3, #5
 800586e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005872:	0150      	lsls	r0, r2, #5
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4641      	mov	r1, r8
 800587a:	ebb2 0a01 	subs.w	sl, r2, r1
 800587e:	4649      	mov	r1, r9
 8005880:	eb63 0b01 	sbc.w	fp, r3, r1
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005890:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005894:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005898:	ebb2 040a 	subs.w	r4, r2, sl
 800589c:	eb63 050b 	sbc.w	r5, r3, fp
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	00eb      	lsls	r3, r5, #3
 80058aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058ae:	00e2      	lsls	r2, r4, #3
 80058b0:	4614      	mov	r4, r2
 80058b2:	461d      	mov	r5, r3
 80058b4:	4643      	mov	r3, r8
 80058b6:	18e3      	adds	r3, r4, r3
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	464b      	mov	r3, r9
 80058bc:	eb45 0303 	adc.w	r3, r5, r3
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058ce:	4629      	mov	r1, r5
 80058d0:	028b      	lsls	r3, r1, #10
 80058d2:	4621      	mov	r1, r4
 80058d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058d8:	4621      	mov	r1, r4
 80058da:	028a      	lsls	r2, r1, #10
 80058dc:	4610      	mov	r0, r2
 80058de:	4619      	mov	r1, r3
 80058e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e2:	2200      	movs	r2, #0
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	61fa      	str	r2, [r7, #28]
 80058e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ec:	f7fb f954 	bl	8000b98 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4613      	mov	r3, r2
 80058f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <HAL_RCC_GetSysClockFreq+0x200>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	3301      	adds	r3, #1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005908:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800590a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005912:	e002      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCC_GetSysClockFreq+0x204>)
 8005916:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800591a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800591c:	4618      	mov	r0, r3
 800591e:	3750      	adds	r7, #80	; 0x50
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800
 800592c:	00f42400 	.word	0x00f42400
 8005930:	007a1200 	.word	0x007a1200

08005934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005938:	4b03      	ldr	r3, [pc, #12]	; (8005948 <HAL_RCC_GetHCLKFreq+0x14>)
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20000008 	.word	0x20000008

0800594c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005950:	f7ff fff0 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0a9b      	lsrs	r3, r3, #10
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4903      	ldr	r1, [pc, #12]	; (8005970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	0800b9f0 	.word	0x0800b9f0

08005974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005978:	f7ff ffdc 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	0b5b      	lsrs	r3, r3, #13
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4903      	ldr	r1, [pc, #12]	; (8005998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	0800b9f0 	.word	0x0800b9f0

0800599c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e07b      	b.n	8005aa6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d108      	bne.n	80059c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059be:	d009      	beq.n	80059d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	61da      	str	r2, [r3, #28]
 80059c6:	e005      	b.n	80059d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fd fc90 	bl	8003314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a58:	ea42 0103 	orr.w	r1, r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	f003 0104 	and.w	r1, r3, #4
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	f003 0210 	and.w	r2, r3, #16
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b088      	sub	sp, #32
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_SPI_Transmit+0x22>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e12d      	b.n	8005d2c <HAL_SPI_Transmit+0x27e>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ad8:	f7fd febe 	bl	8003858 <HAL_GetTick>
 8005adc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d002      	beq.n	8005af4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
 8005af0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005af2:	e116      	b.n	8005d22 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_SPI_Transmit+0x52>
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d102      	bne.n	8005b06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b04:	e10d      	b.n	8005d22 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2203      	movs	r2, #3
 8005b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	88fa      	ldrh	r2, [r7, #6]
 8005b1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4c:	d10f      	bne.n	8005b6e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b40      	cmp	r3, #64	; 0x40
 8005b7a:	d007      	beq.n	8005b8c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b94:	d14f      	bne.n	8005c36 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <HAL_SPI_Transmit+0xf6>
 8005b9e:	8afb      	ldrh	r3, [r7, #22]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d142      	bne.n	8005c2a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	881a      	ldrh	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	1c9a      	adds	r2, r3, #2
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bc8:	e02f      	b.n	8005c2a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d112      	bne.n	8005bfe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	881a      	ldrh	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	1c9a      	adds	r2, r3, #2
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bfc:	e015      	b.n	8005c2a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bfe:	f7fd fe2b 	bl	8003858 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d803      	bhi.n	8005c16 <HAL_SPI_Transmit+0x168>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d102      	bne.n	8005c1c <HAL_SPI_Transmit+0x16e>
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d106      	bne.n	8005c2a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c28:	e07b      	b.n	8005d22 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1ca      	bne.n	8005bca <HAL_SPI_Transmit+0x11c>
 8005c34:	e050      	b.n	8005cd8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <HAL_SPI_Transmit+0x196>
 8005c3e:	8afb      	ldrh	r3, [r7, #22]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d144      	bne.n	8005cce <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	7812      	ldrb	r2, [r2, #0]
 8005c50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c6a:	e030      	b.n	8005cce <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d113      	bne.n	8005ca2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ca0:	e015      	b.n	8005cce <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca2:	f7fd fdd9 	bl	8003858 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d803      	bhi.n	8005cba <HAL_SPI_Transmit+0x20c>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb8:	d102      	bne.n	8005cc0 <HAL_SPI_Transmit+0x212>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d106      	bne.n	8005cce <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ccc:	e029      	b.n	8005d22 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1c9      	bne.n	8005c6c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 fa61 	bl	80061a4 <SPI_EndRxTxTransaction>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	77fb      	strb	r3, [r7, #31]
 8005d18:	e003      	b.n	8005d22 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3720      	adds	r7, #32
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08c      	sub	sp, #48	; 0x30
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d42:	2301      	movs	r3, #1
 8005d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x26>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e198      	b.n	800608c <HAL_SPI_TransmitReceive+0x358>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d62:	f7fd fd79 	bl	8003858 <HAL_GetTick>
 8005d66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d78:	887b      	ldrh	r3, [r7, #2]
 8005d7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d00f      	beq.n	8005da4 <HAL_SPI_TransmitReceive+0x70>
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d8a:	d107      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x68>
 8005d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d003      	beq.n	8005da4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005da2:	e16d      	b.n	8006080 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d005      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x82>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x82>
 8005db0:	887b      	ldrh	r3, [r7, #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005dbc:	e160      	b.n	8006080 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d003      	beq.n	8005dd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2205      	movs	r2, #5
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	887a      	ldrh	r2, [r7, #2]
 8005de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	887a      	ldrh	r2, [r7, #2]
 8005de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	887a      	ldrh	r2, [r7, #2]
 8005df4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	887a      	ldrh	r2, [r7, #2]
 8005dfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b40      	cmp	r3, #64	; 0x40
 8005e14:	d007      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2e:	d17c      	bne.n	8005f2a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <HAL_SPI_TransmitReceive+0x10a>
 8005e38:	8b7b      	ldrh	r3, [r7, #26]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d16a      	bne.n	8005f14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	881a      	ldrh	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	1c9a      	adds	r2, r3, #2
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e62:	e057      	b.n	8005f14 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d11b      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0x176>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d016      	beq.n	8005eaa <HAL_SPI_TransmitReceive+0x176>
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d113      	bne.n	8005eaa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d119      	bne.n	8005eec <HAL_SPI_TransmitReceive+0x1b8>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d014      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	b292      	uxth	r2, r2
 8005ece:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	1c9a      	adds	r2, r3, #2
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005eec:	f7fd fcb4 	bl	8003858 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d80b      	bhi.n	8005f14 <HAL_SPI_TransmitReceive+0x1e0>
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d007      	beq.n	8005f14 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005f12:	e0b5      	b.n	8006080 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1a2      	bne.n	8005e64 <HAL_SPI_TransmitReceive+0x130>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d19d      	bne.n	8005e64 <HAL_SPI_TransmitReceive+0x130>
 8005f28:	e080      	b.n	800602c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <HAL_SPI_TransmitReceive+0x204>
 8005f32:	8b7b      	ldrh	r3, [r7, #26]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d16f      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	7812      	ldrb	r2, [r2, #0]
 8005f44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f5e:	e05b      	b.n	8006018 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d11c      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x274>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d017      	beq.n	8005fa8 <HAL_SPI_TransmitReceive+0x274>
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d114      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	7812      	ldrb	r2, [r2, #0]
 8005f8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d119      	bne.n	8005fea <HAL_SPI_TransmitReceive+0x2b6>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d014      	beq.n	8005fea <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fea:	f7fd fc35 	bl	8003858 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d803      	bhi.n	8006002 <HAL_SPI_TransmitReceive+0x2ce>
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006000:	d102      	bne.n	8006008 <HAL_SPI_TransmitReceive+0x2d4>
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	2b00      	cmp	r3, #0
 8006006:	d107      	bne.n	8006018 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006016:	e033      	b.n	8006080 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d19e      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x22c>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	d199      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800602c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800602e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f8b7 	bl	80061a4 <SPI_EndRxTxTransaction>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d006      	beq.n	800604a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006048:	e01a      	b.n	8006080 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006076:	e003      	b.n	8006080 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006088:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800608c:	4618      	mov	r0, r3
 800608e:	3730      	adds	r7, #48	; 0x30
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	603b      	str	r3, [r7, #0]
 80060a0:	4613      	mov	r3, r2
 80060a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060a4:	f7fd fbd8 	bl	8003858 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	4413      	add	r3, r2
 80060b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060b4:	f7fd fbd0 	bl	8003858 <HAL_GetTick>
 80060b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ba:	4b39      	ldr	r3, [pc, #228]	; (80061a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	015b      	lsls	r3, r3, #5
 80060c0:	0d1b      	lsrs	r3, r3, #20
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	fb02 f303 	mul.w	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ca:	e054      	b.n	8006176 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d2:	d050      	beq.n	8006176 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060d4:	f7fd fbc0 	bl	8003858 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d902      	bls.n	80060ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d13d      	bne.n	8006166 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006102:	d111      	bne.n	8006128 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800610c:	d004      	beq.n	8006118 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006116:	d107      	bne.n	8006128 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006126:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006130:	d10f      	bne.n	8006152 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006150:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e017      	b.n	8006196 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	3b01      	subs	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4013      	ands	r3, r2
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	429a      	cmp	r2, r3
 8006184:	bf0c      	ite	eq
 8006186:	2301      	moveq	r3, #1
 8006188:	2300      	movne	r3, #0
 800618a:	b2db      	uxtb	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	429a      	cmp	r2, r3
 8006192:	d19b      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3720      	adds	r7, #32
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000008 	.word	0x20000008

080061a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af02      	add	r7, sp, #8
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2201      	movs	r2, #1
 80061b8:	2102      	movs	r1, #2
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff ff6a 	bl	8006094 <SPI_WaitFlagStateUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e032      	b.n	800623c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061d6:	4b1b      	ldr	r3, [pc, #108]	; (8006244 <SPI_EndRxTxTransaction+0xa0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1b      	ldr	r2, [pc, #108]	; (8006248 <SPI_EndRxTxTransaction+0xa4>)
 80061dc:	fba2 2303 	umull	r2, r3, r2, r3
 80061e0:	0d5b      	lsrs	r3, r3, #21
 80061e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061f4:	d112      	bne.n	800621c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2200      	movs	r2, #0
 80061fe:	2180      	movs	r1, #128	; 0x80
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff ff47 	bl	8006094 <SPI_WaitFlagStateUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d016      	beq.n	800623a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e00f      	b.n	800623c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	3b01      	subs	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006232:	2b80      	cmp	r3, #128	; 0x80
 8006234:	d0f2      	beq.n	800621c <SPI_EndRxTxTransaction+0x78>
 8006236:	e000      	b.n	800623a <SPI_EndRxTxTransaction+0x96>
        break;
 8006238:	bf00      	nop
  }

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000008 	.word	0x20000008
 8006248:	165e9f81 	.word	0x165e9f81

0800624c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e041      	b.n	80062e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fd f896 	bl	80033a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3304      	adds	r3, #4
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f000 fa7e 	bl	800678c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d001      	beq.n	8006304 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e04e      	b.n	80063a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a23      	ldr	r2, [pc, #140]	; (80063b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d022      	beq.n	800636c <HAL_TIM_Base_Start_IT+0x80>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800632e:	d01d      	beq.n	800636c <HAL_TIM_Base_Start_IT+0x80>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1f      	ldr	r2, [pc, #124]	; (80063b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d018      	beq.n	800636c <HAL_TIM_Base_Start_IT+0x80>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <HAL_TIM_Base_Start_IT+0x80>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1c      	ldr	r2, [pc, #112]	; (80063bc <HAL_TIM_Base_Start_IT+0xd0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00e      	beq.n	800636c <HAL_TIM_Base_Start_IT+0x80>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d009      	beq.n	800636c <HAL_TIM_Base_Start_IT+0x80>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIM_Base_Start_IT+0x80>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d111      	bne.n	8006390 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b06      	cmp	r3, #6
 800637c:	d010      	beq.n	80063a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0201 	orr.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638e:	e007      	b.n	80063a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40010000 	.word	0x40010000
 80063b4:	40000400 	.word	0x40000400
 80063b8:	40000800 	.word	0x40000800
 80063bc:	40000c00 	.word	0x40000c00
 80063c0:	40010400 	.word	0x40010400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40001800 	.word	0x40001800

080063cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d020      	beq.n	8006430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d01b      	beq.n	8006430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0202 	mvn.w	r2, #2
 8006400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f999 	bl	800674e <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f98b 	bl	800673a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f99c 	bl	8006762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d020      	beq.n	800647c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d01b      	beq.n	800647c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f06f 0204 	mvn.w	r2, #4
 800644c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2202      	movs	r2, #2
 8006452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f973 	bl	800674e <HAL_TIM_IC_CaptureCallback>
 8006468:	e005      	b.n	8006476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f965 	bl	800673a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f976 	bl	8006762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d020      	beq.n	80064c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01b      	beq.n	80064c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0208 	mvn.w	r2, #8
 8006498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2204      	movs	r2, #4
 800649e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f003 0303 	and.w	r3, r3, #3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f94d 	bl	800674e <HAL_TIM_IC_CaptureCallback>
 80064b4:	e005      	b.n	80064c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f93f 	bl	800673a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f950 	bl	8006762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d020      	beq.n	8006514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01b      	beq.n	8006514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0210 	mvn.w	r2, #16
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2208      	movs	r2, #8
 80064ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	69db      	ldr	r3, [r3, #28]
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f927 	bl	800674e <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f919 	bl	800673a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f92a 	bl	8006762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00c      	beq.n	8006538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0201 	mvn.w	r2, #1
 8006530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fc fd96 	bl	8003064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00c      	beq.n	800655c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fae4 	bl	8006b24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00c      	beq.n	8006580 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f8fb 	bl	8006776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0220 	mvn.w	r2, #32
 800659c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fab6 	bl	8006b10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d101      	bne.n	80065c8 <HAL_TIM_ConfigClockSource+0x1c>
 80065c4:	2302      	movs	r3, #2
 80065c6:	e0b4      	b.n	8006732 <HAL_TIM_ConfigClockSource+0x186>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006600:	d03e      	beq.n	8006680 <HAL_TIM_ConfigClockSource+0xd4>
 8006602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006606:	f200 8087 	bhi.w	8006718 <HAL_TIM_ConfigClockSource+0x16c>
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	f000 8086 	beq.w	800671e <HAL_TIM_ConfigClockSource+0x172>
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006616:	d87f      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b70      	cmp	r3, #112	; 0x70
 800661a:	d01a      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0xa6>
 800661c:	2b70      	cmp	r3, #112	; 0x70
 800661e:	d87b      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b60      	cmp	r3, #96	; 0x60
 8006622:	d050      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x11a>
 8006624:	2b60      	cmp	r3, #96	; 0x60
 8006626:	d877      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x16c>
 8006628:	2b50      	cmp	r3, #80	; 0x50
 800662a:	d03c      	beq.n	80066a6 <HAL_TIM_ConfigClockSource+0xfa>
 800662c:	2b50      	cmp	r3, #80	; 0x50
 800662e:	d873      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x16c>
 8006630:	2b40      	cmp	r3, #64	; 0x40
 8006632:	d058      	beq.n	80066e6 <HAL_TIM_ConfigClockSource+0x13a>
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	d86f      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x16c>
 8006638:	2b30      	cmp	r3, #48	; 0x30
 800663a:	d064      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x15a>
 800663c:	2b30      	cmp	r3, #48	; 0x30
 800663e:	d86b      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b20      	cmp	r3, #32
 8006642:	d060      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x15a>
 8006644:	2b20      	cmp	r3, #32
 8006646:	d867      	bhi.n	8006718 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b00      	cmp	r3, #0
 800664a:	d05c      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x15a>
 800664c:	2b10      	cmp	r3, #16
 800664e:	d05a      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x15a>
 8006650:	e062      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006662:	f000 f9b9 	bl	80069d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006674:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	609a      	str	r2, [r3, #8]
      break;
 800667e:	e04f      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006690:	f000 f9a2 	bl	80069d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066a2:	609a      	str	r2, [r3, #8]
      break;
 80066a4:	e03c      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b2:	461a      	mov	r2, r3
 80066b4:	f000 f916 	bl	80068e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2150      	movs	r1, #80	; 0x50
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f96f 	bl	80069a2 <TIM_ITRx_SetConfig>
      break;
 80066c4:	e02c      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d2:	461a      	mov	r2, r3
 80066d4:	f000 f935 	bl	8006942 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2160      	movs	r1, #96	; 0x60
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f95f 	bl	80069a2 <TIM_ITRx_SetConfig>
      break;
 80066e4:	e01c      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f2:	461a      	mov	r2, r3
 80066f4:	f000 f8f6 	bl	80068e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2140      	movs	r1, #64	; 0x40
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 f94f 	bl	80069a2 <TIM_ITRx_SetConfig>
      break;
 8006704:	e00c      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4619      	mov	r1, r3
 8006710:	4610      	mov	r0, r2
 8006712:	f000 f946 	bl	80069a2 <TIM_ITRx_SetConfig>
      break;
 8006716:	e003      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	73fb      	strb	r3, [r7, #15]
      break;
 800671c:	e000      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800671e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a46      	ldr	r2, [pc, #280]	; (80068b8 <TIM_Base_SetConfig+0x12c>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d013      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067aa:	d00f      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a43      	ldr	r2, [pc, #268]	; (80068bc <TIM_Base_SetConfig+0x130>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00b      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a42      	ldr	r2, [pc, #264]	; (80068c0 <TIM_Base_SetConfig+0x134>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d007      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a41      	ldr	r2, [pc, #260]	; (80068c4 <TIM_Base_SetConfig+0x138>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d003      	beq.n	80067cc <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a40      	ldr	r2, [pc, #256]	; (80068c8 <TIM_Base_SetConfig+0x13c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d108      	bne.n	80067de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a35      	ldr	r2, [pc, #212]	; (80068b8 <TIM_Base_SetConfig+0x12c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02b      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ec:	d027      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a32      	ldr	r2, [pc, #200]	; (80068bc <TIM_Base_SetConfig+0x130>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d023      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a31      	ldr	r2, [pc, #196]	; (80068c0 <TIM_Base_SetConfig+0x134>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d01f      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a30      	ldr	r2, [pc, #192]	; (80068c4 <TIM_Base_SetConfig+0x138>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01b      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2f      	ldr	r2, [pc, #188]	; (80068c8 <TIM_Base_SetConfig+0x13c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d017      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2e      	ldr	r2, [pc, #184]	; (80068cc <TIM_Base_SetConfig+0x140>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d013      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2d      	ldr	r2, [pc, #180]	; (80068d0 <TIM_Base_SetConfig+0x144>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00f      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <TIM_Base_SetConfig+0x148>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00b      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2b      	ldr	r2, [pc, #172]	; (80068d8 <TIM_Base_SetConfig+0x14c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d007      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <TIM_Base_SetConfig+0x150>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a29      	ldr	r2, [pc, #164]	; (80068e0 <TIM_Base_SetConfig+0x154>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d108      	bne.n	8006850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a10      	ldr	r2, [pc, #64]	; (80068b8 <TIM_Base_SetConfig+0x12c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_Base_SetConfig+0xf8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <TIM_Base_SetConfig+0x13c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d103      	bne.n	800688c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	691a      	ldr	r2, [r3, #16]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b01      	cmp	r3, #1
 800689c:	d105      	bne.n	80068aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	f023 0201 	bic.w	r2, r3, #1
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	611a      	str	r2, [r3, #16]
  }
}
 80068aa:	bf00      	nop
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40010400 	.word	0x40010400
 80068cc:	40014000 	.word	0x40014000
 80068d0:	40014400 	.word	0x40014400
 80068d4:	40014800 	.word	0x40014800
 80068d8:	40001800 	.word	0x40001800
 80068dc:	40001c00 	.word	0x40001c00
 80068e0:	40002000 	.word	0x40002000

080068e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 030a 	bic.w	r3, r3, #10
 8006920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006942:	b480      	push	{r7}
 8006944:	b087      	sub	sp, #28
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	f023 0210 	bic.w	r2, r3, #16
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800696c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800697e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4313      	orrs	r3, r2
 80069c0:	f043 0307 	orr.w	r3, r3, #7
 80069c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	609a      	str	r2, [r3, #8]
}
 80069cc:	bf00      	nop
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	021a      	lsls	r2, r3, #8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	609a      	str	r2, [r3, #8]
}
 8006a0c:	bf00      	nop
 8006a0e:	371c      	adds	r7, #28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e05a      	b.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7c:	d01d      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1b      	ldr	r2, [pc, #108]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1a      	ldr	r2, [pc, #104]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a18      	ldr	r2, [pc, #96]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a17      	ldr	r2, [pc, #92]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40010400 	.word	0x40010400
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40001800 	.word	0x40001800

08006b10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e042      	b.n	8006bd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fc fc66 	bl	8003430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2224      	movs	r2, #36	; 0x24
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68da      	ldr	r2, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fdbd 	bl	80076fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	691a      	ldr	r2, [r3, #16]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	695a      	ldr	r2, [r3, #20]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08a      	sub	sp, #40	; 0x28
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	4613      	mov	r3, r2
 8006be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d175      	bne.n	8006ce4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_UART_Transmit+0x2c>
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e06e      	b.n	8006ce6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2221      	movs	r2, #33	; 0x21
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c16:	f7fc fe1f 	bl	8003858 <HAL_GetTick>
 8006c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	88fa      	ldrh	r2, [r7, #6]
 8006c20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	88fa      	ldrh	r2, [r7, #6]
 8006c26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c30:	d108      	bne.n	8006c44 <HAL_UART_Transmit+0x6c>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d104      	bne.n	8006c44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	61bb      	str	r3, [r7, #24]
 8006c42:	e003      	b.n	8006c4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c4c:	e02e      	b.n	8006cac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2200      	movs	r2, #0
 8006c56:	2180      	movs	r1, #128	; 0x80
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 fb1f 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e03a      	b.n	8006ce6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10b      	bne.n	8006c8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	3302      	adds	r3, #2
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e007      	b.n	8006c9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	781a      	ldrb	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1cb      	bne.n	8006c4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2140      	movs	r1, #64	; 0x40
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 faeb 	bl	800729c <UART_WaitOnFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e006      	b.n	8006ce6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	e000      	b.n	8006ce6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b20      	cmp	r3, #32
 8006d06:	d112      	bne.n	8006d2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <HAL_UART_Receive_IT+0x26>
 8006d0e:	88fb      	ldrh	r3, [r7, #6]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e00b      	b.n	8006d30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d1e:	88fb      	ldrh	r3, [r7, #6]
 8006d20:	461a      	mov	r2, r3
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 fb12 	bl	800734e <UART_Start_Receive_IT>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	e000      	b.n	8006d30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006d2e:	2302      	movs	r3, #2
  }
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b0ba      	sub	sp, #232	; 0xe8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6e:	f003 030f 	and.w	r3, r3, #15
 8006d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10f      	bne.n	8006d9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <HAL_UART_IRQHandler+0x66>
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fbf2 	bl	8007580 <UART_Receive_IT>
      return;
 8006d9c:	e25b      	b.n	8007256 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80de 	beq.w	8006f64 <HAL_UART_IRQHandler+0x22c>
 8006da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80d1 	beq.w	8006f64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <HAL_UART_IRQHandler+0xae>
 8006dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dde:	f043 0201 	orr.w	r2, r3, #1
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00b      	beq.n	8006e0a <HAL_UART_IRQHandler+0xd2>
 8006df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e02:	f043 0202 	orr.w	r2, r3, #2
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <HAL_UART_IRQHandler+0xf6>
 8006e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e26:	f043 0204 	orr.w	r2, r3, #4
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d011      	beq.n	8006e5e <HAL_UART_IRQHandler+0x126>
 8006e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d105      	bne.n	8006e52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e56:	f043 0208 	orr.w	r2, r3, #8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 81f2 	beq.w	800724c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <HAL_UART_IRQHandler+0x14e>
 8006e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e78:	f003 0320 	and.w	r3, r3, #32
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb7d 	bl	8007580 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b40      	cmp	r3, #64	; 0x40
 8006e92:	bf0c      	ite	eq
 8006e94:	2301      	moveq	r3, #1
 8006e96:	2300      	movne	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <HAL_UART_IRQHandler+0x17a>
 8006eaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d04f      	beq.n	8006f52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa85 	bl	80073c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec2:	2b40      	cmp	r3, #64	; 0x40
 8006ec4:	d141      	bne.n	8006f4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3314      	adds	r3, #20
 8006eee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ef2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006efe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1d9      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d013      	beq.n	8006f42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1e:	4a7e      	ldr	r2, [pc, #504]	; (8007118 <HAL_UART_IRQHandler+0x3e0>)
 8006f20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fd fc5e 	bl	80047e8 <HAL_DMA_Abort_IT>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	e00e      	b.n	8006f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f994 	bl	8007270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f48:	e00a      	b.n	8006f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f990 	bl	8007270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	e006      	b.n	8006f60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f98c 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006f5e:	e175      	b.n	800724c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	bf00      	nop
    return;
 8006f62:	e173      	b.n	800724c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	f040 814f 	bne.w	800720c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8148 	beq.w	800720c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f80:	f003 0310 	and.w	r3, r3, #16
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8141 	beq.w	800720c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	f040 80b6 	bne.w	800711c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 8145 	beq.w	8007250 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006fca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	f080 813e 	bcs.w	8007250 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe6:	f000 8088 	beq.w	80070fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	330c      	adds	r3, #12
 8006ff0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007008:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	330c      	adds	r3, #12
 8007012:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800701a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007022:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800702e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1d9      	bne.n	8006fea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3314      	adds	r3, #20
 800703c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3314      	adds	r3, #20
 8007056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800705a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800705e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007062:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800706c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e1      	bne.n	8007036 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3314      	adds	r3, #20
 8007078:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3314      	adds	r3, #20
 8007092:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007096:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007098:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800709c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e3      	bne.n	8007072 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ca:	f023 0310 	bic.w	r3, r3, #16
 80070ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80070de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070e4:	e841 2300 	strex	r3, r2, [r1]
 80070e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1e3      	bne.n	80070b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fd fb07 	bl	8004708 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2202      	movs	r2, #2
 80070fe:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007108:	b29b      	uxth	r3, r3
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	b29b      	uxth	r3, r3
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f8b7 	bl	8007284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007116:	e09b      	b.n	8007250 <HAL_UART_IRQHandler+0x518>
 8007118:	08007489 	.word	0x08007489
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007124:	b29b      	uxth	r3, r3
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007130:	b29b      	uxth	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 808e 	beq.w	8007254 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 8089 	beq.w	8007254 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	330c      	adds	r3, #12
 8007148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	330c      	adds	r3, #12
 8007162:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007166:	647a      	str	r2, [r7, #68]	; 0x44
 8007168:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800716c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e3      	bne.n	8007142 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3314      	adds	r3, #20
 8007180:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	623b      	str	r3, [r7, #32]
   return(result);
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3314      	adds	r3, #20
 800719a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800719e:	633a      	str	r2, [r7, #48]	; 0x30
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e3      	bne.n	800717a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0310 	bic.w	r3, r3, #16
 80071d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80071e4:	61fa      	str	r2, [r7, #28]
 80071e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	69b9      	ldr	r1, [r7, #24]
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	617b      	str	r3, [r7, #20]
   return(result);
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e3      	bne.n	80071c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f83d 	bl	8007284 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800720a:	e023      	b.n	8007254 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800720c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007214:	2b00      	cmp	r3, #0
 8007216:	d009      	beq.n	800722c <HAL_UART_IRQHandler+0x4f4>
 8007218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f943 	bl	80074b0 <UART_Transmit_IT>
    return;
 800722a:	e014      	b.n	8007256 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00e      	beq.n	8007256 <HAL_UART_IRQHandler+0x51e>
 8007238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f983 	bl	8007550 <UART_EndTransmit_IT>
    return;
 800724a:	e004      	b.n	8007256 <HAL_UART_IRQHandler+0x51e>
    return;
 800724c:	bf00      	nop
 800724e:	e002      	b.n	8007256 <HAL_UART_IRQHandler+0x51e>
      return;
 8007250:	bf00      	nop
 8007252:	e000      	b.n	8007256 <HAL_UART_IRQHandler+0x51e>
      return;
 8007254:	bf00      	nop
  }
}
 8007256:	37e8      	adds	r7, #232	; 0xe8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ac:	e03b      	b.n	8007326 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b4:	d037      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072b6:	f7fc facf 	bl	8003858 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	6a3a      	ldr	r2, [r7, #32]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d302      	bcc.n	80072cc <UART_WaitOnFlagUntilTimeout+0x30>
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e03a      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d023      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b80      	cmp	r3, #128	; 0x80
 80072e2:	d020      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	2b40      	cmp	r3, #64	; 0x40
 80072e8:	d01d      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0308 	and.w	r3, r3, #8
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	d116      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 f857 	bl	80073c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2208      	movs	r2, #8
 8007318:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e00f      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4013      	ands	r3, r2
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	429a      	cmp	r2, r3
 8007334:	bf0c      	ite	eq
 8007336:	2301      	moveq	r3, #1
 8007338:	2300      	movne	r3, #0
 800733a:	b2db      	uxtb	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	429a      	cmp	r2, r3
 8007342:	d0b4      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800734e:	b480      	push	{r7}
 8007350:	b085      	sub	sp, #20
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	4613      	mov	r3, r2
 800735a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	88fa      	ldrh	r2, [r7, #6]
 8007366:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	88fa      	ldrh	r2, [r7, #6]
 800736c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2222      	movs	r2, #34	; 0x22
 8007378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007392:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695a      	ldr	r2, [r3, #20]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0201 	orr.w	r2, r2, #1
 80073a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0220 	orr.w	r2, r2, #32
 80073b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b095      	sub	sp, #84	; 0x54
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330c      	adds	r3, #12
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073ea:	643a      	str	r2, [r7, #64]	; 0x40
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e5      	bne.n	80073ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3314      	adds	r3, #20
 8007404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	61fb      	str	r3, [r7, #28]
   return(result);
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	64bb      	str	r3, [r7, #72]	; 0x48
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800741e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e5      	bne.n	80073fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	2b01      	cmp	r3, #1
 8007438:	d119      	bne.n	800746e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	330c      	adds	r3, #12
 8007440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	60bb      	str	r3, [r7, #8]
   return(result);
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f023 0310 	bic.w	r3, r3, #16
 8007450:	647b      	str	r3, [r7, #68]	; 0x44
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800745a:	61ba      	str	r2, [r7, #24]
 800745c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	6979      	ldr	r1, [r7, #20]
 8007460:	69ba      	ldr	r2, [r7, #24]
 8007462:	e841 2300 	strex	r3, r2, [r1]
 8007466:	613b      	str	r3, [r7, #16]
   return(result);
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1e5      	bne.n	800743a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800747c:	bf00      	nop
 800747e:	3754      	adds	r7, #84	; 0x54
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007494:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f7ff fee4 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a8:	bf00      	nop
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b21      	cmp	r3, #33	; 0x21
 80074c2:	d13e      	bne.n	8007542 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074cc:	d114      	bne.n	80074f8 <UART_Transmit_IT+0x48>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d110      	bne.n	80074f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	1c9a      	adds	r2, r3, #2
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	621a      	str	r2, [r3, #32]
 80074f6:	e008      	b.n	800750a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	1c59      	adds	r1, r3, #1
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6211      	str	r1, [r2, #32]
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29b      	uxth	r3, r3
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	4619      	mov	r1, r3
 8007518:	84d1      	strh	r1, [r2, #38]	; 0x26
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800752c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800753c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	e000      	b.n	8007544 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007542:	2302      	movs	r3, #2
  }
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007566:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2220      	movs	r2, #32
 800756c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff fe73 	bl	800725c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08c      	sub	sp, #48	; 0x30
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b22      	cmp	r3, #34	; 0x22
 8007592:	f040 80ae 	bne.w	80076f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759e:	d117      	bne.n	80075d0 <UART_Receive_IT+0x50>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d113      	bne.n	80075d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075a8:	2300      	movs	r3, #0
 80075aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075be:	b29a      	uxth	r2, r3
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c8:	1c9a      	adds	r2, r3, #2
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	629a      	str	r2, [r3, #40]	; 0x28
 80075ce:	e026      	b.n	800761e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e2:	d007      	beq.n	80075f4 <UART_Receive_IT+0x74>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <UART_Receive_IT+0x82>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	e008      	b.n	8007614 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760e:	b2da      	uxtb	r2, r3
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29b      	uxth	r3, r3
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	4619      	mov	r1, r3
 800762c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800762e:	2b00      	cmp	r3, #0
 8007630:	d15d      	bne.n	80076ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 0220 	bic.w	r2, r2, #32
 8007640:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007650:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695a      	ldr	r2, [r3, #20]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	2b01      	cmp	r3, #1
 8007676:	d135      	bne.n	80076e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	e853 3f00 	ldrex	r3, [r3]
 800768c:	613b      	str	r3, [r7, #16]
   return(result);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f023 0310 	bic.w	r3, r3, #16
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	330c      	adds	r3, #12
 800769c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769e:	623a      	str	r2, [r7, #32]
 80076a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	69f9      	ldr	r1, [r7, #28]
 80076a4:	6a3a      	ldr	r2, [r7, #32]
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e5      	bne.n	800767e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0310 	and.w	r3, r3, #16
 80076bc:	2b10      	cmp	r3, #16
 80076be:	d10a      	bne.n	80076d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff fdd1 	bl	8007284 <HAL_UARTEx_RxEventCallback>
 80076e2:	e002      	b.n	80076ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7fa f8f5 	bl	80018d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e002      	b.n	80076f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e000      	b.n	80076f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80076f2:	2302      	movs	r3, #2
  }
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3730      	adds	r7, #48	; 0x30
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007700:	b0c0      	sub	sp, #256	; 0x100
 8007702:	af00      	add	r7, sp, #0
 8007704:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007718:	68d9      	ldr	r1, [r3, #12]
 800771a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	ea40 0301 	orr.w	r3, r0, r1
 8007724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	431a      	orrs	r2, r3
 8007734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	431a      	orrs	r2, r3
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007754:	f021 010c 	bic.w	r1, r1, #12
 8007758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007762:	430b      	orrs	r3, r1
 8007764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007776:	6999      	ldr	r1, [r3, #24]
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	ea40 0301 	orr.w	r3, r0, r1
 8007782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4b8f      	ldr	r3, [pc, #572]	; (80079c8 <UART_SetConfig+0x2cc>)
 800778c:	429a      	cmp	r2, r3
 800778e:	d005      	beq.n	800779c <UART_SetConfig+0xa0>
 8007790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	4b8d      	ldr	r3, [pc, #564]	; (80079cc <UART_SetConfig+0x2d0>)
 8007798:	429a      	cmp	r2, r3
 800779a:	d104      	bne.n	80077a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800779c:	f7fe f8ea 	bl	8005974 <HAL_RCC_GetPCLK2Freq>
 80077a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80077a4:	e003      	b.n	80077ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077a6:	f7fe f8d1 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 80077aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b8:	f040 810c 	bne.w	80079d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077c0:	2200      	movs	r2, #0
 80077c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80077c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80077ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80077ce:	4622      	mov	r2, r4
 80077d0:	462b      	mov	r3, r5
 80077d2:	1891      	adds	r1, r2, r2
 80077d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80077d6:	415b      	adcs	r3, r3
 80077d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077de:	4621      	mov	r1, r4
 80077e0:	eb12 0801 	adds.w	r8, r2, r1
 80077e4:	4629      	mov	r1, r5
 80077e6:	eb43 0901 	adc.w	r9, r3, r1
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	f04f 0300 	mov.w	r3, #0
 80077f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077fe:	4690      	mov	r8, r2
 8007800:	4699      	mov	r9, r3
 8007802:	4623      	mov	r3, r4
 8007804:	eb18 0303 	adds.w	r3, r8, r3
 8007808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800780c:	462b      	mov	r3, r5
 800780e:	eb49 0303 	adc.w	r3, r9, r3
 8007812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800782a:	460b      	mov	r3, r1
 800782c:	18db      	adds	r3, r3, r3
 800782e:	653b      	str	r3, [r7, #80]	; 0x50
 8007830:	4613      	mov	r3, r2
 8007832:	eb42 0303 	adc.w	r3, r2, r3
 8007836:	657b      	str	r3, [r7, #84]	; 0x54
 8007838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800783c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007840:	f7f9 f9aa 	bl	8000b98 <__aeabi_uldivmod>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	4b61      	ldr	r3, [pc, #388]	; (80079d0 <UART_SetConfig+0x2d4>)
 800784a:	fba3 2302 	umull	r2, r3, r3, r2
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	011c      	lsls	r4, r3, #4
 8007852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007856:	2200      	movs	r2, #0
 8007858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800785c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007864:	4642      	mov	r2, r8
 8007866:	464b      	mov	r3, r9
 8007868:	1891      	adds	r1, r2, r2
 800786a:	64b9      	str	r1, [r7, #72]	; 0x48
 800786c:	415b      	adcs	r3, r3
 800786e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007874:	4641      	mov	r1, r8
 8007876:	eb12 0a01 	adds.w	sl, r2, r1
 800787a:	4649      	mov	r1, r9
 800787c:	eb43 0b01 	adc.w	fp, r3, r1
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800788c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007894:	4692      	mov	sl, r2
 8007896:	469b      	mov	fp, r3
 8007898:	4643      	mov	r3, r8
 800789a:	eb1a 0303 	adds.w	r3, sl, r3
 800789e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078a2:	464b      	mov	r3, r9
 80078a4:	eb4b 0303 	adc.w	r3, fp, r3
 80078a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80078bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80078c0:	460b      	mov	r3, r1
 80078c2:	18db      	adds	r3, r3, r3
 80078c4:	643b      	str	r3, [r7, #64]	; 0x40
 80078c6:	4613      	mov	r3, r2
 80078c8:	eb42 0303 	adc.w	r3, r2, r3
 80078cc:	647b      	str	r3, [r7, #68]	; 0x44
 80078ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80078d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078d6:	f7f9 f95f 	bl	8000b98 <__aeabi_uldivmod>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4611      	mov	r1, r2
 80078e0:	4b3b      	ldr	r3, [pc, #236]	; (80079d0 <UART_SetConfig+0x2d4>)
 80078e2:	fba3 2301 	umull	r2, r3, r3, r1
 80078e6:	095b      	lsrs	r3, r3, #5
 80078e8:	2264      	movs	r2, #100	; 0x64
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	1acb      	subs	r3, r1, r3
 80078f0:	00db      	lsls	r3, r3, #3
 80078f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078f6:	4b36      	ldr	r3, [pc, #216]	; (80079d0 <UART_SetConfig+0x2d4>)
 80078f8:	fba3 2302 	umull	r2, r3, r3, r2
 80078fc:	095b      	lsrs	r3, r3, #5
 80078fe:	005b      	lsls	r3, r3, #1
 8007900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007904:	441c      	add	r4, r3
 8007906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800790a:	2200      	movs	r2, #0
 800790c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007910:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007918:	4642      	mov	r2, r8
 800791a:	464b      	mov	r3, r9
 800791c:	1891      	adds	r1, r2, r2
 800791e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007920:	415b      	adcs	r3, r3
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007928:	4641      	mov	r1, r8
 800792a:	1851      	adds	r1, r2, r1
 800792c:	6339      	str	r1, [r7, #48]	; 0x30
 800792e:	4649      	mov	r1, r9
 8007930:	414b      	adcs	r3, r1
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
 8007934:	f04f 0200 	mov.w	r2, #0
 8007938:	f04f 0300 	mov.w	r3, #0
 800793c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007940:	4659      	mov	r1, fp
 8007942:	00cb      	lsls	r3, r1, #3
 8007944:	4651      	mov	r1, sl
 8007946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800794a:	4651      	mov	r1, sl
 800794c:	00ca      	lsls	r2, r1, #3
 800794e:	4610      	mov	r0, r2
 8007950:	4619      	mov	r1, r3
 8007952:	4603      	mov	r3, r0
 8007954:	4642      	mov	r2, r8
 8007956:	189b      	adds	r3, r3, r2
 8007958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800795c:	464b      	mov	r3, r9
 800795e:	460a      	mov	r2, r1
 8007960:	eb42 0303 	adc.w	r3, r2, r3
 8007964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007974:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800797c:	460b      	mov	r3, r1
 800797e:	18db      	adds	r3, r3, r3
 8007980:	62bb      	str	r3, [r7, #40]	; 0x28
 8007982:	4613      	mov	r3, r2
 8007984:	eb42 0303 	adc.w	r3, r2, r3
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800798a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800798e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007992:	f7f9 f901 	bl	8000b98 <__aeabi_uldivmod>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <UART_SetConfig+0x2d4>)
 800799c:	fba3 1302 	umull	r1, r3, r3, r2
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	2164      	movs	r1, #100	; 0x64
 80079a4:	fb01 f303 	mul.w	r3, r1, r3
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	00db      	lsls	r3, r3, #3
 80079ac:	3332      	adds	r3, #50	; 0x32
 80079ae:	4a08      	ldr	r2, [pc, #32]	; (80079d0 <UART_SetConfig+0x2d4>)
 80079b0:	fba2 2303 	umull	r2, r3, r2, r3
 80079b4:	095b      	lsrs	r3, r3, #5
 80079b6:	f003 0207 	and.w	r2, r3, #7
 80079ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4422      	add	r2, r4
 80079c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079c4:	e106      	b.n	8007bd4 <UART_SetConfig+0x4d8>
 80079c6:	bf00      	nop
 80079c8:	40011000 	.word	0x40011000
 80079cc:	40011400 	.word	0x40011400
 80079d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80079e6:	4642      	mov	r2, r8
 80079e8:	464b      	mov	r3, r9
 80079ea:	1891      	adds	r1, r2, r2
 80079ec:	6239      	str	r1, [r7, #32]
 80079ee:	415b      	adcs	r3, r3
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
 80079f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079f6:	4641      	mov	r1, r8
 80079f8:	1854      	adds	r4, r2, r1
 80079fa:	4649      	mov	r1, r9
 80079fc:	eb43 0501 	adc.w	r5, r3, r1
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	00eb      	lsls	r3, r5, #3
 8007a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a0e:	00e2      	lsls	r2, r4, #3
 8007a10:	4614      	mov	r4, r2
 8007a12:	461d      	mov	r5, r3
 8007a14:	4643      	mov	r3, r8
 8007a16:	18e3      	adds	r3, r4, r3
 8007a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	eb45 0303 	adc.w	r3, r5, r3
 8007a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a36:	f04f 0200 	mov.w	r2, #0
 8007a3a:	f04f 0300 	mov.w	r3, #0
 8007a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a42:	4629      	mov	r1, r5
 8007a44:	008b      	lsls	r3, r1, #2
 8007a46:	4621      	mov	r1, r4
 8007a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	008a      	lsls	r2, r1, #2
 8007a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a54:	f7f9 f8a0 	bl	8000b98 <__aeabi_uldivmod>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4b60      	ldr	r3, [pc, #384]	; (8007be0 <UART_SetConfig+0x4e4>)
 8007a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	011c      	lsls	r4, r3, #4
 8007a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a78:	4642      	mov	r2, r8
 8007a7a:	464b      	mov	r3, r9
 8007a7c:	1891      	adds	r1, r2, r2
 8007a7e:	61b9      	str	r1, [r7, #24]
 8007a80:	415b      	adcs	r3, r3
 8007a82:	61fb      	str	r3, [r7, #28]
 8007a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a88:	4641      	mov	r1, r8
 8007a8a:	1851      	adds	r1, r2, r1
 8007a8c:	6139      	str	r1, [r7, #16]
 8007a8e:	4649      	mov	r1, r9
 8007a90:	414b      	adcs	r3, r1
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007aa0:	4659      	mov	r1, fp
 8007aa2:	00cb      	lsls	r3, r1, #3
 8007aa4:	4651      	mov	r1, sl
 8007aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aaa:	4651      	mov	r1, sl
 8007aac:	00ca      	lsls	r2, r1, #3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4642      	mov	r2, r8
 8007ab6:	189b      	adds	r3, r3, r2
 8007ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007abc:	464b      	mov	r3, r9
 8007abe:	460a      	mov	r2, r1
 8007ac0:	eb42 0303 	adc.w	r3, r2, r3
 8007ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ad2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	f04f 0300 	mov.w	r3, #0
 8007adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	008b      	lsls	r3, r1, #2
 8007ae4:	4641      	mov	r1, r8
 8007ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aea:	4641      	mov	r1, r8
 8007aec:	008a      	lsls	r2, r1, #2
 8007aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007af2:	f7f9 f851 	bl	8000b98 <__aeabi_uldivmod>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4611      	mov	r1, r2
 8007afc:	4b38      	ldr	r3, [pc, #224]	; (8007be0 <UART_SetConfig+0x4e4>)
 8007afe:	fba3 2301 	umull	r2, r3, r3, r1
 8007b02:	095b      	lsrs	r3, r3, #5
 8007b04:	2264      	movs	r2, #100	; 0x64
 8007b06:	fb02 f303 	mul.w	r3, r2, r3
 8007b0a:	1acb      	subs	r3, r1, r3
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	3332      	adds	r3, #50	; 0x32
 8007b10:	4a33      	ldr	r2, [pc, #204]	; (8007be0 <UART_SetConfig+0x4e4>)
 8007b12:	fba2 2303 	umull	r2, r3, r2, r3
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b1c:	441c      	add	r4, r3
 8007b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b22:	2200      	movs	r2, #0
 8007b24:	673b      	str	r3, [r7, #112]	; 0x70
 8007b26:	677a      	str	r2, [r7, #116]	; 0x74
 8007b28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007b2c:	4642      	mov	r2, r8
 8007b2e:	464b      	mov	r3, r9
 8007b30:	1891      	adds	r1, r2, r2
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	415b      	adcs	r3, r3
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b3c:	4641      	mov	r1, r8
 8007b3e:	1851      	adds	r1, r2, r1
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	4649      	mov	r1, r9
 8007b44:	414b      	adcs	r3, r1
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	f04f 0200 	mov.w	r2, #0
 8007b4c:	f04f 0300 	mov.w	r3, #0
 8007b50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b54:	4659      	mov	r1, fp
 8007b56:	00cb      	lsls	r3, r1, #3
 8007b58:	4651      	mov	r1, sl
 8007b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b5e:	4651      	mov	r1, sl
 8007b60:	00ca      	lsls	r2, r1, #3
 8007b62:	4610      	mov	r0, r2
 8007b64:	4619      	mov	r1, r3
 8007b66:	4603      	mov	r3, r0
 8007b68:	4642      	mov	r2, r8
 8007b6a:	189b      	adds	r3, r3, r2
 8007b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b6e:	464b      	mov	r3, r9
 8007b70:	460a      	mov	r2, r1
 8007b72:	eb42 0303 	adc.w	r3, r2, r3
 8007b76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	663b      	str	r3, [r7, #96]	; 0x60
 8007b82:	667a      	str	r2, [r7, #100]	; 0x64
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b90:	4649      	mov	r1, r9
 8007b92:	008b      	lsls	r3, r1, #2
 8007b94:	4641      	mov	r1, r8
 8007b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b9a:	4641      	mov	r1, r8
 8007b9c:	008a      	lsls	r2, r1, #2
 8007b9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007ba2:	f7f8 fff9 	bl	8000b98 <__aeabi_uldivmod>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <UART_SetConfig+0x4e4>)
 8007bac:	fba3 1302 	umull	r1, r3, r3, r2
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	2164      	movs	r1, #100	; 0x64
 8007bb4:	fb01 f303 	mul.w	r3, r1, r3
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	3332      	adds	r3, #50	; 0x32
 8007bbe:	4a08      	ldr	r2, [pc, #32]	; (8007be0 <UART_SetConfig+0x4e4>)
 8007bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc4:	095b      	lsrs	r3, r3, #5
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4422      	add	r2, r4
 8007bd2:	609a      	str	r2, [r3, #8]
}
 8007bd4:	bf00      	nop
 8007bd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007be0:	51eb851f 	.word	0x51eb851f

08007be4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007be8:	4904      	ldr	r1, [pc, #16]	; (8007bfc <MX_FATFS_Init+0x18>)
 8007bea:	4805      	ldr	r0, [pc, #20]	; (8007c00 <MX_FATFS_Init+0x1c>)
 8007bec:	f002 ff7a 	bl	800aae4 <FATFS_LinkDriver>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <MX_FATFS_Init+0x20>)
 8007bf6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007bf8:	bf00      	nop
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20002638 	.word	0x20002638
 8007c00:	20000014 	.word	0x20000014
 8007c04:	20002634 	.word	0x20002634

08007c08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007c0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	SD_disk_initialize (pdrv);
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7f9 fae9 	bl	80011fc <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8007c2a:	bf00      	nop
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SD_disk_status (pdrv);
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7f9 fbc1 	bl	80013c8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8007c46:	bf00      	nop
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_disk_read (pdrv, buff, sector, count);
 8007c60:	7bf8      	ldrb	r0, [r7, #15]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	f7f9 fbc4 	bl	80013f4 <SD_disk_read>
  /* USER CODE END READ */
}
 8007c6c:	bf00      	nop
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b084      	sub	sp, #16
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_disk_write (pdrv, buff, sector, count);
 8007c86:	7bf8      	ldrb	r0, [r7, #15]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	f7f9 fc1b 	bl	80014c8 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8007c92:	bf00      	nop
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	603a      	str	r2, [r7, #0]
 8007ca6:	71fb      	strb	r3, [r7, #7]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	SD_disk_ioctl (pdrv, cmd, buff);
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	79b9      	ldrb	r1, [r7, #6]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7f9 fc8c 	bl	80015d0 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8007cb8:	bf00      	nop
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	4a08      	ldr	r2, [pc, #32]	; (8007cf4 <disk_status+0x30>)
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	79fa      	ldrb	r2, [r7, #7]
 8007cdc:	4905      	ldr	r1, [pc, #20]	; (8007cf4 <disk_status+0x30>)
 8007cde:	440a      	add	r2, r1
 8007ce0:	7a12      	ldrb	r2, [r2, #8]
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	4798      	blx	r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20002864 	.word	0x20002864

08007cf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007d06:	79fb      	ldrb	r3, [r7, #7]
 8007d08:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <disk_initialize+0x4c>)
 8007d0a:	5cd3      	ldrb	r3, [r2, r3]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d114      	bne.n	8007d3a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4a0c      	ldr	r2, [pc, #48]	; (8007d44 <disk_initialize+0x4c>)
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	79fa      	ldrb	r2, [r7, #7]
 8007d1e:	4909      	ldr	r1, [pc, #36]	; (8007d44 <disk_initialize+0x4c>)
 8007d20:	440a      	add	r2, r1
 8007d22:	7a12      	ldrb	r2, [r2, #8]
 8007d24:	4610      	mov	r0, r2
 8007d26:	4798      	blx	r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	4a03      	ldr	r2, [pc, #12]	; (8007d44 <disk_initialize+0x4c>)
 8007d36:	2101      	movs	r1, #1
 8007d38:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20002864 	.word	0x20002864

08007d48 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007d48:	b590      	push	{r4, r7, lr}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60b9      	str	r1, [r7, #8]
 8007d50:	607a      	str	r2, [r7, #4]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4603      	mov	r3, r0
 8007d56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
 8007d5a:	4a0a      	ldr	r2, [pc, #40]	; (8007d84 <disk_read+0x3c>)
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	689c      	ldr	r4, [r3, #8]
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	4a07      	ldr	r2, [pc, #28]	; (8007d84 <disk_read+0x3c>)
 8007d68:	4413      	add	r3, r2
 8007d6a:	7a18      	ldrb	r0, [r3, #8]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	47a0      	blx	r4
 8007d74:	4603      	mov	r3, r0
 8007d76:	75fb      	strb	r3, [r7, #23]
  return res;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	371c      	adds	r7, #28
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd90      	pop	{r4, r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20002864 	.word	0x20002864

08007d88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007d88:	b590      	push	{r4, r7, lr}
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	607a      	str	r2, [r7, #4]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	4a0a      	ldr	r2, [pc, #40]	; (8007dc4 <disk_write+0x3c>)
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68dc      	ldr	r4, [r3, #12]
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	4a07      	ldr	r2, [pc, #28]	; (8007dc4 <disk_write+0x3c>)
 8007da8:	4413      	add	r3, r2
 8007daa:	7a18      	ldrb	r0, [r3, #8]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	68b9      	ldr	r1, [r7, #8]
 8007db2:	47a0      	blx	r4
 8007db4:	4603      	mov	r3, r0
 8007db6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd90      	pop	{r4, r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20002864 	.word	0x20002864

08007dc8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	603a      	str	r2, [r7, #0]
 8007dd2:	71fb      	strb	r3, [r7, #7]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
 8007dda:	4a09      	ldr	r2, [pc, #36]	; (8007e00 <disk_ioctl+0x38>)
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	79fa      	ldrb	r2, [r7, #7]
 8007de6:	4906      	ldr	r1, [pc, #24]	; (8007e00 <disk_ioctl+0x38>)
 8007de8:	440a      	add	r2, r1
 8007dea:	7a10      	ldrb	r0, [r2, #8]
 8007dec:	79b9      	ldrb	r1, [r7, #6]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	4798      	blx	r3
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]
  return res;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20002864 	.word	0x20002864

08007e04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007e14:	89fb      	ldrh	r3, [r7, #14]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	b21a      	sxth	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b21b      	sxth	r3, r3
 8007e20:	4313      	orrs	r3, r2
 8007e22:	b21b      	sxth	r3, r3
 8007e24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007e26:	89fb      	ldrh	r3, [r7, #14]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3303      	adds	r3, #3
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	3202      	adds	r2, #2
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	021b      	lsls	r3, r3, #8
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	3201      	adds	r2, #1
 8007e5a:	7812      	ldrb	r2, [r2, #0]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	021b      	lsls	r3, r3, #8
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	7812      	ldrb	r2, [r2, #0]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	607a      	str	r2, [r7, #4]
 8007e8c:	887a      	ldrh	r2, [r7, #2]
 8007e8e:	b2d2      	uxtb	r2, r2
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	887b      	ldrh	r3, [r7, #2]
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	887a      	ldrh	r2, [r7, #2]
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	b2d2      	uxtb	r2, r2
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	0a1b      	lsrs	r3, r3, #8
 8007eca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	701a      	strb	r2, [r3, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	701a      	strb	r2, [r3, #0]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	0a1b      	lsrs	r3, r3, #8
 8007eee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	607a      	str	r2, [r7, #4]
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	701a      	strb	r2, [r3, #0]
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00d      	beq.n	8007f3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	1c53      	adds	r3, r2, #1
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	1c59      	adds	r1, r3, #1
 8007f2c:	6179      	str	r1, [r7, #20]
 8007f2e:	7812      	ldrb	r2, [r2, #0]
 8007f30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	607b      	str	r3, [r7, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1f1      	bne.n	8007f22 <mem_cpy+0x1a>
	}
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007f4a:	b480      	push	{r7}
 8007f4c:	b087      	sub	sp, #28
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	617a      	str	r2, [r7, #20]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	b2d2      	uxtb	r2, r2
 8007f64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	607b      	str	r3, [r7, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1f3      	bne.n	8007f5a <mem_set+0x10>
}
 8007f72:	bf00      	nop
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007f80:	b480      	push	{r7}
 8007f82:	b089      	sub	sp, #36	; 0x24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007f94:	2300      	movs	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	61fa      	str	r2, [r7, #28]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	61ba      	str	r2, [r7, #24]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	1acb      	subs	r3, r1, r3
 8007fac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	607b      	str	r3, [r7, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <mem_cmp+0x40>
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d0eb      	beq.n	8007f98 <mem_cmp+0x18>

	return r;
 8007fc0:	697b      	ldr	r3, [r7, #20]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3724      	adds	r7, #36	; 0x24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007fd8:	e002      	b.n	8007fe0 <chk_chr+0x12>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	607b      	str	r3, [r7, #4]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <chk_chr+0x26>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	461a      	mov	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d1f2      	bne.n	8007fda <chk_chr+0xc>
	return *str;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800800e:	2300      	movs	r3, #0
 8008010:	60bb      	str	r3, [r7, #8]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	e029      	b.n	800806c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008018:	4a27      	ldr	r2, [pc, #156]	; (80080b8 <chk_lock+0xb4>)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	011b      	lsls	r3, r3, #4
 800801e:	4413      	add	r3, r2
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01d      	beq.n	8008062 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008026:	4a24      	ldr	r2, [pc, #144]	; (80080b8 <chk_lock+0xb4>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	011b      	lsls	r3, r3, #4
 800802c:	4413      	add	r3, r2
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d116      	bne.n	8008066 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008038:	4a1f      	ldr	r2, [pc, #124]	; (80080b8 <chk_lock+0xb4>)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	4413      	add	r3, r2
 8008040:	3304      	adds	r3, #4
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008048:	429a      	cmp	r2, r3
 800804a:	d10c      	bne.n	8008066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800804c:	4a1a      	ldr	r2, [pc, #104]	; (80080b8 <chk_lock+0xb4>)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	011b      	lsls	r3, r3, #4
 8008052:	4413      	add	r3, r2
 8008054:	3308      	adds	r3, #8
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800805c:	429a      	cmp	r2, r3
 800805e:	d102      	bne.n	8008066 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008060:	e007      	b.n	8008072 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008062:	2301      	movs	r3, #1
 8008064:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d9d2      	bls.n	8008018 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b02      	cmp	r3, #2
 8008076:	d109      	bne.n	800808c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <chk_lock+0x80>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d101      	bne.n	8008088 <chk_lock+0x84>
 8008084:	2300      	movs	r3, #0
 8008086:	e010      	b.n	80080aa <chk_lock+0xa6>
 8008088:	2312      	movs	r3, #18
 800808a:	e00e      	b.n	80080aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d108      	bne.n	80080a4 <chk_lock+0xa0>
 8008092:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <chk_lock+0xb4>)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	4413      	add	r3, r2
 800809a:	330c      	adds	r3, #12
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a2:	d101      	bne.n	80080a8 <chk_lock+0xa4>
 80080a4:	2310      	movs	r3, #16
 80080a6:	e000      	b.n	80080aa <chk_lock+0xa6>
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	20002644 	.word	0x20002644

080080bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080c2:	2300      	movs	r3, #0
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	e002      	b.n	80080ce <enq_lock+0x12>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3301      	adds	r3, #1
 80080cc:	607b      	str	r3, [r7, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d806      	bhi.n	80080e2 <enq_lock+0x26>
 80080d4:	4a09      	ldr	r2, [pc, #36]	; (80080fc <enq_lock+0x40>)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	4413      	add	r3, r2
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1f2      	bne.n	80080c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	20002644 	.word	0x20002644

08008100 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800810a:	2300      	movs	r3, #0
 800810c:	60fb      	str	r3, [r7, #12]
 800810e:	e01f      	b.n	8008150 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008110:	4a41      	ldr	r2, [pc, #260]	; (8008218 <inc_lock+0x118>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	4413      	add	r3, r2
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d113      	bne.n	800814a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008122:	4a3d      	ldr	r2, [pc, #244]	; (8008218 <inc_lock+0x118>)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	4413      	add	r3, r2
 800812a:	3304      	adds	r3, #4
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008132:	429a      	cmp	r2, r3
 8008134:	d109      	bne.n	800814a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008136:	4a38      	ldr	r2, [pc, #224]	; (8008218 <inc_lock+0x118>)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	4413      	add	r3, r2
 800813e:	3308      	adds	r3, #8
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008146:	429a      	cmp	r2, r3
 8008148:	d006      	beq.n	8008158 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d9dc      	bls.n	8008110 <inc_lock+0x10>
 8008156:	e000      	b.n	800815a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008158:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b02      	cmp	r3, #2
 800815e:	d132      	bne.n	80081c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008160:	2300      	movs	r3, #0
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	e002      	b.n	800816c <inc_lock+0x6c>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d806      	bhi.n	8008180 <inc_lock+0x80>
 8008172:	4a29      	ldr	r2, [pc, #164]	; (8008218 <inc_lock+0x118>)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	011b      	lsls	r3, r3, #4
 8008178:	4413      	add	r3, r2
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1f2      	bne.n	8008166 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b02      	cmp	r3, #2
 8008184:	d101      	bne.n	800818a <inc_lock+0x8a>
 8008186:	2300      	movs	r3, #0
 8008188:	e040      	b.n	800820c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4922      	ldr	r1, [pc, #136]	; (8008218 <inc_lock+0x118>)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	440b      	add	r3, r1
 8008196:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	491e      	ldr	r1, [pc, #120]	; (8008218 <inc_lock+0x118>)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	440b      	add	r3, r1
 80081a4:	3304      	adds	r3, #4
 80081a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	695a      	ldr	r2, [r3, #20]
 80081ac:	491a      	ldr	r1, [pc, #104]	; (8008218 <inc_lock+0x118>)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	011b      	lsls	r3, r3, #4
 80081b2:	440b      	add	r3, r1
 80081b4:	3308      	adds	r3, #8
 80081b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80081b8:	4a17      	ldr	r2, [pc, #92]	; (8008218 <inc_lock+0x118>)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	4413      	add	r3, r2
 80081c0:	330c      	adds	r3, #12
 80081c2:	2200      	movs	r2, #0
 80081c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <inc_lock+0xe0>
 80081cc:	4a12      	ldr	r2, [pc, #72]	; (8008218 <inc_lock+0x118>)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	4413      	add	r3, r2
 80081d4:	330c      	adds	r3, #12
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <inc_lock+0xe0>
 80081dc:	2300      	movs	r3, #0
 80081de:	e015      	b.n	800820c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d108      	bne.n	80081f8 <inc_lock+0xf8>
 80081e6:	4a0c      	ldr	r2, [pc, #48]	; (8008218 <inc_lock+0x118>)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	4413      	add	r3, r2
 80081ee:	330c      	adds	r3, #12
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	3301      	adds	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	e001      	b.n	80081fc <inc_lock+0xfc>
 80081f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081fc:	4906      	ldr	r1, [pc, #24]	; (8008218 <inc_lock+0x118>)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	440b      	add	r3, r1
 8008204:	330c      	adds	r3, #12
 8008206:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	3301      	adds	r3, #1
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	20002644 	.word	0x20002644

0800821c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	3b01      	subs	r3, #1
 8008228:	607b      	str	r3, [r7, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d825      	bhi.n	800827c <dec_lock+0x60>
		n = Files[i].ctr;
 8008230:	4a17      	ldr	r2, [pc, #92]	; (8008290 <dec_lock+0x74>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	4413      	add	r3, r2
 8008238:	330c      	adds	r3, #12
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800823e:	89fb      	ldrh	r3, [r7, #14]
 8008240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008244:	d101      	bne.n	800824a <dec_lock+0x2e>
 8008246:	2300      	movs	r3, #0
 8008248:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800824a:	89fb      	ldrh	r3, [r7, #14]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <dec_lock+0x3a>
 8008250:	89fb      	ldrh	r3, [r7, #14]
 8008252:	3b01      	subs	r3, #1
 8008254:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008256:	4a0e      	ldr	r2, [pc, #56]	; (8008290 <dec_lock+0x74>)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	4413      	add	r3, r2
 800825e:	330c      	adds	r3, #12
 8008260:	89fa      	ldrh	r2, [r7, #14]
 8008262:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008264:	89fb      	ldrh	r3, [r7, #14]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <dec_lock+0x5a>
 800826a:	4a09      	ldr	r2, [pc, #36]	; (8008290 <dec_lock+0x74>)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	4413      	add	r3, r2
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	737b      	strb	r3, [r7, #13]
 800827a:	e001      	b.n	8008280 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800827c:	2302      	movs	r3, #2
 800827e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008280:	7b7b      	ldrb	r3, [r7, #13]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20002644 	.word	0x20002644

08008294 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	e010      	b.n	80082c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80082a2:	4a0d      	ldr	r2, [pc, #52]	; (80082d8 <clear_lock+0x44>)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	4413      	add	r3, r2
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d105      	bne.n	80082be <clear_lock+0x2a>
 80082b2:	4a09      	ldr	r2, [pc, #36]	; (80082d8 <clear_lock+0x44>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	4413      	add	r3, r2
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3301      	adds	r3, #1
 80082c2:	60fb      	str	r3, [r7, #12]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d9eb      	bls.n	80082a2 <clear_lock+0xe>
	}
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20002644 	.word	0x20002644

080082dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	78db      	ldrb	r3, [r3, #3]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d034      	beq.n	800835a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	7858      	ldrb	r0, [r3, #1]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008300:	2301      	movs	r3, #1
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	f7ff fd40 	bl	8007d88 <disk_write>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <sync_window+0x38>
			res = FR_DISK_ERR;
 800830e:	2301      	movs	r3, #1
 8008310:	73fb      	strb	r3, [r7, #15]
 8008312:	e022      	b.n	800835a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	1ad2      	subs	r2, r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	429a      	cmp	r2, r3
 8008328:	d217      	bcs.n	800835a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	789b      	ldrb	r3, [r3, #2]
 800832e:	613b      	str	r3, [r7, #16]
 8008330:	e010      	b.n	8008354 <sync_window+0x78>
					wsect += fs->fsize;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	4413      	add	r3, r2
 800833a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	7858      	ldrb	r0, [r3, #1]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008346:	2301      	movs	r3, #1
 8008348:	697a      	ldr	r2, [r7, #20]
 800834a:	f7ff fd1d 	bl	8007d88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	3b01      	subs	r3, #1
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d8eb      	bhi.n	8008332 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	429a      	cmp	r2, r3
 800837a:	d01b      	beq.n	80083b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f7ff ffad 	bl	80082dc <sync_window>
 8008382:	4603      	mov	r3, r0
 8008384:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d113      	bne.n	80083b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	7858      	ldrb	r0, [r3, #1]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008396:	2301      	movs	r3, #1
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	f7ff fcd5 	bl	8007d48 <disk_read>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d004      	beq.n	80083ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80083a4:	f04f 33ff 	mov.w	r3, #4294967295
 80083a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff ff87 	bl	80082dc <sync_window>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d159      	bne.n	800848c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d149      	bne.n	8008474 <sync_fs+0xb4>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	791b      	ldrb	r3, [r3, #4]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d145      	bne.n	8008474 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	899b      	ldrh	r3, [r3, #12]
 80083f2:	461a      	mov	r2, r3
 80083f4:	2100      	movs	r1, #0
 80083f6:	f7ff fda8 	bl	8007f4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	3338      	adds	r3, #56	; 0x38
 80083fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008402:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fd37 	bl	8007e7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3338      	adds	r3, #56	; 0x38
 8008410:	4921      	ldr	r1, [pc, #132]	; (8008498 <sync_fs+0xd8>)
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff fd4c 	bl	8007eb0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3338      	adds	r3, #56	; 0x38
 800841c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008420:	491e      	ldr	r1, [pc, #120]	; (800849c <sync_fs+0xdc>)
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff fd44 	bl	8007eb0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	3338      	adds	r3, #56	; 0x38
 800842c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	4619      	mov	r1, r3
 8008436:	4610      	mov	r0, r2
 8008438:	f7ff fd3a 	bl	8007eb0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	3338      	adds	r3, #56	; 0x38
 8008440:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7ff fd30 	bl	8007eb0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	7858      	ldrb	r0, [r3, #1]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008468:	2301      	movs	r3, #1
 800846a:	f7ff fc8d 	bl	8007d88 <disk_write>
			fs->fsi_flag = 0;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	785b      	ldrb	r3, [r3, #1]
 8008478:	2200      	movs	r2, #0
 800847a:	2100      	movs	r1, #0
 800847c:	4618      	mov	r0, r3
 800847e:	f7ff fca3 	bl	8007dc8 <disk_ioctl>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <sync_fs+0xcc>
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	41615252 	.word	0x41615252
 800849c:	61417272 	.word	0x61417272

080084a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	3b02      	subs	r3, #2
 80084ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	3b02      	subs	r3, #2
 80084b6:	683a      	ldr	r2, [r7, #0]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d301      	bcc.n	80084c0 <clust2sect+0x20>
 80084bc:	2300      	movs	r3, #0
 80084be:	e008      	b.n	80084d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	895b      	ldrh	r3, [r3, #10]
 80084c4:	461a      	mov	r2, r3
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	fb03 f202 	mul.w	r2, r3, r2
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	4413      	add	r3, r2
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d904      	bls.n	80084fe <get_fat+0x20>
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d302      	bcc.n	8008504 <get_fat+0x26>
		val = 1;	/* Internal error */
 80084fe:	2301      	movs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
 8008502:	e0bb      	b.n	800867c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008504:	f04f 33ff 	mov.w	r3, #4294967295
 8008508:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b03      	cmp	r3, #3
 8008510:	f000 8083 	beq.w	800861a <get_fat+0x13c>
 8008514:	2b03      	cmp	r3, #3
 8008516:	f300 80a7 	bgt.w	8008668 <get_fat+0x18a>
 800851a:	2b01      	cmp	r3, #1
 800851c:	d002      	beq.n	8008524 <get_fat+0x46>
 800851e:	2b02      	cmp	r3, #2
 8008520:	d056      	beq.n	80085d0 <get_fat+0xf2>
 8008522:	e0a1      	b.n	8008668 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	085b      	lsrs	r3, r3, #1
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	899b      	ldrh	r3, [r3, #12]
 800853a:	4619      	mov	r1, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008542:	4413      	add	r3, r2
 8008544:	4619      	mov	r1, r3
 8008546:	6938      	ldr	r0, [r7, #16]
 8008548:	f7ff ff0c 	bl	8008364 <move_window>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 808d 	bne.w	800866e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	60fa      	str	r2, [r7, #12]
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	8992      	ldrh	r2, [r2, #12]
 800855e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008562:	fb01 f202 	mul.w	r2, r1, r2
 8008566:	1a9b      	subs	r3, r3, r2
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4413      	add	r3, r2
 800856c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008570:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	899b      	ldrh	r3, [r3, #12]
 800857a:	4619      	mov	r1, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008582:	4413      	add	r3, r2
 8008584:	4619      	mov	r1, r3
 8008586:	6938      	ldr	r0, [r7, #16]
 8008588:	f7ff feec 	bl	8008364 <move_window>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d16f      	bne.n	8008672 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	899b      	ldrh	r3, [r3, #12]
 8008596:	461a      	mov	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	fbb3 f1f2 	udiv	r1, r3, r2
 800859e:	fb01 f202 	mul.w	r2, r1, r2
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	461a      	mov	r2, r3
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <get_fat+0xe8>
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	091b      	lsrs	r3, r3, #4
 80085c4:	e002      	b.n	80085cc <get_fat+0xee>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085cc:	617b      	str	r3, [r7, #20]
			break;
 80085ce:	e055      	b.n	800867c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	899b      	ldrh	r3, [r3, #12]
 80085d8:	085b      	lsrs	r3, r3, #1
 80085da:	b29b      	uxth	r3, r3
 80085dc:	4619      	mov	r1, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80085e4:	4413      	add	r3, r2
 80085e6:	4619      	mov	r1, r3
 80085e8:	6938      	ldr	r0, [r7, #16]
 80085ea:	f7ff febb 	bl	8008364 <move_window>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d140      	bne.n	8008676 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	8992      	ldrh	r2, [r2, #12]
 8008602:	fbb3 f0f2 	udiv	r0, r3, r2
 8008606:	fb00 f202 	mul.w	r2, r0, r2
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	440b      	add	r3, r1
 800860e:	4618      	mov	r0, r3
 8008610:	f7ff fbf8 	bl	8007e04 <ld_word>
 8008614:	4603      	mov	r3, r0
 8008616:	617b      	str	r3, [r7, #20]
			break;
 8008618:	e030      	b.n	800867c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	899b      	ldrh	r3, [r3, #12]
 8008622:	089b      	lsrs	r3, r3, #2
 8008624:	b29b      	uxth	r3, r3
 8008626:	4619      	mov	r1, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	fbb3 f3f1 	udiv	r3, r3, r1
 800862e:	4413      	add	r3, r2
 8008630:	4619      	mov	r1, r3
 8008632:	6938      	ldr	r0, [r7, #16]
 8008634:	f7ff fe96 	bl	8008364 <move_window>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d11d      	bne.n	800867a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	8992      	ldrh	r2, [r2, #12]
 800864c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008650:	fb00 f202 	mul.w	r2, r0, r2
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	440b      	add	r3, r1
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff fbeb 	bl	8007e34 <ld_dword>
 800865e:	4603      	mov	r3, r0
 8008660:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008664:	617b      	str	r3, [r7, #20]
			break;
 8008666:	e009      	b.n	800867c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008668:	2301      	movs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e006      	b.n	800867c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800866e:	bf00      	nop
 8008670:	e004      	b.n	800867c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008672:	bf00      	nop
 8008674:	e002      	b.n	800867c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008676:	bf00      	nop
 8008678:	e000      	b.n	800867c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800867a:	bf00      	nop
		}
	}

	return val;
 800867c:	697b      	ldr	r3, [r7, #20]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008686:	b590      	push	{r4, r7, lr}
 8008688:	b089      	sub	sp, #36	; 0x24
 800868a:	af00      	add	r7, sp, #0
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008692:	2302      	movs	r3, #2
 8008694:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b01      	cmp	r3, #1
 800869a:	f240 8109 	bls.w	80088b0 <put_fat+0x22a>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	f080 8103 	bcs.w	80088b0 <put_fat+0x22a>
		switch (fs->fs_type) {
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f000 80b6 	beq.w	8008820 <put_fat+0x19a>
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	f300 80fb 	bgt.w	80088b0 <put_fat+0x22a>
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d003      	beq.n	80086c6 <put_fat+0x40>
 80086be:	2b02      	cmp	r3, #2
 80086c0:	f000 8083 	beq.w	80087ca <put_fat+0x144>
 80086c4:	e0f4      	b.n	80088b0 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	085b      	lsrs	r3, r3, #1
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4413      	add	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	899b      	ldrh	r3, [r3, #12]
 80086dc:	4619      	mov	r1, r3
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80086e4:	4413      	add	r3, r2
 80086e6:	4619      	mov	r1, r3
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	f7ff fe3b 	bl	8008364 <move_window>
 80086ee:	4603      	mov	r3, r0
 80086f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086f2:	7ffb      	ldrb	r3, [r7, #31]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f040 80d4 	bne.w	80088a2 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	61ba      	str	r2, [r7, #24]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	8992      	ldrh	r2, [r2, #12]
 800870a:	fbb3 f0f2 	udiv	r0, r3, r2
 800870e:	fb00 f202 	mul.w	r2, r0, r2
 8008712:	1a9b      	subs	r3, r3, r2
 8008714:	440b      	add	r3, r1
 8008716:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00d      	beq.n	800873e <put_fat+0xb8>
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b25b      	sxtb	r3, r3
 8008728:	f003 030f 	and.w	r3, r3, #15
 800872c:	b25a      	sxtb	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	011b      	lsls	r3, r3, #4
 8008734:	b25b      	sxtb	r3, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	b25b      	sxtb	r3, r3
 800873a:	b2db      	uxtb	r3, r3
 800873c:	e001      	b.n	8008742 <put_fat+0xbc>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	899b      	ldrh	r3, [r3, #12]
 8008754:	4619      	mov	r1, r3
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	fbb3 f3f1 	udiv	r3, r3, r1
 800875c:	4413      	add	r3, r2
 800875e:	4619      	mov	r1, r3
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7ff fdff 	bl	8008364 <move_window>
 8008766:	4603      	mov	r3, r0
 8008768:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800876a:	7ffb      	ldrb	r3, [r7, #31]
 800876c:	2b00      	cmp	r3, #0
 800876e:	f040 809a 	bne.w	80088a6 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	899b      	ldrh	r3, [r3, #12]
 800877c:	461a      	mov	r2, r3
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	fbb3 f0f2 	udiv	r0, r3, r2
 8008784:	fb00 f202 	mul.w	r2, r0, r2
 8008788:	1a9b      	subs	r3, r3, r2
 800878a:	440b      	add	r3, r1
 800878c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <put_fat+0x11a>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	091b      	lsrs	r3, r3, #4
 800879c:	b2db      	uxtb	r3, r3
 800879e:	e00e      	b.n	80087be <put_fat+0x138>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	b25b      	sxtb	r3, r3
 80087a6:	f023 030f 	bic.w	r3, r3, #15
 80087aa:	b25a      	sxtb	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	0a1b      	lsrs	r3, r3, #8
 80087b0:	b25b      	sxtb	r3, r3
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	b25b      	sxtb	r3, r3
 80087b8:	4313      	orrs	r3, r2
 80087ba:	b25b      	sxtb	r3, r3
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	70da      	strb	r2, [r3, #3]
			break;
 80087c8:	e072      	b.n	80088b0 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	899b      	ldrh	r3, [r3, #12]
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	4619      	mov	r1, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	fbb3 f3f1 	udiv	r3, r3, r1
 80087de:	4413      	add	r3, r2
 80087e0:	4619      	mov	r1, r3
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f7ff fdbe 	bl	8008364 <move_window>
 80087e8:	4603      	mov	r3, r0
 80087ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087ec:	7ffb      	ldrb	r3, [r7, #31]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d15b      	bne.n	80088aa <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	005b      	lsls	r3, r3, #1
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	8992      	ldrh	r2, [r2, #12]
 8008800:	fbb3 f0f2 	udiv	r0, r3, r2
 8008804:	fb00 f202 	mul.w	r2, r0, r2
 8008808:	1a9b      	subs	r3, r3, r2
 800880a:	440b      	add	r3, r1
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	b292      	uxth	r2, r2
 8008810:	4611      	mov	r1, r2
 8008812:	4618      	mov	r0, r3
 8008814:	f7ff fb31 	bl	8007e7a <st_word>
			fs->wflag = 1;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2201      	movs	r2, #1
 800881c:	70da      	strb	r2, [r3, #3]
			break;
 800881e:	e047      	b.n	80088b0 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	899b      	ldrh	r3, [r3, #12]
 8008828:	089b      	lsrs	r3, r3, #2
 800882a:	b29b      	uxth	r3, r3
 800882c:	4619      	mov	r1, r3
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	fbb3 f3f1 	udiv	r3, r3, r1
 8008834:	4413      	add	r3, r2
 8008836:	4619      	mov	r1, r3
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7ff fd93 	bl	8008364 <move_window>
 800883e:	4603      	mov	r3, r0
 8008840:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008842:	7ffb      	ldrb	r3, [r7, #31]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d132      	bne.n	80088ae <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	8992      	ldrh	r2, [r2, #12]
 800885c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008860:	fb00 f202 	mul.w	r2, r0, r2
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	440b      	add	r3, r1
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff fae3 	bl	8007e34 <ld_dword>
 800886e:	4603      	mov	r3, r0
 8008870:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008874:	4323      	orrs	r3, r4
 8008876:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	8992      	ldrh	r2, [r2, #12]
 8008886:	fbb3 f0f2 	udiv	r0, r3, r2
 800888a:	fb00 f202 	mul.w	r2, r0, r2
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	440b      	add	r3, r1
 8008892:	6879      	ldr	r1, [r7, #4]
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff fb0b 	bl	8007eb0 <st_dword>
			fs->wflag = 1;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2201      	movs	r2, #1
 800889e:	70da      	strb	r2, [r3, #3]
			break;
 80088a0:	e006      	b.n	80088b0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80088a2:	bf00      	nop
 80088a4:	e004      	b.n	80088b0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80088a6:	bf00      	nop
 80088a8:	e002      	b.n	80088b0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80088aa:	bf00      	nop
 80088ac:	e000      	b.n	80088b0 <put_fat+0x22a>
			if (res != FR_OK) break;
 80088ae:	bf00      	nop
		}
	}
	return res;
 80088b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3724      	adds	r7, #36	; 0x24
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd90      	pop	{r4, r7, pc}

080088ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b088      	sub	sp, #32
 80088be:	af00      	add	r7, sp, #0
 80088c0:	60f8      	str	r0, [r7, #12]
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d904      	bls.n	80088e0 <remove_chain+0x26>
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d301      	bcc.n	80088e4 <remove_chain+0x2a>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e04b      	b.n	800897c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00c      	beq.n	8008904 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80088ea:	f04f 32ff 	mov.w	r2, #4294967295
 80088ee:	6879      	ldr	r1, [r7, #4]
 80088f0:	69b8      	ldr	r0, [r7, #24]
 80088f2:	f7ff fec8 	bl	8008686 <put_fat>
 80088f6:	4603      	mov	r3, r0
 80088f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80088fa:	7ffb      	ldrb	r3, [r7, #31]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <remove_chain+0x4a>
 8008900:	7ffb      	ldrb	r3, [r7, #31]
 8008902:	e03b      	b.n	800897c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7ff fde9 	bl	80084de <get_fat>
 800890c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d031      	beq.n	8008978 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d101      	bne.n	800891e <remove_chain+0x64>
 800891a:	2302      	movs	r3, #2
 800891c:	e02e      	b.n	800897c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008924:	d101      	bne.n	800892a <remove_chain+0x70>
 8008926:	2301      	movs	r3, #1
 8008928:	e028      	b.n	800897c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800892a:	2200      	movs	r2, #0
 800892c:	68b9      	ldr	r1, [r7, #8]
 800892e:	69b8      	ldr	r0, [r7, #24]
 8008930:	f7ff fea9 	bl	8008686 <put_fat>
 8008934:	4603      	mov	r3, r0
 8008936:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008938:	7ffb      	ldrb	r3, [r7, #31]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <remove_chain+0x88>
 800893e:	7ffb      	ldrb	r3, [r7, #31]
 8008940:	e01c      	b.n	800897c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	3b02      	subs	r3, #2
 800894c:	429a      	cmp	r2, r3
 800894e:	d20b      	bcs.n	8008968 <remove_chain+0xae>
			fs->free_clst++;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	791b      	ldrb	r3, [r3, #4]
 800895e:	f043 0301 	orr.w	r3, r3, #1
 8008962:	b2da      	uxtb	r2, r3
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	429a      	cmp	r2, r3
 8008974:	d3c6      	bcc.n	8008904 <remove_chain+0x4a>
 8008976:	e000      	b.n	800897a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008978:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10d      	bne.n	80089b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d004      	beq.n	80089b0 <create_chain+0x2c>
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	69ba      	ldr	r2, [r7, #24]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d31b      	bcc.n	80089e8 <create_chain+0x64>
 80089b0:	2301      	movs	r3, #1
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	e018      	b.n	80089e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7ff fd90 	bl	80084de <get_fat>
 80089be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d801      	bhi.n	80089ca <create_chain+0x46>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e070      	b.n	8008aac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d0:	d101      	bne.n	80089d6 <create_chain+0x52>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	e06a      	b.n	8008aac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	69db      	ldr	r3, [r3, #28]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d201      	bcs.n	80089e4 <create_chain+0x60>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	e063      	b.n	8008aac <create_chain+0x128>
		scl = clst;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80089e8:	69bb      	ldr	r3, [r7, #24]
 80089ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	3301      	adds	r3, #1
 80089f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	69fa      	ldr	r2, [r7, #28]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d307      	bcc.n	8008a0c <create_chain+0x88>
				ncl = 2;
 80089fc:	2302      	movs	r3, #2
 80089fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a00:	69fa      	ldr	r2, [r7, #28]
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d901      	bls.n	8008a0c <create_chain+0x88>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e04f      	b.n	8008aac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a0c:	69f9      	ldr	r1, [r7, #28]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7ff fd65 	bl	80084de <get_fat>
 8008a14:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00e      	beq.n	8008a3a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d003      	beq.n	8008a2a <create_chain+0xa6>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a28:	d101      	bne.n	8008a2e <create_chain+0xaa>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	e03e      	b.n	8008aac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d1da      	bne.n	80089ec <create_chain+0x68>
 8008a36:	2300      	movs	r3, #0
 8008a38:	e038      	b.n	8008aac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008a3a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a40:	69f9      	ldr	r1, [r7, #28]
 8008a42:	6938      	ldr	r0, [r7, #16]
 8008a44:	f7ff fe1f 	bl	8008686 <put_fat>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <create_chain+0xe2>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d006      	beq.n	8008a66 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008a58:	69fa      	ldr	r2, [r7, #28]
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6938      	ldr	r0, [r7, #16]
 8008a5e:	f7ff fe12 	bl	8008686 <put_fat>
 8008a62:	4603      	mov	r3, r0
 8008a64:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008a66:	7dfb      	ldrb	r3, [r7, #23]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d116      	bne.n	8008a9a <create_chain+0x116>
		fs->last_clst = ncl;
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	3b02      	subs	r3, #2
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d804      	bhi.n	8008a8a <create_chain+0x106>
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	1e5a      	subs	r2, r3, #1
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	791b      	ldrb	r3, [r3, #4]
 8008a8e:	f043 0301 	orr.w	r3, r3, #1
 8008a92:	b2da      	uxtb	r2, r3
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	711a      	strb	r2, [r3, #4]
 8008a98:	e007      	b.n	8008aaa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d102      	bne.n	8008aa6 <create_chain+0x122>
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa4:	e000      	b.n	8008aa8 <create_chain+0x124>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008aaa:	69fb      	ldr	r3, [r7, #28]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3720      	adds	r7, #32
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	3304      	adds	r3, #4
 8008aca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	899b      	ldrh	r3, [r3, #12]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	8952      	ldrh	r2, [r2, #10]
 8008adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ae0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1d1a      	adds	r2, r3, #4
 8008ae6:	613a      	str	r2, [r7, #16]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <clmt_clust+0x42>
 8008af2:	2300      	movs	r3, #0
 8008af4:	e010      	b.n	8008b18 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d307      	bcc.n	8008b0e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b0c:	e7e9      	b.n	8008ae2 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008b0e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	4413      	add	r3, r2
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b3a:	d204      	bcs.n	8008b46 <dir_sdi+0x22>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	f003 031f 	and.w	r3, r3, #31
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008b46:	2302      	movs	r3, #2
 8008b48:	e071      	b.n	8008c2e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <dir_sdi+0x46>
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d902      	bls.n	8008b6a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10c      	bne.n	8008b8a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	095b      	lsrs	r3, r3, #5
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	8912      	ldrh	r2, [r2, #8]
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d301      	bcc.n	8008b80 <dir_sdi+0x5c>
 8008b7c:	2302      	movs	r3, #2
 8008b7e:	e056      	b.n	8008c2e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	61da      	str	r2, [r3, #28]
 8008b88:	e02d      	b.n	8008be6 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	895b      	ldrh	r3, [r3, #10]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	899b      	ldrh	r3, [r3, #12]
 8008b94:	fb02 f303 	mul.w	r3, r2, r3
 8008b98:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b9a:	e019      	b.n	8008bd0 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6979      	ldr	r1, [r7, #20]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff fc9c 	bl	80084de <get_fat>
 8008ba6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bae:	d101      	bne.n	8008bb4 <dir_sdi+0x90>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e03c      	b.n	8008c2e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d904      	bls.n	8008bc4 <dir_sdi+0xa0>
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d301      	bcc.n	8008bc8 <dir_sdi+0xa4>
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	e032      	b.n	8008c2e <dir_sdi+0x10a>
			ofs -= csz;
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d2e1      	bcs.n	8008b9c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008bd8:	6979      	ldr	r1, [r7, #20]
 8008bda:	6938      	ldr	r0, [r7, #16]
 8008bdc:	f7ff fc60 	bl	80084a0 <clust2sect>
 8008be0:	4602      	mov	r2, r0
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <dir_sdi+0xd4>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e01a      	b.n	8008c2e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	69da      	ldr	r2, [r3, #28]
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	899b      	ldrh	r3, [r3, #12]
 8008c00:	4619      	mov	r1, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c08:	441a      	add	r2, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	899b      	ldrh	r3, [r3, #12]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008c20:	fb00 f202 	mul.w	r2, r0, r2
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	18ca      	adds	r2, r1, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b086      	sub	sp, #24
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	3320      	adds	r3, #32
 8008c4c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <dir_next+0x28>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c5c:	d301      	bcc.n	8008c62 <dir_next+0x2c>
 8008c5e:	2304      	movs	r3, #4
 8008c60:	e0bb      	b.n	8008dda <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	899b      	ldrh	r3, [r3, #12]
 8008c66:	461a      	mov	r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c6e:	fb01 f202 	mul.w	r2, r1, r2
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 809d 	bne.w	8008db4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10b      	bne.n	8008ca4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	095b      	lsrs	r3, r3, #5
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	8912      	ldrh	r2, [r2, #8]
 8008c94:	4293      	cmp	r3, r2
 8008c96:	f0c0 808d 	bcc.w	8008db4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	61da      	str	r2, [r3, #28]
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	e09a      	b.n	8008dda <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	899b      	ldrh	r3, [r3, #12]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	8952      	ldrh	r2, [r2, #10]
 8008cb4:	3a01      	subs	r2, #1
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d17b      	bne.n	8008db4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	f7ff fc0a 	bl	80084de <get_fat>
 8008cca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d801      	bhi.n	8008cd6 <dir_next+0xa0>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e081      	b.n	8008dda <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cdc:	d101      	bne.n	8008ce2 <dir_next+0xac>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e07b      	b.n	8008dda <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d359      	bcc.n	8008da0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	61da      	str	r2, [r3, #28]
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	e06e      	b.n	8008dda <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7ff fe3d 	bl	8008984 <create_chain>
 8008d0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <dir_next+0xe0>
 8008d12:	2307      	movs	r3, #7
 8008d14:	e061      	b.n	8008dda <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d101      	bne.n	8008d20 <dir_next+0xea>
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	e05c      	b.n	8008dda <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d26:	d101      	bne.n	8008d2c <dir_next+0xf6>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e056      	b.n	8008dda <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f7ff fad5 	bl	80082dc <sync_window>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <dir_next+0x106>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e04e      	b.n	8008dda <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	899b      	ldrh	r3, [r3, #12]
 8008d46:	461a      	mov	r2, r3
 8008d48:	2100      	movs	r1, #0
 8008d4a:	f7ff f8fe 	bl	8007f4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d4e:	2300      	movs	r3, #0
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	6979      	ldr	r1, [r7, #20]
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7ff fba3 	bl	80084a0 <clust2sect>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	635a      	str	r2, [r3, #52]	; 0x34
 8008d60:	e012      	b.n	8008d88 <dir_next+0x152>
						fs->wflag = 1;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7ff fab7 	bl	80082dc <sync_window>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <dir_next+0x142>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e030      	b.n	8008dda <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	613b      	str	r3, [r7, #16]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	635a      	str	r2, [r3, #52]	; 0x34
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	895b      	ldrh	r3, [r3, #10]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d3e6      	bcc.n	8008d62 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	1ad2      	subs	r2, r2, r3
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	697a      	ldr	r2, [r7, #20]
 8008da4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008da6:	6979      	ldr	r1, [r7, #20]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff fb79 	bl	80084a0 <clust2sect>
 8008dae:	4602      	mov	r2, r0
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	899b      	ldrh	r3, [r3, #12]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	fbb3 f0f2 	udiv	r0, r3, r2
 8008dcc:	fb00 f202 	mul.w	r2, r0, r2
 8008dd0:	1a9b      	subs	r3, r3, r2
 8008dd2:	18ca      	adds	r2, r1, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b086      	sub	sp, #24
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008df2:	2100      	movs	r1, #0
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff fe95 	bl	8008b24 <dir_sdi>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d12b      	bne.n	8008e5c <dir_alloc+0x7a>
		n = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff faa8 	bl	8008364 <move_window>
 8008e14:	4603      	mov	r3, r0
 8008e16:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d11d      	bne.n	8008e5a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2be5      	cmp	r3, #229	; 0xe5
 8008e26:	d004      	beq.n	8008e32 <dir_alloc+0x50>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a1b      	ldr	r3, [r3, #32]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d107      	bne.n	8008e42 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	3301      	adds	r3, #1
 8008e36:	613b      	str	r3, [r7, #16]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d102      	bne.n	8008e46 <dir_alloc+0x64>
 8008e40:	e00c      	b.n	8008e5c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008e42:	2300      	movs	r3, #0
 8008e44:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008e46:	2101      	movs	r1, #1
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f7ff fef4 	bl	8008c36 <dir_next>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0d7      	beq.n	8008e08 <dir_alloc+0x26>
 8008e58:	e000      	b.n	8008e5c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008e5a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d101      	bne.n	8008e66 <dir_alloc+0x84>
 8008e62:	2307      	movs	r3, #7
 8008e64:	75fb      	strb	r3, [r7, #23]
	return res;
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	331a      	adds	r3, #26
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe ffc0 	bl	8007e04 <ld_word>
 8008e84:	4603      	mov	r3, r0
 8008e86:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	d109      	bne.n	8008ea4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	3314      	adds	r3, #20
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe ffb5 	bl	8007e04 <ld_word>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	041b      	lsls	r3, r3, #16
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	331a      	adds	r3, #26
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	b292      	uxth	r2, r2
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7fe ffd8 	bl	8007e7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d109      	bne.n	8008ee6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f103 0214 	add.w	r2, r3, #20
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	0c1b      	lsrs	r3, r3, #16
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	f7fe ffca 	bl	8007e7a <st_word>
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008ef0:	b590      	push	{r4, r7, lr}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	331a      	adds	r3, #26
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe ff80 	bl	8007e04 <ld_word>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <cmp_lfn+0x1e>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	e059      	b.n	8008fc2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	4613      	mov	r3, r2
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	4413      	add	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f24:	2301      	movs	r3, #1
 8008f26:	81fb      	strh	r3, [r7, #14]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	e033      	b.n	8008f96 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8008f2e:	4a27      	ldr	r2, [pc, #156]	; (8008fcc <cmp_lfn+0xdc>)
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	4413      	add	r3, r2
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fe ff61 	bl	8007e04 <ld_word>
 8008f42:	4603      	mov	r3, r0
 8008f44:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008f46:	89fb      	ldrh	r3, [r7, #14]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d01a      	beq.n	8008f82 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2bfe      	cmp	r3, #254	; 0xfe
 8008f50:	d812      	bhi.n	8008f78 <cmp_lfn+0x88>
 8008f52:	89bb      	ldrh	r3, [r7, #12]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f001 fe11 	bl	800ab7c <ff_wtoupper>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	461c      	mov	r4, r3
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	617a      	str	r2, [r7, #20]
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	4413      	add	r3, r2
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f001 fe05 	bl	800ab7c <ff_wtoupper>
 8008f72:	4603      	mov	r3, r0
 8008f74:	429c      	cmp	r4, r3
 8008f76:	d001      	beq.n	8008f7c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e022      	b.n	8008fc2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8008f7c:	89bb      	ldrh	r3, [r7, #12]
 8008f7e:	81fb      	strh	r3, [r7, #14]
 8008f80:	e006      	b.n	8008f90 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008f82:	89bb      	ldrh	r3, [r7, #12]
 8008f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d001      	beq.n	8008f90 <cmp_lfn+0xa0>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e018      	b.n	8008fc2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	3301      	adds	r3, #1
 8008f94:	613b      	str	r3, [r7, #16]
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b0c      	cmp	r3, #12
 8008f9a:	d9c8      	bls.n	8008f2e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <cmp_lfn+0xd0>
 8008fa8:	89fb      	ldrh	r3, [r7, #14]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d008      	beq.n	8008fc0 <cmp_lfn+0xd0>
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <cmp_lfn+0xd0>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e000      	b.n	8008fc2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008fc0:	2301      	movs	r3, #1
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd90      	pop	{r4, r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	0800ba80 	.word	0x0800ba80

08008fd0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4611      	mov	r1, r2
 8008fdc:	461a      	mov	r2, r3
 8008fde:	460b      	mov	r3, r1
 8008fe0:	71fb      	strb	r3, [r7, #7]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	330d      	adds	r3, #13
 8008fea:	79ba      	ldrb	r2, [r7, #6]
 8008fec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	330b      	adds	r3, #11
 8008ff2:	220f      	movs	r2, #15
 8008ff4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	330c      	adds	r3, #12
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	331a      	adds	r3, #26
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe ff38 	bl	8007e7a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800900a:	79fb      	ldrb	r3, [r7, #7]
 800900c:	1e5a      	subs	r2, r3, #1
 800900e:	4613      	mov	r3, r2
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800901a:	2300      	movs	r3, #0
 800901c:	82fb      	strh	r3, [r7, #22]
 800901e:	2300      	movs	r3, #0
 8009020:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009022:	8afb      	ldrh	r3, [r7, #22]
 8009024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009028:	4293      	cmp	r3, r2
 800902a:	d007      	beq.n	800903c <put_lfn+0x6c>
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	61fa      	str	r2, [r7, #28]
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	4413      	add	r3, r2
 8009038:	881b      	ldrh	r3, [r3, #0]
 800903a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800903c:	4a17      	ldr	r2, [pc, #92]	; (800909c <put_lfn+0xcc>)
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	4413      	add	r3, r2
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	461a      	mov	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	4413      	add	r3, r2
 800904a:	8afa      	ldrh	r2, [r7, #22]
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe ff13 	bl	8007e7a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009054:	8afb      	ldrh	r3, [r7, #22]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d102      	bne.n	8009060 <put_lfn+0x90>
 800905a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800905e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	3301      	adds	r3, #1
 8009064:	61bb      	str	r3, [r7, #24]
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	2b0c      	cmp	r3, #12
 800906a:	d9da      	bls.n	8009022 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800906c:	8afb      	ldrh	r3, [r7, #22]
 800906e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009072:	4293      	cmp	r3, r2
 8009074:	d006      	beq.n	8009084 <put_lfn+0xb4>
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	005b      	lsls	r3, r3, #1
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <put_lfn+0xbc>
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800908a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	79fa      	ldrb	r2, [r7, #7]
 8009090:	701a      	strb	r2, [r3, #0]
}
 8009092:	bf00      	nop
 8009094:	3720      	adds	r7, #32
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	0800ba80 	.word	0x0800ba80

080090a0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08c      	sub	sp, #48	; 0x30
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80090ae:	220b      	movs	r2, #11
 80090b0:	68b9      	ldr	r1, [r7, #8]
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7fe ff28 	bl	8007f08 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	2b05      	cmp	r3, #5
 80090bc:	d92b      	bls.n	8009116 <gen_numname+0x76>
		sr = seq;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80090c2:	e022      	b.n	800910a <gen_numname+0x6a>
			wc = *lfn++;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	1c9a      	adds	r2, r3, #2
 80090c8:	607a      	str	r2, [r7, #4]
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80090ce:	2300      	movs	r3, #0
 80090d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80090d2:	e017      	b.n	8009104 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	005a      	lsls	r2, r3, #1
 80090d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	4413      	add	r3, r2
 80090e0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80090e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090e4:	085b      	lsrs	r3, r3, #1
 80090e6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d005      	beq.n	80090fe <gen_numname+0x5e>
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80090f8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80090fc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	3301      	adds	r3, #1
 8009102:	62bb      	str	r3, [r7, #40]	; 0x28
 8009104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009106:	2b0f      	cmp	r3, #15
 8009108:	d9e4      	bls.n	80090d4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	881b      	ldrh	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1d8      	bne.n	80090c4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009116:	2307      	movs	r3, #7
 8009118:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	b2db      	uxtb	r3, r3
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	b2db      	uxtb	r3, r3
 8009124:	3330      	adds	r3, #48	; 0x30
 8009126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800912a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800912e:	2b39      	cmp	r3, #57	; 0x39
 8009130:	d904      	bls.n	800913c <gen_numname+0x9c>
 8009132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009136:	3307      	adds	r3, #7
 8009138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	1e5a      	subs	r2, r3, #1
 8009140:	62ba      	str	r2, [r7, #40]	; 0x28
 8009142:	3330      	adds	r3, #48	; 0x30
 8009144:	443b      	add	r3, r7
 8009146:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800914a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	091b      	lsrs	r3, r3, #4
 8009152:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1df      	bne.n	800911a <gen_numname+0x7a>
	ns[i] = '~';
 800915a:	f107 0214 	add.w	r2, r7, #20
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	4413      	add	r3, r2
 8009162:	227e      	movs	r2, #126	; 0x7e
 8009164:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009166:	2300      	movs	r3, #0
 8009168:	627b      	str	r3, [r7, #36]	; 0x24
 800916a:	e002      	b.n	8009172 <gen_numname+0xd2>
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	3301      	adds	r3, #1
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
 8009172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	429a      	cmp	r2, r3
 8009178:	d205      	bcs.n	8009186 <gen_numname+0xe6>
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	4413      	add	r3, r2
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	2b20      	cmp	r3, #32
 8009184:	d1f2      	bne.n	800916c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009188:	2b07      	cmp	r3, #7
 800918a:	d807      	bhi.n	800919c <gen_numname+0xfc>
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	62ba      	str	r2, [r7, #40]	; 0x28
 8009192:	3330      	adds	r3, #48	; 0x30
 8009194:	443b      	add	r3, r7
 8009196:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800919a:	e000      	b.n	800919e <gen_numname+0xfe>
 800919c:	2120      	movs	r1, #32
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	627a      	str	r2, [r7, #36]	; 0x24
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4413      	add	r3, r2
 80091a8:	460a      	mov	r2, r1
 80091aa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	2b07      	cmp	r3, #7
 80091b0:	d9e9      	bls.n	8009186 <gen_numname+0xe6>
}
 80091b2:	bf00      	nop
 80091b4:	bf00      	nop
 80091b6:	3730      	adds	r7, #48	; 0x30
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80091c8:	230b      	movs	r3, #11
 80091ca:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	0852      	lsrs	r2, r2, #1
 80091d2:	01db      	lsls	r3, r3, #7
 80091d4:	4313      	orrs	r3, r2
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	1c59      	adds	r1, r3, #1
 80091dc:	6079      	str	r1, [r7, #4]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	4413      	add	r3, r2
 80091e2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	3b01      	subs	r3, #1
 80091e8:	60bb      	str	r3, [r7, #8]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d1ed      	bne.n	80091cc <sum_sfn+0x10>
	return sum;
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b086      	sub	sp, #24
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800920c:	2100      	movs	r1, #0
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7ff fc88 	bl	8008b24 <dir_sdi>
 8009214:	4603      	mov	r3, r0
 8009216:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009218:	7dfb      	ldrb	r3, [r7, #23]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <dir_find+0x24>
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	e0a9      	b.n	8009376 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009222:	23ff      	movs	r3, #255	; 0xff
 8009224:	753b      	strb	r3, [r7, #20]
 8009226:	7d3b      	ldrb	r3, [r7, #20]
 8009228:	757b      	strb	r3, [r7, #21]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	4619      	mov	r1, r3
 8009238:	6938      	ldr	r0, [r7, #16]
 800923a:	f7ff f893 	bl	8008364 <move_window>
 800923e:	4603      	mov	r3, r0
 8009240:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	2b00      	cmp	r3, #0
 8009246:	f040 8090 	bne.w	800936a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009252:	7dbb      	ldrb	r3, [r7, #22]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d102      	bne.n	800925e <dir_find+0x60>
 8009258:	2304      	movs	r3, #4
 800925a:	75fb      	strb	r3, [r7, #23]
 800925c:	e08a      	b.n	8009374 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	330b      	adds	r3, #11
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800926a:	73fb      	strb	r3, [r7, #15]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	7bfa      	ldrb	r2, [r7, #15]
 8009270:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009272:	7dbb      	ldrb	r3, [r7, #22]
 8009274:	2be5      	cmp	r3, #229	; 0xe5
 8009276:	d007      	beq.n	8009288 <dir_find+0x8a>
 8009278:	7bfb      	ldrb	r3, [r7, #15]
 800927a:	f003 0308 	and.w	r3, r3, #8
 800927e:	2b00      	cmp	r3, #0
 8009280:	d009      	beq.n	8009296 <dir_find+0x98>
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	2b0f      	cmp	r3, #15
 8009286:	d006      	beq.n	8009296 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009288:	23ff      	movs	r3, #255	; 0xff
 800928a:	757b      	strb	r3, [r7, #21]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f04f 32ff 	mov.w	r2, #4294967295
 8009292:	631a      	str	r2, [r3, #48]	; 0x30
 8009294:	e05e      	b.n	8009354 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009296:	7bfb      	ldrb	r3, [r7, #15]
 8009298:	2b0f      	cmp	r3, #15
 800929a:	d136      	bne.n	800930a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80092a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d154      	bne.n	8009354 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80092aa:	7dbb      	ldrb	r3, [r7, #22]
 80092ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00d      	beq.n	80092d0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	7b5b      	ldrb	r3, [r3, #13]
 80092ba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80092bc:	7dbb      	ldrb	r3, [r7, #22]
 80092be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c2:	75bb      	strb	r3, [r7, #22]
 80092c4:	7dbb      	ldrb	r3, [r7, #22]
 80092c6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	695a      	ldr	r2, [r3, #20]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80092d0:	7dba      	ldrb	r2, [r7, #22]
 80092d2:	7d7b      	ldrb	r3, [r7, #21]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d115      	bne.n	8009304 <dir_find+0x106>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	330d      	adds	r3, #13
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	7d3a      	ldrb	r2, [r7, #20]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d10e      	bne.n	8009304 <dir_find+0x106>
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	691a      	ldr	r2, [r3, #16]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	4619      	mov	r1, r3
 80092f0:	4610      	mov	r0, r2
 80092f2:	f7ff fdfd 	bl	8008ef0 <cmp_lfn>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <dir_find+0x106>
 80092fc:	7d7b      	ldrb	r3, [r7, #21]
 80092fe:	3b01      	subs	r3, #1
 8009300:	b2db      	uxtb	r3, r3
 8009302:	e000      	b.n	8009306 <dir_find+0x108>
 8009304:	23ff      	movs	r3, #255	; 0xff
 8009306:	757b      	strb	r3, [r7, #21]
 8009308:	e024      	b.n	8009354 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800930a:	7d7b      	ldrb	r3, [r7, #21]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d109      	bne.n	8009324 <dir_find+0x126>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff ff51 	bl	80091bc <sum_sfn>
 800931a:	4603      	mov	r3, r0
 800931c:	461a      	mov	r2, r3
 800931e:	7d3b      	ldrb	r3, [r7, #20]
 8009320:	4293      	cmp	r3, r2
 8009322:	d024      	beq.n	800936e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10a      	bne.n	8009348 <dir_find+0x14a>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a18      	ldr	r0, [r3, #32]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	3324      	adds	r3, #36	; 0x24
 800933a:	220b      	movs	r2, #11
 800933c:	4619      	mov	r1, r3
 800933e:	f7fe fe1f 	bl	8007f80 <mem_cmp>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d014      	beq.n	8009372 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009348:	23ff      	movs	r3, #255	; 0xff
 800934a:	757b      	strb	r3, [r7, #21]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f04f 32ff 	mov.w	r2, #4294967295
 8009352:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009354:	2100      	movs	r1, #0
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff fc6d 	bl	8008c36 <dir_next>
 800935c:	4603      	mov	r3, r0
 800935e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f43f af65 	beq.w	8009232 <dir_find+0x34>
 8009368:	e004      	b.n	8009374 <dir_find+0x176>
		if (res != FR_OK) break;
 800936a:	bf00      	nop
 800936c:	e002      	b.n	8009374 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800936e:	bf00      	nop
 8009370:	e000      	b.n	8009374 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009372:	bf00      	nop

	return res;
 8009374:	7dfb      	ldrb	r3, [r7, #23]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08c      	sub	sp, #48	; 0x30
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009394:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <dir_register+0x20>
 800939c:	2306      	movs	r3, #6
 800939e:	e0e0      	b.n	8009562 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80093a0:	2300      	movs	r3, #0
 80093a2:	627b      	str	r3, [r7, #36]	; 0x24
 80093a4:	e002      	b.n	80093ac <dir_register+0x2c>
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	3301      	adds	r3, #1
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	691a      	ldr	r2, [r3, #16]
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	4413      	add	r3, r2
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1f4      	bne.n	80093a6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80093c2:	f107 030c 	add.w	r3, r7, #12
 80093c6:	220c      	movs	r2, #12
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe fd9d 	bl	8007f08 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80093ce:	7dfb      	ldrb	r3, [r7, #23]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d032      	beq.n	800943e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2240      	movs	r2, #64	; 0x40
 80093dc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80093e0:	2301      	movs	r3, #1
 80093e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80093e4:	e016      	b.n	8009414 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	691a      	ldr	r2, [r3, #16]
 80093f0:	f107 010c 	add.w	r1, r7, #12
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	f7ff fe53 	bl	80090a0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff feff 	bl	80091fe <dir_find>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800940a:	2b00      	cmp	r3, #0
 800940c:	d106      	bne.n	800941c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800940e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009410:	3301      	adds	r3, #1
 8009412:	62bb      	str	r3, [r7, #40]	; 0x28
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	2b63      	cmp	r3, #99	; 0x63
 8009418:	d9e5      	bls.n	80093e6 <dir_register+0x66>
 800941a:	e000      	b.n	800941e <dir_register+0x9e>
			if (res != FR_OK) break;
 800941c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	2b64      	cmp	r3, #100	; 0x64
 8009422:	d101      	bne.n	8009428 <dir_register+0xa8>
 8009424:	2307      	movs	r3, #7
 8009426:	e09c      	b.n	8009562 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800942c:	2b04      	cmp	r3, #4
 800942e:	d002      	beq.n	8009436 <dir_register+0xb6>
 8009430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009434:	e095      	b.n	8009562 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009436:	7dfa      	ldrb	r2, [r7, #23]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800943e:	7dfb      	ldrb	r3, [r7, #23]
 8009440:	f003 0302 	and.w	r3, r3, #2
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <dir_register+0xd8>
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	330c      	adds	r3, #12
 800944c:	4a47      	ldr	r2, [pc, #284]	; (800956c <dir_register+0x1ec>)
 800944e:	fba2 2303 	umull	r2, r3, r2, r3
 8009452:	089b      	lsrs	r3, r3, #2
 8009454:	3301      	adds	r3, #1
 8009456:	e000      	b.n	800945a <dir_register+0xda>
 8009458:	2301      	movs	r3, #1
 800945a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800945c:	6a39      	ldr	r1, [r7, #32]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7ff fcbf 	bl	8008de2 <dir_alloc>
 8009464:	4603      	mov	r3, r0
 8009466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800946a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800946e:	2b00      	cmp	r3, #0
 8009470:	d148      	bne.n	8009504 <dir_register+0x184>
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	3b01      	subs	r3, #1
 8009476:	623b      	str	r3, [r7, #32]
 8009478:	6a3b      	ldr	r3, [r7, #32]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d042      	beq.n	8009504 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	015b      	lsls	r3, r3, #5
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	4619      	mov	r1, r3
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7ff fb4a 	bl	8008b24 <dir_sdi>
 8009490:	4603      	mov	r3, r0
 8009492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800949a:	2b00      	cmp	r3, #0
 800949c:	d132      	bne.n	8009504 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	3324      	adds	r3, #36	; 0x24
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fe8a 	bl	80091bc <sum_sfn>
 80094a8:	4603      	mov	r3, r0
 80094aa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	4619      	mov	r1, r3
 80094b2:	69f8      	ldr	r0, [r7, #28]
 80094b4:	f7fe ff56 	bl	8008364 <move_window>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80094be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d11d      	bne.n	8009502 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	6918      	ldr	r0, [r3, #16]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a19      	ldr	r1, [r3, #32]
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	b2da      	uxtb	r2, r3
 80094d2:	7efb      	ldrb	r3, [r7, #27]
 80094d4:	f7ff fd7c 	bl	8008fd0 <put_lfn>
				fs->wflag = 1;
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	2201      	movs	r2, #1
 80094dc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80094de:	2100      	movs	r1, #0
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff fba8 	bl	8008c36 <dir_next>
 80094e6:	4603      	mov	r3, r0
 80094e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80094ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d107      	bne.n	8009504 <dir_register+0x184>
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	3b01      	subs	r3, #1
 80094f8:	623b      	str	r3, [r7, #32]
 80094fa:	6a3b      	ldr	r3, [r7, #32]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1d5      	bne.n	80094ac <dir_register+0x12c>
 8009500:	e000      	b.n	8009504 <dir_register+0x184>
				if (res != FR_OK) break;
 8009502:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009508:	2b00      	cmp	r3, #0
 800950a:	d128      	bne.n	800955e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	4619      	mov	r1, r3
 8009512:	69f8      	ldr	r0, [r7, #28]
 8009514:	f7fe ff26 	bl	8008364 <move_window>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800951e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009522:	2b00      	cmp	r3, #0
 8009524:	d11b      	bne.n	800955e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	2220      	movs	r2, #32
 800952c:	2100      	movs	r1, #0
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fd0b 	bl	8007f4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a18      	ldr	r0, [r3, #32]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3324      	adds	r3, #36	; 0x24
 800953c:	220b      	movs	r2, #11
 800953e:	4619      	mov	r1, r3
 8009540:	f7fe fce2 	bl	8007f08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a1b      	ldr	r3, [r3, #32]
 800954e:	330c      	adds	r3, #12
 8009550:	f002 0218 	and.w	r2, r2, #24
 8009554:	b2d2      	uxtb	r2, r2
 8009556:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	2201      	movs	r2, #1
 800955c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800955e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009562:	4618      	mov	r0, r3
 8009564:	3730      	adds	r7, #48	; 0x30
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	4ec4ec4f 	.word	0x4ec4ec4f

08009570 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	613b      	str	r3, [r7, #16]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	2300      	movs	r3, #0
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	61ba      	str	r2, [r7, #24]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	4413      	add	r3, r2
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800959e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a0:	2b1f      	cmp	r3, #31
 80095a2:	d940      	bls.n	8009626 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80095a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095a6:	2b2f      	cmp	r3, #47	; 0x2f
 80095a8:	d006      	beq.n	80095b8 <create_name+0x48>
 80095aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095ac:	2b5c      	cmp	r3, #92	; 0x5c
 80095ae:	d110      	bne.n	80095d2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80095b0:	e002      	b.n	80095b8 <create_name+0x48>
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	3301      	adds	r3, #1
 80095b6:	61bb      	str	r3, [r7, #24]
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	4413      	add	r3, r2
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	2b2f      	cmp	r3, #47	; 0x2f
 80095c2:	d0f6      	beq.n	80095b2 <create_name+0x42>
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	4413      	add	r3, r2
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b5c      	cmp	r3, #92	; 0x5c
 80095ce:	d0f0      	beq.n	80095b2 <create_name+0x42>
			break;
 80095d0:	e02a      	b.n	8009628 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2bfe      	cmp	r3, #254	; 0xfe
 80095d6:	d901      	bls.n	80095dc <create_name+0x6c>
 80095d8:	2306      	movs	r3, #6
 80095da:	e17d      	b.n	80098d8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80095dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80095e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095e4:	2101      	movs	r1, #1
 80095e6:	4618      	mov	r0, r3
 80095e8:	f001 fa8c 	bl	800ab04 <ff_convert>
 80095ec:	4603      	mov	r3, r0
 80095ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80095f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <create_name+0x8a>
 80095f6:	2306      	movs	r3, #6
 80095f8:	e16e      	b.n	80098d8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80095fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095fc:	2b7f      	cmp	r3, #127	; 0x7f
 80095fe:	d809      	bhi.n	8009614 <create_name+0xa4>
 8009600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009602:	4619      	mov	r1, r3
 8009604:	488d      	ldr	r0, [pc, #564]	; (800983c <create_name+0x2cc>)
 8009606:	f7fe fce2 	bl	8007fce <chk_chr>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <create_name+0xa4>
 8009610:	2306      	movs	r3, #6
 8009612:	e161      	b.n	80098d8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	617a      	str	r2, [r7, #20]
 800961a:	005b      	lsls	r3, r3, #1
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009622:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009624:	e7b4      	b.n	8009590 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009626:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	441a      	add	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009632:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009634:	2b1f      	cmp	r3, #31
 8009636:	d801      	bhi.n	800963c <create_name+0xcc>
 8009638:	2304      	movs	r3, #4
 800963a:	e000      	b.n	800963e <create_name+0xce>
 800963c:	2300      	movs	r3, #0
 800963e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009642:	e011      	b.n	8009668 <create_name+0xf8>
		w = lfn[di - 1];
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800964a:	3b01      	subs	r3, #1
 800964c:	005b      	lsls	r3, r3, #1
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	881b      	ldrh	r3, [r3, #0]
 8009654:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8009656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009658:	2b20      	cmp	r3, #32
 800965a:	d002      	beq.n	8009662 <create_name+0xf2>
 800965c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800965e:	2b2e      	cmp	r3, #46	; 0x2e
 8009660:	d106      	bne.n	8009670 <create_name+0x100>
		di--;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	3b01      	subs	r3, #1
 8009666:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1ea      	bne.n	8009644 <create_name+0xd4>
 800966e:	e000      	b.n	8009672 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009670:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	2200      	movs	r2, #0
 800967c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <create_name+0x118>
 8009684:	2306      	movs	r3, #6
 8009686:	e127      	b.n	80098d8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3324      	adds	r3, #36	; 0x24
 800968c:	220b      	movs	r2, #11
 800968e:	2120      	movs	r1, #32
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fc5a 	bl	8007f4a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009696:	2300      	movs	r3, #0
 8009698:	61bb      	str	r3, [r7, #24]
 800969a:	e002      	b.n	80096a2 <create_name+0x132>
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	3301      	adds	r3, #1
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4413      	add	r3, r2
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	2b20      	cmp	r3, #32
 80096ae:	d0f5      	beq.n	800969c <create_name+0x12c>
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	881b      	ldrh	r3, [r3, #0]
 80096ba:	2b2e      	cmp	r3, #46	; 0x2e
 80096bc:	d0ee      	beq.n	800969c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d009      	beq.n	80096d8 <create_name+0x168>
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096c8:	f043 0303 	orr.w	r3, r3, #3
 80096cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80096d0:	e002      	b.n	80096d8 <create_name+0x168>
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d009      	beq.n	80096f2 <create_name+0x182>
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096e4:	3b01      	subs	r3, #1
 80096e6:	005b      	lsls	r3, r3, #1
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4413      	add	r3, r2
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	2b2e      	cmp	r3, #46	; 0x2e
 80096f0:	d1ef      	bne.n	80096d2 <create_name+0x162>

	i = b = 0; ni = 8;
 80096f2:	2300      	movs	r3, #0
 80096f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80096f8:	2300      	movs	r3, #0
 80096fa:	623b      	str	r3, [r7, #32]
 80096fc:	2308      	movs	r3, #8
 80096fe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	61ba      	str	r2, [r7, #24]
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009710:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	f000 8090 	beq.w	8009838 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800971a:	2b20      	cmp	r3, #32
 800971c:	d006      	beq.n	800972c <create_name+0x1bc>
 800971e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009720:	2b2e      	cmp	r3, #46	; 0x2e
 8009722:	d10a      	bne.n	800973a <create_name+0x1ca>
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	429a      	cmp	r2, r3
 800972a:	d006      	beq.n	800973a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800972c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009730:	f043 0303 	orr.w	r3, r3, #3
 8009734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009738:	e07d      	b.n	8009836 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800973a:	6a3a      	ldr	r2, [r7, #32]
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	429a      	cmp	r2, r3
 8009740:	d203      	bcs.n	800974a <create_name+0x1da>
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	429a      	cmp	r2, r3
 8009748:	d123      	bne.n	8009792 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	2b0b      	cmp	r3, #11
 800974e:	d106      	bne.n	800975e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009754:	f043 0303 	orr.w	r3, r3, #3
 8009758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800975c:	e075      	b.n	800984a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800975e:	69ba      	ldr	r2, [r7, #24]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	429a      	cmp	r2, r3
 8009764:	d005      	beq.n	8009772 <create_name+0x202>
 8009766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800976a:	f043 0303 	orr.w	r3, r3, #3
 800976e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009772:	69ba      	ldr	r2, [r7, #24]
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	429a      	cmp	r2, r3
 8009778:	d866      	bhi.n	8009848 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	2308      	movs	r3, #8
 8009780:	623b      	str	r3, [r7, #32]
 8009782:	230b      	movs	r3, #11
 8009784:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009786:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009790:	e051      	b.n	8009836 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009794:	2b7f      	cmp	r3, #127	; 0x7f
 8009796:	d914      	bls.n	80097c2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800979a:	2100      	movs	r1, #0
 800979c:	4618      	mov	r0, r3
 800979e:	f001 f9b1 	bl	800ab04 <ff_convert>
 80097a2:	4603      	mov	r3, r0
 80097a4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80097a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <create_name+0x246>
 80097ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ae:	3b80      	subs	r3, #128	; 0x80
 80097b0:	4a23      	ldr	r2, [pc, #140]	; (8009840 <create_name+0x2d0>)
 80097b2:	5cd3      	ldrb	r3, [r2, r3]
 80097b4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80097b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097ba:	f043 0302 	orr.w	r3, r3, #2
 80097be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80097c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d007      	beq.n	80097d8 <create_name+0x268>
 80097c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ca:	4619      	mov	r1, r3
 80097cc:	481d      	ldr	r0, [pc, #116]	; (8009844 <create_name+0x2d4>)
 80097ce:	f7fe fbfe 	bl	8007fce <chk_chr>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d008      	beq.n	80097ea <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80097d8:	235f      	movs	r3, #95	; 0x5f
 80097da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80097dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097e0:	f043 0303 	orr.w	r3, r3, #3
 80097e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80097e8:	e01b      	b.n	8009822 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80097ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	d909      	bls.n	8009804 <create_name+0x294>
 80097f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097f2:	2b5a      	cmp	r3, #90	; 0x5a
 80097f4:	d806      	bhi.n	8009804 <create_name+0x294>
					b |= 2;
 80097f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097fa:	f043 0302 	orr.w	r3, r3, #2
 80097fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009802:	e00e      	b.n	8009822 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009806:	2b60      	cmp	r3, #96	; 0x60
 8009808:	d90b      	bls.n	8009822 <create_name+0x2b2>
 800980a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800980c:	2b7a      	cmp	r3, #122	; 0x7a
 800980e:	d808      	bhi.n	8009822 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009810:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009814:	f043 0301 	orr.w	r3, r3, #1
 8009818:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800981c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800981e:	3b20      	subs	r3, #32
 8009820:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	623a      	str	r2, [r7, #32]
 8009828:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800982a:	b2d1      	uxtb	r1, r2
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	4413      	add	r3, r2
 8009830:	460a      	mov	r2, r1
 8009832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009836:	e763      	b.n	8009700 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009838:	bf00      	nop
 800983a:	e006      	b.n	800984a <create_name+0x2da>
 800983c:	0800b998 	.word	0x0800b998
 8009840:	0800ba00 	.word	0x0800ba00
 8009844:	0800b9a4 	.word	0x0800b9a4
			if (si > di) break;			/* No extension */
 8009848:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009850:	2be5      	cmp	r3, #229	; 0xe5
 8009852:	d103      	bne.n	800985c <create_name+0x2ec>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2205      	movs	r2, #5
 8009858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	2b08      	cmp	r3, #8
 8009860:	d104      	bne.n	800986c <create_name+0x2fc>
 8009862:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800986c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009870:	f003 030c 	and.w	r3, r3, #12
 8009874:	2b0c      	cmp	r3, #12
 8009876:	d005      	beq.n	8009884 <create_name+0x314>
 8009878:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800987c:	f003 0303 	and.w	r3, r3, #3
 8009880:	2b03      	cmp	r3, #3
 8009882:	d105      	bne.n	8009890 <create_name+0x320>
 8009884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009888:	f043 0302 	orr.w	r3, r3, #2
 800988c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d117      	bne.n	80098cc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800989c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098a0:	f003 0303 	and.w	r3, r3, #3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d105      	bne.n	80098b4 <create_name+0x344>
 80098a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ac:	f043 0310 	orr.w	r3, r3, #16
 80098b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80098b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098b8:	f003 030c 	and.w	r3, r3, #12
 80098bc:	2b04      	cmp	r3, #4
 80098be:	d105      	bne.n	80098cc <create_name+0x35c>
 80098c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c4:	f043 0308 	orr.w	r3, r3, #8
 80098c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80098d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80098d6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3728      	adds	r7, #40	; 0x28
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80098f4:	e002      	b.n	80098fc <follow_path+0x1c>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	3301      	adds	r3, #1
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b2f      	cmp	r3, #47	; 0x2f
 8009902:	d0f8      	beq.n	80098f6 <follow_path+0x16>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b5c      	cmp	r3, #92	; 0x5c
 800990a:	d0f4      	beq.n	80098f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2200      	movs	r2, #0
 8009910:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b1f      	cmp	r3, #31
 8009918:	d80a      	bhi.n	8009930 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2280      	movs	r2, #128	; 0x80
 800991e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009922:	2100      	movs	r1, #0
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7ff f8fd 	bl	8008b24 <dir_sdi>
 800992a:	4603      	mov	r3, r0
 800992c:	75fb      	strb	r3, [r7, #23]
 800992e:	e048      	b.n	80099c2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009930:	463b      	mov	r3, r7
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff fe1b 	bl	8009570 <create_name>
 800993a:	4603      	mov	r3, r0
 800993c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800993e:	7dfb      	ldrb	r3, [r7, #23]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d139      	bne.n	80099b8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f7ff fc5a 	bl	80091fe <dir_find>
 800994a:	4603      	mov	r3, r0
 800994c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009954:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009956:	7dfb      	ldrb	r3, [r7, #23]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00a      	beq.n	8009972 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800995c:	7dfb      	ldrb	r3, [r7, #23]
 800995e:	2b04      	cmp	r3, #4
 8009960:	d12c      	bne.n	80099bc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009962:	7afb      	ldrb	r3, [r7, #11]
 8009964:	f003 0304 	and.w	r3, r3, #4
 8009968:	2b00      	cmp	r3, #0
 800996a:	d127      	bne.n	80099bc <follow_path+0xdc>
 800996c:	2305      	movs	r3, #5
 800996e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009970:	e024      	b.n	80099bc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b00      	cmp	r3, #0
 800997a:	d121      	bne.n	80099c0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	799b      	ldrb	r3, [r3, #6]
 8009980:	f003 0310 	and.w	r3, r3, #16
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009988:	2305      	movs	r3, #5
 800998a:	75fb      	strb	r3, [r7, #23]
 800998c:	e019      	b.n	80099c2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	8992      	ldrh	r2, [r2, #12]
 800999c:	fbb3 f0f2 	udiv	r0, r3, r2
 80099a0:	fb00 f202 	mul.w	r2, r0, r2
 80099a4:	1a9b      	subs	r3, r3, r2
 80099a6:	440b      	add	r3, r1
 80099a8:	4619      	mov	r1, r3
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fa60 	bl	8008e70 <ld_clust>
 80099b0:	4602      	mov	r2, r0
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80099b6:	e7bb      	b.n	8009930 <follow_path+0x50>
			if (res != FR_OK) break;
 80099b8:	bf00      	nop
 80099ba:	e002      	b.n	80099c2 <follow_path+0xe2>
				break;
 80099bc:	bf00      	nop
 80099be:	e000      	b.n	80099c2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80099c0:	bf00      	nop
			}
		}
	}

	return res;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80099d4:	f04f 33ff 	mov.w	r3, #4294967295
 80099d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d031      	beq.n	8009a46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	617b      	str	r3, [r7, #20]
 80099e8:	e002      	b.n	80099f0 <get_ldnumber+0x24>
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	3301      	adds	r3, #1
 80099ee:	617b      	str	r3, [r7, #20]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b1f      	cmp	r3, #31
 80099f6:	d903      	bls.n	8009a00 <get_ldnumber+0x34>
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b3a      	cmp	r3, #58	; 0x3a
 80099fe:	d1f4      	bne.n	80099ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	2b3a      	cmp	r3, #58	; 0x3a
 8009a06:	d11c      	bne.n	8009a42 <get_ldnumber+0x76>
			tp = *path;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	60fa      	str	r2, [r7, #12]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	3b30      	subs	r3, #48	; 0x30
 8009a18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	2b09      	cmp	r3, #9
 8009a1e:	d80e      	bhi.n	8009a3e <get_ldnumber+0x72>
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d10a      	bne.n	8009a3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d107      	bne.n	8009a3e <get_ldnumber+0x72>
					vol = (int)i;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	3301      	adds	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	697a      	ldr	r2, [r7, #20]
 8009a3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	e002      	b.n	8009a48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009a42:	2300      	movs	r3, #0
 8009a44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009a46:	693b      	ldr	r3, [r7, #16]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	70da      	strb	r2, [r3, #3]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7fe fc78 	bl	8008364 <move_window>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <check_fs+0x2a>
 8009a7a:	2304      	movs	r3, #4
 8009a7c:	e038      	b.n	8009af0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3338      	adds	r3, #56	; 0x38
 8009a82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe f9bc 	bl	8007e04 <ld_word>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d001      	beq.n	8009a9c <check_fs+0x48>
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e029      	b.n	8009af0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009aa2:	2be9      	cmp	r3, #233	; 0xe9
 8009aa4:	d009      	beq.n	8009aba <check_fs+0x66>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009aac:	2beb      	cmp	r3, #235	; 0xeb
 8009aae:	d11e      	bne.n	8009aee <check_fs+0x9a>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ab6:	2b90      	cmp	r3, #144	; 0x90
 8009ab8:	d119      	bne.n	8009aee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3338      	adds	r3, #56	; 0x38
 8009abe:	3336      	adds	r3, #54	; 0x36
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe f9b7 	bl	8007e34 <ld_dword>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009acc:	4a0a      	ldr	r2, [pc, #40]	; (8009af8 <check_fs+0xa4>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d101      	bne.n	8009ad6 <check_fs+0x82>
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	e00c      	b.n	8009af0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3338      	adds	r3, #56	; 0x38
 8009ada:	3352      	adds	r3, #82	; 0x52
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe f9a9 	bl	8007e34 <ld_dword>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4a05      	ldr	r2, [pc, #20]	; (8009afc <check_fs+0xa8>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d101      	bne.n	8009aee <check_fs+0x9a>
 8009aea:	2300      	movs	r3, #0
 8009aec:	e000      	b.n	8009af0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009aee:	2302      	movs	r3, #2
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	00544146 	.word	0x00544146
 8009afc:	33544146 	.word	0x33544146

08009b00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b096      	sub	sp, #88	; 0x58
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2200      	movs	r2, #0
 8009b12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f7ff ff59 	bl	80099cc <get_ldnumber>
 8009b1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	da01      	bge.n	8009b26 <find_volume+0x26>
 8009b22:	230b      	movs	r3, #11
 8009b24:	e265      	b.n	8009ff2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009b26:	4a9f      	ldr	r2, [pc, #636]	; (8009da4 <find_volume+0x2a4>)
 8009b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <find_volume+0x3a>
 8009b36:	230c      	movs	r3, #12
 8009b38:	e25b      	b.n	8009ff2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b3e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	f023 0301 	bic.w	r3, r3, #1
 8009b46:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01a      	beq.n	8009b86 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b52:	785b      	ldrb	r3, [r3, #1]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe f8b5 	bl	8007cc4 <disk_status>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009b60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10c      	bne.n	8009b86 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009b6c:	79fb      	ldrb	r3, [r7, #7]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d007      	beq.n	8009b82 <find_volume+0x82>
 8009b72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b76:	f003 0304 	and.w	r3, r3, #4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009b7e:	230a      	movs	r3, #10
 8009b80:	e237      	b.n	8009ff2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009b82:	2300      	movs	r3, #0
 8009b84:	e235      	b.n	8009ff2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b88:	2200      	movs	r2, #0
 8009b8a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b92:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe f8ad 	bl	8007cf8 <disk_initialize>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e21e      	b.n	8009ff2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009bb4:	79fb      	ldrb	r3, [r7, #7]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d007      	beq.n	8009bca <find_volume+0xca>
 8009bba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009bc6:	230a      	movs	r3, #10
 8009bc8:	e213      	b.n	8009ff2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bcc:	7858      	ldrb	r0, [r3, #1]
 8009bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd0:	330c      	adds	r3, #12
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	2102      	movs	r1, #2
 8009bd6:	f7fe f8f7 	bl	8007dc8 <disk_ioctl>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <find_volume+0xe4>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e206      	b.n	8009ff2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be6:	899b      	ldrh	r3, [r3, #12]
 8009be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bec:	d80d      	bhi.n	8009c0a <find_volume+0x10a>
 8009bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf0:	899b      	ldrh	r3, [r3, #12]
 8009bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bf6:	d308      	bcc.n	8009c0a <find_volume+0x10a>
 8009bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfa:	899b      	ldrh	r3, [r3, #12]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c00:	899b      	ldrh	r3, [r3, #12]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	4013      	ands	r3, r2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <find_volume+0x10e>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e1f1      	b.n	8009ff2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009c12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c16:	f7ff ff1d 	bl	8009a54 <check_fs>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009c20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d149      	bne.n	8009cbc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009c28:	2300      	movs	r3, #0
 8009c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c2c:	e01e      	b.n	8009c6c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c30:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009c3c:	4413      	add	r3, r2
 8009c3e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	3304      	adds	r3, #4
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d006      	beq.n	8009c58 <find_volume+0x158>
 8009c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe f8f0 	bl	8007e34 <ld_dword>
 8009c54:	4602      	mov	r2, r0
 8009c56:	e000      	b.n	8009c5a <find_volume+0x15a>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	3358      	adds	r3, #88	; 0x58
 8009c60:	443b      	add	r3, r7
 8009c62:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c68:	3301      	adds	r3, #1
 8009c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d9dd      	bls.n	8009c2e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009c72:	2300      	movs	r3, #0
 8009c74:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <find_volume+0x182>
 8009c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	3358      	adds	r3, #88	; 0x58
 8009c88:	443b      	add	r3, r7
 8009c8a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009c8e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d005      	beq.n	8009ca2 <find_volume+0x1a2>
 8009c96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c9a:	f7ff fedb 	bl	8009a54 <check_fs>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	e000      	b.n	8009ca4 <find_volume+0x1a4>
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009ca8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d905      	bls.n	8009cbc <find_volume+0x1bc>
 8009cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8009cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	d9e2      	bls.n	8009c82 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d101      	bne.n	8009cc8 <find_volume+0x1c8>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e194      	b.n	8009ff2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d901      	bls.n	8009cd4 <find_volume+0x1d4>
 8009cd0:	230d      	movs	r3, #13
 8009cd2:	e18e      	b.n	8009ff2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	3338      	adds	r3, #56	; 0x38
 8009cd8:	330b      	adds	r3, #11
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fe f892 	bl	8007e04 <ld_word>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce6:	899b      	ldrh	r3, [r3, #12]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d001      	beq.n	8009cf0 <find_volume+0x1f0>
 8009cec:	230d      	movs	r3, #13
 8009cee:	e180      	b.n	8009ff2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	3338      	adds	r3, #56	; 0x38
 8009cf4:	3316      	adds	r3, #22
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe f884 	bl	8007e04 <ld_word>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d106      	bne.n	8009d14 <find_volume+0x214>
 8009d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d08:	3338      	adds	r3, #56	; 0x38
 8009d0a:	3324      	adds	r3, #36	; 0x24
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe f891 	bl	8007e34 <ld_dword>
 8009d12:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009d18:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d22:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	789b      	ldrb	r3, [r3, #2]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d005      	beq.n	8009d38 <find_volume+0x238>
 8009d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d2e:	789b      	ldrb	r3, [r3, #2]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d001      	beq.n	8009d38 <find_volume+0x238>
 8009d34:	230d      	movs	r3, #13
 8009d36:	e15c      	b.n	8009ff2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	789b      	ldrb	r3, [r3, #2]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d40:	fb02 f303 	mul.w	r3, r2, r3
 8009d44:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d54:	895b      	ldrh	r3, [r3, #10]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d008      	beq.n	8009d6c <find_volume+0x26c>
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	895b      	ldrh	r3, [r3, #10]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d62:	895b      	ldrh	r3, [r3, #10]
 8009d64:	3b01      	subs	r3, #1
 8009d66:	4013      	ands	r3, r2
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <find_volume+0x270>
 8009d6c:	230d      	movs	r3, #13
 8009d6e:	e140      	b.n	8009ff2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d72:	3338      	adds	r3, #56	; 0x38
 8009d74:	3311      	adds	r3, #17
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fe f844 	bl	8007e04 <ld_word>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	461a      	mov	r2, r3
 8009d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d82:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d86:	891b      	ldrh	r3, [r3, #8]
 8009d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d8a:	8992      	ldrh	r2, [r2, #12]
 8009d8c:	0952      	lsrs	r2, r2, #5
 8009d8e:	b292      	uxth	r2, r2
 8009d90:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d94:	fb01 f202 	mul.w	r2, r1, r2
 8009d98:	1a9b      	subs	r3, r3, r2
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d003      	beq.n	8009da8 <find_volume+0x2a8>
 8009da0:	230d      	movs	r3, #13
 8009da2:	e126      	b.n	8009ff2 <find_volume+0x4f2>
 8009da4:	2000263c 	.word	0x2000263c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	3338      	adds	r3, #56	; 0x38
 8009dac:	3313      	adds	r3, #19
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe f828 	bl	8007e04 <ld_word>
 8009db4:	4603      	mov	r3, r0
 8009db6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <find_volume+0x2cc>
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc0:	3338      	adds	r3, #56	; 0x38
 8009dc2:	3320      	adds	r3, #32
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7fe f835 	bl	8007e34 <ld_dword>
 8009dca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dce:	3338      	adds	r3, #56	; 0x38
 8009dd0:	330e      	adds	r3, #14
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f7fe f816 	bl	8007e04 <ld_word>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <find_volume+0x2e6>
 8009de2:	230d      	movs	r3, #13
 8009de4:	e105      	b.n	8009ff2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009de6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dea:	4413      	add	r3, r2
 8009dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dee:	8911      	ldrh	r1, [r2, #8]
 8009df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009df2:	8992      	ldrh	r2, [r2, #12]
 8009df4:	0952      	lsrs	r2, r2, #5
 8009df6:	b292      	uxth	r2, r2
 8009df8:	fbb1 f2f2 	udiv	r2, r1, r2
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	4413      	add	r3, r2
 8009e00:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d201      	bcs.n	8009e0e <find_volume+0x30e>
 8009e0a:	230d      	movs	r3, #13
 8009e0c:	e0f1      	b.n	8009ff2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e16:	8952      	ldrh	r2, [r2, #10]
 8009e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <find_volume+0x328>
 8009e24:	230d      	movs	r3, #13
 8009e26:	e0e4      	b.n	8009ff2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d802      	bhi.n	8009e3e <find_volume+0x33e>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d802      	bhi.n	8009e4e <find_volume+0x34e>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	1c9a      	adds	r2, r3, #2
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e5a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009e5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e60:	441a      	add	r2, r3
 8009e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e64:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009e66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	441a      	add	r2, r3
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e74:	2b03      	cmp	r3, #3
 8009e76:	d11e      	bne.n	8009eb6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7a:	3338      	adds	r3, #56	; 0x38
 8009e7c:	332a      	adds	r3, #42	; 0x2a
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fd ffc0 	bl	8007e04 <ld_word>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <find_volume+0x38e>
 8009e8a:	230d      	movs	r3, #13
 8009e8c:	e0b1      	b.n	8009ff2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e90:	891b      	ldrh	r3, [r3, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <find_volume+0x39a>
 8009e96:	230d      	movs	r3, #13
 8009e98:	e0ab      	b.n	8009ff2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	3338      	adds	r3, #56	; 0x38
 8009e9e:	332c      	adds	r3, #44	; 0x2c
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7fd ffc7 	bl	8007e34 <ld_dword>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eaa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb4:	e01f      	b.n	8009ef6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb8:	891b      	ldrh	r3, [r3, #8]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <find_volume+0x3c2>
 8009ebe:	230d      	movs	r3, #13
 8009ec0:	e097      	b.n	8009ff2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec8:	441a      	add	r2, r3
 8009eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ecc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009ece:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d103      	bne.n	8009ede <find_volume+0x3de>
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	005b      	lsls	r3, r3, #1
 8009edc:	e00a      	b.n	8009ef4 <find_volume+0x3f4>
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	69da      	ldr	r2, [r3, #28]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	4413      	add	r3, r2
 8009ee8:	085a      	lsrs	r2, r3, #1
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009ef4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	6a1a      	ldr	r2, [r3, #32]
 8009efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efc:	899b      	ldrh	r3, [r3, #12]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f02:	440b      	add	r3, r1
 8009f04:	3b01      	subs	r3, #1
 8009f06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f08:	8989      	ldrh	r1, [r1, #12]
 8009f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d201      	bcs.n	8009f16 <find_volume+0x416>
 8009f12:	230d      	movs	r3, #13
 8009f14:	e06d      	b.n	8009ff2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f18:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1c:	619a      	str	r2, [r3, #24]
 8009f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f20:	699a      	ldr	r2, [r3, #24]
 8009f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f24:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	2280      	movs	r2, #128	; 0x80
 8009f2a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009f2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f30:	2b03      	cmp	r3, #3
 8009f32:	d149      	bne.n	8009fc8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f36:	3338      	adds	r3, #56	; 0x38
 8009f38:	3330      	adds	r3, #48	; 0x30
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fd ff62 	bl	8007e04 <ld_word>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d140      	bne.n	8009fc8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f48:	3301      	adds	r3, #1
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f4e:	f7fe fa09 	bl	8008364 <move_window>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d137      	bne.n	8009fc8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	3338      	adds	r3, #56	; 0x38
 8009f62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fd ff4c 	bl	8007e04 <ld_word>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d127      	bne.n	8009fc8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7a:	3338      	adds	r3, #56	; 0x38
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fd ff59 	bl	8007e34 <ld_dword>
 8009f82:	4603      	mov	r3, r0
 8009f84:	4a1d      	ldr	r2, [pc, #116]	; (8009ffc <find_volume+0x4fc>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d11e      	bne.n	8009fc8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	3338      	adds	r3, #56	; 0x38
 8009f8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fd ff4e 	bl	8007e34 <ld_dword>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	4a19      	ldr	r2, [pc, #100]	; (800a000 <find_volume+0x500>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d113      	bne.n	8009fc8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa2:	3338      	adds	r3, #56	; 0x38
 8009fa4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fd ff43 	bl	8007e34 <ld_dword>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	3338      	adds	r3, #56	; 0x38
 8009fb8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fd ff39 	bl	8007e34 <ld_dword>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009fce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009fd0:	4b0c      	ldr	r3, [pc, #48]	; (800a004 <find_volume+0x504>)
 8009fd2:	881b      	ldrh	r3, [r3, #0]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	4b0a      	ldr	r3, [pc, #40]	; (800a004 <find_volume+0x504>)
 8009fda:	801a      	strh	r2, [r3, #0]
 8009fdc:	4b09      	ldr	r3, [pc, #36]	; (800a004 <find_volume+0x504>)
 8009fde:	881a      	ldrh	r2, [r3, #0]
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	4a08      	ldr	r2, [pc, #32]	; (800a008 <find_volume+0x508>)
 8009fe8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009fea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fec:	f7fe f952 	bl	8008294 <clear_lock>
#endif
	return FR_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3758      	adds	r7, #88	; 0x58
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	41615252 	.word	0x41615252
 800a000:	61417272 	.word	0x61417272
 800a004:	20002640 	.word	0x20002640
 800a008:	20002664 	.word	0x20002664

0800a00c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a016:	2309      	movs	r3, #9
 800a018:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d01c      	beq.n	800a05a <validate+0x4e>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d018      	beq.n	800a05a <validate+0x4e>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d013      	beq.n	800a05a <validate+0x4e>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	889a      	ldrh	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	88db      	ldrh	r3, [r3, #6]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d10c      	bne.n	800a05a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	4618      	mov	r0, r3
 800a048:	f7fd fe3c 	bl	8007cc4 <disk_status>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f003 0301 	and.w	r3, r3, #1
 800a052:	2b00      	cmp	r3, #0
 800a054:	d101      	bne.n	800a05a <validate+0x4e>
			res = FR_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d102      	bne.n	800a066 <validate+0x5a>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	e000      	b.n	800a068 <validate+0x5c>
 800a066:	2300      	movs	r3, #0
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	6013      	str	r3, [r2, #0]
	return res;
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b088      	sub	sp, #32
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	4613      	mov	r3, r2
 800a084:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a08a:	f107 0310 	add.w	r3, r7, #16
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff fc9c 	bl	80099cc <get_ldnumber>
 800a094:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	da01      	bge.n	800a0a0 <f_mount+0x28>
 800a09c:	230b      	movs	r3, #11
 800a09e:	e02b      	b.n	800a0f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a0a0:	4a17      	ldr	r2, [pc, #92]	; (800a100 <f_mount+0x88>)
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d005      	beq.n	800a0bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a0b0:	69b8      	ldr	r0, [r7, #24]
 800a0b2:	f7fe f8ef 	bl	8008294 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d002      	beq.n	800a0c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	490d      	ldr	r1, [pc, #52]	; (800a100 <f_mount+0x88>)
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <f_mount+0x66>
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d001      	beq.n	800a0e2 <f_mount+0x6a>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e00a      	b.n	800a0f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a0e2:	f107 010c 	add.w	r1, r7, #12
 800a0e6:	f107 0308 	add.w	r3, r7, #8
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff fd07 	bl	8009b00 <find_volume>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	2000263c 	.word	0x2000263c

0800a104 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b09a      	sub	sp, #104	; 0x68
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <f_open+0x18>
 800a118:	2309      	movs	r3, #9
 800a11a:	e1bb      	b.n	800a494 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a122:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a124:	79fa      	ldrb	r2, [r7, #7]
 800a126:	f107 0114 	add.w	r1, r7, #20
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff fce6 	bl	8009b00 <find_volume>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a13a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f040 819f 	bne.w	800a482 <f_open+0x37e>
		dj.obj.fs = fs;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	f107 0318 	add.w	r3, r7, #24
 800a14e:	4611      	mov	r1, r2
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff fbc5 	bl	80098e0 <follow_path>
 800a156:	4603      	mov	r3, r0
 800a158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a15c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a160:	2b00      	cmp	r3, #0
 800a162:	d11a      	bne.n	800a19a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a164:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a168:	b25b      	sxtb	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	da03      	bge.n	800a176 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a16e:	2306      	movs	r3, #6
 800a170:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a174:	e011      	b.n	800a19a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a176:	79fb      	ldrb	r3, [r7, #7]
 800a178:	f023 0301 	bic.w	r3, r3, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	bf14      	ite	ne
 800a180:	2301      	movne	r3, #1
 800a182:	2300      	moveq	r3, #0
 800a184:	b2db      	uxtb	r3, r3
 800a186:	461a      	mov	r2, r3
 800a188:	f107 0318 	add.w	r3, r7, #24
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fd ff38 	bl	8008004 <chk_lock>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	f003 031c 	and.w	r3, r3, #28
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d07f      	beq.n	800a2a4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a1a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d017      	beq.n	800a1dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a1ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a1b0:	2b04      	cmp	r3, #4
 800a1b2:	d10e      	bne.n	800a1d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a1b4:	f7fd ff82 	bl	80080bc <enq_lock>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d006      	beq.n	800a1cc <f_open+0xc8>
 800a1be:	f107 0318 	add.w	r3, r7, #24
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7ff f8dc 	bl	8009380 <dir_register>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	e000      	b.n	800a1ce <f_open+0xca>
 800a1cc:	2312      	movs	r3, #18
 800a1ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	f043 0308 	orr.w	r3, r3, #8
 800a1d8:	71fb      	strb	r3, [r7, #7]
 800a1da:	e010      	b.n	800a1fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a1dc:	7fbb      	ldrb	r3, [r7, #30]
 800a1de:	f003 0311 	and.w	r3, r3, #17
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <f_open+0xea>
					res = FR_DENIED;
 800a1e6:	2307      	movs	r3, #7
 800a1e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a1ec:	e007      	b.n	800a1fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	f003 0304 	and.w	r3, r3, #4
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <f_open+0xfa>
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a1fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a202:	2b00      	cmp	r3, #0
 800a204:	d168      	bne.n	800a2d8 <f_open+0x1d4>
 800a206:	79fb      	ldrb	r3, [r7, #7]
 800a208:	f003 0308 	and.w	r3, r3, #8
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d063      	beq.n	800a2d8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a210:	f7fd fcfa 	bl	8007c08 <get_fattime>
 800a214:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a218:	330e      	adds	r3, #14
 800a21a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fd fe47 	bl	8007eb0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a224:	3316      	adds	r3, #22
 800a226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fd fe41 	bl	8007eb0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	330b      	adds	r3, #11
 800a232:	2220      	movs	r2, #32
 800a234:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a23a:	4611      	mov	r1, r2
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fe17 	bl	8008e70 <ld_clust>
 800a242:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a248:	2200      	movs	r2, #0
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fe2f 	bl	8008eae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	331c      	adds	r3, #28
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f7fd fe2a 	bl	8007eb0 <st_dword>
					fs->wflag = 1;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2201      	movs	r2, #1
 800a260:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a264:	2b00      	cmp	r3, #0
 800a266:	d037      	beq.n	800a2d8 <f_open+0x1d4>
						dw = fs->winsect;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a26c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a26e:	f107 0318 	add.w	r3, r7, #24
 800a272:	2200      	movs	r2, #0
 800a274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fb1f 	bl	80088ba <remove_chain>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a282:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a286:	2b00      	cmp	r3, #0
 800a288:	d126      	bne.n	800a2d8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe f868 	bl	8008364 <move_window>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a29e:	3a01      	subs	r2, #1
 800a2a0:	615a      	str	r2, [r3, #20]
 800a2a2:	e019      	b.n	800a2d8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a2a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d115      	bne.n	800a2d8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a2ac:	7fbb      	ldrb	r3, [r7, #30]
 800a2ae:	f003 0310 	and.w	r3, r3, #16
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <f_open+0x1ba>
					res = FR_NO_FILE;
 800a2b6:	2304      	movs	r3, #4
 800a2b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a2bc:	e00c      	b.n	800a2d8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	f003 0302 	and.w	r3, r3, #2
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <f_open+0x1d4>
 800a2c8:	7fbb      	ldrb	r3, [r7, #30]
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <f_open+0x1d4>
						res = FR_DENIED;
 800a2d2:	2307      	movs	r3, #7
 800a2d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a2d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d128      	bne.n	800a332 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a2e0:	79fb      	ldrb	r3, [r7, #7]
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a2ea:	79fb      	ldrb	r3, [r7, #7]
 800a2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a2fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	f023 0301 	bic.w	r3, r3, #1
 800a306:	2b00      	cmp	r3, #0
 800a308:	bf14      	ite	ne
 800a30a:	2301      	movne	r3, #1
 800a30c:	2300      	moveq	r3, #0
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	461a      	mov	r2, r3
 800a312:	f107 0318 	add.w	r3, r7, #24
 800a316:	4611      	mov	r1, r2
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fd fef1 	bl	8008100 <inc_lock>
 800a31e:	4602      	mov	r2, r0
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <f_open+0x22e>
 800a32c:	2302      	movs	r3, #2
 800a32e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a332:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a336:	2b00      	cmp	r3, #0
 800a338:	f040 80a3 	bne.w	800a482 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a340:	4611      	mov	r1, r2
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe fd94 	bl	8008e70 <ld_clust>
 800a348:	4602      	mov	r2, r0
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a350:	331c      	adds	r3, #28
 800a352:	4618      	mov	r0, r3
 800a354:	f7fd fd6e 	bl	8007e34 <ld_dword>
 800a358:	4602      	mov	r2, r0
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	88da      	ldrh	r2, [r3, #6]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	79fa      	ldrb	r2, [r7, #7]
 800a376:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3330      	adds	r3, #48	; 0x30
 800a38e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a392:	2100      	movs	r1, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f7fd fdd8 	bl	8007f4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a39a:	79fb      	ldrb	r3, [r7, #7]
 800a39c:	f003 0320 	and.w	r3, r3, #32
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d06e      	beq.n	800a482 <f_open+0x37e>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d06a      	beq.n	800a482 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	895b      	ldrh	r3, [r3, #10]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	899b      	ldrh	r3, [r3, #12]
 800a3be:	fb02 f303 	mul.w	r3, r2, r3
 800a3c2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3d0:	e016      	b.n	800a400 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe f881 	bl	80084de <get_fat>
 800a3dc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a3de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d802      	bhi.n	800a3ea <f_open+0x2e6>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a3ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f0:	d102      	bne.n	800a3f8 <f_open+0x2f4>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a3f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a404:	2b00      	cmp	r3, #0
 800a406:	d103      	bne.n	800a410 <f_open+0x30c>
 800a408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d8e0      	bhi.n	800a3d2 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a414:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d131      	bne.n	800a482 <f_open+0x37e>
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	899b      	ldrh	r3, [r3, #12]
 800a422:	461a      	mov	r2, r3
 800a424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a426:	fbb3 f1f2 	udiv	r1, r3, r2
 800a42a:	fb01 f202 	mul.w	r2, r1, r2
 800a42e:	1a9b      	subs	r3, r3, r2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d026      	beq.n	800a482 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a438:	4618      	mov	r0, r3
 800a43a:	f7fe f831 	bl	80084a0 <clust2sect>
 800a43e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d103      	bne.n	800a44e <f_open+0x34a>
						res = FR_INT_ERR;
 800a446:	2302      	movs	r3, #2
 800a448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a44c:	e019      	b.n	800a482 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	899b      	ldrh	r3, [r3, #12]
 800a452:	461a      	mov	r2, r3
 800a454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a456:	fbb3 f2f2 	udiv	r2, r3, r2
 800a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a45c:	441a      	add	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	7858      	ldrb	r0, [r3, #1]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6a1a      	ldr	r2, [r3, #32]
 800a470:	2301      	movs	r3, #1
 800a472:	f7fd fc69 	bl	8007d48 <disk_read>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <f_open+0x37e>
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <f_open+0x38c>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a490:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a494:	4618      	mov	r0, r3
 800a496:	3768      	adds	r7, #104	; 0x68
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b08c      	sub	sp, #48	; 0x30
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f107 0210 	add.w	r2, r7, #16
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7ff fda5 	bl	800a00c <validate>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a4c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d107      	bne.n	800a4e0 <f_write+0x44>
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	7d5b      	ldrb	r3, [r3, #21]
 800a4d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a4d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <f_write+0x4a>
 800a4e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a4e4:	e16a      	b.n	800a7bc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <f_write+0x5a>
 800a4f2:	2307      	movs	r3, #7
 800a4f4:	e162      	b.n	800a7bc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	441a      	add	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	429a      	cmp	r2, r3
 800a504:	f080 814c 	bcs.w	800a7a0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	43db      	mvns	r3, r3
 800a50e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a510:	e146      	b.n	800a7a0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	8992      	ldrh	r2, [r2, #12]
 800a51a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a51e:	fb01 f202 	mul.w	r2, r1, r2
 800a522:	1a9b      	subs	r3, r3, r2
 800a524:	2b00      	cmp	r3, #0
 800a526:	f040 80f1 	bne.w	800a70c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	8992      	ldrh	r2, [r2, #12]
 800a532:	fbb3 f3f2 	udiv	r3, r3, r2
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	8952      	ldrh	r2, [r2, #10]
 800a53a:	3a01      	subs	r2, #1
 800a53c:	4013      	ands	r3, r2
 800a53e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d143      	bne.n	800a5ce <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10c      	bne.n	800a568 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	2b00      	cmp	r3, #0
 800a558:	d11a      	bne.n	800a590 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2100      	movs	r1, #0
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fe fa10 	bl	8008984 <create_chain>
 800a564:	62b8      	str	r0, [r7, #40]	; 0x28
 800a566:	e013      	b.n	800a590 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d007      	beq.n	800a580 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	4619      	mov	r1, r3
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f7fe fa9c 	bl	8008ab4 <clmt_clust>
 800a57c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a57e:	e007      	b.n	800a590 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	4619      	mov	r1, r3
 800a588:	4610      	mov	r0, r2
 800a58a:	f7fe f9fb 	bl	8008984 <create_chain>
 800a58e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 8109 	beq.w	800a7aa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d104      	bne.n	800a5a8 <f_write+0x10c>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	755a      	strb	r2, [r3, #21]
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e109      	b.n	800a7bc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	d104      	bne.n	800a5ba <f_write+0x11e>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	755a      	strb	r2, [r3, #21]
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e100      	b.n	800a7bc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d102      	bne.n	800a5ce <f_write+0x132>
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	7d1b      	ldrb	r3, [r3, #20]
 800a5d2:	b25b      	sxtb	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	da18      	bge.n	800a60a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	7858      	ldrb	r0, [r3, #1]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a1a      	ldr	r2, [r3, #32]
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	f7fd fbce 	bl	8007d88 <disk_write>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d004      	beq.n	800a5fc <f_write+0x160>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	755a      	strb	r2, [r3, #21]
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e0df      	b.n	800a7bc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	7d1b      	ldrb	r3, [r3, #20]
 800a600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a604:	b2da      	uxtb	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	4619      	mov	r1, r3
 800a612:	4610      	mov	r0, r2
 800a614:	f7fd ff44 	bl	80084a0 <clust2sect>
 800a618:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d104      	bne.n	800a62a <f_write+0x18e>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2202      	movs	r2, #2
 800a624:	755a      	strb	r2, [r3, #21]
 800a626:	2302      	movs	r3, #2
 800a628:	e0c8      	b.n	800a7bc <f_write+0x320>
			sect += csect;
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	4413      	add	r3, r2
 800a630:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	899b      	ldrh	r3, [r3, #12]
 800a636:	461a      	mov	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a63e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d043      	beq.n	800a6ce <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a646:	69ba      	ldr	r2, [r7, #24]
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	4413      	add	r3, r2
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	8952      	ldrh	r2, [r2, #10]
 800a650:	4293      	cmp	r3, r2
 800a652:	d905      	bls.n	800a660 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	895b      	ldrh	r3, [r3, #10]
 800a658:	461a      	mov	r2, r3
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	7858      	ldrb	r0, [r3, #1]
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	69f9      	ldr	r1, [r7, #28]
 800a66a:	f7fd fb8d 	bl	8007d88 <disk_write>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d004      	beq.n	800a67e <f_write+0x1e2>
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2201      	movs	r2, #1
 800a678:	755a      	strb	r2, [r3, #21]
 800a67a:	2301      	movs	r3, #1
 800a67c:	e09e      	b.n	800a7bc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6a1a      	ldr	r2, [r3, #32]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	6a3a      	ldr	r2, [r7, #32]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d918      	bls.n	800a6be <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a1a      	ldr	r2, [r3, #32]
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	8992      	ldrh	r2, [r2, #12]
 800a69e:	fb02 f303 	mul.w	r3, r2, r3
 800a6a2:	69fa      	ldr	r2, [r7, #28]
 800a6a4:	18d1      	adds	r1, r2, r3
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	899b      	ldrh	r3, [r3, #12]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f7fd fc2c 	bl	8007f08 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	7d1b      	ldrb	r3, [r3, #20]
 800a6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	899b      	ldrh	r3, [r3, #12]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a6cc:	e04b      	b.n	800a766 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6a1b      	ldr	r3, [r3, #32]
 800a6d2:	697a      	ldr	r2, [r7, #20]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d016      	beq.n	800a706 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	699a      	ldr	r2, [r3, #24]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d210      	bcs.n	800a706 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	7858      	ldrb	r0, [r3, #1]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	f7fd fb29 	bl	8007d48 <disk_read>
 800a6f6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2201      	movs	r2, #1
 800a700:	755a      	strb	r2, [r3, #21]
 800a702:	2301      	movs	r3, #1
 800a704:	e05a      	b.n	800a7bc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	899b      	ldrh	r3, [r3, #12]
 800a710:	4618      	mov	r0, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	8992      	ldrh	r2, [r2, #12]
 800a71a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a71e:	fb01 f202 	mul.w	r2, r1, r2
 800a722:	1a9b      	subs	r3, r3, r2
 800a724:	1ac3      	subs	r3, r0, r3
 800a726:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d901      	bls.n	800a734 <f_write+0x298>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	8992      	ldrh	r2, [r2, #12]
 800a742:	fbb3 f0f2 	udiv	r0, r3, r2
 800a746:	fb00 f202 	mul.w	r2, r0, r2
 800a74a:	1a9b      	subs	r3, r3, r2
 800a74c:	440b      	add	r3, r1
 800a74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a750:	69f9      	ldr	r1, [r7, #28]
 800a752:	4618      	mov	r0, r3
 800a754:	f7fd fbd8 	bl	8007f08 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	7d1b      	ldrb	r3, [r3, #20]
 800a75c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a760:	b2da      	uxtb	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a766:	69fa      	ldr	r2, [r7, #28]
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	4413      	add	r3, r2
 800a76c:	61fb      	str	r3, [r7, #28]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a774:	441a      	add	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	619a      	str	r2, [r3, #24]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	429a      	cmp	r2, r3
 800a784:	bf38      	it	cc
 800a786:	461a      	movcc	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	60da      	str	r2, [r3, #12]
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	441a      	add	r2, r3
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f47f aeb5 	bne.w	800a512 <f_write+0x76>
 800a7a8:	e000      	b.n	800a7ac <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a7aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	7d1b      	ldrb	r3, [r3, #20]
 800a7b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3730      	adds	r7, #48	; 0x30
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f107 0208 	add.w	r2, r7, #8
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff fc19 	bl	800a00c <validate>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d168      	bne.n	800a8b6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	7d1b      	ldrb	r3, [r3, #20]
 800a7e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d062      	beq.n	800a8b6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	7d1b      	ldrb	r3, [r3, #20]
 800a7f4:	b25b      	sxtb	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	da15      	bge.n	800a826 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	7858      	ldrb	r0, [r3, #1]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6a1a      	ldr	r2, [r3, #32]
 800a808:	2301      	movs	r3, #1
 800a80a:	f7fd fabd 	bl	8007d88 <disk_write>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <f_sync+0x54>
 800a814:	2301      	movs	r3, #1
 800a816:	e04f      	b.n	800a8b8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	7d1b      	ldrb	r3, [r3, #20]
 800a81c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a820:	b2da      	uxtb	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a826:	f7fd f9ef 	bl	8007c08 <get_fattime>
 800a82a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f7fd fd95 	bl	8008364 <move_window>
 800a83a:	4603      	mov	r3, r0
 800a83c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d138      	bne.n	800a8b6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a848:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	330b      	adds	r3, #11
 800a84e:	781a      	ldrb	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	330b      	adds	r3, #11
 800a854:	f042 0220 	orr.w	r2, r2, #32
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	461a      	mov	r2, r3
 800a866:	68f9      	ldr	r1, [r7, #12]
 800a868:	f7fe fb21 	bl	8008eae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f103 021c 	add.w	r2, r3, #28
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f7fd fb19 	bl	8007eb0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3316      	adds	r3, #22
 800a882:	6939      	ldr	r1, [r7, #16]
 800a884:	4618      	mov	r0, r3
 800a886:	f7fd fb13 	bl	8007eb0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	3312      	adds	r3, #18
 800a88e:	2100      	movs	r1, #0
 800a890:	4618      	mov	r0, r3
 800a892:	f7fd faf2 	bl	8007e7a <st_word>
					fs->wflag = 1;
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2201      	movs	r2, #1
 800a89a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fd fd8e 	bl	80083c0 <sync_fs>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	7d1b      	ldrb	r3, [r3, #20]
 800a8ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff ff7b 	bl	800a7c4 <f_sync>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d118      	bne.n	800a90a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f107 0208 	add.w	r2, r7, #8
 800a8de:	4611      	mov	r1, r2
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff fb93 	bl	800a00c <validate>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10c      	bne.n	800a90a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fd fc91 	bl	800821c <dec_lock>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a8fe:	7bfb      	ldrb	r3, [r7, #15]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d102      	bne.n	800a90a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	2b0a      	cmp	r3, #10
 800a924:	d103      	bne.n	800a92e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800a926:	210d      	movs	r1, #13
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff fff3 	bl	800a914 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	db25      	blt.n	800a986 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	60fa      	str	r2, [r7, #12]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	4413      	add	r3, r2
 800a944:	78fa      	ldrb	r2, [r7, #3]
 800a946:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2b3c      	cmp	r3, #60	; 0x3c
 800a94c:	dd12      	ble.n	800a974 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f103 010c 	add.w	r1, r3, #12
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	f7ff fd9d 	bl	800a49c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	429a      	cmp	r2, r3
 800a968:	d101      	bne.n	800a96e <putc_bfd+0x5a>
 800a96a:	2300      	movs	r3, #0
 800a96c:	e001      	b.n	800a972 <putc_bfd+0x5e>
 800a96e:	f04f 33ff 	mov.w	r3, #4294967295
 800a972:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	609a      	str	r2, [r3, #8]
 800a984:	e000      	b.n	800a988 <putc_bfd+0x74>
	if (i < 0) return;
 800a986:	bf00      	nop
}
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b084      	sub	sp, #16
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	db16      	blt.n	800a9cc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6818      	ldr	r0, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f103 010c 	add.w	r1, r3, #12
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	f107 030c 	add.w	r3, r7, #12
 800a9b2:	f7ff fd73 	bl	800a49c <f_write>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d107      	bne.n	800a9cc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d102      	bne.n	800a9cc <putc_flush+0x3e>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	e001      	b.n	800a9d0 <putc_flush+0x42>
	return EOF;
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	605a      	str	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	609a      	str	r2, [r3, #8]
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b096      	sub	sp, #88	; 0x58
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
 800aa0a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800aa0c:	f107 030c 	add.w	r3, r7, #12
 800aa10:	6839      	ldr	r1, [r7, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff ffe0 	bl	800a9d8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800aa18:	e009      	b.n	800aa2e <f_puts+0x2c>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	781a      	ldrb	r2, [r3, #0]
 800aa22:	f107 030c 	add.w	r3, r7, #12
 800aa26:	4611      	mov	r1, r2
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff ff73 	bl	800a914 <putc_bfd>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f1      	bne.n	800aa1a <f_puts+0x18>
	return putc_flush(&pb);
 800aa36:	f107 030c 	add.w	r3, r7, #12
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff ffa7 	bl	800a98e <putc_flush>
 800aa40:	4603      	mov	r3, r0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3758      	adds	r7, #88	; 0x58
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aa62:	4b1f      	ldr	r3, [pc, #124]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aa64:	7a5b      	ldrb	r3, [r3, #9]
 800aa66:	b2db      	uxtb	r3, r3
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d131      	bne.n	800aad0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa6c:	4b1c      	ldr	r3, [pc, #112]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aa6e:	7a5b      	ldrb	r3, [r3, #9]
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	461a      	mov	r2, r3
 800aa74:	4b1a      	ldr	r3, [pc, #104]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aa76:	2100      	movs	r1, #0
 800aa78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aa7a:	4b19      	ldr	r3, [pc, #100]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aa7c:	7a5b      	ldrb	r3, [r3, #9]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	4a17      	ldr	r2, [pc, #92]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aa8a:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aa8c:	7a5b      	ldrb	r3, [r3, #9]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	461a      	mov	r2, r3
 800aa92:	4b13      	ldr	r3, [pc, #76]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aa94:	4413      	add	r3, r2
 800aa96:	79fa      	ldrb	r2, [r7, #7]
 800aa98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aa9a:	4b11      	ldr	r3, [pc, #68]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aa9c:	7a5b      	ldrb	r3, [r3, #9]
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	b2d1      	uxtb	r1, r2
 800aaa4:	4a0e      	ldr	r2, [pc, #56]	; (800aae0 <FATFS_LinkDriverEx+0x94>)
 800aaa6:	7251      	strb	r1, [r2, #9]
 800aaa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aaaa:	7dbb      	ldrb	r3, [r7, #22]
 800aaac:	3330      	adds	r3, #48	; 0x30
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	3301      	adds	r3, #1
 800aab8:	223a      	movs	r2, #58	; 0x3a
 800aaba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	3302      	adds	r3, #2
 800aac0:	222f      	movs	r2, #47	; 0x2f
 800aac2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	3303      	adds	r3, #3
 800aac8:	2200      	movs	r2, #0
 800aaca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	371c      	adds	r7, #28
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	20002864 	.word	0x20002864

0800aae4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800aaee:	2200      	movs	r2, #0
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7ff ffaa 	bl	800aa4c <FATFS_LinkDriverEx>
 800aaf8:	4603      	mov	r3, r0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b085      	sub	sp, #20
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	6039      	str	r1, [r7, #0]
 800ab0e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ab10:	88fb      	ldrh	r3, [r7, #6]
 800ab12:	2b7f      	cmp	r3, #127	; 0x7f
 800ab14:	d802      	bhi.n	800ab1c <ff_convert+0x18>
		c = chr;
 800ab16:	88fb      	ldrh	r3, [r7, #6]
 800ab18:	81fb      	strh	r3, [r7, #14]
 800ab1a:	e025      	b.n	800ab68 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00b      	beq.n	800ab3a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ab22:	88fb      	ldrh	r3, [r7, #6]
 800ab24:	2bff      	cmp	r3, #255	; 0xff
 800ab26:	d805      	bhi.n	800ab34 <ff_convert+0x30>
 800ab28:	88fb      	ldrh	r3, [r7, #6]
 800ab2a:	3b80      	subs	r3, #128	; 0x80
 800ab2c:	4a12      	ldr	r2, [pc, #72]	; (800ab78 <ff_convert+0x74>)
 800ab2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab32:	e000      	b.n	800ab36 <ff_convert+0x32>
 800ab34:	2300      	movs	r3, #0
 800ab36:	81fb      	strh	r3, [r7, #14]
 800ab38:	e016      	b.n	800ab68 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	81fb      	strh	r3, [r7, #14]
 800ab3e:	e009      	b.n	800ab54 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ab40:	89fb      	ldrh	r3, [r7, #14]
 800ab42:	4a0d      	ldr	r2, [pc, #52]	; (800ab78 <ff_convert+0x74>)
 800ab44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab48:	88fa      	ldrh	r2, [r7, #6]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d006      	beq.n	800ab5c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ab4e:	89fb      	ldrh	r3, [r7, #14]
 800ab50:	3301      	adds	r3, #1
 800ab52:	81fb      	strh	r3, [r7, #14]
 800ab54:	89fb      	ldrh	r3, [r7, #14]
 800ab56:	2b7f      	cmp	r3, #127	; 0x7f
 800ab58:	d9f2      	bls.n	800ab40 <ff_convert+0x3c>
 800ab5a:	e000      	b.n	800ab5e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ab5c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ab5e:	89fb      	ldrh	r3, [r7, #14]
 800ab60:	3380      	adds	r3, #128	; 0x80
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ab68:	89fb      	ldrh	r3, [r7, #14]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	0800ba90 	.word	0x0800ba90

0800ab7c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ab86:	88fb      	ldrh	r3, [r7, #6]
 800ab88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab8c:	d201      	bcs.n	800ab92 <ff_wtoupper+0x16>
 800ab8e:	4b3e      	ldr	r3, [pc, #248]	; (800ac88 <ff_wtoupper+0x10c>)
 800ab90:	e000      	b.n	800ab94 <ff_wtoupper+0x18>
 800ab92:	4b3e      	ldr	r3, [pc, #248]	; (800ac8c <ff_wtoupper+0x110>)
 800ab94:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	1c9a      	adds	r2, r3, #2
 800ab9a:	617a      	str	r2, [r7, #20]
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800aba0:	8a7b      	ldrh	r3, [r7, #18]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d068      	beq.n	800ac78 <ff_wtoupper+0xfc>
 800aba6:	88fa      	ldrh	r2, [r7, #6]
 800aba8:	8a7b      	ldrh	r3, [r7, #18]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d364      	bcc.n	800ac78 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	1c9a      	adds	r2, r3, #2
 800abb2:	617a      	str	r2, [r7, #20]
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	823b      	strh	r3, [r7, #16]
 800abb8:	8a3b      	ldrh	r3, [r7, #16]
 800abba:	0a1b      	lsrs	r3, r3, #8
 800abbc:	81fb      	strh	r3, [r7, #14]
 800abbe:	8a3b      	ldrh	r3, [r7, #16]
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800abc4:	88fa      	ldrh	r2, [r7, #6]
 800abc6:	8a79      	ldrh	r1, [r7, #18]
 800abc8:	8a3b      	ldrh	r3, [r7, #16]
 800abca:	440b      	add	r3, r1
 800abcc:	429a      	cmp	r2, r3
 800abce:	da49      	bge.n	800ac64 <ff_wtoupper+0xe8>
			switch (cmd) {
 800abd0:	89fb      	ldrh	r3, [r7, #14]
 800abd2:	2b08      	cmp	r3, #8
 800abd4:	d84f      	bhi.n	800ac76 <ff_wtoupper+0xfa>
 800abd6:	a201      	add	r2, pc, #4	; (adr r2, 800abdc <ff_wtoupper+0x60>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800ac01 	.word	0x0800ac01
 800abe0:	0800ac13 	.word	0x0800ac13
 800abe4:	0800ac29 	.word	0x0800ac29
 800abe8:	0800ac31 	.word	0x0800ac31
 800abec:	0800ac39 	.word	0x0800ac39
 800abf0:	0800ac41 	.word	0x0800ac41
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800ac51 	.word	0x0800ac51
 800abfc:	0800ac59 	.word	0x0800ac59
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ac00:	88fa      	ldrh	r2, [r7, #6]
 800ac02:	8a7b      	ldrh	r3, [r7, #18]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	80fb      	strh	r3, [r7, #6]
 800ac10:	e027      	b.n	800ac62 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ac12:	88fa      	ldrh	r2, [r7, #6]
 800ac14:	8a7b      	ldrh	r3, [r7, #18]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	f003 0301 	and.w	r3, r3, #1
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	88fa      	ldrh	r2, [r7, #6]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	80fb      	strh	r3, [r7, #6]
 800ac26:	e01c      	b.n	800ac62 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ac28:	88fb      	ldrh	r3, [r7, #6]
 800ac2a:	3b10      	subs	r3, #16
 800ac2c:	80fb      	strh	r3, [r7, #6]
 800ac2e:	e018      	b.n	800ac62 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ac30:	88fb      	ldrh	r3, [r7, #6]
 800ac32:	3b20      	subs	r3, #32
 800ac34:	80fb      	strh	r3, [r7, #6]
 800ac36:	e014      	b.n	800ac62 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ac38:	88fb      	ldrh	r3, [r7, #6]
 800ac3a:	3b30      	subs	r3, #48	; 0x30
 800ac3c:	80fb      	strh	r3, [r7, #6]
 800ac3e:	e010      	b.n	800ac62 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ac40:	88fb      	ldrh	r3, [r7, #6]
 800ac42:	3b1a      	subs	r3, #26
 800ac44:	80fb      	strh	r3, [r7, #6]
 800ac46:	e00c      	b.n	800ac62 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ac48:	88fb      	ldrh	r3, [r7, #6]
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	80fb      	strh	r3, [r7, #6]
 800ac4e:	e008      	b.n	800ac62 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ac50:	88fb      	ldrh	r3, [r7, #6]
 800ac52:	3b50      	subs	r3, #80	; 0x50
 800ac54:	80fb      	strh	r3, [r7, #6]
 800ac56:	e004      	b.n	800ac62 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ac58:	88fb      	ldrh	r3, [r7, #6]
 800ac5a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ac5e:	80fb      	strh	r3, [r7, #6]
 800ac60:	bf00      	nop
			}
			break;
 800ac62:	e008      	b.n	800ac76 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ac64:	89fb      	ldrh	r3, [r7, #14]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d195      	bne.n	800ab96 <ff_wtoupper+0x1a>
 800ac6a:	8a3b      	ldrh	r3, [r7, #16]
 800ac6c:	005b      	lsls	r3, r3, #1
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4413      	add	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ac74:	e78f      	b.n	800ab96 <ff_wtoupper+0x1a>
			break;
 800ac76:	bf00      	nop
	}

	return chr;
 800ac78:	88fb      	ldrh	r3, [r7, #6]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
 800ac86:	bf00      	nop
 800ac88:	0800bb90 	.word	0x0800bb90
 800ac8c:	0800bd84 	.word	0x0800bd84

0800ac90 <malloc>:
 800ac90:	4b02      	ldr	r3, [pc, #8]	; (800ac9c <malloc+0xc>)
 800ac92:	4601      	mov	r1, r0
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	f000 b82b 	b.w	800acf0 <_malloc_r>
 800ac9a:	bf00      	nop
 800ac9c:	20000074 	.word	0x20000074

0800aca0 <free>:
 800aca0:	4b02      	ldr	r3, [pc, #8]	; (800acac <free+0xc>)
 800aca2:	4601      	mov	r1, r0
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	f000 b913 	b.w	800aed0 <_free_r>
 800acaa:	bf00      	nop
 800acac:	20000074 	.word	0x20000074

0800acb0 <sbrk_aligned>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	4e0e      	ldr	r6, [pc, #56]	; (800acec <sbrk_aligned+0x3c>)
 800acb4:	460c      	mov	r4, r1
 800acb6:	6831      	ldr	r1, [r6, #0]
 800acb8:	4605      	mov	r5, r0
 800acba:	b911      	cbnz	r1, 800acc2 <sbrk_aligned+0x12>
 800acbc:	f000 f8cc 	bl	800ae58 <_sbrk_r>
 800acc0:	6030      	str	r0, [r6, #0]
 800acc2:	4621      	mov	r1, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	f000 f8c7 	bl	800ae58 <_sbrk_r>
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	d00a      	beq.n	800ace4 <sbrk_aligned+0x34>
 800acce:	1cc4      	adds	r4, r0, #3
 800acd0:	f024 0403 	bic.w	r4, r4, #3
 800acd4:	42a0      	cmp	r0, r4
 800acd6:	d007      	beq.n	800ace8 <sbrk_aligned+0x38>
 800acd8:	1a21      	subs	r1, r4, r0
 800acda:	4628      	mov	r0, r5
 800acdc:	f000 f8bc 	bl	800ae58 <_sbrk_r>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d101      	bne.n	800ace8 <sbrk_aligned+0x38>
 800ace4:	f04f 34ff 	mov.w	r4, #4294967295
 800ace8:	4620      	mov	r0, r4
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	20002874 	.word	0x20002874

0800acf0 <_malloc_r>:
 800acf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf4:	1ccd      	adds	r5, r1, #3
 800acf6:	f025 0503 	bic.w	r5, r5, #3
 800acfa:	3508      	adds	r5, #8
 800acfc:	2d0c      	cmp	r5, #12
 800acfe:	bf38      	it	cc
 800ad00:	250c      	movcc	r5, #12
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	4607      	mov	r7, r0
 800ad06:	db01      	blt.n	800ad0c <_malloc_r+0x1c>
 800ad08:	42a9      	cmp	r1, r5
 800ad0a:	d905      	bls.n	800ad18 <_malloc_r+0x28>
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	2600      	movs	r6, #0
 800ad12:	4630      	mov	r0, r6
 800ad14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad18:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800adec <_malloc_r+0xfc>
 800ad1c:	f000 f868 	bl	800adf0 <__malloc_lock>
 800ad20:	f8d8 3000 	ldr.w	r3, [r8]
 800ad24:	461c      	mov	r4, r3
 800ad26:	bb5c      	cbnz	r4, 800ad80 <_malloc_r+0x90>
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	f7ff ffc0 	bl	800acb0 <sbrk_aligned>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	4604      	mov	r4, r0
 800ad34:	d155      	bne.n	800ade2 <_malloc_r+0xf2>
 800ad36:	f8d8 4000 	ldr.w	r4, [r8]
 800ad3a:	4626      	mov	r6, r4
 800ad3c:	2e00      	cmp	r6, #0
 800ad3e:	d145      	bne.n	800adcc <_malloc_r+0xdc>
 800ad40:	2c00      	cmp	r4, #0
 800ad42:	d048      	beq.n	800add6 <_malloc_r+0xe6>
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	4631      	mov	r1, r6
 800ad48:	4638      	mov	r0, r7
 800ad4a:	eb04 0903 	add.w	r9, r4, r3
 800ad4e:	f000 f883 	bl	800ae58 <_sbrk_r>
 800ad52:	4581      	cmp	r9, r0
 800ad54:	d13f      	bne.n	800add6 <_malloc_r+0xe6>
 800ad56:	6821      	ldr	r1, [r4, #0]
 800ad58:	1a6d      	subs	r5, r5, r1
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff ffa7 	bl	800acb0 <sbrk_aligned>
 800ad62:	3001      	adds	r0, #1
 800ad64:	d037      	beq.n	800add6 <_malloc_r+0xe6>
 800ad66:	6823      	ldr	r3, [r4, #0]
 800ad68:	442b      	add	r3, r5
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d038      	beq.n	800ade6 <_malloc_r+0xf6>
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	42a2      	cmp	r2, r4
 800ad78:	d12b      	bne.n	800add2 <_malloc_r+0xe2>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	605a      	str	r2, [r3, #4]
 800ad7e:	e00f      	b.n	800ada0 <_malloc_r+0xb0>
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	1b52      	subs	r2, r2, r5
 800ad84:	d41f      	bmi.n	800adc6 <_malloc_r+0xd6>
 800ad86:	2a0b      	cmp	r2, #11
 800ad88:	d917      	bls.n	800adba <_malloc_r+0xca>
 800ad8a:	1961      	adds	r1, r4, r5
 800ad8c:	42a3      	cmp	r3, r4
 800ad8e:	6025      	str	r5, [r4, #0]
 800ad90:	bf18      	it	ne
 800ad92:	6059      	strne	r1, [r3, #4]
 800ad94:	6863      	ldr	r3, [r4, #4]
 800ad96:	bf08      	it	eq
 800ad98:	f8c8 1000 	streq.w	r1, [r8]
 800ad9c:	5162      	str	r2, [r4, r5]
 800ad9e:	604b      	str	r3, [r1, #4]
 800ada0:	4638      	mov	r0, r7
 800ada2:	f104 060b 	add.w	r6, r4, #11
 800ada6:	f000 f829 	bl	800adfc <__malloc_unlock>
 800adaa:	f026 0607 	bic.w	r6, r6, #7
 800adae:	1d23      	adds	r3, r4, #4
 800adb0:	1af2      	subs	r2, r6, r3
 800adb2:	d0ae      	beq.n	800ad12 <_malloc_r+0x22>
 800adb4:	1b9b      	subs	r3, r3, r6
 800adb6:	50a3      	str	r3, [r4, r2]
 800adb8:	e7ab      	b.n	800ad12 <_malloc_r+0x22>
 800adba:	42a3      	cmp	r3, r4
 800adbc:	6862      	ldr	r2, [r4, #4]
 800adbe:	d1dd      	bne.n	800ad7c <_malloc_r+0x8c>
 800adc0:	f8c8 2000 	str.w	r2, [r8]
 800adc4:	e7ec      	b.n	800ada0 <_malloc_r+0xb0>
 800adc6:	4623      	mov	r3, r4
 800adc8:	6864      	ldr	r4, [r4, #4]
 800adca:	e7ac      	b.n	800ad26 <_malloc_r+0x36>
 800adcc:	4634      	mov	r4, r6
 800adce:	6876      	ldr	r6, [r6, #4]
 800add0:	e7b4      	b.n	800ad3c <_malloc_r+0x4c>
 800add2:	4613      	mov	r3, r2
 800add4:	e7cc      	b.n	800ad70 <_malloc_r+0x80>
 800add6:	230c      	movs	r3, #12
 800add8:	603b      	str	r3, [r7, #0]
 800adda:	4638      	mov	r0, r7
 800addc:	f000 f80e 	bl	800adfc <__malloc_unlock>
 800ade0:	e797      	b.n	800ad12 <_malloc_r+0x22>
 800ade2:	6025      	str	r5, [r4, #0]
 800ade4:	e7dc      	b.n	800ada0 <_malloc_r+0xb0>
 800ade6:	605b      	str	r3, [r3, #4]
 800ade8:	deff      	udf	#255	; 0xff
 800adea:	bf00      	nop
 800adec:	20002870 	.word	0x20002870

0800adf0 <__malloc_lock>:
 800adf0:	4801      	ldr	r0, [pc, #4]	; (800adf8 <__malloc_lock+0x8>)
 800adf2:	f000 b86b 	b.w	800aecc <__retarget_lock_acquire_recursive>
 800adf6:	bf00      	nop
 800adf8:	200029b4 	.word	0x200029b4

0800adfc <__malloc_unlock>:
 800adfc:	4801      	ldr	r0, [pc, #4]	; (800ae04 <__malloc_unlock+0x8>)
 800adfe:	f000 b866 	b.w	800aece <__retarget_lock_release_recursive>
 800ae02:	bf00      	nop
 800ae04:	200029b4 	.word	0x200029b4

0800ae08 <siprintf>:
 800ae08:	b40e      	push	{r1, r2, r3}
 800ae0a:	b500      	push	{lr}
 800ae0c:	b09c      	sub	sp, #112	; 0x70
 800ae0e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae10:	9002      	str	r0, [sp, #8]
 800ae12:	9006      	str	r0, [sp, #24]
 800ae14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae18:	4809      	ldr	r0, [pc, #36]	; (800ae40 <siprintf+0x38>)
 800ae1a:	9107      	str	r1, [sp, #28]
 800ae1c:	9104      	str	r1, [sp, #16]
 800ae1e:	4909      	ldr	r1, [pc, #36]	; (800ae44 <siprintf+0x3c>)
 800ae20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae24:	9105      	str	r1, [sp, #20]
 800ae26:	6800      	ldr	r0, [r0, #0]
 800ae28:	9301      	str	r3, [sp, #4]
 800ae2a:	a902      	add	r1, sp, #8
 800ae2c:	f000 f8f6 	bl	800b01c <_svfiprintf_r>
 800ae30:	9b02      	ldr	r3, [sp, #8]
 800ae32:	2200      	movs	r2, #0
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	b01c      	add	sp, #112	; 0x70
 800ae38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae3c:	b003      	add	sp, #12
 800ae3e:	4770      	bx	lr
 800ae40:	20000074 	.word	0x20000074
 800ae44:	ffff0208 	.word	0xffff0208

0800ae48 <memset>:
 800ae48:	4402      	add	r2, r0
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d100      	bne.n	800ae52 <memset+0xa>
 800ae50:	4770      	bx	lr
 800ae52:	f803 1b01 	strb.w	r1, [r3], #1
 800ae56:	e7f9      	b.n	800ae4c <memset+0x4>

0800ae58 <_sbrk_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d06      	ldr	r5, [pc, #24]	; (800ae74 <_sbrk_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f8 fc20 	bl	80036a8 <_sbrk>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_sbrk_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_sbrk_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	200029b0 	.word	0x200029b0

0800ae78 <__errno>:
 800ae78:	4b01      	ldr	r3, [pc, #4]	; (800ae80 <__errno+0x8>)
 800ae7a:	6818      	ldr	r0, [r3, #0]
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	20000074 	.word	0x20000074

0800ae84 <__libc_init_array>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4d0d      	ldr	r5, [pc, #52]	; (800aebc <__libc_init_array+0x38>)
 800ae88:	4c0d      	ldr	r4, [pc, #52]	; (800aec0 <__libc_init_array+0x3c>)
 800ae8a:	1b64      	subs	r4, r4, r5
 800ae8c:	10a4      	asrs	r4, r4, #2
 800ae8e:	2600      	movs	r6, #0
 800ae90:	42a6      	cmp	r6, r4
 800ae92:	d109      	bne.n	800aea8 <__libc_init_array+0x24>
 800ae94:	4d0b      	ldr	r5, [pc, #44]	; (800aec4 <__libc_init_array+0x40>)
 800ae96:	4c0c      	ldr	r4, [pc, #48]	; (800aec8 <__libc_init_array+0x44>)
 800ae98:	f000 fcb4 	bl	800b804 <_init>
 800ae9c:	1b64      	subs	r4, r4, r5
 800ae9e:	10a4      	asrs	r4, r4, #2
 800aea0:	2600      	movs	r6, #0
 800aea2:	42a6      	cmp	r6, r4
 800aea4:	d105      	bne.n	800aeb2 <__libc_init_array+0x2e>
 800aea6:	bd70      	pop	{r4, r5, r6, pc}
 800aea8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeac:	4798      	blx	r3
 800aeae:	3601      	adds	r6, #1
 800aeb0:	e7ee      	b.n	800ae90 <__libc_init_array+0xc>
 800aeb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeb6:	4798      	blx	r3
 800aeb8:	3601      	adds	r6, #1
 800aeba:	e7f2      	b.n	800aea2 <__libc_init_array+0x1e>
 800aebc:	0800be7c 	.word	0x0800be7c
 800aec0:	0800be7c 	.word	0x0800be7c
 800aec4:	0800be7c 	.word	0x0800be7c
 800aec8:	0800be80 	.word	0x0800be80

0800aecc <__retarget_lock_acquire_recursive>:
 800aecc:	4770      	bx	lr

0800aece <__retarget_lock_release_recursive>:
 800aece:	4770      	bx	lr

0800aed0 <_free_r>:
 800aed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aed2:	2900      	cmp	r1, #0
 800aed4:	d044      	beq.n	800af60 <_free_r+0x90>
 800aed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeda:	9001      	str	r0, [sp, #4]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f1a1 0404 	sub.w	r4, r1, #4
 800aee2:	bfb8      	it	lt
 800aee4:	18e4      	addlt	r4, r4, r3
 800aee6:	f7ff ff83 	bl	800adf0 <__malloc_lock>
 800aeea:	4a1e      	ldr	r2, [pc, #120]	; (800af64 <_free_r+0x94>)
 800aeec:	9801      	ldr	r0, [sp, #4]
 800aeee:	6813      	ldr	r3, [r2, #0]
 800aef0:	b933      	cbnz	r3, 800af00 <_free_r+0x30>
 800aef2:	6063      	str	r3, [r4, #4]
 800aef4:	6014      	str	r4, [r2, #0]
 800aef6:	b003      	add	sp, #12
 800aef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aefc:	f7ff bf7e 	b.w	800adfc <__malloc_unlock>
 800af00:	42a3      	cmp	r3, r4
 800af02:	d908      	bls.n	800af16 <_free_r+0x46>
 800af04:	6825      	ldr	r5, [r4, #0]
 800af06:	1961      	adds	r1, r4, r5
 800af08:	428b      	cmp	r3, r1
 800af0a:	bf01      	itttt	eq
 800af0c:	6819      	ldreq	r1, [r3, #0]
 800af0e:	685b      	ldreq	r3, [r3, #4]
 800af10:	1949      	addeq	r1, r1, r5
 800af12:	6021      	streq	r1, [r4, #0]
 800af14:	e7ed      	b.n	800aef2 <_free_r+0x22>
 800af16:	461a      	mov	r2, r3
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	b10b      	cbz	r3, 800af20 <_free_r+0x50>
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	d9fa      	bls.n	800af16 <_free_r+0x46>
 800af20:	6811      	ldr	r1, [r2, #0]
 800af22:	1855      	adds	r5, r2, r1
 800af24:	42a5      	cmp	r5, r4
 800af26:	d10b      	bne.n	800af40 <_free_r+0x70>
 800af28:	6824      	ldr	r4, [r4, #0]
 800af2a:	4421      	add	r1, r4
 800af2c:	1854      	adds	r4, r2, r1
 800af2e:	42a3      	cmp	r3, r4
 800af30:	6011      	str	r1, [r2, #0]
 800af32:	d1e0      	bne.n	800aef6 <_free_r+0x26>
 800af34:	681c      	ldr	r4, [r3, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	6053      	str	r3, [r2, #4]
 800af3a:	440c      	add	r4, r1
 800af3c:	6014      	str	r4, [r2, #0]
 800af3e:	e7da      	b.n	800aef6 <_free_r+0x26>
 800af40:	d902      	bls.n	800af48 <_free_r+0x78>
 800af42:	230c      	movs	r3, #12
 800af44:	6003      	str	r3, [r0, #0]
 800af46:	e7d6      	b.n	800aef6 <_free_r+0x26>
 800af48:	6825      	ldr	r5, [r4, #0]
 800af4a:	1961      	adds	r1, r4, r5
 800af4c:	428b      	cmp	r3, r1
 800af4e:	bf04      	itt	eq
 800af50:	6819      	ldreq	r1, [r3, #0]
 800af52:	685b      	ldreq	r3, [r3, #4]
 800af54:	6063      	str	r3, [r4, #4]
 800af56:	bf04      	itt	eq
 800af58:	1949      	addeq	r1, r1, r5
 800af5a:	6021      	streq	r1, [r4, #0]
 800af5c:	6054      	str	r4, [r2, #4]
 800af5e:	e7ca      	b.n	800aef6 <_free_r+0x26>
 800af60:	b003      	add	sp, #12
 800af62:	bd30      	pop	{r4, r5, pc}
 800af64:	20002870 	.word	0x20002870

0800af68 <__ssputs_r>:
 800af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	688e      	ldr	r6, [r1, #8]
 800af6e:	461f      	mov	r7, r3
 800af70:	42be      	cmp	r6, r7
 800af72:	680b      	ldr	r3, [r1, #0]
 800af74:	4682      	mov	sl, r0
 800af76:	460c      	mov	r4, r1
 800af78:	4690      	mov	r8, r2
 800af7a:	d82c      	bhi.n	800afd6 <__ssputs_r+0x6e>
 800af7c:	898a      	ldrh	r2, [r1, #12]
 800af7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af82:	d026      	beq.n	800afd2 <__ssputs_r+0x6a>
 800af84:	6965      	ldr	r5, [r4, #20]
 800af86:	6909      	ldr	r1, [r1, #16]
 800af88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af8c:	eba3 0901 	sub.w	r9, r3, r1
 800af90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af94:	1c7b      	adds	r3, r7, #1
 800af96:	444b      	add	r3, r9
 800af98:	106d      	asrs	r5, r5, #1
 800af9a:	429d      	cmp	r5, r3
 800af9c:	bf38      	it	cc
 800af9e:	461d      	movcc	r5, r3
 800afa0:	0553      	lsls	r3, r2, #21
 800afa2:	d527      	bpl.n	800aff4 <__ssputs_r+0x8c>
 800afa4:	4629      	mov	r1, r5
 800afa6:	f7ff fea3 	bl	800acf0 <_malloc_r>
 800afaa:	4606      	mov	r6, r0
 800afac:	b360      	cbz	r0, 800b008 <__ssputs_r+0xa0>
 800afae:	6921      	ldr	r1, [r4, #16]
 800afb0:	464a      	mov	r2, r9
 800afb2:	f000 fadb 	bl	800b56c <memcpy>
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	6126      	str	r6, [r4, #16]
 800afc4:	6165      	str	r5, [r4, #20]
 800afc6:	444e      	add	r6, r9
 800afc8:	eba5 0509 	sub.w	r5, r5, r9
 800afcc:	6026      	str	r6, [r4, #0]
 800afce:	60a5      	str	r5, [r4, #8]
 800afd0:	463e      	mov	r6, r7
 800afd2:	42be      	cmp	r6, r7
 800afd4:	d900      	bls.n	800afd8 <__ssputs_r+0x70>
 800afd6:	463e      	mov	r6, r7
 800afd8:	6820      	ldr	r0, [r4, #0]
 800afda:	4632      	mov	r2, r6
 800afdc:	4641      	mov	r1, r8
 800afde:	f000 faab 	bl	800b538 <memmove>
 800afe2:	68a3      	ldr	r3, [r4, #8]
 800afe4:	1b9b      	subs	r3, r3, r6
 800afe6:	60a3      	str	r3, [r4, #8]
 800afe8:	6823      	ldr	r3, [r4, #0]
 800afea:	4433      	add	r3, r6
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	2000      	movs	r0, #0
 800aff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff4:	462a      	mov	r2, r5
 800aff6:	f000 fac7 	bl	800b588 <_realloc_r>
 800affa:	4606      	mov	r6, r0
 800affc:	2800      	cmp	r0, #0
 800affe:	d1e0      	bne.n	800afc2 <__ssputs_r+0x5a>
 800b000:	6921      	ldr	r1, [r4, #16]
 800b002:	4650      	mov	r0, sl
 800b004:	f7ff ff64 	bl	800aed0 <_free_r>
 800b008:	230c      	movs	r3, #12
 800b00a:	f8ca 3000 	str.w	r3, [sl]
 800b00e:	89a3      	ldrh	r3, [r4, #12]
 800b010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b014:	81a3      	strh	r3, [r4, #12]
 800b016:	f04f 30ff 	mov.w	r0, #4294967295
 800b01a:	e7e9      	b.n	800aff0 <__ssputs_r+0x88>

0800b01c <_svfiprintf_r>:
 800b01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b020:	4698      	mov	r8, r3
 800b022:	898b      	ldrh	r3, [r1, #12]
 800b024:	061b      	lsls	r3, r3, #24
 800b026:	b09d      	sub	sp, #116	; 0x74
 800b028:	4607      	mov	r7, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	4614      	mov	r4, r2
 800b02e:	d50e      	bpl.n	800b04e <_svfiprintf_r+0x32>
 800b030:	690b      	ldr	r3, [r1, #16]
 800b032:	b963      	cbnz	r3, 800b04e <_svfiprintf_r+0x32>
 800b034:	2140      	movs	r1, #64	; 0x40
 800b036:	f7ff fe5b 	bl	800acf0 <_malloc_r>
 800b03a:	6028      	str	r0, [r5, #0]
 800b03c:	6128      	str	r0, [r5, #16]
 800b03e:	b920      	cbnz	r0, 800b04a <_svfiprintf_r+0x2e>
 800b040:	230c      	movs	r3, #12
 800b042:	603b      	str	r3, [r7, #0]
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	e0d0      	b.n	800b1ec <_svfiprintf_r+0x1d0>
 800b04a:	2340      	movs	r3, #64	; 0x40
 800b04c:	616b      	str	r3, [r5, #20]
 800b04e:	2300      	movs	r3, #0
 800b050:	9309      	str	r3, [sp, #36]	; 0x24
 800b052:	2320      	movs	r3, #32
 800b054:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b058:	f8cd 800c 	str.w	r8, [sp, #12]
 800b05c:	2330      	movs	r3, #48	; 0x30
 800b05e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b204 <_svfiprintf_r+0x1e8>
 800b062:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b066:	f04f 0901 	mov.w	r9, #1
 800b06a:	4623      	mov	r3, r4
 800b06c:	469a      	mov	sl, r3
 800b06e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b072:	b10a      	cbz	r2, 800b078 <_svfiprintf_r+0x5c>
 800b074:	2a25      	cmp	r2, #37	; 0x25
 800b076:	d1f9      	bne.n	800b06c <_svfiprintf_r+0x50>
 800b078:	ebba 0b04 	subs.w	fp, sl, r4
 800b07c:	d00b      	beq.n	800b096 <_svfiprintf_r+0x7a>
 800b07e:	465b      	mov	r3, fp
 800b080:	4622      	mov	r2, r4
 800b082:	4629      	mov	r1, r5
 800b084:	4638      	mov	r0, r7
 800b086:	f7ff ff6f 	bl	800af68 <__ssputs_r>
 800b08a:	3001      	adds	r0, #1
 800b08c:	f000 80a9 	beq.w	800b1e2 <_svfiprintf_r+0x1c6>
 800b090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b092:	445a      	add	r2, fp
 800b094:	9209      	str	r2, [sp, #36]	; 0x24
 800b096:	f89a 3000 	ldrb.w	r3, [sl]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 80a1 	beq.w	800b1e2 <_svfiprintf_r+0x1c6>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0aa:	f10a 0a01 	add.w	sl, sl, #1
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	9307      	str	r3, [sp, #28]
 800b0b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0b6:	931a      	str	r3, [sp, #104]	; 0x68
 800b0b8:	4654      	mov	r4, sl
 800b0ba:	2205      	movs	r2, #5
 800b0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0c0:	4850      	ldr	r0, [pc, #320]	; (800b204 <_svfiprintf_r+0x1e8>)
 800b0c2:	f7f5 f88d 	bl	80001e0 <memchr>
 800b0c6:	9a04      	ldr	r2, [sp, #16]
 800b0c8:	b9d8      	cbnz	r0, 800b102 <_svfiprintf_r+0xe6>
 800b0ca:	06d0      	lsls	r0, r2, #27
 800b0cc:	bf44      	itt	mi
 800b0ce:	2320      	movmi	r3, #32
 800b0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0d4:	0711      	lsls	r1, r2, #28
 800b0d6:	bf44      	itt	mi
 800b0d8:	232b      	movmi	r3, #43	; 0x2b
 800b0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0de:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e4:	d015      	beq.n	800b112 <_svfiprintf_r+0xf6>
 800b0e6:	9a07      	ldr	r2, [sp, #28]
 800b0e8:	4654      	mov	r4, sl
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	f04f 0c0a 	mov.w	ip, #10
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0f6:	3b30      	subs	r3, #48	; 0x30
 800b0f8:	2b09      	cmp	r3, #9
 800b0fa:	d94d      	bls.n	800b198 <_svfiprintf_r+0x17c>
 800b0fc:	b1b0      	cbz	r0, 800b12c <_svfiprintf_r+0x110>
 800b0fe:	9207      	str	r2, [sp, #28]
 800b100:	e014      	b.n	800b12c <_svfiprintf_r+0x110>
 800b102:	eba0 0308 	sub.w	r3, r0, r8
 800b106:	fa09 f303 	lsl.w	r3, r9, r3
 800b10a:	4313      	orrs	r3, r2
 800b10c:	9304      	str	r3, [sp, #16]
 800b10e:	46a2      	mov	sl, r4
 800b110:	e7d2      	b.n	800b0b8 <_svfiprintf_r+0x9c>
 800b112:	9b03      	ldr	r3, [sp, #12]
 800b114:	1d19      	adds	r1, r3, #4
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	9103      	str	r1, [sp, #12]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	bfbb      	ittet	lt
 800b11e:	425b      	neglt	r3, r3
 800b120:	f042 0202 	orrlt.w	r2, r2, #2
 800b124:	9307      	strge	r3, [sp, #28]
 800b126:	9307      	strlt	r3, [sp, #28]
 800b128:	bfb8      	it	lt
 800b12a:	9204      	strlt	r2, [sp, #16]
 800b12c:	7823      	ldrb	r3, [r4, #0]
 800b12e:	2b2e      	cmp	r3, #46	; 0x2e
 800b130:	d10c      	bne.n	800b14c <_svfiprintf_r+0x130>
 800b132:	7863      	ldrb	r3, [r4, #1]
 800b134:	2b2a      	cmp	r3, #42	; 0x2a
 800b136:	d134      	bne.n	800b1a2 <_svfiprintf_r+0x186>
 800b138:	9b03      	ldr	r3, [sp, #12]
 800b13a:	1d1a      	adds	r2, r3, #4
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	9203      	str	r2, [sp, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	bfb8      	it	lt
 800b144:	f04f 33ff 	movlt.w	r3, #4294967295
 800b148:	3402      	adds	r4, #2
 800b14a:	9305      	str	r3, [sp, #20]
 800b14c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b214 <_svfiprintf_r+0x1f8>
 800b150:	7821      	ldrb	r1, [r4, #0]
 800b152:	2203      	movs	r2, #3
 800b154:	4650      	mov	r0, sl
 800b156:	f7f5 f843 	bl	80001e0 <memchr>
 800b15a:	b138      	cbz	r0, 800b16c <_svfiprintf_r+0x150>
 800b15c:	9b04      	ldr	r3, [sp, #16]
 800b15e:	eba0 000a 	sub.w	r0, r0, sl
 800b162:	2240      	movs	r2, #64	; 0x40
 800b164:	4082      	lsls	r2, r0
 800b166:	4313      	orrs	r3, r2
 800b168:	3401      	adds	r4, #1
 800b16a:	9304      	str	r3, [sp, #16]
 800b16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b170:	4825      	ldr	r0, [pc, #148]	; (800b208 <_svfiprintf_r+0x1ec>)
 800b172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b176:	2206      	movs	r2, #6
 800b178:	f7f5 f832 	bl	80001e0 <memchr>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d038      	beq.n	800b1f2 <_svfiprintf_r+0x1d6>
 800b180:	4b22      	ldr	r3, [pc, #136]	; (800b20c <_svfiprintf_r+0x1f0>)
 800b182:	bb1b      	cbnz	r3, 800b1cc <_svfiprintf_r+0x1b0>
 800b184:	9b03      	ldr	r3, [sp, #12]
 800b186:	3307      	adds	r3, #7
 800b188:	f023 0307 	bic.w	r3, r3, #7
 800b18c:	3308      	adds	r3, #8
 800b18e:	9303      	str	r3, [sp, #12]
 800b190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b192:	4433      	add	r3, r6
 800b194:	9309      	str	r3, [sp, #36]	; 0x24
 800b196:	e768      	b.n	800b06a <_svfiprintf_r+0x4e>
 800b198:	fb0c 3202 	mla	r2, ip, r2, r3
 800b19c:	460c      	mov	r4, r1
 800b19e:	2001      	movs	r0, #1
 800b1a0:	e7a6      	b.n	800b0f0 <_svfiprintf_r+0xd4>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	3401      	adds	r4, #1
 800b1a6:	9305      	str	r3, [sp, #20]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	f04f 0c0a 	mov.w	ip, #10
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1b4:	3a30      	subs	r2, #48	; 0x30
 800b1b6:	2a09      	cmp	r2, #9
 800b1b8:	d903      	bls.n	800b1c2 <_svfiprintf_r+0x1a6>
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d0c6      	beq.n	800b14c <_svfiprintf_r+0x130>
 800b1be:	9105      	str	r1, [sp, #20]
 800b1c0:	e7c4      	b.n	800b14c <_svfiprintf_r+0x130>
 800b1c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e7f0      	b.n	800b1ae <_svfiprintf_r+0x192>
 800b1cc:	ab03      	add	r3, sp, #12
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	4b0f      	ldr	r3, [pc, #60]	; (800b210 <_svfiprintf_r+0x1f4>)
 800b1d4:	a904      	add	r1, sp, #16
 800b1d6:	4638      	mov	r0, r7
 800b1d8:	f3af 8000 	nop.w
 800b1dc:	1c42      	adds	r2, r0, #1
 800b1de:	4606      	mov	r6, r0
 800b1e0:	d1d6      	bne.n	800b190 <_svfiprintf_r+0x174>
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	065b      	lsls	r3, r3, #25
 800b1e6:	f53f af2d 	bmi.w	800b044 <_svfiprintf_r+0x28>
 800b1ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ec:	b01d      	add	sp, #116	; 0x74
 800b1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f2:	ab03      	add	r3, sp, #12
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	462a      	mov	r2, r5
 800b1f8:	4b05      	ldr	r3, [pc, #20]	; (800b210 <_svfiprintf_r+0x1f4>)
 800b1fa:	a904      	add	r1, sp, #16
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f000 f879 	bl	800b2f4 <_printf_i>
 800b202:	e7eb      	b.n	800b1dc <_svfiprintf_r+0x1c0>
 800b204:	0800be40 	.word	0x0800be40
 800b208:	0800be4a 	.word	0x0800be4a
 800b20c:	00000000 	.word	0x00000000
 800b210:	0800af69 	.word	0x0800af69
 800b214:	0800be46 	.word	0x0800be46

0800b218 <_printf_common>:
 800b218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b21c:	4616      	mov	r6, r2
 800b21e:	4699      	mov	r9, r3
 800b220:	688a      	ldr	r2, [r1, #8]
 800b222:	690b      	ldr	r3, [r1, #16]
 800b224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b228:	4293      	cmp	r3, r2
 800b22a:	bfb8      	it	lt
 800b22c:	4613      	movlt	r3, r2
 800b22e:	6033      	str	r3, [r6, #0]
 800b230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b234:	4607      	mov	r7, r0
 800b236:	460c      	mov	r4, r1
 800b238:	b10a      	cbz	r2, 800b23e <_printf_common+0x26>
 800b23a:	3301      	adds	r3, #1
 800b23c:	6033      	str	r3, [r6, #0]
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	0699      	lsls	r1, r3, #26
 800b242:	bf42      	ittt	mi
 800b244:	6833      	ldrmi	r3, [r6, #0]
 800b246:	3302      	addmi	r3, #2
 800b248:	6033      	strmi	r3, [r6, #0]
 800b24a:	6825      	ldr	r5, [r4, #0]
 800b24c:	f015 0506 	ands.w	r5, r5, #6
 800b250:	d106      	bne.n	800b260 <_printf_common+0x48>
 800b252:	f104 0a19 	add.w	sl, r4, #25
 800b256:	68e3      	ldr	r3, [r4, #12]
 800b258:	6832      	ldr	r2, [r6, #0]
 800b25a:	1a9b      	subs	r3, r3, r2
 800b25c:	42ab      	cmp	r3, r5
 800b25e:	dc26      	bgt.n	800b2ae <_printf_common+0x96>
 800b260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b264:	1e13      	subs	r3, r2, #0
 800b266:	6822      	ldr	r2, [r4, #0]
 800b268:	bf18      	it	ne
 800b26a:	2301      	movne	r3, #1
 800b26c:	0692      	lsls	r2, r2, #26
 800b26e:	d42b      	bmi.n	800b2c8 <_printf_common+0xb0>
 800b270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b274:	4649      	mov	r1, r9
 800b276:	4638      	mov	r0, r7
 800b278:	47c0      	blx	r8
 800b27a:	3001      	adds	r0, #1
 800b27c:	d01e      	beq.n	800b2bc <_printf_common+0xa4>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	6922      	ldr	r2, [r4, #16]
 800b282:	f003 0306 	and.w	r3, r3, #6
 800b286:	2b04      	cmp	r3, #4
 800b288:	bf02      	ittt	eq
 800b28a:	68e5      	ldreq	r5, [r4, #12]
 800b28c:	6833      	ldreq	r3, [r6, #0]
 800b28e:	1aed      	subeq	r5, r5, r3
 800b290:	68a3      	ldr	r3, [r4, #8]
 800b292:	bf0c      	ite	eq
 800b294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b298:	2500      	movne	r5, #0
 800b29a:	4293      	cmp	r3, r2
 800b29c:	bfc4      	itt	gt
 800b29e:	1a9b      	subgt	r3, r3, r2
 800b2a0:	18ed      	addgt	r5, r5, r3
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	341a      	adds	r4, #26
 800b2a6:	42b5      	cmp	r5, r6
 800b2a8:	d11a      	bne.n	800b2e0 <_printf_common+0xc8>
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	e008      	b.n	800b2c0 <_printf_common+0xa8>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	47c0      	blx	r8
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	d103      	bne.n	800b2c4 <_printf_common+0xac>
 800b2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2c4:	3501      	adds	r5, #1
 800b2c6:	e7c6      	b.n	800b256 <_printf_common+0x3e>
 800b2c8:	18e1      	adds	r1, r4, r3
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	2030      	movs	r0, #48	; 0x30
 800b2ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2d2:	4422      	add	r2, r4
 800b2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2dc:	3302      	adds	r3, #2
 800b2de:	e7c7      	b.n	800b270 <_printf_common+0x58>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	47c0      	blx	r8
 800b2ea:	3001      	adds	r0, #1
 800b2ec:	d0e6      	beq.n	800b2bc <_printf_common+0xa4>
 800b2ee:	3601      	adds	r6, #1
 800b2f0:	e7d9      	b.n	800b2a6 <_printf_common+0x8e>
	...

0800b2f4 <_printf_i>:
 800b2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f8:	7e0f      	ldrb	r7, [r1, #24]
 800b2fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2fc:	2f78      	cmp	r7, #120	; 0x78
 800b2fe:	4691      	mov	r9, r2
 800b300:	4680      	mov	r8, r0
 800b302:	460c      	mov	r4, r1
 800b304:	469a      	mov	sl, r3
 800b306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b30a:	d807      	bhi.n	800b31c <_printf_i+0x28>
 800b30c:	2f62      	cmp	r7, #98	; 0x62
 800b30e:	d80a      	bhi.n	800b326 <_printf_i+0x32>
 800b310:	2f00      	cmp	r7, #0
 800b312:	f000 80d4 	beq.w	800b4be <_printf_i+0x1ca>
 800b316:	2f58      	cmp	r7, #88	; 0x58
 800b318:	f000 80c0 	beq.w	800b49c <_printf_i+0x1a8>
 800b31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b324:	e03a      	b.n	800b39c <_printf_i+0xa8>
 800b326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b32a:	2b15      	cmp	r3, #21
 800b32c:	d8f6      	bhi.n	800b31c <_printf_i+0x28>
 800b32e:	a101      	add	r1, pc, #4	; (adr r1, 800b334 <_printf_i+0x40>)
 800b330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b334:	0800b38d 	.word	0x0800b38d
 800b338:	0800b3a1 	.word	0x0800b3a1
 800b33c:	0800b31d 	.word	0x0800b31d
 800b340:	0800b31d 	.word	0x0800b31d
 800b344:	0800b31d 	.word	0x0800b31d
 800b348:	0800b31d 	.word	0x0800b31d
 800b34c:	0800b3a1 	.word	0x0800b3a1
 800b350:	0800b31d 	.word	0x0800b31d
 800b354:	0800b31d 	.word	0x0800b31d
 800b358:	0800b31d 	.word	0x0800b31d
 800b35c:	0800b31d 	.word	0x0800b31d
 800b360:	0800b4a5 	.word	0x0800b4a5
 800b364:	0800b3cd 	.word	0x0800b3cd
 800b368:	0800b45f 	.word	0x0800b45f
 800b36c:	0800b31d 	.word	0x0800b31d
 800b370:	0800b31d 	.word	0x0800b31d
 800b374:	0800b4c7 	.word	0x0800b4c7
 800b378:	0800b31d 	.word	0x0800b31d
 800b37c:	0800b3cd 	.word	0x0800b3cd
 800b380:	0800b31d 	.word	0x0800b31d
 800b384:	0800b31d 	.word	0x0800b31d
 800b388:	0800b467 	.word	0x0800b467
 800b38c:	682b      	ldr	r3, [r5, #0]
 800b38e:	1d1a      	adds	r2, r3, #4
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	602a      	str	r2, [r5, #0]
 800b394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b39c:	2301      	movs	r3, #1
 800b39e:	e09f      	b.n	800b4e0 <_printf_i+0x1ec>
 800b3a0:	6820      	ldr	r0, [r4, #0]
 800b3a2:	682b      	ldr	r3, [r5, #0]
 800b3a4:	0607      	lsls	r7, r0, #24
 800b3a6:	f103 0104 	add.w	r1, r3, #4
 800b3aa:	6029      	str	r1, [r5, #0]
 800b3ac:	d501      	bpl.n	800b3b2 <_printf_i+0xbe>
 800b3ae:	681e      	ldr	r6, [r3, #0]
 800b3b0:	e003      	b.n	800b3ba <_printf_i+0xc6>
 800b3b2:	0646      	lsls	r6, r0, #25
 800b3b4:	d5fb      	bpl.n	800b3ae <_printf_i+0xba>
 800b3b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b3ba:	2e00      	cmp	r6, #0
 800b3bc:	da03      	bge.n	800b3c6 <_printf_i+0xd2>
 800b3be:	232d      	movs	r3, #45	; 0x2d
 800b3c0:	4276      	negs	r6, r6
 800b3c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3c6:	485a      	ldr	r0, [pc, #360]	; (800b530 <_printf_i+0x23c>)
 800b3c8:	230a      	movs	r3, #10
 800b3ca:	e012      	b.n	800b3f2 <_printf_i+0xfe>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	6820      	ldr	r0, [r4, #0]
 800b3d0:	1d19      	adds	r1, r3, #4
 800b3d2:	6029      	str	r1, [r5, #0]
 800b3d4:	0605      	lsls	r5, r0, #24
 800b3d6:	d501      	bpl.n	800b3dc <_printf_i+0xe8>
 800b3d8:	681e      	ldr	r6, [r3, #0]
 800b3da:	e002      	b.n	800b3e2 <_printf_i+0xee>
 800b3dc:	0641      	lsls	r1, r0, #25
 800b3de:	d5fb      	bpl.n	800b3d8 <_printf_i+0xe4>
 800b3e0:	881e      	ldrh	r6, [r3, #0]
 800b3e2:	4853      	ldr	r0, [pc, #332]	; (800b530 <_printf_i+0x23c>)
 800b3e4:	2f6f      	cmp	r7, #111	; 0x6f
 800b3e6:	bf0c      	ite	eq
 800b3e8:	2308      	moveq	r3, #8
 800b3ea:	230a      	movne	r3, #10
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3f2:	6865      	ldr	r5, [r4, #4]
 800b3f4:	60a5      	str	r5, [r4, #8]
 800b3f6:	2d00      	cmp	r5, #0
 800b3f8:	bfa2      	ittt	ge
 800b3fa:	6821      	ldrge	r1, [r4, #0]
 800b3fc:	f021 0104 	bicge.w	r1, r1, #4
 800b400:	6021      	strge	r1, [r4, #0]
 800b402:	b90e      	cbnz	r6, 800b408 <_printf_i+0x114>
 800b404:	2d00      	cmp	r5, #0
 800b406:	d04b      	beq.n	800b4a0 <_printf_i+0x1ac>
 800b408:	4615      	mov	r5, r2
 800b40a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b40e:	fb03 6711 	mls	r7, r3, r1, r6
 800b412:	5dc7      	ldrb	r7, [r0, r7]
 800b414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b418:	4637      	mov	r7, r6
 800b41a:	42bb      	cmp	r3, r7
 800b41c:	460e      	mov	r6, r1
 800b41e:	d9f4      	bls.n	800b40a <_printf_i+0x116>
 800b420:	2b08      	cmp	r3, #8
 800b422:	d10b      	bne.n	800b43c <_printf_i+0x148>
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	07de      	lsls	r6, r3, #31
 800b428:	d508      	bpl.n	800b43c <_printf_i+0x148>
 800b42a:	6923      	ldr	r3, [r4, #16]
 800b42c:	6861      	ldr	r1, [r4, #4]
 800b42e:	4299      	cmp	r1, r3
 800b430:	bfde      	ittt	le
 800b432:	2330      	movle	r3, #48	; 0x30
 800b434:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b43c:	1b52      	subs	r2, r2, r5
 800b43e:	6122      	str	r2, [r4, #16]
 800b440:	f8cd a000 	str.w	sl, [sp]
 800b444:	464b      	mov	r3, r9
 800b446:	aa03      	add	r2, sp, #12
 800b448:	4621      	mov	r1, r4
 800b44a:	4640      	mov	r0, r8
 800b44c:	f7ff fee4 	bl	800b218 <_printf_common>
 800b450:	3001      	adds	r0, #1
 800b452:	d14a      	bne.n	800b4ea <_printf_i+0x1f6>
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	b004      	add	sp, #16
 800b45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	f043 0320 	orr.w	r3, r3, #32
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	4833      	ldr	r0, [pc, #204]	; (800b534 <_printf_i+0x240>)
 800b468:	2778      	movs	r7, #120	; 0x78
 800b46a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	6829      	ldr	r1, [r5, #0]
 800b472:	061f      	lsls	r7, r3, #24
 800b474:	f851 6b04 	ldr.w	r6, [r1], #4
 800b478:	d402      	bmi.n	800b480 <_printf_i+0x18c>
 800b47a:	065f      	lsls	r7, r3, #25
 800b47c:	bf48      	it	mi
 800b47e:	b2b6      	uxthmi	r6, r6
 800b480:	07df      	lsls	r7, r3, #31
 800b482:	bf48      	it	mi
 800b484:	f043 0320 	orrmi.w	r3, r3, #32
 800b488:	6029      	str	r1, [r5, #0]
 800b48a:	bf48      	it	mi
 800b48c:	6023      	strmi	r3, [r4, #0]
 800b48e:	b91e      	cbnz	r6, 800b498 <_printf_i+0x1a4>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	f023 0320 	bic.w	r3, r3, #32
 800b496:	6023      	str	r3, [r4, #0]
 800b498:	2310      	movs	r3, #16
 800b49a:	e7a7      	b.n	800b3ec <_printf_i+0xf8>
 800b49c:	4824      	ldr	r0, [pc, #144]	; (800b530 <_printf_i+0x23c>)
 800b49e:	e7e4      	b.n	800b46a <_printf_i+0x176>
 800b4a0:	4615      	mov	r5, r2
 800b4a2:	e7bd      	b.n	800b420 <_printf_i+0x12c>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	6826      	ldr	r6, [r4, #0]
 800b4a8:	6961      	ldr	r1, [r4, #20]
 800b4aa:	1d18      	adds	r0, r3, #4
 800b4ac:	6028      	str	r0, [r5, #0]
 800b4ae:	0635      	lsls	r5, r6, #24
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	d501      	bpl.n	800b4b8 <_printf_i+0x1c4>
 800b4b4:	6019      	str	r1, [r3, #0]
 800b4b6:	e002      	b.n	800b4be <_printf_i+0x1ca>
 800b4b8:	0670      	lsls	r0, r6, #25
 800b4ba:	d5fb      	bpl.n	800b4b4 <_printf_i+0x1c0>
 800b4bc:	8019      	strh	r1, [r3, #0]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	6123      	str	r3, [r4, #16]
 800b4c2:	4615      	mov	r5, r2
 800b4c4:	e7bc      	b.n	800b440 <_printf_i+0x14c>
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	1d1a      	adds	r2, r3, #4
 800b4ca:	602a      	str	r2, [r5, #0]
 800b4cc:	681d      	ldr	r5, [r3, #0]
 800b4ce:	6862      	ldr	r2, [r4, #4]
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f7f4 fe84 	bl	80001e0 <memchr>
 800b4d8:	b108      	cbz	r0, 800b4de <_printf_i+0x1ea>
 800b4da:	1b40      	subs	r0, r0, r5
 800b4dc:	6060      	str	r0, [r4, #4]
 800b4de:	6863      	ldr	r3, [r4, #4]
 800b4e0:	6123      	str	r3, [r4, #16]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4e8:	e7aa      	b.n	800b440 <_printf_i+0x14c>
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	462a      	mov	r2, r5
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	47d0      	blx	sl
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	d0ad      	beq.n	800b454 <_printf_i+0x160>
 800b4f8:	6823      	ldr	r3, [r4, #0]
 800b4fa:	079b      	lsls	r3, r3, #30
 800b4fc:	d413      	bmi.n	800b526 <_printf_i+0x232>
 800b4fe:	68e0      	ldr	r0, [r4, #12]
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	4298      	cmp	r0, r3
 800b504:	bfb8      	it	lt
 800b506:	4618      	movlt	r0, r3
 800b508:	e7a6      	b.n	800b458 <_printf_i+0x164>
 800b50a:	2301      	movs	r3, #1
 800b50c:	4632      	mov	r2, r6
 800b50e:	4649      	mov	r1, r9
 800b510:	4640      	mov	r0, r8
 800b512:	47d0      	blx	sl
 800b514:	3001      	adds	r0, #1
 800b516:	d09d      	beq.n	800b454 <_printf_i+0x160>
 800b518:	3501      	adds	r5, #1
 800b51a:	68e3      	ldr	r3, [r4, #12]
 800b51c:	9903      	ldr	r1, [sp, #12]
 800b51e:	1a5b      	subs	r3, r3, r1
 800b520:	42ab      	cmp	r3, r5
 800b522:	dcf2      	bgt.n	800b50a <_printf_i+0x216>
 800b524:	e7eb      	b.n	800b4fe <_printf_i+0x20a>
 800b526:	2500      	movs	r5, #0
 800b528:	f104 0619 	add.w	r6, r4, #25
 800b52c:	e7f5      	b.n	800b51a <_printf_i+0x226>
 800b52e:	bf00      	nop
 800b530:	0800be51 	.word	0x0800be51
 800b534:	0800be62 	.word	0x0800be62

0800b538 <memmove>:
 800b538:	4288      	cmp	r0, r1
 800b53a:	b510      	push	{r4, lr}
 800b53c:	eb01 0402 	add.w	r4, r1, r2
 800b540:	d902      	bls.n	800b548 <memmove+0x10>
 800b542:	4284      	cmp	r4, r0
 800b544:	4623      	mov	r3, r4
 800b546:	d807      	bhi.n	800b558 <memmove+0x20>
 800b548:	1e43      	subs	r3, r0, #1
 800b54a:	42a1      	cmp	r1, r4
 800b54c:	d008      	beq.n	800b560 <memmove+0x28>
 800b54e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b552:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b556:	e7f8      	b.n	800b54a <memmove+0x12>
 800b558:	4402      	add	r2, r0
 800b55a:	4601      	mov	r1, r0
 800b55c:	428a      	cmp	r2, r1
 800b55e:	d100      	bne.n	800b562 <memmove+0x2a>
 800b560:	bd10      	pop	{r4, pc}
 800b562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b56a:	e7f7      	b.n	800b55c <memmove+0x24>

0800b56c <memcpy>:
 800b56c:	440a      	add	r2, r1
 800b56e:	4291      	cmp	r1, r2
 800b570:	f100 33ff 	add.w	r3, r0, #4294967295
 800b574:	d100      	bne.n	800b578 <memcpy+0xc>
 800b576:	4770      	bx	lr
 800b578:	b510      	push	{r4, lr}
 800b57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b582:	4291      	cmp	r1, r2
 800b584:	d1f9      	bne.n	800b57a <memcpy+0xe>
 800b586:	bd10      	pop	{r4, pc}

0800b588 <_realloc_r>:
 800b588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58c:	4680      	mov	r8, r0
 800b58e:	4614      	mov	r4, r2
 800b590:	460e      	mov	r6, r1
 800b592:	b921      	cbnz	r1, 800b59e <_realloc_r+0x16>
 800b594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b598:	4611      	mov	r1, r2
 800b59a:	f7ff bba9 	b.w	800acf0 <_malloc_r>
 800b59e:	b92a      	cbnz	r2, 800b5ac <_realloc_r+0x24>
 800b5a0:	f7ff fc96 	bl	800aed0 <_free_r>
 800b5a4:	4625      	mov	r5, r4
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5ac:	f000 f81b 	bl	800b5e6 <_malloc_usable_size_r>
 800b5b0:	4284      	cmp	r4, r0
 800b5b2:	4607      	mov	r7, r0
 800b5b4:	d802      	bhi.n	800b5bc <_realloc_r+0x34>
 800b5b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5ba:	d812      	bhi.n	800b5e2 <_realloc_r+0x5a>
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f7ff fb96 	bl	800acf0 <_malloc_r>
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d0ed      	beq.n	800b5a6 <_realloc_r+0x1e>
 800b5ca:	42bc      	cmp	r4, r7
 800b5cc:	4622      	mov	r2, r4
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	bf28      	it	cs
 800b5d2:	463a      	movcs	r2, r7
 800b5d4:	f7ff ffca 	bl	800b56c <memcpy>
 800b5d8:	4631      	mov	r1, r6
 800b5da:	4640      	mov	r0, r8
 800b5dc:	f7ff fc78 	bl	800aed0 <_free_r>
 800b5e0:	e7e1      	b.n	800b5a6 <_realloc_r+0x1e>
 800b5e2:	4635      	mov	r5, r6
 800b5e4:	e7df      	b.n	800b5a6 <_realloc_r+0x1e>

0800b5e6 <_malloc_usable_size_r>:
 800b5e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5ea:	1f18      	subs	r0, r3, #4
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	bfbc      	itt	lt
 800b5f0:	580b      	ldrlt	r3, [r1, r0]
 800b5f2:	18c0      	addlt	r0, r0, r3
 800b5f4:	4770      	bx	lr

0800b5f6 <sqrt>:
 800b5f6:	b538      	push	{r3, r4, r5, lr}
 800b5f8:	ed2d 8b02 	vpush	{d8}
 800b5fc:	ec55 4b10 	vmov	r4, r5, d0
 800b600:	f000 f826 	bl	800b650 <__ieee754_sqrt>
 800b604:	4622      	mov	r2, r4
 800b606:	462b      	mov	r3, r5
 800b608:	4620      	mov	r0, r4
 800b60a:	4629      	mov	r1, r5
 800b60c:	eeb0 8a40 	vmov.f32	s16, s0
 800b610:	eef0 8a60 	vmov.f32	s17, s1
 800b614:	f7f5 fa8a 	bl	8000b2c <__aeabi_dcmpun>
 800b618:	b990      	cbnz	r0, 800b640 <sqrt+0x4a>
 800b61a:	2200      	movs	r2, #0
 800b61c:	2300      	movs	r3, #0
 800b61e:	4620      	mov	r0, r4
 800b620:	4629      	mov	r1, r5
 800b622:	f7f5 fa5b 	bl	8000adc <__aeabi_dcmplt>
 800b626:	b158      	cbz	r0, 800b640 <sqrt+0x4a>
 800b628:	f7ff fc26 	bl	800ae78 <__errno>
 800b62c:	2321      	movs	r3, #33	; 0x21
 800b62e:	6003      	str	r3, [r0, #0]
 800b630:	2200      	movs	r2, #0
 800b632:	2300      	movs	r3, #0
 800b634:	4610      	mov	r0, r2
 800b636:	4619      	mov	r1, r3
 800b638:	f7f5 f908 	bl	800084c <__aeabi_ddiv>
 800b63c:	ec41 0b18 	vmov	d8, r0, r1
 800b640:	eeb0 0a48 	vmov.f32	s0, s16
 800b644:	eef0 0a68 	vmov.f32	s1, s17
 800b648:	ecbd 8b02 	vpop	{d8}
 800b64c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b650 <__ieee754_sqrt>:
 800b650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	ec55 4b10 	vmov	r4, r5, d0
 800b658:	4e67      	ldr	r6, [pc, #412]	; (800b7f8 <__ieee754_sqrt+0x1a8>)
 800b65a:	43ae      	bics	r6, r5
 800b65c:	ee10 0a10 	vmov	r0, s0
 800b660:	ee10 2a10 	vmov	r2, s0
 800b664:	4629      	mov	r1, r5
 800b666:	462b      	mov	r3, r5
 800b668:	d10d      	bne.n	800b686 <__ieee754_sqrt+0x36>
 800b66a:	f7f4 ffc5 	bl	80005f8 <__aeabi_dmul>
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	f7f4 fe09 	bl	800028c <__adddf3>
 800b67a:	4604      	mov	r4, r0
 800b67c:	460d      	mov	r5, r1
 800b67e:	ec45 4b10 	vmov	d0, r4, r5
 800b682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b686:	2d00      	cmp	r5, #0
 800b688:	dc0b      	bgt.n	800b6a2 <__ieee754_sqrt+0x52>
 800b68a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b68e:	4326      	orrs	r6, r4
 800b690:	d0f5      	beq.n	800b67e <__ieee754_sqrt+0x2e>
 800b692:	b135      	cbz	r5, 800b6a2 <__ieee754_sqrt+0x52>
 800b694:	f7f4 fdf8 	bl	8000288 <__aeabi_dsub>
 800b698:	4602      	mov	r2, r0
 800b69a:	460b      	mov	r3, r1
 800b69c:	f7f5 f8d6 	bl	800084c <__aeabi_ddiv>
 800b6a0:	e7eb      	b.n	800b67a <__ieee754_sqrt+0x2a>
 800b6a2:	1509      	asrs	r1, r1, #20
 800b6a4:	f000 808d 	beq.w	800b7c2 <__ieee754_sqrt+0x172>
 800b6a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6ac:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b6b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6b4:	07c9      	lsls	r1, r1, #31
 800b6b6:	bf5c      	itt	pl
 800b6b8:	005b      	lslpl	r3, r3, #1
 800b6ba:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b6be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b6c2:	bf58      	it	pl
 800b6c4:	0052      	lslpl	r2, r2, #1
 800b6c6:	2500      	movs	r5, #0
 800b6c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b6cc:	1076      	asrs	r6, r6, #1
 800b6ce:	0052      	lsls	r2, r2, #1
 800b6d0:	f04f 0e16 	mov.w	lr, #22
 800b6d4:	46ac      	mov	ip, r5
 800b6d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6da:	eb0c 0001 	add.w	r0, ip, r1
 800b6de:	4298      	cmp	r0, r3
 800b6e0:	bfde      	ittt	le
 800b6e2:	1a1b      	suble	r3, r3, r0
 800b6e4:	eb00 0c01 	addle.w	ip, r0, r1
 800b6e8:	186d      	addle	r5, r5, r1
 800b6ea:	005b      	lsls	r3, r3, #1
 800b6ec:	f1be 0e01 	subs.w	lr, lr, #1
 800b6f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b6f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b6f8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b6fc:	d1ed      	bne.n	800b6da <__ieee754_sqrt+0x8a>
 800b6fe:	4674      	mov	r4, lr
 800b700:	2720      	movs	r7, #32
 800b702:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b706:	4563      	cmp	r3, ip
 800b708:	eb01 000e 	add.w	r0, r1, lr
 800b70c:	dc02      	bgt.n	800b714 <__ieee754_sqrt+0xc4>
 800b70e:	d113      	bne.n	800b738 <__ieee754_sqrt+0xe8>
 800b710:	4290      	cmp	r0, r2
 800b712:	d811      	bhi.n	800b738 <__ieee754_sqrt+0xe8>
 800b714:	2800      	cmp	r0, #0
 800b716:	eb00 0e01 	add.w	lr, r0, r1
 800b71a:	da57      	bge.n	800b7cc <__ieee754_sqrt+0x17c>
 800b71c:	f1be 0f00 	cmp.w	lr, #0
 800b720:	db54      	blt.n	800b7cc <__ieee754_sqrt+0x17c>
 800b722:	f10c 0801 	add.w	r8, ip, #1
 800b726:	eba3 030c 	sub.w	r3, r3, ip
 800b72a:	4290      	cmp	r0, r2
 800b72c:	bf88      	it	hi
 800b72e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b732:	1a12      	subs	r2, r2, r0
 800b734:	440c      	add	r4, r1
 800b736:	46c4      	mov	ip, r8
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	3f01      	subs	r7, #1
 800b73c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b740:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b744:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b748:	d1dd      	bne.n	800b706 <__ieee754_sqrt+0xb6>
 800b74a:	4313      	orrs	r3, r2
 800b74c:	d01b      	beq.n	800b786 <__ieee754_sqrt+0x136>
 800b74e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b7fc <__ieee754_sqrt+0x1ac>
 800b752:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b800 <__ieee754_sqrt+0x1b0>
 800b756:	e9da 0100 	ldrd	r0, r1, [sl]
 800b75a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b75e:	f7f4 fd93 	bl	8000288 <__aeabi_dsub>
 800b762:	e9da 8900 	ldrd	r8, r9, [sl]
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4640      	mov	r0, r8
 800b76c:	4649      	mov	r1, r9
 800b76e:	f7f5 f9bf 	bl	8000af0 <__aeabi_dcmple>
 800b772:	b140      	cbz	r0, 800b786 <__ieee754_sqrt+0x136>
 800b774:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b778:	e9da 0100 	ldrd	r0, r1, [sl]
 800b77c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b780:	d126      	bne.n	800b7d0 <__ieee754_sqrt+0x180>
 800b782:	3501      	adds	r5, #1
 800b784:	463c      	mov	r4, r7
 800b786:	106a      	asrs	r2, r5, #1
 800b788:	0863      	lsrs	r3, r4, #1
 800b78a:	07e9      	lsls	r1, r5, #31
 800b78c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b790:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b794:	bf48      	it	mi
 800b796:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b79a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b79e:	461c      	mov	r4, r3
 800b7a0:	e76d      	b.n	800b67e <__ieee754_sqrt+0x2e>
 800b7a2:	0ad3      	lsrs	r3, r2, #11
 800b7a4:	3815      	subs	r0, #21
 800b7a6:	0552      	lsls	r2, r2, #21
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d0fa      	beq.n	800b7a2 <__ieee754_sqrt+0x152>
 800b7ac:	02dc      	lsls	r4, r3, #11
 800b7ae:	d50a      	bpl.n	800b7c6 <__ieee754_sqrt+0x176>
 800b7b0:	f1c1 0420 	rsb	r4, r1, #32
 800b7b4:	fa22 f404 	lsr.w	r4, r2, r4
 800b7b8:	1e4d      	subs	r5, r1, #1
 800b7ba:	408a      	lsls	r2, r1
 800b7bc:	4323      	orrs	r3, r4
 800b7be:	1b41      	subs	r1, r0, r5
 800b7c0:	e772      	b.n	800b6a8 <__ieee754_sqrt+0x58>
 800b7c2:	4608      	mov	r0, r1
 800b7c4:	e7f0      	b.n	800b7a8 <__ieee754_sqrt+0x158>
 800b7c6:	005b      	lsls	r3, r3, #1
 800b7c8:	3101      	adds	r1, #1
 800b7ca:	e7ef      	b.n	800b7ac <__ieee754_sqrt+0x15c>
 800b7cc:	46e0      	mov	r8, ip
 800b7ce:	e7aa      	b.n	800b726 <__ieee754_sqrt+0xd6>
 800b7d0:	f7f4 fd5c 	bl	800028c <__adddf3>
 800b7d4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4640      	mov	r0, r8
 800b7de:	4649      	mov	r1, r9
 800b7e0:	f7f5 f97c 	bl	8000adc <__aeabi_dcmplt>
 800b7e4:	b120      	cbz	r0, 800b7f0 <__ieee754_sqrt+0x1a0>
 800b7e6:	1ca0      	adds	r0, r4, #2
 800b7e8:	bf08      	it	eq
 800b7ea:	3501      	addeq	r5, #1
 800b7ec:	3402      	adds	r4, #2
 800b7ee:	e7ca      	b.n	800b786 <__ieee754_sqrt+0x136>
 800b7f0:	3401      	adds	r4, #1
 800b7f2:	f024 0401 	bic.w	r4, r4, #1
 800b7f6:	e7c6      	b.n	800b786 <__ieee754_sqrt+0x136>
 800b7f8:	7ff00000 	.word	0x7ff00000
 800b7fc:	20000078 	.word	0x20000078
 800b800:	20000080 	.word	0x20000080

0800b804 <_init>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	bf00      	nop
 800b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80a:	bc08      	pop	{r3}
 800b80c:	469e      	mov	lr, r3
 800b80e:	4770      	bx	lr

0800b810 <_fini>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	bf00      	nop
 800b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b816:	bc08      	pop	{r3}
 800b818:	469e      	mov	lr, r3
 800b81a:	4770      	bx	lr
