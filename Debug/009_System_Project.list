
009_System_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f874  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a60  0800fa08  0800fa08  0001fa08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010468  08010468  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08010468  08010468  00020468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010470  08010470  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010470  08010470  00020470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010474  08010474  00020474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08010478  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          000029c0  20000200  20000200  00030200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002bc0  20002bc0  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016781  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032d9  00000000  00000000  000469f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014f0  00000000  00000000  00049cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000104a  00000000  00000000  0004b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025ec2  00000000  00000000  0004c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb6e  00000000  00000000  000720cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df7fb  00000000  00000000  0008dc3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006e24  00000000  00000000  0016d438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0017425c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f9ec 	.word	0x0800f9ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800f9ec 	.word	0x0800f9ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <SELECT+0x18>)
 8000ffa:	f004 f9d5 	bl	80053a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f002 fdee 	bl	8003be0 <HAL_Delay>
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40020400 	.word	0x40020400

0800100c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2140      	movs	r1, #64	; 0x40
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <DESELECT+0x18>)
 8001016:	f004 f9c7 	bl	80053a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f002 fde0 	bl	8003be0 <HAL_Delay>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40020400 	.word	0x40020400

08001028 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001032:	bf00      	nop
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <SPI_TxByte+0x30>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b02      	cmp	r3, #2
 8001040:	d1f8      	bne.n	8001034 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001042:	1df9      	adds	r1, r7, #7
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	2201      	movs	r2, #1
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <SPI_TxByte+0x30>)
 800104a:	f004 fee8 	bl	8005e1e <HAL_SPI_Transmit>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000224 	.word	0x20000224

0800105c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001068:	bf00      	nop
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <SPI_TxBuffer+0x30>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b02      	cmp	r3, #2
 8001076:	d1f8      	bne.n	800106a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001078:	887a      	ldrh	r2, [r7, #2]
 800107a:	2364      	movs	r3, #100	; 0x64
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <SPI_TxBuffer+0x30>)
 8001080:	f004 fecd 	bl	8005e1e <HAL_SPI_Transmit>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000224 	.word	0x20000224

08001090 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001096:	23ff      	movs	r3, #255	; 0xff
 8001098:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800109a:	bf00      	nop
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <SPI_RxByte+0x34>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d1f8      	bne.n	800109c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80010aa:	1dba      	adds	r2, r7, #6
 80010ac:	1df9      	adds	r1, r7, #7
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <SPI_RxByte+0x34>)
 80010b6:	f004 fff5 	bl	80060a4 <HAL_SPI_TransmitReceive>

	return data;
 80010ba:	79bb      	ldrb	r3, [r7, #6]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000224 	.word	0x20000224

080010c8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80010d0:	f7ff ffde 	bl	8001090 <SPI_RxByte>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	701a      	strb	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <SD_ReadyWait+0x30>)
 80010ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80010f0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80010f2:	f7ff ffcd 	bl	8001090 <SPI_RxByte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2bff      	cmp	r3, #255	; 0xff
 80010fe:	d003      	beq.n	8001108 <SD_ReadyWait+0x24>
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SD_ReadyWait+0x30>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f4      	bne.n	80010f2 <SD_ReadyWait+0xe>

	return res;
 8001108:	79fb      	ldrb	r3, [r7, #7]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000021e 	.word	0x2000021e

08001118 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800111e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001122:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001124:	f7ff ff72 	bl	800100c <DESELECT>
	for(int i = 0; i < 10; i++)
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	e005      	b.n	800113a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800112e:	20ff      	movs	r0, #255	; 0xff
 8001130:	f7ff ff7a 	bl	8001028 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3301      	adds	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b09      	cmp	r3, #9
 800113e:	ddf6      	ble.n	800112e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001140:	f7ff ff56 	bl	8000ff0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001158:	2395      	movs	r3, #149	; 0x95
 800115a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800115c:	463b      	mov	r3, r7
 800115e:	2106      	movs	r1, #6
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff7b 	bl	800105c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001166:	e002      	b.n	800116e <SD_PowerOn+0x56>
	{
		cnt--;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3b01      	subs	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800116e:	f7ff ff8f 	bl	8001090 <SPI_RxByte>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d002      	beq.n	800117e <SD_PowerOn+0x66>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f4      	bne.n	8001168 <SD_PowerOn+0x50>
	}

	DESELECT();
 800117e:	f7ff ff45 	bl	800100c <DESELECT>
	SPI_TxByte(0XFF);
 8001182:	20ff      	movs	r0, #255	; 0xff
 8001184:	f7ff ff50 	bl	8001028 <SPI_TxByte>

	PowerFlag = 1;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <SD_PowerOn+0x80>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000221 	.word	0x20000221

0800119c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <SD_PowerOff+0x14>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	20000221 	.word	0x20000221

080011b4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <SD_CheckPower+0x14>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000221 	.word	0x20000221

080011cc <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <SD_RxDataBlock+0x58>)
 80011d8:	22c8      	movs	r2, #200	; 0xc8
 80011da:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80011dc:	f7ff ff58 	bl	8001090 <SPI_RxByte>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	2bff      	cmp	r3, #255	; 0xff
 80011e8:	d103      	bne.n	80011f2 <SD_RxDataBlock+0x26>
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <SD_RxDataBlock+0x58>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f4      	bne.n	80011dc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2bfe      	cmp	r3, #254	; 0xfe
 80011f6:	d001      	beq.n	80011fc <SD_RxDataBlock+0x30>
 80011f8:	2300      	movs	r3, #0
 80011fa:	e00f      	b.n	800121c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff60 	bl	80010c8 <SPI_RxBytePtr>
	} while(len--);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	1e5a      	subs	r2, r3, #1
 800120c:	603a      	str	r2, [r7, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f4      	bne.n	80011fc <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001212:	f7ff ff3d 	bl	8001090 <SPI_RxByte>
	SPI_RxByte();
 8001216:	f7ff ff3b 	bl	8001090 <SPI_RxByte>

	return TRUE;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000021c 	.word	0x2000021c

08001228 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001238:	f7ff ff54 	bl	80010e4 <SD_ReadyWait>
 800123c:	4603      	mov	r3, r0
 800123e:	2bff      	cmp	r3, #255	; 0xff
 8001240:	d001      	beq.n	8001246 <SD_TxDataBlock+0x1e>
 8001242:	2300      	movs	r3, #0
 8001244:	e02f      	b.n	80012a6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff feed 	bl	8001028 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	2bfd      	cmp	r3, #253	; 0xfd
 8001252:	d020      	beq.n	8001296 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff feff 	bl	800105c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800125e:	f7ff ff17 	bl	8001090 <SPI_RxByte>
		SPI_RxByte();
 8001262:	f7ff ff15 	bl	8001090 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001266:	e00b      	b.n	8001280 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001268:	f7ff ff12 	bl	8001090 <SPI_RxByte>
 800126c:	4603      	mov	r3, r0
 800126e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	2b05      	cmp	r3, #5
 8001278:	d006      	beq.n	8001288 <SD_TxDataBlock+0x60>
			i++;
 800127a:	7bbb      	ldrb	r3, [r7, #14]
 800127c:	3301      	adds	r3, #1
 800127e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001280:	7bbb      	ldrb	r3, [r7, #14]
 8001282:	2b40      	cmp	r3, #64	; 0x40
 8001284:	d9f0      	bls.n	8001268 <SD_TxDataBlock+0x40>
 8001286:	e000      	b.n	800128a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001288:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800128a:	bf00      	nop
 800128c:	f7ff ff00 	bl	8001090 <SPI_RxByte>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0fa      	beq.n	800128c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2b05      	cmp	r3, #5
 800129e:	d101      	bne.n	80012a4 <SD_TxDataBlock+0x7c>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	6039      	str	r1, [r7, #0]
 80012b8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012ba:	f7ff ff13 	bl	80010e4 <SD_ReadyWait>
 80012be:	4603      	mov	r3, r0
 80012c0:	2bff      	cmp	r3, #255	; 0xff
 80012c2:	d001      	beq.n	80012c8 <SD_SendCmd+0x1a>
 80012c4:	23ff      	movs	r3, #255	; 0xff
 80012c6:	e042      	b.n	800134e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff feac 	bl	8001028 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	0e1b      	lsrs	r3, r3, #24
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fea6 	bl	8001028 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	0c1b      	lsrs	r3, r3, #16
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fea0 	bl	8001028 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe9a 	bl	8001028 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe95 	bl	8001028 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b40      	cmp	r3, #64	; 0x40
 8001302:	d102      	bne.n	800130a <SD_SendCmd+0x5c>
 8001304:	2395      	movs	r3, #149	; 0x95
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e007      	b.n	800131a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b48      	cmp	r3, #72	; 0x48
 800130e:	d102      	bne.n	8001316 <SD_SendCmd+0x68>
 8001310:	2387      	movs	r3, #135	; 0x87
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e001      	b.n	800131a <SD_SendCmd+0x6c>
	else crc = 1;
 8001316:	2301      	movs	r3, #1
 8001318:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fe83 	bl	8001028 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b4c      	cmp	r3, #76	; 0x4c
 8001326:	d101      	bne.n	800132c <SD_SendCmd+0x7e>
 8001328:	f7ff feb2 	bl	8001090 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800132c:	230a      	movs	r3, #10
 800132e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001330:	f7ff feae 	bl	8001090 <SPI_RxByte>
 8001334:	4603      	mov	r3, r0
 8001336:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001338:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800133c:	2b00      	cmp	r3, #0
 800133e:	da05      	bge.n	800134c <SD_SendCmd+0x9e>
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	3b01      	subs	r3, #1
 8001344:	73bb      	strb	r3, [r7, #14]
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f1      	bne.n	8001330 <SD_SendCmd+0x82>

	return res;
 800134c:	7b7b      	ldrb	r3, [r7, #13]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SD_disk_initialize+0x14>
 8001368:	2301      	movs	r3, #1
 800136a:	e0d1      	b.n	8001510 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800136c:	4b6a      	ldr	r3, [pc, #424]	; (8001518 <SD_disk_initialize+0x1c0>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <SD_disk_initialize+0x2a>
 800137a:	4b67      	ldr	r3, [pc, #412]	; (8001518 <SD_disk_initialize+0x1c0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	e0c6      	b.n	8001510 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001382:	f7ff fec9 	bl	8001118 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001386:	f7ff fe33 	bl	8000ff0 <SELECT>

	/* check disk type */
	type = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800138e:	2100      	movs	r1, #0
 8001390:	2040      	movs	r0, #64	; 0x40
 8001392:	f7ff ff8c 	bl	80012ae <SD_SendCmd>
 8001396:	4603      	mov	r3, r0
 8001398:	2b01      	cmp	r3, #1
 800139a:	f040 80a1 	bne.w	80014e0 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800139e:	4b5f      	ldr	r3, [pc, #380]	; (800151c <SD_disk_initialize+0x1c4>)
 80013a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013a4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80013a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80013aa:	2048      	movs	r0, #72	; 0x48
 80013ac:	f7ff ff7f 	bl	80012ae <SD_SendCmd>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d155      	bne.n	8001462 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e00c      	b.n	80013d6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013bc:	7bfc      	ldrb	r4, [r7, #15]
 80013be:	f7ff fe67 	bl	8001090 <SPI_RxByte>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	f104 0310 	add.w	r3, r4, #16
 80013ca:	443b      	add	r3, r7
 80013cc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d9ef      	bls.n	80013bc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013dc:	7abb      	ldrb	r3, [r7, #10]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d17e      	bne.n	80014e0 <SD_disk_initialize+0x188>
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	2baa      	cmp	r3, #170	; 0xaa
 80013e6:	d17b      	bne.n	80014e0 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013e8:	2100      	movs	r1, #0
 80013ea:	2077      	movs	r0, #119	; 0x77
 80013ec:	f7ff ff5f 	bl	80012ae <SD_SendCmd>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d807      	bhi.n	8001406 <SD_disk_initialize+0xae>
 80013f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013fa:	2069      	movs	r0, #105	; 0x69
 80013fc:	f7ff ff57 	bl	80012ae <SD_SendCmd>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001406:	4b45      	ldr	r3, [pc, #276]	; (800151c <SD_disk_initialize+0x1c4>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1ec      	bne.n	80013e8 <SD_disk_initialize+0x90>
 800140e:	e000      	b.n	8001412 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001410:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001412:	4b42      	ldr	r3, [pc, #264]	; (800151c <SD_disk_initialize+0x1c4>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d062      	beq.n	80014e0 <SD_disk_initialize+0x188>
 800141a:	2100      	movs	r1, #0
 800141c:	207a      	movs	r0, #122	; 0x7a
 800141e:	f7ff ff46 	bl	80012ae <SD_SendCmd>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d15b      	bne.n	80014e0 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
 800142c:	e00c      	b.n	8001448 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800142e:	7bfc      	ldrb	r4, [r7, #15]
 8001430:	f7ff fe2e 	bl	8001090 <SPI_RxByte>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	f104 0310 	add.w	r3, r4, #16
 800143c:	443b      	add	r3, r7
 800143e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3301      	adds	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d9ef      	bls.n	800142e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800144e:	7a3b      	ldrb	r3, [r7, #8]
 8001450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SD_disk_initialize+0x104>
 8001458:	230c      	movs	r3, #12
 800145a:	e000      	b.n	800145e <SD_disk_initialize+0x106>
 800145c:	2304      	movs	r3, #4
 800145e:	73bb      	strb	r3, [r7, #14]
 8001460:	e03e      	b.n	80014e0 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001462:	2100      	movs	r1, #0
 8001464:	2077      	movs	r0, #119	; 0x77
 8001466:	f7ff ff22 	bl	80012ae <SD_SendCmd>
 800146a:	4603      	mov	r3, r0
 800146c:	2b01      	cmp	r3, #1
 800146e:	d808      	bhi.n	8001482 <SD_disk_initialize+0x12a>
 8001470:	2100      	movs	r1, #0
 8001472:	2069      	movs	r0, #105	; 0x69
 8001474:	f7ff ff1b 	bl	80012ae <SD_SendCmd>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d801      	bhi.n	8001482 <SD_disk_initialize+0x12a>
 800147e:	2302      	movs	r3, #2
 8001480:	e000      	b.n	8001484 <SD_disk_initialize+0x12c>
 8001482:	2301      	movs	r3, #1
 8001484:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d10e      	bne.n	80014aa <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800148c:	2100      	movs	r1, #0
 800148e:	2077      	movs	r0, #119	; 0x77
 8001490:	f7ff ff0d 	bl	80012ae <SD_SendCmd>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d80e      	bhi.n	80014b8 <SD_disk_initialize+0x160>
 800149a:	2100      	movs	r1, #0
 800149c:	2069      	movs	r0, #105	; 0x69
 800149e:	f7ff ff06 	bl	80012ae <SD_SendCmd>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d107      	bne.n	80014b8 <SD_disk_initialize+0x160>
 80014a8:	e00c      	b.n	80014c4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014aa:	2100      	movs	r1, #0
 80014ac:	2041      	movs	r0, #65	; 0x41
 80014ae:	f7ff fefe 	bl	80012ae <SD_SendCmd>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <SD_disk_initialize+0x1c4>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e2      	bne.n	8001486 <SD_disk_initialize+0x12e>
 80014c0:	e000      	b.n	80014c4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014c2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <SD_disk_initialize+0x1c4>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d007      	beq.n	80014dc <SD_disk_initialize+0x184>
 80014cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014d0:	2050      	movs	r0, #80	; 0x50
 80014d2:	f7ff feec 	bl	80012ae <SD_SendCmd>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SD_disk_initialize+0x188>
 80014dc:	2300      	movs	r3, #0
 80014de:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80014e0:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <SD_disk_initialize+0x1c8>)
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80014e6:	f7ff fd91 	bl	800100c <DESELECT>
	SPI_RxByte();
 80014ea:	f7ff fdd1 	bl	8001090 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <SD_disk_initialize+0x1c0>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f023 0301 	bic.w	r3, r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SD_disk_initialize+0x1c0>)
 8001502:	701a      	strb	r2, [r3, #0]
 8001504:	e001      	b.n	800150a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001506:	f7ff fe49 	bl	800119c <SD_PowerOff>
	}

	return Stat;
 800150a:	4b03      	ldr	r3, [pc, #12]	; (8001518 <SD_disk_initialize+0x1c0>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bd90      	pop	{r4, r7, pc}
 8001518:	20000000 	.word	0x20000000
 800151c:	2000021c 	.word	0x2000021c
 8001520:	20000220 	.word	0x20000220

08001524 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SD_disk_status+0x14>
 8001534:	2301      	movs	r3, #1
 8001536:	e002      	b.n	800153e <SD_disk_status+0x1a>
	return Stat;
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <SD_disk_status+0x28>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000

08001550 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <SD_disk_read+0x1c>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <SD_disk_read+0x20>
 800156c:	2304      	movs	r3, #4
 800156e:	e051      	b.n	8001614 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <SD_disk_read+0xcc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SD_disk_read+0x32>
 800157e:	2303      	movs	r3, #3
 8001580:	e048      	b.n	8001614 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <SD_disk_read+0xd0>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	d102      	bne.n	8001594 <SD_disk_read+0x44>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	025b      	lsls	r3, r3, #9
 8001592:	607b      	str	r3, [r7, #4]

	SELECT();
 8001594:	f7ff fd2c 	bl	8000ff0 <SELECT>

	if (count == 1)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d111      	bne.n	80015c2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	2051      	movs	r0, #81	; 0x51
 80015a2:	f7ff fe84 	bl	80012ae <SD_SendCmd>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d129      	bne.n	8001600 <SD_disk_read+0xb0>
 80015ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f7ff fe0b 	bl	80011cc <SD_RxDataBlock>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d021      	beq.n	8001600 <SD_disk_read+0xb0>
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	e01e      	b.n	8001600 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	2052      	movs	r0, #82	; 0x52
 80015c6:	f7ff fe72 	bl	80012ae <SD_SendCmd>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d117      	bne.n	8001600 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015d4:	68b8      	ldr	r0, [r7, #8]
 80015d6:	f7ff fdf9 	bl	80011cc <SD_RxDataBlock>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00a      	beq.n	80015f6 <SD_disk_read+0xa6>
				buff += 512;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015e6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ed      	bne.n	80015d0 <SD_disk_read+0x80>
 80015f4:	e000      	b.n	80015f8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80015f6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80015f8:	2100      	movs	r1, #0
 80015fa:	204c      	movs	r0, #76	; 0x4c
 80015fc:	f7ff fe57 	bl	80012ae <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001600:	f7ff fd04 	bl	800100c <DESELECT>
	SPI_RxByte();
 8001604:	f7ff fd44 	bl	8001090 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	bf14      	ite	ne
 800160e:	2301      	movne	r3, #1
 8001610:	2300      	moveq	r3, #0
 8001612:	b2db      	uxtb	r3, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000220 	.word	0x20000220

08001624 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <SD_disk_write+0x1c>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <SD_disk_write+0x20>
 8001640:	2304      	movs	r3, #4
 8001642:	e06b      	b.n	800171c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <SD_disk_write+0x100>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SD_disk_write+0x32>
 8001652:	2303      	movs	r3, #3
 8001654:	e062      	b.n	800171c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001656:	4b33      	ldr	r3, [pc, #204]	; (8001724 <SD_disk_write+0x100>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SD_disk_write+0x44>
 8001664:	2302      	movs	r3, #2
 8001666:	e059      	b.n	800171c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <SD_disk_write+0x104>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <SD_disk_write+0x56>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	607b      	str	r3, [r7, #4]

	SELECT();
 800167a:	f7ff fcb9 	bl	8000ff0 <SELECT>

	if (count == 1)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d110      	bne.n	80016a6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	2058      	movs	r0, #88	; 0x58
 8001688:	f7ff fe11 	bl	80012ae <SD_SendCmd>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d13a      	bne.n	8001708 <SD_disk_write+0xe4>
 8001692:	21fe      	movs	r1, #254	; 0xfe
 8001694:	68b8      	ldr	r0, [r7, #8]
 8001696:	f7ff fdc7 	bl	8001228 <SD_TxDataBlock>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d033      	beq.n	8001708 <SD_disk_write+0xe4>
			count = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	e030      	b.n	8001708 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <SD_disk_write+0x104>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016b2:	2100      	movs	r1, #0
 80016b4:	2077      	movs	r0, #119	; 0x77
 80016b6:	f7ff fdfa 	bl	80012ae <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016ba:	6839      	ldr	r1, [r7, #0]
 80016bc:	2057      	movs	r0, #87	; 0x57
 80016be:	f7ff fdf6 	bl	80012ae <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	2059      	movs	r0, #89	; 0x59
 80016c6:	f7ff fdf2 	bl	80012ae <SD_SendCmd>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d11b      	bne.n	8001708 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016d0:	21fc      	movs	r1, #252	; 0xfc
 80016d2:	68b8      	ldr	r0, [r7, #8]
 80016d4:	f7ff fda8 	bl	8001228 <SD_TxDataBlock>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <SD_disk_write+0xd0>
				buff += 512;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016e4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ee      	bne.n	80016d0 <SD_disk_write+0xac>
 80016f2:	e000      	b.n	80016f6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016f4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80016f6:	21fd      	movs	r1, #253	; 0xfd
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fd95 	bl	8001228 <SD_TxDataBlock>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <SD_disk_write+0xe4>
			{
				count = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001708:	f7ff fc80 	bl	800100c <DESELECT>
	SPI_RxByte();
 800170c:	f7ff fcc0 	bl	8001090 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	bf14      	ite	ne
 8001716:	2301      	movne	r3, #1
 8001718:	2300      	moveq	r3, #0
 800171a:	b2db      	uxtb	r3, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000000 	.word	0x20000000
 8001728:	20000220 	.word	0x20000220

0800172c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	603a      	str	r2, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	460b      	mov	r3, r1
 800173a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SD_disk_ioctl+0x1e>
 8001746:	2304      	movs	r3, #4
 8001748:	e115      	b.n	8001976 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	2b05      	cmp	r3, #5
 8001754:	d124      	bne.n	80017a0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d012      	beq.n	8001784 <SD_disk_ioctl+0x58>
 800175e:	2b02      	cmp	r3, #2
 8001760:	dc1a      	bgt.n	8001798 <SD_disk_ioctl+0x6c>
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <SD_disk_ioctl+0x40>
 8001766:	2b01      	cmp	r3, #1
 8001768:	d006      	beq.n	8001778 <SD_disk_ioctl+0x4c>
 800176a:	e015      	b.n	8001798 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800176c:	f7ff fd16 	bl	800119c <SD_PowerOff>
			res = RES_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001776:	e0fc      	b.n	8001972 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001778:	f7ff fcce 	bl	8001118 <SD_PowerOn>
			res = RES_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001782:	e0f6      	b.n	8001972 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	1c5c      	adds	r4, r3, #1
 8001788:	f7ff fd14 	bl	80011b4 <SD_CheckPower>
 800178c:	4603      	mov	r3, r0
 800178e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001796:	e0ec      	b.n	8001972 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001798:	2304      	movs	r3, #4
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800179e:	e0e8      	b.n	8001972 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80017a0:	4b77      	ldr	r3, [pc, #476]	; (8001980 <SD_disk_ioctl+0x254>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SD_disk_ioctl+0x86>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e0e1      	b.n	8001976 <SD_disk_ioctl+0x24a>

		SELECT();
 80017b2:	f7ff fc1d 	bl	8000ff0 <SELECT>

		switch (ctrl)
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	2b0d      	cmp	r3, #13
 80017ba:	f200 80cb 	bhi.w	8001954 <SD_disk_ioctl+0x228>
 80017be:	a201      	add	r2, pc, #4	; (adr r2, 80017c4 <SD_disk_ioctl+0x98>)
 80017c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c4:	080018bf 	.word	0x080018bf
 80017c8:	080017fd 	.word	0x080017fd
 80017cc:	080018af 	.word	0x080018af
 80017d0:	08001955 	.word	0x08001955
 80017d4:	08001955 	.word	0x08001955
 80017d8:	08001955 	.word	0x08001955
 80017dc:	08001955 	.word	0x08001955
 80017e0:	08001955 	.word	0x08001955
 80017e4:	08001955 	.word	0x08001955
 80017e8:	08001955 	.word	0x08001955
 80017ec:	08001955 	.word	0x08001955
 80017f0:	080018d1 	.word	0x080018d1
 80017f4:	080018f5 	.word	0x080018f5
 80017f8:	08001919 	.word	0x08001919
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017fc:	2100      	movs	r1, #0
 80017fe:	2049      	movs	r0, #73	; 0x49
 8001800:	f7ff fd55 	bl	80012ae <SD_SendCmd>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 80a8 	bne.w	800195c <SD_disk_ioctl+0x230>
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2110      	movs	r1, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fcda 	bl	80011cc <SD_RxDataBlock>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 809e 	beq.w	800195c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001820:	7b3b      	ldrb	r3, [r7, #12]
 8001822:	099b      	lsrs	r3, r3, #6
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d10e      	bne.n	8001848 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800182a:	7d7b      	ldrb	r3, [r7, #21]
 800182c:	b29a      	uxth	r2, r3
 800182e:	7d3b      	ldrb	r3, [r7, #20]
 8001830:	b29b      	uxth	r3, r3
 8001832:	021b      	lsls	r3, r3, #8
 8001834:	b29b      	uxth	r3, r3
 8001836:	4413      	add	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	3301      	adds	r3, #1
 800183c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800183e:	8bfb      	ldrh	r3, [r7, #30]
 8001840:	029a      	lsls	r2, r3, #10
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e02e      	b.n	80018a6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001848:	7c7b      	ldrb	r3, [r7, #17]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	b2da      	uxtb	r2, r3
 8001850:	7dbb      	ldrb	r3, [r7, #22]
 8001852:	09db      	lsrs	r3, r3, #7
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4413      	add	r3, r2
 8001858:	b2da      	uxtb	r2, r3
 800185a:	7d7b      	ldrb	r3, [r7, #21]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f003 0306 	and.w	r3, r3, #6
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4413      	add	r3, r2
 8001868:	b2db      	uxtb	r3, r3
 800186a:	3302      	adds	r3, #2
 800186c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001870:	7d3b      	ldrb	r3, [r7, #20]
 8001872:	099b      	lsrs	r3, r3, #6
 8001874:	b2db      	uxtb	r3, r3
 8001876:	b29a      	uxth	r2, r3
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	b29b      	uxth	r3, r3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b29a      	uxth	r2, r3
 8001884:	7cbb      	ldrb	r3, [r7, #18]
 8001886:	029b      	lsls	r3, r3, #10
 8001888:	b29b      	uxth	r3, r3
 800188a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800188e:	b29b      	uxth	r3, r3
 8001890:	4413      	add	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001898:	8bfa      	ldrh	r2, [r7, #30]
 800189a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800189e:	3b09      	subs	r3, #9
 80018a0:	409a      	lsls	r2, r3
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018ac:	e056      	b.n	800195c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018bc:	e055      	b.n	800196a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018be:	f7ff fc11 	bl	80010e4 <SD_ReadyWait>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2bff      	cmp	r3, #255	; 0xff
 80018c6:	d14b      	bne.n	8001960 <SD_disk_ioctl+0x234>
 80018c8:	2300      	movs	r3, #0
 80018ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018ce:	e047      	b.n	8001960 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018d0:	2100      	movs	r1, #0
 80018d2:	2049      	movs	r0, #73	; 0x49
 80018d4:	f7ff fceb 	bl	80012ae <SD_SendCmd>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d142      	bne.n	8001964 <SD_disk_ioctl+0x238>
 80018de:	2110      	movs	r1, #16
 80018e0:	6a38      	ldr	r0, [r7, #32]
 80018e2:	f7ff fc73 	bl	80011cc <SD_RxDataBlock>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d03b      	beq.n	8001964 <SD_disk_ioctl+0x238>
 80018ec:	2300      	movs	r3, #0
 80018ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018f2:	e037      	b.n	8001964 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018f4:	2100      	movs	r1, #0
 80018f6:	204a      	movs	r0, #74	; 0x4a
 80018f8:	f7ff fcd9 	bl	80012ae <SD_SendCmd>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d132      	bne.n	8001968 <SD_disk_ioctl+0x23c>
 8001902:	2110      	movs	r1, #16
 8001904:	6a38      	ldr	r0, [r7, #32]
 8001906:	f7ff fc61 	bl	80011cc <SD_RxDataBlock>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02b      	beq.n	8001968 <SD_disk_ioctl+0x23c>
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001916:	e027      	b.n	8001968 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001918:	2100      	movs	r1, #0
 800191a:	207a      	movs	r0, #122	; 0x7a
 800191c:	f7ff fcc7 	bl	80012ae <SD_SendCmd>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d116      	bne.n	8001954 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800192c:	e00b      	b.n	8001946 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800192e:	6a3c      	ldr	r4, [r7, #32]
 8001930:	1c63      	adds	r3, r4, #1
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	f7ff fbac 	bl	8001090 <SPI_RxByte>
 8001938:	4603      	mov	r3, r0
 800193a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800193c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001940:	3301      	adds	r3, #1
 8001942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001946:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800194a:	2b03      	cmp	r3, #3
 800194c:	d9ef      	bls.n	800192e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001954:	2304      	movs	r3, #4
 8001956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800195a:	e006      	b.n	800196a <SD_disk_ioctl+0x23e>
			break;
 800195c:	bf00      	nop
 800195e:	e004      	b.n	800196a <SD_disk_ioctl+0x23e>
			break;
 8001960:	bf00      	nop
 8001962:	e002      	b.n	800196a <SD_disk_ioctl+0x23e>
			break;
 8001964:	bf00      	nop
 8001966:	e000      	b.n	800196a <SD_disk_ioctl+0x23e>
			break;
 8001968:	bf00      	nop
		}

		DESELECT();
 800196a:	f7ff fb4f 	bl	800100c <DESELECT>
		SPI_RxByte();
 800196e:	f7ff fb8f 	bl	8001090 <SPI_RxByte>
	}

	return res;
 8001972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001976:	4618      	mov	r0, r3
 8001978:	372c      	adds	r7, #44	; 0x2c
 800197a:	46bd      	mov	sp, r7
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <__io_putchar>:
    #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 1000);
 800198c:	1d39      	adds	r1, r7, #4
 800198e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001992:	2201      	movs	r2, #1
 8001994:	4803      	ldr	r0, [pc, #12]	; (80019a4 <__io_putchar+0x20>)
 8001996:	f005 fad7 	bl	8006f48 <HAL_UART_Transmit>
    return ch;
 800199a:	687b      	ldr	r3, [r7, #4]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20002434 	.word	0x20002434

080019a8 <transmit_uart>:
char buffer[100];


//SD karta yazmada kullanılan transmit_uart'ın fonskiyonu.
void transmit_uart(char *string)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
     uint8_t len = strlen(string);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7fe fc5d 	bl	8000270 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
     HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 200);
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	23c8      	movs	r3, #200	; 0xc8
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <transmit_uart+0x28>)
 80019c4:	f005 fac0 	bl	8006f48 <HAL_UART_Transmit>
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200024c4 	.word	0x200024c4

080019d4 <nextion_Send>:



//Nextion'a değer göndermede kullanılan fonksiyon.
void nextion_Send(char *obj, uint32_t num ) //obj parametresine num değeri gönderilir.
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]


	uint8_t *nextion_Buffer = malloc(30*sizeof(char)); //buffer için bellek tahsis edilir.
 80019de:	201e      	movs	r0, #30
 80019e0:	f009 fb0e 	bl	800b000 <malloc>
 80019e4:	4603      	mov	r3, r0
 80019e6:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *)nextion_Buffer, "%s.val=%ld", obj, num); //nextion ekranına gönderilecek komut
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <nextion_Send+0x4c>)
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f00a fb0c 	bl	800c00c <siprintf>
 80019f4:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart2, nextion_Buffer, len, 1000);
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	4808      	ldr	r0, [pc, #32]	; (8001a24 <nextion_Send+0x50>)
 8001a02:	f005 faa1 	bl	8006f48 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, end_Command, 3, 100);
 8001a06:	2364      	movs	r3, #100	; 0x64
 8001a08:	2203      	movs	r2, #3
 8001a0a:	4907      	ldr	r1, [pc, #28]	; (8001a28 <nextion_Send+0x54>)
 8001a0c:	4805      	ldr	r0, [pc, #20]	; (8001a24 <nextion_Send+0x50>)
 8001a0e:	f005 fa9b 	bl	8006f48 <HAL_UART_Transmit>
	free(nextion_Buffer); //bellek serbest bırakılır.
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f009 fafc 	bl	800b010 <free>


}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	0800fa08 	.word	0x0800fa08
 8001a24:	2000247c 	.word	0x2000247c
 8001a28:	20000004 	.word	0x20000004

08001a2c <map>:

//Bu fonksiyon belirli bir değer aralığını başka bir değer aralığına dönüştürür.
uint32_t map(uint32_t min1, uint32_t max1, uint32_t min2, uint32_t max2, uint32_t width)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
 8001a38:	603b      	str	r3, [r7, #0]
	return (min1*width)/min2;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	fb03 f202 	mul.w	r2, r3, r2
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_UART_RxCpltCallback>:

//DAC ile alınan verinin gönderimi
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	6078      	str	r0, [r7, #4]
	 if (huart == &huart2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4b      	ldr	r2, [pc, #300]	; (8001b8c <HAL_UART_RxCpltCallback+0x138>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	f040 8197 	bne.w	8001d94 <HAL_UART_RxCpltCallback+0x340>
	 {

		 if(RX_Data[1] == 0x31)
 8001a66:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <HAL_UART_RxCpltCallback+0x13c>)
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	2b31      	cmp	r3, #49	; 0x31
 8001a6c:	d116      	bne.n	8001a9c <HAL_UART_RxCpltCallback+0x48>
		 {
		 nextion_Send("n2", iVin);
 8001a6e:	4b49      	ldr	r3, [pc, #292]	; (8001b94 <HAL_UART_RxCpltCallback+0x140>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4848      	ldr	r0, [pc, #288]	; (8001b98 <HAL_UART_RxCpltCallback+0x144>)
 8001a76:	f7ff ffad 	bl	80019d4 <nextion_Send>
		 nextion_Send("n3", iIin);
 8001a7a:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <HAL_UART_RxCpltCallback+0x148>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4847      	ldr	r0, [pc, #284]	; (8001ba0 <HAL_UART_RxCpltCallback+0x14c>)
 8001a82:	f7ff ffa7 	bl	80019d4 <nextion_Send>
		 nextion_Send("n4", 666);
 8001a86:	f240 219a 	movw	r1, #666	; 0x29a
 8001a8a:	4846      	ldr	r0, [pc, #280]	; (8001ba4 <HAL_UART_RxCpltCallback+0x150>)
 8001a8c:	f7ff ffa2 	bl	80019d4 <nextion_Send>
		 nextion_Send("n5", 777);
 8001a90:	f240 3109 	movw	r1, #777	; 0x309
 8001a94:	4844      	ldr	r0, [pc, #272]	; (8001ba8 <HAL_UART_RxCpltCallback+0x154>)
 8001a96:	f7ff ff9d 	bl	80019d4 <nextion_Send>
 8001a9a:	e0d3      	b.n	8001c44 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x32)
 8001a9c:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_UART_RxCpltCallback+0x13c>)
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	2b32      	cmp	r3, #50	; 0x32
 8001aa2:	d116      	bne.n	8001ad2 <HAL_UART_RxCpltCallback+0x7e>
		 {
		 nextion_Send("n6", iVout);
 8001aa4:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_UART_RxCpltCallback+0x158>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4841      	ldr	r0, [pc, #260]	; (8001bb0 <HAL_UART_RxCpltCallback+0x15c>)
 8001aac:	f7ff ff92 	bl	80019d4 <nextion_Send>
		 nextion_Send("n7", iIout);
 8001ab0:	4b40      	ldr	r3, [pc, #256]	; (8001bb4 <HAL_UART_RxCpltCallback+0x160>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4840      	ldr	r0, [pc, #256]	; (8001bb8 <HAL_UART_RxCpltCallback+0x164>)
 8001ab8:	f7ff ff8c 	bl	80019d4 <nextion_Send>
		 nextion_Send("n8", 666);
 8001abc:	f240 219a 	movw	r1, #666	; 0x29a
 8001ac0:	483e      	ldr	r0, [pc, #248]	; (8001bbc <HAL_UART_RxCpltCallback+0x168>)
 8001ac2:	f7ff ff87 	bl	80019d4 <nextion_Send>
		 nextion_Send("n9", 777);
 8001ac6:	f240 3109 	movw	r1, #777	; 0x309
 8001aca:	483d      	ldr	r0, [pc, #244]	; (8001bc0 <HAL_UART_RxCpltCallback+0x16c>)
 8001acc:	f7ff ff82 	bl	80019d4 <nextion_Send>
 8001ad0:	e0b8      	b.n	8001c44 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x33)
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_UART_RxCpltCallback+0x13c>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	2b33      	cmp	r3, #51	; 0x33
 8001ad8:	d124      	bne.n	8001b24 <HAL_UART_RxCpltCallback+0xd0>
		 {
		 nextion_Send("n10", iV1L);
 8001ada:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <HAL_UART_RxCpltCallback+0x170>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4839      	ldr	r0, [pc, #228]	; (8001bc8 <HAL_UART_RxCpltCallback+0x174>)
 8001ae2:	f7ff ff77 	bl	80019d4 <nextion_Send>
		 nextion_Send("n11", iI1L);
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_UART_RxCpltCallback+0x178>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4838      	ldr	r0, [pc, #224]	; (8001bd0 <HAL_UART_RxCpltCallback+0x17c>)
 8001aee:	f7ff ff71 	bl	80019d4 <nextion_Send>
		 nextion_Send("n12", iV2L);
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_UART_RxCpltCallback+0x180>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	4837      	ldr	r0, [pc, #220]	; (8001bd8 <HAL_UART_RxCpltCallback+0x184>)
 8001afa:	f7ff ff6b 	bl	80019d4 <nextion_Send>
		 nextion_Send("n13", iI2L);
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_UART_RxCpltCallback+0x188>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4836      	ldr	r0, [pc, #216]	; (8001be0 <HAL_UART_RxCpltCallback+0x18c>)
 8001b06:	f7ff ff65 	bl	80019d4 <nextion_Send>
		 nextion_Send("n14", iV3L);
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_UART_RxCpltCallback+0x190>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4835      	ldr	r0, [pc, #212]	; (8001be8 <HAL_UART_RxCpltCallback+0x194>)
 8001b12:	f7ff ff5f 	bl	80019d4 <nextion_Send>
		 nextion_Send("n15", iI3L);
 8001b16:	4b35      	ldr	r3, [pc, #212]	; (8001bec <HAL_UART_RxCpltCallback+0x198>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4834      	ldr	r0, [pc, #208]	; (8001bf0 <HAL_UART_RxCpltCallback+0x19c>)
 8001b1e:	f7ff ff59 	bl	80019d4 <nextion_Send>
 8001b22:	e08f      	b.n	8001c44 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x34)
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_UART_RxCpltCallback+0x13c>)
 8001b26:	785b      	ldrb	r3, [r3, #1]
 8001b28:	2b34      	cmp	r3, #52	; 0x34
 8001b2a:	d124      	bne.n	8001b76 <HAL_UART_RxCpltCallback+0x122>
		 {
		 nextion_Send("n16", iV12L);
 8001b2c:	4b31      	ldr	r3, [pc, #196]	; (8001bf4 <HAL_UART_RxCpltCallback+0x1a0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4831      	ldr	r0, [pc, #196]	; (8001bf8 <HAL_UART_RxCpltCallback+0x1a4>)
 8001b34:	f7ff ff4e 	bl	80019d4 <nextion_Send>
		 nextion_Send("n17", iI12L);
 8001b38:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_UART_RxCpltCallback+0x1a8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4830      	ldr	r0, [pc, #192]	; (8001c00 <HAL_UART_RxCpltCallback+0x1ac>)
 8001b40:	f7ff ff48 	bl	80019d4 <nextion_Send>
		 nextion_Send("n18", iV23L);
 8001b44:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <HAL_UART_RxCpltCallback+0x1b0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	482f      	ldr	r0, [pc, #188]	; (8001c08 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b4c:	f7ff ff42 	bl	80019d4 <nextion_Send>
		 nextion_Send("n19", iI23L);
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <HAL_UART_RxCpltCallback+0x1b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	482e      	ldr	r0, [pc, #184]	; (8001c10 <HAL_UART_RxCpltCallback+0x1bc>)
 8001b58:	f7ff ff3c 	bl	80019d4 <nextion_Send>
		 nextion_Send("n20", iV13L);
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_UART_RxCpltCallback+0x1c0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	482d      	ldr	r0, [pc, #180]	; (8001c18 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b64:	f7ff ff36 	bl	80019d4 <nextion_Send>
		 nextion_Send("n21", iI13L);
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_UART_RxCpltCallback+0x1c8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	482c      	ldr	r0, [pc, #176]	; (8001c20 <HAL_UART_RxCpltCallback+0x1cc>)
 8001b70:	f7ff ff30 	bl	80019d4 <nextion_Send>
 8001b74:	e066      	b.n	8001c44 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x35)
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_UART_RxCpltCallback+0x13c>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	2b35      	cmp	r3, #53	; 0x35
 8001b7c:	d156      	bne.n	8001c2c <HAL_UART_RxCpltCallback+0x1d8>
		 {
		 nextion_Send("n22", itemp);
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4619      	mov	r1, r3
 8001b84:	4828      	ldr	r0, [pc, #160]	; (8001c28 <HAL_UART_RxCpltCallback+0x1d4>)
 8001b86:	f7ff ff25 	bl	80019d4 <nextion_Send>
 8001b8a:	e05b      	b.n	8001c44 <HAL_UART_RxCpltCallback+0x1f0>
 8001b8c:	2000247c 	.word	0x2000247c
 8001b90:	2000273c 	.word	0x2000273c
 8001b94:	20002718 	.word	0x20002718
 8001b98:	0800fa14 	.word	0x0800fa14
 8001b9c:	2000271c 	.word	0x2000271c
 8001ba0:	0800fa18 	.word	0x0800fa18
 8001ba4:	0800fa1c 	.word	0x0800fa1c
 8001ba8:	0800fa20 	.word	0x0800fa20
 8001bac:	2000270c 	.word	0x2000270c
 8001bb0:	0800fa24 	.word	0x0800fa24
 8001bb4:	20002714 	.word	0x20002714
 8001bb8:	0800fa28 	.word	0x0800fa28
 8001bbc:	0800fa2c 	.word	0x0800fa2c
 8001bc0:	0800fa30 	.word	0x0800fa30
 8001bc4:	200026f4 	.word	0x200026f4
 8001bc8:	0800fa34 	.word	0x0800fa34
 8001bcc:	20002700 	.word	0x20002700
 8001bd0:	0800fa38 	.word	0x0800fa38
 8001bd4:	200026f8 	.word	0x200026f8
 8001bd8:	0800fa3c 	.word	0x0800fa3c
 8001bdc:	20002704 	.word	0x20002704
 8001be0:	0800fa40 	.word	0x0800fa40
 8001be4:	200026fc 	.word	0x200026fc
 8001be8:	0800fa44 	.word	0x0800fa44
 8001bec:	20002708 	.word	0x20002708
 8001bf0:	0800fa48 	.word	0x0800fa48
 8001bf4:	20002720 	.word	0x20002720
 8001bf8:	0800fa4c 	.word	0x0800fa4c
 8001bfc:	2000272c 	.word	0x2000272c
 8001c00:	0800fa50 	.word	0x0800fa50
 8001c04:	20002724 	.word	0x20002724
 8001c08:	0800fa54 	.word	0x0800fa54
 8001c0c:	20002730 	.word	0x20002730
 8001c10:	0800fa58 	.word	0x0800fa58
 8001c14:	20002728 	.word	0x20002728
 8001c18:	0800fa5c 	.word	0x0800fa5c
 8001c1c:	20002734 	.word	0x20002734
 8001c20:	0800fa60 	.word	0x0800fa60
 8001c24:	20002710 	.word	0x20002710
 8001c28:	0800fa64 	.word	0x0800fa64
		 }

		 else
		 {
		 nextion_Send("n0", send_V);
 8001c2c:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_UART_RxCpltCallback+0x348>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	485b      	ldr	r0, [pc, #364]	; (8001da0 <HAL_UART_RxCpltCallback+0x34c>)
 8001c34:	f7ff fece 	bl	80019d4 <nextion_Send>
		 nextion_Send("n1", send_I);
 8001c38:	4b5a      	ldr	r3, [pc, #360]	; (8001da4 <HAL_UART_RxCpltCallback+0x350>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	485a      	ldr	r0, [pc, #360]	; (8001da8 <HAL_UART_RxCpltCallback+0x354>)
 8001c40:	f7ff fec8 	bl	80019d4 <nextion_Send>
		 }



		if(RX_Data[2] == 0x03)
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_UART_RxCpltCallback+0x358>)
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d126      	bne.n	8001c9a <HAL_UART_RxCpltCallback+0x246>
		{
			dac_V -= 0.5;
 8001c4c:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc57 	bl	8000504 <__aeabi_ui2d>
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <HAL_UART_RxCpltCallback+0x360>)
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	f7fe ff9e 	bl	8000ba8 <__aeabi_d2uiz>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4a50      	ldr	r2, [pc, #320]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001c70:	6013      	str	r3, [r2, #0]
			if(dac_V == 20) dac_V = 20;
 8001c72:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b14      	cmp	r3, #20
 8001c78:	d102      	bne.n	8001c80 <HAL_UART_RxCpltCallback+0x22c>
 8001c7a:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001c7c:	2214      	movs	r2, #20
 8001c7e:	601a      	str	r2, [r3, #0]
			send_V = map(dac_V,0,20,0,1275);
 8001c80:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2214      	movs	r2, #20
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f7ff fecc 	bl	8001a2c <map>
 8001c94:	4603      	mov	r3, r0
 8001c96:	4a41      	ldr	r2, [pc, #260]	; (8001d9c <HAL_UART_RxCpltCallback+0x348>)
 8001c98:	6013      	str	r3, [r2, #0]
		}

		if(RX_Data[2] == 0x04)
 8001c9a:	4b44      	ldr	r3, [pc, #272]	; (8001dac <HAL_UART_RxCpltCallback+0x358>)
 8001c9c:	789b      	ldrb	r3, [r3, #2]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d126      	bne.n	8001cf0 <HAL_UART_RxCpltCallback+0x29c>
		{
			dac_V += 0.5;
 8001ca2:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc2c 	bl	8000504 <__aeabi_ui2d>
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <HAL_UART_RxCpltCallback+0x360>)
 8001cb2:	f7fe faeb 	bl	800028c <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff73 	bl	8000ba8 <__aeabi_d2uiz>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a3a      	ldr	r2, [pc, #232]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001cc6:	6013      	str	r3, [r2, #0]
			if(dac_V == 0) dac_V = 0;
 8001cc8:	4b39      	ldr	r3, [pc, #228]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <HAL_UART_RxCpltCallback+0x282>
 8001cd0:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
			send_V = map(dac_V,0,20,0,1275);
 8001cd6:	4b36      	ldr	r3, [pc, #216]	; (8001db0 <HAL_UART_RxCpltCallback+0x35c>)
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	2214      	movs	r2, #20
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	f7ff fea1 	bl	8001a2c <map>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <HAL_UART_RxCpltCallback+0x348>)
 8001cee:	6013      	str	r3, [r2, #0]
		}

		if(RX_Data[2] == 0x05)
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <HAL_UART_RxCpltCallback+0x358>)
 8001cf2:	789b      	ldrb	r3, [r3, #2]
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d11c      	bne.n	8001d32 <HAL_UART_RxCpltCallback+0x2de>
		{
			dac_I -= 50;
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3b32      	subs	r3, #50	; 0x32
 8001cfe:	4a2e      	ldr	r2, [pc, #184]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d00:	6013      	str	r3, [r2, #0]
			if(dac_I == 3000) dac_I = 3000;
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d103      	bne.n	8001d16 <HAL_UART_RxCpltCallback+0x2c2>
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d10:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d14:	601a      	str	r2, [r3, #0]
			send_I = map(dac_I,0,3000,0,1275);
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2300      	movs	r3, #0
 8001d22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d26:	2100      	movs	r1, #0
 8001d28:	f7ff fe80 	bl	8001a2c <map>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_UART_RxCpltCallback+0x350>)
 8001d30:	6013      	str	r3, [r2, #0]
		}
		if(RX_Data[2] == 0x06)
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_UART_RxCpltCallback+0x358>)
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d119      	bne.n	8001d6e <HAL_UART_RxCpltCallback+0x31a>
		{
			dac_I += 50;
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3332      	adds	r3, #50	; 0x32
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d42:	6013      	str	r3, [r2, #0]
			if(dac_I == 0) dac_I = 0;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <HAL_UART_RxCpltCallback+0x2fe>
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
			send_I = map(dac_I,0,3000,0,1275);
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_UART_RxCpltCallback+0x364>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d62:	2100      	movs	r1, #0
 8001d64:	f7ff fe62 	bl	8001a2c <map>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_UART_RxCpltCallback+0x350>)
 8001d6c:	6013      	str	r3, [r2, #0]
		}


		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,send_V);
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_UART_RxCpltCallback+0x348>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	4811      	ldr	r0, [pc, #68]	; (8001dbc <HAL_UART_RxCpltCallback+0x368>)
 8001d78:	f002 fcf5 	bl	8004766 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,send_I);
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_UART_RxCpltCallback+0x350>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2200      	movs	r2, #0
 8001d82:	2110      	movs	r1, #16
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <HAL_UART_RxCpltCallback+0x368>)
 8001d86:	f002 fcee 	bl	8004766 <HAL_DAC_SetValue>

	   HAL_UART_Receive_IT(&huart2, RX_Data, 4);
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <HAL_UART_RxCpltCallback+0x358>)
 8001d8e:	480c      	ldr	r0, [pc, #48]	; (8001dc0 <HAL_UART_RxCpltCallback+0x36c>)
 8001d90:	f005 f965 	bl	800705e <HAL_UART_Receive_IT>
	 }



}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20002748 	.word	0x20002748
 8001da0:	0800fa68 	.word	0x0800fa68
 8001da4:	2000274c 	.word	0x2000274c
 8001da8:	0800fa6c 	.word	0x0800fa6c
 8001dac:	2000273c 	.word	0x2000273c
 8001db0:	20002740 	.word	0x20002740
 8001db4:	3fe00000 	.word	0x3fe00000
 8001db8:	20002744 	.word	0x20002744
 8001dbc:	20002390 	.word	0x20002390
 8001dc0:	2000247c 	.word	0x2000247c
 8001dc4:	00000000 	.word	0x00000000

08001dc8 <HAL_ADC_ConvCpltCallback>:


//Timer1 50us'de bir kesmeye girdi ve ADC1 bu kısımda örnek almaya başladı.

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b5b0      	push	{r4, r5, r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	6078      	str	r0, [r7, #4]


while(count<1600)
 8001dd0:	f000 bcd2 	b.w	8002778 <HAL_ADC_ConvCpltCallback+0x9b0>
	{

	switch(k)
 8001dd4:	4b9d      	ldr	r3, [pc, #628]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b0b      	cmp	r3, #11
 8001dda:	f200 8126 	bhi.w	800202a <HAL_ADC_ConvCpltCallback+0x262>
 8001dde:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de4:	08001e15 	.word	0x08001e15
 8001de8:	08001e41 	.word	0x08001e41
 8001dec:	08001e6d 	.word	0x08001e6d
 8001df0:	08001e99 	.word	0x08001e99
 8001df4:	08001ec5 	.word	0x08001ec5
 8001df8:	08001ef1 	.word	0x08001ef1
 8001dfc:	08001f1d 	.word	0x08001f1d
 8001e00:	08001f49 	.word	0x08001f49
 8001e04:	08001f75 	.word	0x08001f75
 8001e08:	08001fa1 	.word	0x08001fa1
 8001e0c:	08001fcd 	.word	0x08001fcd
 8001e10:	08001ff9 	.word	0x08001ff9
		{

			case 0: //REF
				adc1_Value[k] += adc_Buffer[k];
 8001e14:	4b8d      	ldr	r3, [pc, #564]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a8d      	ldr	r2, [pc, #564]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a8c      	ldr	r2, [pc, #560]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e28:	4b88      	ldr	r3, [pc, #544]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	440a      	add	r2, r1
 8001e2e:	4988      	ldr	r1, [pc, #544]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e34:	4b85      	ldr	r3, [pc, #532]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	4a84      	ldr	r2, [pc, #528]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e3c:	6013      	str	r3, [r2, #0]
				break;
 8001e3e:	e0f4      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>


			case 1: //VL1
				adc1_Value[k] += adc_Buffer[k];
 8001e40:	4b82      	ldr	r3, [pc, #520]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a82      	ldr	r2, [pc, #520]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e4a:	4b80      	ldr	r3, [pc, #512]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a81      	ldr	r2, [pc, #516]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e54:	4b7d      	ldr	r3, [pc, #500]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	440a      	add	r2, r1
 8001e5a:	497d      	ldr	r1, [pc, #500]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a79      	ldr	r2, [pc, #484]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e68:	6013      	str	r3, [r2, #0]
				break;
 8001e6a:	e0de      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 2: //VL2
				adc1_Value[k] += adc_Buffer[k];
 8001e6c:	4b77      	ldr	r3, [pc, #476]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a77      	ldr	r2, [pc, #476]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e76:	4b75      	ldr	r3, [pc, #468]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a76      	ldr	r2, [pc, #472]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e80:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	440a      	add	r2, r1
 8001e86:	4972      	ldr	r1, [pc, #456]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e8c:	4b6f      	ldr	r3, [pc, #444]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e94:	6013      	str	r3, [r2, #0]
				break;
 8001e96:	e0c8      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 3: //VL3
				adc1_Value[k] += adc_Buffer[k];
 8001e98:	4b6c      	ldr	r3, [pc, #432]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6c      	ldr	r2, [pc, #432]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ea2:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a6b      	ldr	r2, [pc, #428]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001ea8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eac:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	440a      	add	r2, r1
 8001eb2:	4967      	ldr	r1, [pc, #412]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001eb8:	4b64      	ldr	r3, [pc, #400]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a63      	ldr	r2, [pc, #396]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001ec0:	6013      	str	r3, [r2, #0]
				break;
 8001ec2:	e0b2      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 4: //IL1
				adc1_Value[k] += adc_Buffer[k];
 8001ec4:	4b61      	ldr	r3, [pc, #388]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a61      	ldr	r2, [pc, #388]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001eca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ece:	4b5f      	ldr	r3, [pc, #380]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a60      	ldr	r2, [pc, #384]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ed8:	4b5c      	ldr	r3, [pc, #368]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	440a      	add	r2, r1
 8001ede:	495c      	ldr	r1, [pc, #368]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001eec:	6013      	str	r3, [r2, #0]
				break;
 8001eee:	e09c      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 5: //IL2
				adc1_Value[k] += adc_Buffer[k];
 8001ef0:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a56      	ldr	r2, [pc, #344]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001ef6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001efa:	4b54      	ldr	r3, [pc, #336]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a55      	ldr	r2, [pc, #340]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001f00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f04:	4b51      	ldr	r3, [pc, #324]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	440a      	add	r2, r1
 8001f0a:	4951      	ldr	r1, [pc, #324]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001f10:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a4d      	ldr	r2, [pc, #308]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f18:	6013      	str	r3, [r2, #0]
				break;
 8001f1a:	e086      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 6: //IL3
				adc1_Value[k] += adc_Buffer[k];
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a4b      	ldr	r2, [pc, #300]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f26:	4b49      	ldr	r3, [pc, #292]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a4a      	ldr	r2, [pc, #296]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001f2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f30:	4b46      	ldr	r3, [pc, #280]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	440a      	add	r2, r1
 8001f36:	4946      	ldr	r1, [pc, #280]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f44:	6013      	str	r3, [r2, #0]
				break;
 8001f46:	e070      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 7: //BARA+
				adc1_Value[k] += adc_Buffer[k];
 8001f48:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a40      	ldr	r2, [pc, #256]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3f      	ldr	r2, [pc, #252]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001f58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	440a      	add	r2, r1
 8001f62:	493b      	ldr	r1, [pc, #236]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001f68:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a37      	ldr	r2, [pc, #220]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f70:	6013      	str	r3, [r2, #0]
				break;
 8001f72:	e05a      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 8: //BARA-
				adc1_Value[k] += adc_Buffer[k];
 8001f74:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a35      	ldr	r2, [pc, #212]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f7e:	4b33      	ldr	r3, [pc, #204]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a34      	ldr	r2, [pc, #208]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001f84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	440a      	add	r2, r1
 8001f8e:	4930      	ldr	r1, [pc, #192]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001f9c:	6013      	str	r3, [r2, #0]
				break;
 8001f9e:	e044      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 9: //FB VOLTAGE
				adc1_Value[k] += adc_Buffer[k];
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001fa6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a29      	ldr	r2, [pc, #164]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001fb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	440a      	add	r2, r1
 8001fba:	4925      	ldr	r1, [pc, #148]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fc8:	6013      	str	r3, [r2, #0]
				break;
 8001fca:	e02e      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 10: //T_SAMPLE
				adc1_Value[k] += adc_Buffer[k];
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001fd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8001fdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	440a      	add	r2, r1
 8001fe6:	491a      	ldr	r1, [pc, #104]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001ff4:	6013      	str	r3, [r2, #0]
				break;
 8001ff6:	e018      	b.n	800202a <HAL_ADC_ConvCpltCallback+0x262>

			case 11: //AKIM
				adc1_Value[k] += adc_Buffer[k];
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8001ffe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a13      	ldr	r2, [pc, #76]	; (8002054 <HAL_ADC_ConvCpltCallback+0x28c>)
 8002008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	440a      	add	r2, r1
 8002012:	490f      	ldr	r1, [pc, #60]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8002014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				count++;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_ADC_ConvCpltCallback+0x290>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_ADC_ConvCpltCallback+0x290>)
 8002020:	6013      	str	r3, [r2, #0]
				k=0;
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_ADC_ConvCpltCallback+0x284>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
				break;
 8002028:	bf00      	nop
		}




		if(count==1600)
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_ADC_ConvCpltCallback+0x290>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002032:	f040 83a1 	bne.w	8002778 <HAL_ADC_ConvCpltCallback+0x9b0>
		{

				adc1_Mean[0] = adc1_Value[0] / 1600;
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_ADC_ConvCpltCallback+0x288>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <HAL_ADC_ConvCpltCallback+0x294>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	0a5b      	lsrs	r3, r3, #9
 8002042:	4a07      	ldr	r2, [pc, #28]	; (8002060 <HAL_ADC_ConvCpltCallback+0x298>)
 8002044:	6013      	str	r3, [r2, #0]

			for(uint8_t t=1;t<7;t++)
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
 800204a:	e05f      	b.n	800210c <HAL_ADC_ConvCpltCallback+0x344>
 800204c:	2000268c 	.word	0x2000268c
 8002050:	200025cc 	.word	0x200025cc
 8002054:	2000259c 	.word	0x2000259c
 8002058:	20002690 	.word	0x20002690
 800205c:	51eb851f 	.word	0x51eb851f
 8002060:	2000265c 	.word	0x2000265c
				{
				//RMS Değer Hesabı
				adc1_Mean[t] = adc1_Value[t] / 1600; //Alınan değerler toplamı toplam sayıya bölündü ve ort değer elde edildi.
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	4a7e      	ldr	r2, [pc, #504]	; (8002260 <HAL_ADC_ConvCpltCallback+0x498>)
 8002068:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	497d      	ldr	r1, [pc, #500]	; (8002264 <HAL_ADC_ConvCpltCallback+0x49c>)
 8002070:	fba1 1202 	umull	r1, r2, r1, r2
 8002074:	0a52      	lsrs	r2, r2, #9
 8002076:	497c      	ldr	r1, [pc, #496]	; (8002268 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8002078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				adc1_Square[t] = (adc1_Mean[t]-adc1_Mean[0]) * (adc1_Mean[t]-adc1_Mean[0]); //Ortalama değerin karesi alındı.
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	4a7a      	ldr	r2, [pc, #488]	; (8002268 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8002080:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002084:	4b78      	ldr	r3, [pc, #480]	; (8002268 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1ad2      	subs	r2, r2, r3
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	4976      	ldr	r1, [pc, #472]	; (8002268 <HAL_ADC_ConvCpltCallback+0x4a0>)
 800208e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002092:	4b75      	ldr	r3, [pc, #468]	; (8002268 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	1ac9      	subs	r1, r1, r3
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	fb01 f202 	mul.w	r2, r1, r2
 800209e:	4973      	ldr	r1, [pc, #460]	; (800226c <HAL_ADC_ConvCpltCallback+0x4a4>)
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				adc1_Square_Root[t] = 331 * sqrt(adc1_Square[t]  * 0.707 / 868.8); //Karesi alınan değerlerin karekökü alındı. 331:Gerilim Bölücü  0.707:RMS Hesabı(sqrt(2)/2)  868.8:Kalibrasyon Çarpanı
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	4a71      	ldr	r2, [pc, #452]	; (800226c <HAL_ADC_ConvCpltCallback+0x4a4>)
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa29 	bl	8000504 <__aeabi_ui2d>
 80020b2:	a363      	add	r3, pc, #396	; (adr r3, 8002240 <HAL_ADC_ConvCpltCallback+0x478>)
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	f7fe fa9e 	bl	80005f8 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	a360      	add	r3, pc, #384	; (adr r3, 8002248 <HAL_ADC_ConvCpltCallback+0x480>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe fbbf 	bl	800084c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	ec43 2b17 	vmov	d7, r2, r3
 80020d6:	eeb0 0a47 	vmov.f32	s0, s14
 80020da:	eef0 0a67 	vmov.f32	s1, s15
 80020de:	f00d fb7f 	bl	800f7e0 <sqrt>
 80020e2:	ec51 0b10 	vmov	r0, r1, d0
 80020e6:	a35a      	add	r3, pc, #360	; (adr r3, 8002250 <HAL_ADC_ConvCpltCallback+0x488>)
 80020e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ec:	f7fe fa84 	bl	80005f8 <__aeabi_dmul>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	7bfc      	ldrb	r4, [r7, #15]
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	f7fe fd55 	bl	8000ba8 <__aeabi_d2uiz>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a5b      	ldr	r2, [pc, #364]	; (8002270 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8002102:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t t=1;t<7;t++)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3301      	adds	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2b06      	cmp	r3, #6
 8002110:	d9a8      	bls.n	8002064 <HAL_ADC_ConvCpltCallback+0x29c>
				}


				V1L=adc1_Square_Root[1];  //V1L
 8002112:	4b57      	ldr	r3, [pc, #348]	; (8002270 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a57      	ldr	r2, [pc, #348]	; (8002274 <HAL_ADC_ConvCpltCallback+0x4ac>)
 8002118:	6013      	str	r3, [r2, #0]
				V2L=adc1_Square_Root[2];  //V2L
 800211a:	4b55      	ldr	r3, [pc, #340]	; (8002270 <HAL_ADC_ConvCpltCallback+0x4a8>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	4a56      	ldr	r2, [pc, #344]	; (8002278 <HAL_ADC_ConvCpltCallback+0x4b0>)
 8002120:	6013      	str	r3, [r2, #0]
				V3L=adc1_Square_Root[3];  //V3L
 8002122:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4a55      	ldr	r2, [pc, #340]	; (800227c <HAL_ADC_ConvCpltCallback+0x4b4>)
 8002128:	6013      	str	r3, [r2, #0]

				I1L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[4])); // IL1  330,55:Direnç ve kalibrasyon çarpanı
 800212a:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_ADC_ConvCpltCallback+0x4a4>)
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f9e8 	bl	8000504 <__aeabi_ui2d>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	ec43 2b10 	vmov	d0, r2, r3
 800213c:	f00d fb50 	bl	800f7e0 <sqrt>
 8002140:	ec51 0b10 	vmov	r0, r1, d0
 8002144:	a344      	add	r3, pc, #272	; (adr r3, 8002258 <HAL_ADC_ConvCpltCallback+0x490>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe fa55 	bl	80005f8 <__aeabi_dmul>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	4b49      	ldr	r3, [pc, #292]	; (8002280 <HAL_ADC_ConvCpltCallback+0x4b8>)
 800215c:	f7fe fa4c 	bl	80005f8 <__aeabi_dmul>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fd1e 	bl	8000ba8 <__aeabi_d2uiz>
 800216c:	4603      	mov	r3, r0
 800216e:	4a45      	ldr	r2, [pc, #276]	; (8002284 <HAL_ADC_ConvCpltCallback+0x4bc>)
 8002170:	6013      	str	r3, [r2, #0]
				I2L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[5])); // IL2
 8002172:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_ADC_ConvCpltCallback+0x4a4>)
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9c4 	bl	8000504 <__aeabi_ui2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	ec43 2b10 	vmov	d0, r2, r3
 8002184:	f00d fb2c 	bl	800f7e0 <sqrt>
 8002188:	ec51 0b10 	vmov	r0, r1, d0
 800218c:	a332      	add	r3, pc, #200	; (adr r3, 8002258 <HAL_ADC_ConvCpltCallback+0x490>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe fa31 	bl	80005f8 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_ADC_ConvCpltCallback+0x4b8>)
 80021a4:	f7fe fa28 	bl	80005f8 <__aeabi_dmul>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe fcfa 	bl	8000ba8 <__aeabi_d2uiz>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4a34      	ldr	r2, [pc, #208]	; (8002288 <HAL_ADC_ConvCpltCallback+0x4c0>)
 80021b8:	6013      	str	r3, [r2, #0]
				I3L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[6])); //IL3
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_ADC_ConvCpltCallback+0x4a4>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f9a0 	bl	8000504 <__aeabi_ui2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	ec43 2b10 	vmov	d0, r2, r3
 80021cc:	f00d fb08 	bl	800f7e0 <sqrt>
 80021d0:	ec51 0b10 	vmov	r0, r1, d0
 80021d4:	a320      	add	r3, pc, #128	; (adr r3, 8002258 <HAL_ADC_ConvCpltCallback+0x490>)
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	f7fe fa0d 	bl	80005f8 <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	4b25      	ldr	r3, [pc, #148]	; (8002280 <HAL_ADC_ConvCpltCallback+0x4b8>)
 80021ec:	f7fe fa04 	bl	80005f8 <__aeabi_dmul>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7fe fcd6 	bl	8000ba8 <__aeabi_d2uiz>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_ADC_ConvCpltCallback+0x4c4>)
 8002200:	6013      	str	r3, [r2, #0]

				Vin = (V1L+V2L+V3L) / 3;
 8002202:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <HAL_ADC_ConvCpltCallback+0x4ac>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <HAL_ADC_ConvCpltCallback+0x4b0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	441a      	add	r2, r3
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_ADC_ConvCpltCallback+0x4b4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4413      	add	r3, r2
 8002212:	4a1f      	ldr	r2, [pc, #124]	; (8002290 <HAL_ADC_ConvCpltCallback+0x4c8>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <HAL_ADC_ConvCpltCallback+0x4cc>)
 800221c:	6013      	str	r3, [r2, #0]
				Iin = (I1L+I2L+I3L) / 3;
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_ADC_ConvCpltCallback+0x4bc>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <HAL_ADC_ConvCpltCallback+0x4c0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	441a      	add	r2, r3
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_ADC_ConvCpltCallback+0x4c4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4413      	add	r3, r2
 800222e:	4a18      	ldr	r2, [pc, #96]	; (8002290 <HAL_ADC_ConvCpltCallback+0x4c8>)
 8002230:	fba2 2303 	umull	r2, r3, r2, r3
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	4a18      	ldr	r2, [pc, #96]	; (8002298 <HAL_ADC_ConvCpltCallback+0x4d0>)
 8002238:	6013      	str	r3, [r2, #0]

				for(uint8_t j=7;j<12;j++) adc1_Mean[j] = adc1_Value[j] / 1600;
 800223a:	2307      	movs	r3, #7
 800223c:	73bb      	strb	r3, [r7, #14]
 800223e:	e03c      	b.n	80022ba <HAL_ADC_ConvCpltCallback+0x4f2>
 8002240:	76c8b439 	.word	0x76c8b439
 8002244:	3fe69fbe 	.word	0x3fe69fbe
 8002248:	66666666 	.word	0x66666666
 800224c:	408b2666 	.word	0x408b2666
 8002250:	00000000 	.word	0x00000000
 8002254:	4074b000 	.word	0x4074b000
 8002258:	ad67a347 	.word	0xad67a347
 800225c:	3f73ce09 	.word	0x3f73ce09
 8002260:	200025cc 	.word	0x200025cc
 8002264:	51eb851f 	.word	0x51eb851f
 8002268:	2000265c 	.word	0x2000265c
 800226c:	200025fc 	.word	0x200025fc
 8002270:	2000262c 	.word	0x2000262c
 8002274:	200026a4 	.word	0x200026a4
 8002278:	200026a8 	.word	0x200026a8
 800227c:	200026ac 	.word	0x200026ac
 8002280:	40490000 	.word	0x40490000
 8002284:	20002698 	.word	0x20002698
 8002288:	2000269c 	.word	0x2000269c
 800228c:	200026a0 	.word	0x200026a0
 8002290:	aaaaaaab 	.word	0xaaaaaaab
 8002294:	200026e0 	.word	0x200026e0
 8002298:	200026e4 	.word	0x200026e4
 800229c:	7bbb      	ldrb	r3, [r7, #14]
 800229e:	4ac8      	ldr	r2, [pc, #800]	; (80025c0 <HAL_ADC_ConvCpltCallback+0x7f8>)
 80022a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022a4:	7bbb      	ldrb	r3, [r7, #14]
 80022a6:	49c7      	ldr	r1, [pc, #796]	; (80025c4 <HAL_ADC_ConvCpltCallback+0x7fc>)
 80022a8:	fba1 1202 	umull	r1, r2, r1, r2
 80022ac:	0a52      	lsrs	r2, r2, #9
 80022ae:	49c6      	ldr	r1, [pc, #792]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x800>)
 80022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80022b4:	7bbb      	ldrb	r3, [r7, #14]
 80022b6:	3301      	adds	r3, #1
 80022b8:	73bb      	strb	r3, [r7, #14]
 80022ba:	7bbb      	ldrb	r3, [r7, #14]
 80022bc:	2b0b      	cmp	r3, #11
 80022be:	d9ed      	bls.n	800229c <HAL_ADC_ConvCpltCallback+0x4d4>

				bara_Arti=adc1_Mean[7] * 3.3 / 4096; //bara+
 80022c0:	4bc1      	ldr	r3, [pc, #772]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x800>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f91d 	bl	8000504 <__aeabi_ui2d>
 80022ca:	a3b1      	add	r3, pc, #708	; (adr r3, 8002590 <HAL_ADC_ConvCpltCallback+0x7c8>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f992 	bl	80005f8 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	4bba      	ldr	r3, [pc, #744]	; (80025cc <HAL_ADC_ConvCpltCallback+0x804>)
 80022e2:	f7fe fab3 	bl	800084c <__aeabi_ddiv>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7fe fc5b 	bl	8000ba8 <__aeabi_d2uiz>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4ab6      	ldr	r2, [pc, #728]	; (80025d0 <HAL_ADC_ConvCpltCallback+0x808>)
 80022f6:	6013      	str	r3, [r2, #0]
				bara_Eksi=adc1_Mean[8] * 3.3 / 4096; //bara-
 80022f8:	4bb3      	ldr	r3, [pc, #716]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x800>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f901 	bl	8000504 <__aeabi_ui2d>
 8002302:	a3a3      	add	r3, pc, #652	; (adr r3, 8002590 <HAL_ADC_ConvCpltCallback+0x7c8>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f976 	bl	80005f8 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	4bac      	ldr	r3, [pc, #688]	; (80025cc <HAL_ADC_ConvCpltCallback+0x804>)
 800231a:	f7fe fa97 	bl	800084c <__aeabi_ddiv>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f7fe fc3f 	bl	8000ba8 <__aeabi_d2uiz>
 800232a:	4603      	mov	r3, r0
 800232c:	4aa9      	ldr	r2, [pc, #676]	; (80025d4 <HAL_ADC_ConvCpltCallback+0x80c>)
 800232e:	6013      	str	r3, [r2, #0]
				Vout=adc1_Mean[9] * 3.3 / 4096 * 0.9615; // Vout
 8002330:	4ba5      	ldr	r3, [pc, #660]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x800>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe f8e5 	bl	8000504 <__aeabi_ui2d>
 800233a:	a395      	add	r3, pc, #596	; (adr r3, 8002590 <HAL_ADC_ConvCpltCallback+0x7c8>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f95a 	bl	80005f8 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4b9e      	ldr	r3, [pc, #632]	; (80025cc <HAL_ADC_ConvCpltCallback+0x804>)
 8002352:	f7fe fa7b 	bl	800084c <__aeabi_ddiv>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	a38e      	add	r3, pc, #568	; (adr r3, 8002598 <HAL_ADC_ConvCpltCallback+0x7d0>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f7fe f948 	bl	80005f8 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fc1a 	bl	8000ba8 <__aeabi_d2uiz>
 8002374:	4603      	mov	r3, r0
 8002376:	4a98      	ldr	r2, [pc, #608]	; (80025d8 <HAL_ADC_ConvCpltCallback+0x810>)
 8002378:	6013      	str	r3, [r2, #0]
				t_sample=adc1_Mean[10] * 3.3 / 4096; //s_sample sıcaklık
 800237a:	4b93      	ldr	r3, [pc, #588]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x800>)
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f8c0 	bl	8000504 <__aeabi_ui2d>
 8002384:	a382      	add	r3, pc, #520	; (adr r3, 8002590 <HAL_ADC_ConvCpltCallback+0x7c8>)
 8002386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238a:	f7fe f935 	bl	80005f8 <__aeabi_dmul>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	4b8c      	ldr	r3, [pc, #560]	; (80025cc <HAL_ADC_ConvCpltCallback+0x804>)
 800239c:	f7fe fa56 	bl	800084c <__aeabi_ddiv>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe fbfe 	bl	8000ba8 <__aeabi_d2uiz>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a8b      	ldr	r2, [pc, #556]	; (80025dc <HAL_ADC_ConvCpltCallback+0x814>)
 80023b0:	6013      	str	r3, [r2, #0]
				akim=adc1_Mean[11] * 3.3 / 4096; //akım
 80023b2:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x800>)
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8a4 	bl	8000504 <__aeabi_ui2d>
 80023bc:	a374      	add	r3, pc, #464	; (adr r3, 8002590 <HAL_ADC_ConvCpltCallback+0x7c8>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	f7fe f919 	bl	80005f8 <__aeabi_dmul>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b7e      	ldr	r3, [pc, #504]	; (80025cc <HAL_ADC_ConvCpltCallback+0x804>)
 80023d4:	f7fe fa3a 	bl	800084c <__aeabi_ddiv>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f7fe fbe2 	bl	8000ba8 <__aeabi_d2uiz>
 80023e4:	4603      	mov	r3, r0
 80023e6:	4a7e      	ldr	r2, [pc, #504]	; (80025e0 <HAL_ADC_ConvCpltCallback+0x818>)
 80023e8:	6013      	str	r3, [r2, #0]
				Iout=map(adc1_Mean[11],180,995,0,3680)-697; // Iout
 80023ea:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x800>)
 80023ec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80023ee:	f44f 6366 	mov.w	r3, #3680	; 0xe60
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2300      	movs	r3, #0
 80023f6:	f240 32e3 	movw	r2, #995	; 0x3e3
 80023fa:	21b4      	movs	r1, #180	; 0xb4
 80023fc:	f7ff fb16 	bl	8001a2c <map>
 8002400:	4603      	mov	r3, r0
 8002402:	f2a3 23b9 	subw	r3, r3, #697	; 0x2b9
 8002406:	4a77      	ldr	r2, [pc, #476]	; (80025e4 <HAL_ADC_ConvCpltCallback+0x81c>)
 8002408:	6013      	str	r3, [r2, #0]
				if(Iout<0) Iout=0;
				bara_Toplam=bara_Arti-bara_Eksi;
 800240a:	4b71      	ldr	r3, [pc, #452]	; (80025d0 <HAL_ADC_ConvCpltCallback+0x808>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b71      	ldr	r3, [pc, #452]	; (80025d4 <HAL_ADC_ConvCpltCallback+0x80c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	4a74      	ldr	r2, [pc, #464]	; (80025e8 <HAL_ADC_ConvCpltCallback+0x820>)
 8002416:	6013      	str	r3, [r2, #0]

				//Sıcaklık hesabı
				temp = 16.628 * t_sample * t_sample + 535.2484 * t_sample -16.129 ;
 8002418:	4b70      	ldr	r3, [pc, #448]	; (80025dc <HAL_ADC_ConvCpltCallback+0x814>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f871 	bl	8000504 <__aeabi_ui2d>
 8002422:	a35f      	add	r3, pc, #380	; (adr r3, 80025a0 <HAL_ADC_ConvCpltCallback+0x7d8>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f8e6 	bl	80005f8 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4614      	mov	r4, r2
 8002432:	461d      	mov	r5, r3
 8002434:	4b69      	ldr	r3, [pc, #420]	; (80025dc <HAL_ADC_ConvCpltCallback+0x814>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f863 	bl	8000504 <__aeabi_ui2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fe f8d7 	bl	80005f8 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4614      	mov	r4, r2
 8002450:	461d      	mov	r5, r3
 8002452:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_ADC_ConvCpltCallback+0x814>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f854 	bl	8000504 <__aeabi_ui2d>
 800245c:	a352      	add	r3, pc, #328	; (adr r3, 80025a8 <HAL_ADC_ConvCpltCallback+0x7e0>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f8c9 	bl	80005f8 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fd ff0d 	bl	800028c <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	a34d      	add	r3, pc, #308	; (adr r3, 80025b0 <HAL_ADC_ConvCpltCallback+0x7e8>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	f7fd ff02 	bl	8000288 <__aeabi_dsub>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	f7fe fb8c 	bl	8000ba8 <__aeabi_d2uiz>
 8002490:	4603      	mov	r3, r0
 8002492:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_ADC_ConvCpltCallback+0x824>)
 8002494:	6013      	str	r3, [r2, #0]


				//Faz-Faz arası gerilim ve akımlar
				V12L=sqrt(3)*(adc1_Square_Root[1] + adc1_Square_Root[2] / 2);
 8002496:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f82e 	bl	8000504 <__aeabi_ui2d>
 80024a8:	a343      	add	r3, pc, #268	; (adr r3, 80025b8 <HAL_ADC_ConvCpltCallback+0x7f0>)
 80024aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ae:	f7fe f8a3 	bl	80005f8 <__aeabi_dmul>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f7fe fb75 	bl	8000ba8 <__aeabi_d2uiz>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_ADC_ConvCpltCallback+0x82c>)
 80024c2:	6013      	str	r3, [r2, #0]
				V23L=sqrt(3)*(adc1_Square_Root[2] + adc1_Square_Root[3] / 2);
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f817 	bl	8000504 <__aeabi_ui2d>
 80024d6:	a338      	add	r3, pc, #224	; (adr r3, 80025b8 <HAL_ADC_ConvCpltCallback+0x7f0>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f88c 	bl	80005f8 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fb5e 	bl	8000ba8 <__aeabi_d2uiz>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a42      	ldr	r2, [pc, #264]	; (80025f8 <HAL_ADC_ConvCpltCallback+0x830>)
 80024f0:	6013      	str	r3, [r2, #0]
				V13L=sqrt(3)*(adc1_Square_Root[1] + adc1_Square_Root[3] / 2);
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f800 	bl	8000504 <__aeabi_ui2d>
 8002504:	a32c      	add	r3, pc, #176	; (adr r3, 80025b8 <HAL_ADC_ConvCpltCallback+0x7f0>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	f7fe f875 	bl	80005f8 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe fb47 	bl	8000ba8 <__aeabi_d2uiz>
 800251a:	4603      	mov	r3, r0
 800251c:	4a37      	ldr	r2, [pc, #220]	; (80025fc <HAL_ADC_ConvCpltCallback+0x834>)
 800251e:	6013      	str	r3, [r2, #0]
				I12L=sqrt(3)*(adc1_Square_Root[4] + adc1_Square_Root[5] / 2);
 8002520:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	085b      	lsrs	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7fd ffe9 	bl	8000504 <__aeabi_ui2d>
 8002532:	a321      	add	r3, pc, #132	; (adr r3, 80025b8 <HAL_ADC_ConvCpltCallback+0x7f0>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f85e 	bl	80005f8 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fb30 	bl	8000ba8 <__aeabi_d2uiz>
 8002548:	4603      	mov	r3, r0
 800254a:	4a2d      	ldr	r2, [pc, #180]	; (8002600 <HAL_ADC_ConvCpltCallback+0x838>)
 800254c:	6013      	str	r3, [r2, #0]
				I23L=sqrt(3)*(adc1_Square_Root[5] + adc1_Square_Root[6] / 2);
 800254e:	4b28      	ldr	r3, [pc, #160]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	085b      	lsrs	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd ffd2 	bl	8000504 <__aeabi_ui2d>
 8002560:	a315      	add	r3, pc, #84	; (adr r3, 80025b8 <HAL_ADC_ConvCpltCallback+0x7f0>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fe f847 	bl	80005f8 <__aeabi_dmul>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	4610      	mov	r0, r2
 8002570:	4619      	mov	r1, r3
 8002572:	f7fe fb19 	bl	8000ba8 <__aeabi_d2uiz>
 8002576:	4603      	mov	r3, r0
 8002578:	4a22      	ldr	r2, [pc, #136]	; (8002604 <HAL_ADC_ConvCpltCallback+0x83c>)
 800257a:	6013      	str	r3, [r2, #0]
				I13L=sqrt(3)*(adc1_Square_Root[4] + adc1_Square_Root[6] / 2);
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_ADC_ConvCpltCallback+0x828>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ffbb 	bl	8000504 <__aeabi_ui2d>
 800258e:	e03b      	b.n	8002608 <HAL_ADC_ConvCpltCallback+0x840>
 8002590:	66666666 	.word	0x66666666
 8002594:	400a6666 	.word	0x400a6666
 8002598:	a5e353f8 	.word	0xa5e353f8
 800259c:	3feec49b 	.word	0x3feec49b
 80025a0:	9ba5e354 	.word	0x9ba5e354
 80025a4:	4030a0c4 	.word	0x4030a0c4
 80025a8:	b923a29c 	.word	0xb923a29c
 80025ac:	4080b9fc 	.word	0x4080b9fc
 80025b0:	24dd2f1b 	.word	0x24dd2f1b
 80025b4:	40302106 	.word	0x40302106
 80025b8:	e8584caa 	.word	0xe8584caa
 80025bc:	3ffbb67a 	.word	0x3ffbb67a
 80025c0:	200025cc 	.word	0x200025cc
 80025c4:	51eb851f 	.word	0x51eb851f
 80025c8:	2000265c 	.word	0x2000265c
 80025cc:	40b00000 	.word	0x40b00000
 80025d0:	200026c8 	.word	0x200026c8
 80025d4:	200026cc 	.word	0x200026cc
 80025d8:	200026d0 	.word	0x200026d0
 80025dc:	200026d4 	.word	0x200026d4
 80025e0:	200026d8 	.word	0x200026d8
 80025e4:	200026dc 	.word	0x200026dc
 80025e8:	200026ec 	.word	0x200026ec
 80025ec:	200026e8 	.word	0x200026e8
 80025f0:	2000262c 	.word	0x2000262c
 80025f4:	200026b0 	.word	0x200026b0
 80025f8:	200026b4 	.word	0x200026b4
 80025fc:	200026b8 	.word	0x200026b8
 8002600:	200026bc 	.word	0x200026bc
 8002604:	200026c0 	.word	0x200026c0
 8002608:	a397      	add	r3, pc, #604	; (adr r3, 8002868 <HAL_ADC_ConvCpltCallback+0xaa0>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fd fff3 	bl	80005f8 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f7fe fac5 	bl	8000ba8 <__aeabi_d2uiz>
 800261e:	4603      	mov	r3, r0
 8002620:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <HAL_ADC_ConvCpltCallback+0x9d0>)
 8002622:	6013      	str	r3, [r2, #0]


				//Değerler int'e çevriliyor.
				iMean=(int)adc1_Mean[0];
 8002624:	4b5d      	ldr	r3, [pc, #372]	; (800279c <HAL_ADC_ConvCpltCallback+0x9d4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b5d      	ldr	r3, [pc, #372]	; (80027a0 <HAL_ADC_ConvCpltCallback+0x9d8>)
 800262c:	601a      	str	r2, [r3, #0]
				iV1L = (int)V1L;
 800262e:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_ADC_ConvCpltCallback+0x9dc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	4b5c      	ldr	r3, [pc, #368]	; (80027a8 <HAL_ADC_ConvCpltCallback+0x9e0>)
 8002636:	601a      	str	r2, [r3, #0]
				iV2L = (int)V2L;
 8002638:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_ADC_ConvCpltCallback+0x9e4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <HAL_ADC_ConvCpltCallback+0x9e8>)
 8002640:	601a      	str	r2, [r3, #0]
				iV3L = (int)V3L;
 8002642:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_ADC_ConvCpltCallback+0x9ec>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4b5b      	ldr	r3, [pc, #364]	; (80027b8 <HAL_ADC_ConvCpltCallback+0x9f0>)
 800264a:	601a      	str	r2, [r3, #0]
				iI1L = (int)I1L;
 800264c:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <HAL_ADC_ConvCpltCallback+0x9f4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <HAL_ADC_ConvCpltCallback+0x9f8>)
 8002654:	601a      	str	r2, [r3, #0]
				iI2L = (int)I2L;
 8002656:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <HAL_ADC_ConvCpltCallback+0x9fc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	4b5a      	ldr	r3, [pc, #360]	; (80027c8 <HAL_ADC_ConvCpltCallback+0xa00>)
 800265e:	601a      	str	r2, [r3, #0]
				iI3L = (int)I3L;
 8002660:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_ADC_ConvCpltCallback+0xa04>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <HAL_ADC_ConvCpltCallback+0xa08>)
 8002668:	601a      	str	r2, [r3, #0]
				iVout = (int)Vout;
 800266a:	4b5a      	ldr	r3, [pc, #360]	; (80027d4 <HAL_ADC_ConvCpltCallback+0xa0c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_ADC_ConvCpltCallback+0xa10>)
 8002672:	601a      	str	r2, [r3, #0]
				itemp = (int)temp;
 8002674:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_ADC_ConvCpltCallback+0xa14>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_ADC_ConvCpltCallback+0xa18>)
 800267c:	601a      	str	r2, [r3, #0]
				iIout = (int)Iout;
 800267e:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_ADC_ConvCpltCallback+0xa1c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_ADC_ConvCpltCallback+0xa20>)
 8002686:	601a      	str	r2, [r3, #0]
				iVin = (int)Vin;
 8002688:	4b58      	ldr	r3, [pc, #352]	; (80027ec <HAL_ADC_ConvCpltCallback+0xa24>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <HAL_ADC_ConvCpltCallback+0xa28>)
 8002690:	601a      	str	r2, [r3, #0]
				iIin = (int)Iin;
 8002692:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <HAL_ADC_ConvCpltCallback+0xa2c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	4b57      	ldr	r3, [pc, #348]	; (80027f8 <HAL_ADC_ConvCpltCallback+0xa30>)
 800269a:	601a      	str	r2, [r3, #0]
				iV12L = (int)V12L;
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_ADC_ConvCpltCallback+0xa34>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b57      	ldr	r3, [pc, #348]	; (8002800 <HAL_ADC_ConvCpltCallback+0xa38>)
 80026a4:	601a      	str	r2, [r3, #0]
				iV23L = (int)V23L;
 80026a6:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_ADC_ConvCpltCallback+0xa3c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_ADC_ConvCpltCallback+0xa40>)
 80026ae:	601a      	str	r2, [r3, #0]
				iV13L = (int)V13L;
 80026b0:	4b56      	ldr	r3, [pc, #344]	; (800280c <HAL_ADC_ConvCpltCallback+0xa44>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b56      	ldr	r3, [pc, #344]	; (8002810 <HAL_ADC_ConvCpltCallback+0xa48>)
 80026b8:	601a      	str	r2, [r3, #0]
				iI12L = (int)I12L;
 80026ba:	4b56      	ldr	r3, [pc, #344]	; (8002814 <HAL_ADC_ConvCpltCallback+0xa4c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	4b55      	ldr	r3, [pc, #340]	; (8002818 <HAL_ADC_ConvCpltCallback+0xa50>)
 80026c2:	601a      	str	r2, [r3, #0]
				iI23L = (int)I23L;
 80026c4:	4b55      	ldr	r3, [pc, #340]	; (800281c <HAL_ADC_ConvCpltCallback+0xa54>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b55      	ldr	r3, [pc, #340]	; (8002820 <HAL_ADC_ConvCpltCallback+0xa58>)
 80026cc:	601a      	str	r2, [r3, #0]
				iI13L = (int)I13L;
 80026ce:	4b32      	ldr	r3, [pc, #200]	; (8002798 <HAL_ADC_ConvCpltCallback+0x9d0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_ADC_ConvCpltCallback+0xa5c>)
 80026d6:	601a      	str	r2, [r3, #0]
				ibara_Toplam = (int)bara_Toplam;
 80026d8:	4b53      	ldr	r3, [pc, #332]	; (8002828 <HAL_ADC_ConvCpltCallback+0xa60>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_ADC_ConvCpltCallback+0xa64>)
 80026e0:	601a      	str	r2, [r3, #0]




				//int değerler char'a çevriliyor
				sprintf(adc1_Last0, "%d", 0); //geçen süre yazması gerekiyor.
 80026e2:	2200      	movs	r2, #0
 80026e4:	4952      	ldr	r1, [pc, #328]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 80026e6:	4853      	ldr	r0, [pc, #332]	; (8002834 <HAL_ADC_ConvCpltCallback+0xa6c>)
 80026e8:	f009 fc90 	bl	800c00c <siprintf>
				sprintf(adc1_Last1, "%d", iV1L);
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_ADC_ConvCpltCallback+0x9e0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	494f      	ldr	r1, [pc, #316]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 80026f4:	4850      	ldr	r0, [pc, #320]	; (8002838 <HAL_ADC_ConvCpltCallback+0xa70>)
 80026f6:	f009 fc89 	bl	800c00c <siprintf>
				sprintf(adc1_Last2, "%d", iV2L);
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <HAL_ADC_ConvCpltCallback+0x9e8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	494b      	ldr	r1, [pc, #300]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002702:	484e      	ldr	r0, [pc, #312]	; (800283c <HAL_ADC_ConvCpltCallback+0xa74>)
 8002704:	f009 fc82 	bl	800c00c <siprintf>
				sprintf(adc1_Last3, "%d", iV3L);
 8002708:	4b2b      	ldr	r3, [pc, #172]	; (80027b8 <HAL_ADC_ConvCpltCallback+0x9f0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4948      	ldr	r1, [pc, #288]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002710:	484b      	ldr	r0, [pc, #300]	; (8002840 <HAL_ADC_ConvCpltCallback+0xa78>)
 8002712:	f009 fc7b 	bl	800c00c <siprintf>
				sprintf(adc1_Last4, "%d", iI1L);
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_ADC_ConvCpltCallback+0x9f8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	4944      	ldr	r1, [pc, #272]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 800271e:	4849      	ldr	r0, [pc, #292]	; (8002844 <HAL_ADC_ConvCpltCallback+0xa7c>)
 8002720:	f009 fc74 	bl	800c00c <siprintf>
				sprintf(adc1_Last5, "%d", iI2L);
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_ADC_ConvCpltCallback+0xa00>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4941      	ldr	r1, [pc, #260]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 800272c:	4846      	ldr	r0, [pc, #280]	; (8002848 <HAL_ADC_ConvCpltCallback+0xa80>)
 800272e:	f009 fc6d 	bl	800c00c <siprintf>
				sprintf(adc1_Last6, "%d", iI3L);
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_ADC_ConvCpltCallback+0xa08>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	493d      	ldr	r1, [pc, #244]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 800273a:	4844      	ldr	r0, [pc, #272]	; (800284c <HAL_ADC_ConvCpltCallback+0xa84>)
 800273c:	f009 fc66 	bl	800c00c <siprintf>
				sprintf(adc1_Last7, "%d", ibara_Toplam);
 8002740:	4b3a      	ldr	r3, [pc, #232]	; (800282c <HAL_ADC_ConvCpltCallback+0xa64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	493a      	ldr	r1, [pc, #232]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002748:	4841      	ldr	r0, [pc, #260]	; (8002850 <HAL_ADC_ConvCpltCallback+0xa88>)
 800274a:	f009 fc5f 	bl	800c00c <siprintf>
				sprintf(adc1_Last8, "%d", iVout);
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_ADC_ConvCpltCallback+0xa10>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	4936      	ldr	r1, [pc, #216]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002756:	483f      	ldr	r0, [pc, #252]	; (8002854 <HAL_ADC_ConvCpltCallback+0xa8c>)
 8002758:	f009 fc58 	bl	800c00c <siprintf>
				sprintf(adc1_Last9, "%d", iIout);
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <HAL_ADC_ConvCpltCallback+0xa20>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	4933      	ldr	r1, [pc, #204]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002764:	483c      	ldr	r0, [pc, #240]	; (8002858 <HAL_ADC_ConvCpltCallback+0xa90>)
 8002766:	f009 fc51 	bl	800c00c <siprintf>
				sprintf(adc1_Last10, "%d", itemp);
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_ADC_ConvCpltCallback+0xa18>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	492f      	ldr	r1, [pc, #188]	; (8002830 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002772:	483a      	ldr	r0, [pc, #232]	; (800285c <HAL_ADC_ConvCpltCallback+0xa94>)
 8002774:	f009 fc4a 	bl	800c00c <siprintf>
while(count<1600)
 8002778:	4b39      	ldr	r3, [pc, #228]	; (8002860 <HAL_ADC_ConvCpltCallback+0xa98>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002780:	f4ff ab28 	bcc.w	8001dd4 <HAL_ADC_ConvCpltCallback+0xc>

		}

	}

	sd_Flag=1;
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_ADC_ConvCpltCallback+0xa9c>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]

}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bdb0      	pop	{r4, r5, r7, pc}
 8002792:	bf00      	nop
 8002794:	f3af 8000 	nop.w
 8002798:	200026c4 	.word	0x200026c4
 800279c:	2000265c 	.word	0x2000265c
 80027a0:	200026f0 	.word	0x200026f0
 80027a4:	200026a4 	.word	0x200026a4
 80027a8:	200026f4 	.word	0x200026f4
 80027ac:	200026a8 	.word	0x200026a8
 80027b0:	200026f8 	.word	0x200026f8
 80027b4:	200026ac 	.word	0x200026ac
 80027b8:	200026fc 	.word	0x200026fc
 80027bc:	20002698 	.word	0x20002698
 80027c0:	20002700 	.word	0x20002700
 80027c4:	2000269c 	.word	0x2000269c
 80027c8:	20002704 	.word	0x20002704
 80027cc:	200026a0 	.word	0x200026a0
 80027d0:	20002708 	.word	0x20002708
 80027d4:	200026d0 	.word	0x200026d0
 80027d8:	2000270c 	.word	0x2000270c
 80027dc:	200026e8 	.word	0x200026e8
 80027e0:	20002710 	.word	0x20002710
 80027e4:	200026dc 	.word	0x200026dc
 80027e8:	20002714 	.word	0x20002714
 80027ec:	200026e0 	.word	0x200026e0
 80027f0:	20002718 	.word	0x20002718
 80027f4:	200026e4 	.word	0x200026e4
 80027f8:	2000271c 	.word	0x2000271c
 80027fc:	200026b0 	.word	0x200026b0
 8002800:	20002720 	.word	0x20002720
 8002804:	200026b4 	.word	0x200026b4
 8002808:	20002724 	.word	0x20002724
 800280c:	200026b8 	.word	0x200026b8
 8002810:	20002728 	.word	0x20002728
 8002814:	200026bc 	.word	0x200026bc
 8002818:	2000272c 	.word	0x2000272c
 800281c:	200026c0 	.word	0x200026c0
 8002820:	20002730 	.word	0x20002730
 8002824:	20002734 	.word	0x20002734
 8002828:	200026ec 	.word	0x200026ec
 800282c:	20002738 	.word	0x20002738
 8002830:	0800fa70 	.word	0x0800fa70
 8002834:	20002750 	.word	0x20002750
 8002838:	20002764 	.word	0x20002764
 800283c:	20002778 	.word	0x20002778
 8002840:	2000278c 	.word	0x2000278c
 8002844:	200027a0 	.word	0x200027a0
 8002848:	200027b4 	.word	0x200027b4
 800284c:	200027c8 	.word	0x200027c8
 8002850:	200027dc 	.word	0x200027dc
 8002854:	200027f0 	.word	0x200027f0
 8002858:	20002804 	.word	0x20002804
 800285c:	20002818 	.word	0x20002818
 8002860:	20002690 	.word	0x20002690
 8002864:	20002694 	.word	0x20002694
 8002868:	e8584caa 	.word	0xe8584caa
 800286c:	3ffbb67a 	.word	0x3ffbb67a

08002870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002876:	f001 f941 	bl	8003afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800287a:	f000 f999 	bl	8002bb0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // For measuring execution time
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800287e:	4ba2      	ldr	r3, [pc, #648]	; (8002b08 <main+0x298>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4aa1      	ldr	r2, [pc, #644]	; (8002b08 <main+0x298>)
 8002884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002888:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 800288a:	4ba0      	ldr	r3, [pc, #640]	; (8002b0c <main+0x29c>)
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
 8002890:	4b9e      	ldr	r3, [pc, #632]	; (8002b0c <main+0x29c>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002896:	f000 fc8b 	bl	80031b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800289a:	f000 fc69 	bl	8003170 <MX_DMA_Init>
  MX_ADC1_Init();
 800289e:	f000 f9f1 	bl	8002c84 <MX_ADC1_Init>
  MX_TIM1_Init();
 80028a2:	f000 fb45 	bl	8002f30 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80028a6:	f000 fc0f 	bl	80030c8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80028aa:	f000 fad7 	bl	8002e5c <MX_DAC_Init>
  MX_SPI1_Init();
 80028ae:	f000 fb09 	bl	8002ec4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80028b2:	f000 fc33 	bl	800311c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80028b6:	f005 fb4d 	bl	8007f54 <MX_FATFS_Init>
  MX_UART4_Init();
 80028ba:	f000 fbdb 	bl	8003074 <MX_UART4_Init>
  MX_TIM8_Init();
 80028be:	f000 fb87 	bl	8002fd0 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); // Örnekleme için timer kesmesi başlangıcı USER CODE 4'e git.
 80028c2:	4893      	ldr	r0, [pc, #588]	; (8002b10 <main+0x2a0>)
 80028c4:	f003 feca 	bl	800665c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);  // HMI Ekrana her 1s'de yazması için timer kesmesi başlangıcı
 80028c8:	4892      	ldr	r0, [pc, #584]	; (8002b14 <main+0x2a4>)
 80028ca:	f003 fec7 	bl	800665c <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80028ce:	2100      	movs	r1, #0
 80028d0:	4891      	ldr	r0, [pc, #580]	; (8002b18 <main+0x2a8>)
 80028d2:	f001 fef1 	bl	80046b8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80028d6:	2110      	movs	r1, #16
 80028d8:	488f      	ldr	r0, [pc, #572]	; (8002b18 <main+0x2a8>)
 80028da:	f001 feed 	bl	80046b8 <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(sd_Flag==1)
 80028de:	4b8f      	ldr	r3, [pc, #572]	; (8002b1c <main+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 80cd 	bne.w	8002a82 <main+0x212>
	  {

start_tick = DWT->CYCCNT;
 80028e8:	4b88      	ldr	r3, [pc, #544]	; (8002b0c <main+0x29c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4a8c      	ldr	r2, [pc, #560]	; (8002b20 <main+0x2b0>)
 80028ee:	6013      	str	r3, [r2, #0]

		  	//SD karta yazdırma kısmı, sd_Flag 1 olduğunda SD Karta yazdırıyor.
		    fres = f_mount(&fs, "", 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	498c      	ldr	r1, [pc, #560]	; (8002b24 <main+0x2b4>)
 80028f4:	488c      	ldr	r0, [pc, #560]	; (8002b28 <main+0x2b8>)
 80028f6:	f007 fd77 	bl	800a3e8 <f_mount>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b8b      	ldr	r3, [pc, #556]	; (8002b2c <main+0x2bc>)
 8002900:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002902:	4b8a      	ldr	r3, [pc, #552]	; (8002b2c <main+0x2bc>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <main+0xa2>
				transmit_uart("Micro SD card is mounted successfully!\n");
 800290a:	4889      	ldr	r0, [pc, #548]	; (8002b30 <main+0x2c0>)
 800290c:	f7ff f84c 	bl	80019a8 <transmit_uart>
 8002910:	e006      	b.n	8002920 <main+0xb0>
			} else if (fres != FR_OK) {
 8002912:	4b86      	ldr	r3, [pc, #536]	; (8002b2c <main+0x2bc>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <main+0xb0>
				transmit_uart("Micro SD card's mount error!\n");
 800291a:	4886      	ldr	r0, [pc, #536]	; (8002b34 <main+0x2c4>)
 800291c:	f7ff f844 	bl	80019a8 <transmit_uart>
			}

			// FA_OPEN_APPEND opens file if it exists and if not then creates it,
			// the pointer is set at the end of the file for appending
			fres = f_open(&fil, "log-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8002920:	2233      	movs	r2, #51	; 0x33
 8002922:	4985      	ldr	r1, [pc, #532]	; (8002b38 <main+0x2c8>)
 8002924:	4885      	ldr	r0, [pc, #532]	; (8002b3c <main+0x2cc>)
 8002926:	f007 fda5 	bl	800a474 <f_open>
 800292a:	4603      	mov	r3, r0
 800292c:	461a      	mov	r2, r3
 800292e:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <main+0x2bc>)
 8002930:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002932:	4b7e      	ldr	r3, [pc, #504]	; (8002b2c <main+0x2bc>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <main+0xd2>
				transmit_uart("File opened for reading and checking the free space.\n");
 800293a:	4881      	ldr	r0, [pc, #516]	; (8002b40 <main+0x2d0>)
 800293c:	f7ff f834 	bl	80019a8 <transmit_uart>
 8002940:	e006      	b.n	8002950 <main+0xe0>
			} else if (fres != FR_OK) {
 8002942:	4b7a      	ldr	r3, [pc, #488]	; (8002b2c <main+0x2bc>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <main+0xe0>
				transmit_uart("File was not opened for reading and checking the free space!\n");
 800294a:	487e      	ldr	r0, [pc, #504]	; (8002b44 <main+0x2d4>)
 800294c:	f7ff f82c 	bl	80019a8 <transmit_uart>


			 //ADC değerlerinin char'a dönüştürülüp sd karta yazdırıldığı bölüm

//				 f_puts("(s) VL1 VL2 VL3 IL1 IL2 IL3 VBARA VOUT IOUT TBARA \n", &fil);
				 f_puts(adc1_Last0, &fil);   // ADC değerleri metin dosyasına yazdırıldı.
 8002950:	497a      	ldr	r1, [pc, #488]	; (8002b3c <main+0x2cc>)
 8002952:	487d      	ldr	r0, [pc, #500]	; (8002b48 <main+0x2d8>)
 8002954:	f008 fa0d 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 8002958:	4978      	ldr	r1, [pc, #480]	; (8002b3c <main+0x2cc>)
 800295a:	487c      	ldr	r0, [pc, #496]	; (8002b4c <main+0x2dc>)
 800295c:	f008 fa09 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last1, &fil);
 8002960:	4976      	ldr	r1, [pc, #472]	; (8002b3c <main+0x2cc>)
 8002962:	487b      	ldr	r0, [pc, #492]	; (8002b50 <main+0x2e0>)
 8002964:	f008 fa05 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 8002968:	4974      	ldr	r1, [pc, #464]	; (8002b3c <main+0x2cc>)
 800296a:	4878      	ldr	r0, [pc, #480]	; (8002b4c <main+0x2dc>)
 800296c:	f008 fa01 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last2, &fil);
 8002970:	4972      	ldr	r1, [pc, #456]	; (8002b3c <main+0x2cc>)
 8002972:	4878      	ldr	r0, [pc, #480]	; (8002b54 <main+0x2e4>)
 8002974:	f008 f9fd 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 8002978:	4970      	ldr	r1, [pc, #448]	; (8002b3c <main+0x2cc>)
 800297a:	4874      	ldr	r0, [pc, #464]	; (8002b4c <main+0x2dc>)
 800297c:	f008 f9f9 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last3, &fil);
 8002980:	496e      	ldr	r1, [pc, #440]	; (8002b3c <main+0x2cc>)
 8002982:	4875      	ldr	r0, [pc, #468]	; (8002b58 <main+0x2e8>)
 8002984:	f008 f9f5 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 8002988:	496c      	ldr	r1, [pc, #432]	; (8002b3c <main+0x2cc>)
 800298a:	4870      	ldr	r0, [pc, #448]	; (8002b4c <main+0x2dc>)
 800298c:	f008 f9f1 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last4, &fil);
 8002990:	496a      	ldr	r1, [pc, #424]	; (8002b3c <main+0x2cc>)
 8002992:	4872      	ldr	r0, [pc, #456]	; (8002b5c <main+0x2ec>)
 8002994:	f008 f9ed 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 8002998:	4968      	ldr	r1, [pc, #416]	; (8002b3c <main+0x2cc>)
 800299a:	486c      	ldr	r0, [pc, #432]	; (8002b4c <main+0x2dc>)
 800299c:	f008 f9e9 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last5, &fil);
 80029a0:	4966      	ldr	r1, [pc, #408]	; (8002b3c <main+0x2cc>)
 80029a2:	486f      	ldr	r0, [pc, #444]	; (8002b60 <main+0x2f0>)
 80029a4:	f008 f9e5 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 80029a8:	4964      	ldr	r1, [pc, #400]	; (8002b3c <main+0x2cc>)
 80029aa:	4868      	ldr	r0, [pc, #416]	; (8002b4c <main+0x2dc>)
 80029ac:	f008 f9e1 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last6, &fil);
 80029b0:	4962      	ldr	r1, [pc, #392]	; (8002b3c <main+0x2cc>)
 80029b2:	486c      	ldr	r0, [pc, #432]	; (8002b64 <main+0x2f4>)
 80029b4:	f008 f9dd 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 80029b8:	4960      	ldr	r1, [pc, #384]	; (8002b3c <main+0x2cc>)
 80029ba:	4864      	ldr	r0, [pc, #400]	; (8002b4c <main+0x2dc>)
 80029bc:	f008 f9d9 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last7, &fil);
 80029c0:	495e      	ldr	r1, [pc, #376]	; (8002b3c <main+0x2cc>)
 80029c2:	4869      	ldr	r0, [pc, #420]	; (8002b68 <main+0x2f8>)
 80029c4:	f008 f9d5 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 80029c8:	495c      	ldr	r1, [pc, #368]	; (8002b3c <main+0x2cc>)
 80029ca:	4860      	ldr	r0, [pc, #384]	; (8002b4c <main+0x2dc>)
 80029cc:	f008 f9d1 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last8, &fil);
 80029d0:	495a      	ldr	r1, [pc, #360]	; (8002b3c <main+0x2cc>)
 80029d2:	4866      	ldr	r0, [pc, #408]	; (8002b6c <main+0x2fc>)
 80029d4:	f008 f9cd 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 80029d8:	4958      	ldr	r1, [pc, #352]	; (8002b3c <main+0x2cc>)
 80029da:	485c      	ldr	r0, [pc, #368]	; (8002b4c <main+0x2dc>)
 80029dc:	f008 f9c9 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last9, &fil);
 80029e0:	4956      	ldr	r1, [pc, #344]	; (8002b3c <main+0x2cc>)
 80029e2:	4863      	ldr	r0, [pc, #396]	; (8002b70 <main+0x300>)
 80029e4:	f008 f9c5 	bl	800ad72 <f_puts>
				 f_puts(" ", &fil);
 80029e8:	4954      	ldr	r1, [pc, #336]	; (8002b3c <main+0x2cc>)
 80029ea:	4858      	ldr	r0, [pc, #352]	; (8002b4c <main+0x2dc>)
 80029ec:	f008 f9c1 	bl	800ad72 <f_puts>
				 f_puts(adc1_Last10, &fil);
 80029f0:	4952      	ldr	r1, [pc, #328]	; (8002b3c <main+0x2cc>)
 80029f2:	4860      	ldr	r0, [pc, #384]	; (8002b74 <main+0x304>)
 80029f4:	f008 f9bd 	bl	800ad72 <f_puts>
				 f_puts("\n", &fil);
 80029f8:	4950      	ldr	r1, [pc, #320]	; (8002b3c <main+0x2cc>)
 80029fa:	485f      	ldr	r0, [pc, #380]	; (8002b78 <main+0x308>)
 80029fc:	f008 f9b9 	bl	800ad72 <f_puts>




			fres = f_close(&fil);
 8002a00:	484e      	ldr	r0, [pc, #312]	; (8002b3c <main+0x2cc>)
 8002a02:	f008 f915 	bl	800ac30 <f_close>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <main+0x2bc>)
 8002a0c:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <main+0x2bc>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <main+0x1ae>
				transmit_uart("The file is closed.\n");
 8002a16:	4859      	ldr	r0, [pc, #356]	; (8002b7c <main+0x30c>)
 8002a18:	f7fe ffc6 	bl	80019a8 <transmit_uart>
 8002a1c:	e006      	b.n	8002a2c <main+0x1bc>
			} else if (fres != FR_OK) {
 8002a1e:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <main+0x2bc>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <main+0x1bc>
				transmit_uart("The file was not closed.\n");}
 8002a26:	4856      	ldr	r0, [pc, #344]	; (8002b80 <main+0x310>)
 8002a28:	f7fe ffbe 	bl	80019a8 <transmit_uart>





			    sd_Flag=0;
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <main+0x2ac>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
			count=0;
 8002a32:	4b54      	ldr	r3, [pc, #336]	; (8002b84 <main+0x314>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
			k=0;
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <main+0x318>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

			// Alınan veriler sıfırlanıyor.
			for(uint8_t y=0;y<12;y++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	e01b      	b.n	8002a7c <main+0x20c>
			{
				adc_Buffer[y]=0;
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <main+0x31c>)
 8002a48:	2100      	movs	r1, #0
 8002a4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Value[y]=0;
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	4a4f      	ldr	r2, [pc, #316]	; (8002b90 <main+0x320>)
 8002a52:	2100      	movs	r1, #0
 8002a54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Mean[y]=0;
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	4a4e      	ldr	r2, [pc, #312]	; (8002b94 <main+0x324>)
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Square[y]=0;
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <main+0x328>)
 8002a66:	2100      	movs	r1, #0
 8002a68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Square_Root[y]=0;
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	4a4b      	ldr	r2, [pc, #300]	; (8002b9c <main+0x32c>)
 8002a70:	2100      	movs	r1, #0
 8002a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint8_t y=0;y<12;y++)
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	71fb      	strb	r3, [r7, #7]
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b0b      	cmp	r3, #11
 8002a80:	d9e0      	bls.n	8002a44 <main+0x1d4>
			}
	  }

end_tick = DWT->CYCCNT;
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <main+0x29c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a46      	ldr	r2, [pc, #280]	; (8002ba0 <main+0x330>)
 8002a88:	6013      	str	r3, [r2, #0]
sprintf(message, "Time: %9.2f ms\r\n", (float)(end_tick-start_tick)/(168000000/1000.0));
 8002a8a:	4b45      	ldr	r3, [pc, #276]	; (8002ba0 <main+0x330>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <main+0x2b0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9c:	ee17 0a90 	vmov	r0, s15
 8002aa0:	f7fd fd52 	bl	8000548 <__aeabi_f2d>
 8002aa4:	a316      	add	r3, pc, #88	; (adr r3, 8002b00 <main+0x290>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	f7fd fecf 	bl	800084c <__aeabi_ddiv>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	493c      	ldr	r1, [pc, #240]	; (8002ba4 <main+0x334>)
 8002ab4:	483c      	ldr	r0, [pc, #240]	; (8002ba8 <main+0x338>)
 8002ab6:	f009 faa9 	bl	800c00c <siprintf>
printf(message);
 8002aba:	483b      	ldr	r0, [pc, #236]	; (8002ba8 <main+0x338>)
 8002abc:	f009 fa94 	bl	800bfe8 <iprintf>
HAL_Delay(1000 - ((end_tick-start_tick))/(168000000/1000.0));
 8002ac0:	4b37      	ldr	r3, [pc, #220]	; (8002ba0 <main+0x330>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <main+0x2b0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd1a 	bl	8000504 <__aeabi_ui2d>
 8002ad0:	a30b      	add	r3, pc, #44	; (adr r3, 8002b00 <main+0x290>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd feb9 	bl	800084c <__aeabi_ddiv>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	f04f 0000 	mov.w	r0, #0
 8002ae2:	4932      	ldr	r1, [pc, #200]	; (8002bac <main+0x33c>)
 8002ae4:	f7fd fbd0 	bl	8000288 <__aeabi_dsub>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f7fe f85a 	bl	8000ba8 <__aeabi_d2uiz>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f001 f872 	bl	8003be0 <HAL_Delay>
	  if(sd_Flag==1)
 8002afc:	e6ef      	b.n	80028de <main+0x6e>
 8002afe:	bf00      	nop
 8002b00:	00000000 	.word	0x00000000
 8002b04:	41048200 	.word	0x41048200
 8002b08:	e000edf0 	.word	0xe000edf0
 8002b0c:	e0001000 	.word	0xe0001000
 8002b10:	200023a4 	.word	0x200023a4
 8002b14:	200023ec 	.word	0x200023ec
 8002b18:	20002390 	.word	0x20002390
 8002b1c:	20002694 	.word	0x20002694
 8002b20:	2000258c 	.word	0x2000258c
 8002b24:	0800fa74 	.word	0x0800fa74
 8002b28:	2000027c 	.word	0x2000027c
 8002b2c:	200022e4 	.word	0x200022e4
 8002b30:	0800fa78 	.word	0x0800fa78
 8002b34:	0800faa0 	.word	0x0800faa0
 8002b38:	0800fac0 	.word	0x0800fac0
 8002b3c:	200012b4 	.word	0x200012b4
 8002b40:	0800fad0 	.word	0x0800fad0
 8002b44:	0800fb08 	.word	0x0800fb08
 8002b48:	20002750 	.word	0x20002750
 8002b4c:	0800fb48 	.word	0x0800fb48
 8002b50:	20002764 	.word	0x20002764
 8002b54:	20002778 	.word	0x20002778
 8002b58:	2000278c 	.word	0x2000278c
 8002b5c:	200027a0 	.word	0x200027a0
 8002b60:	200027b4 	.word	0x200027b4
 8002b64:	200027c8 	.word	0x200027c8
 8002b68:	200027dc 	.word	0x200027dc
 8002b6c:	200027f0 	.word	0x200027f0
 8002b70:	20002804 	.word	0x20002804
 8002b74:	20002818 	.word	0x20002818
 8002b78:	0800fb4c 	.word	0x0800fb4c
 8002b7c:	0800fb50 	.word	0x0800fb50
 8002b80:	0800fb68 	.word	0x0800fb68
 8002b84:	20002690 	.word	0x20002690
 8002b88:	2000268c 	.word	0x2000268c
 8002b8c:	2000259c 	.word	0x2000259c
 8002b90:	200025cc 	.word	0x200025cc
 8002b94:	2000265c 	.word	0x2000265c
 8002b98:	200025fc 	.word	0x200025fc
 8002b9c:	2000262c 	.word	0x2000262c
 8002ba0:	20002590 	.word	0x20002590
 8002ba4:	0800fb84 	.word	0x0800fb84
 8002ba8:	2000250c 	.word	0x2000250c
 8002bac:	408f4000 	.word	0x408f4000

08002bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b094      	sub	sp, #80	; 0x50
 8002bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb6:	f107 0320 	add.w	r3, r7, #32
 8002bba:	2230      	movs	r2, #48	; 0x30
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f009 fa87 	bl	800c0d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	4b28      	ldr	r3, [pc, #160]	; (8002c7c <SystemClock_Config+0xcc>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <SystemClock_Config+0xcc>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be2:	6413      	str	r3, [r2, #64]	; 0x40
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <SystemClock_Config+0xcc>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <SystemClock_Config+0xd0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <SystemClock_Config+0xd0>)
 8002bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <SystemClock_Config+0xd0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c16:	2302      	movs	r3, #2
 8002c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c20:	2304      	movs	r3, #4
 8002c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c24:	23a8      	movs	r3, #168	; 0xa8
 8002c26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c2c:	2307      	movs	r3, #7
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c30:	f107 0320 	add.w	r3, r7, #32
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fbd1 	bl	80053dc <HAL_RCC_OscConfig>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c40:	f000 fb66 	bl	8003310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c44:	230f      	movs	r3, #15
 8002c46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	2105      	movs	r1, #5
 8002c62:	4618      	mov	r0, r3
 8002c64:	f002 fe32 	bl	80058cc <HAL_RCC_ClockConfig>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c6e:	f000 fb4f 	bl	8003310 <Error_Handler>
  }
}
 8002c72:	bf00      	nop
 8002c74:	3750      	adds	r7, #80	; 0x50
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40007000 	.word	0x40007000

08002c84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c96:	4b6e      	ldr	r3, [pc, #440]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002c98:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <MX_ADC1_Init+0x1d0>)
 8002c9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002c9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ca2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002caa:	4b69      	ldr	r3, [pc, #420]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cb0:	4b67      	ldr	r3, [pc, #412]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cb6:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cbe:	4b64      	ldr	r3, [pc, #400]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cc4:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002cc6:	4a64      	ldr	r2, [pc, #400]	; (8002e58 <MX_ADC1_Init+0x1d4>)
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cca:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8002cd0:	4b5f      	ldr	r3, [pc, #380]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002cd2:	220c      	movs	r2, #12
 8002cd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cd6:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cde:	4b5c      	ldr	r3, [pc, #368]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ce4:	485a      	ldr	r0, [pc, #360]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002ce6:	f000 ff9f 	bl	8003c28 <HAL_ADC_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002cf0:	f000 fb0e 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d00:	463b      	mov	r3, r7
 8002d02:	4619      	mov	r1, r3
 8002d04:	4852      	ldr	r0, [pc, #328]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002d06:	f001 f8f7 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d10:	f000 fafe 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d14:	2301      	movs	r3, #1
 8002d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d1c:	463b      	mov	r3, r7
 8002d1e:	4619      	mov	r1, r3
 8002d20:	484b      	ldr	r0, [pc, #300]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002d22:	f001 f8e9 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002d2c:	f000 faf0 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002d30:	2302      	movs	r3, #2
 8002d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002d34:	2303      	movs	r3, #3
 8002d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d38:	463b      	mov	r3, r7
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4844      	ldr	r0, [pc, #272]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002d3e:	f001 f8db 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002d48:	f000 fae2 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002d50:	2304      	movs	r3, #4
 8002d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	483d      	ldr	r0, [pc, #244]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002d5a:	f001 f8cd 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002d64:	f000 fad4 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d68:	2306      	movs	r3, #6
 8002d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002d6c:	2305      	movs	r3, #5
 8002d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d70:	463b      	mov	r3, r7
 8002d72:	4619      	mov	r1, r3
 8002d74:	4836      	ldr	r0, [pc, #216]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002d76:	f001 f8bf 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002d80:	f000 fac6 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002d84:	2307      	movs	r3, #7
 8002d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002d88:	2306      	movs	r3, #6
 8002d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	4619      	mov	r1, r3
 8002d90:	482f      	ldr	r0, [pc, #188]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002d92:	f001 f8b1 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002d9c:	f000 fab8 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002da0:	2308      	movs	r3, #8
 8002da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002da4:	2307      	movs	r3, #7
 8002da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002da8:	463b      	mov	r3, r7
 8002daa:	4619      	mov	r1, r3
 8002dac:	4828      	ldr	r0, [pc, #160]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002dae:	f001 f8a3 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002db8:	f000 faaa 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002dbc:	2309      	movs	r3, #9
 8002dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4821      	ldr	r0, [pc, #132]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002dca:	f001 f895 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002dd4:	f000 fa9c 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002dd8:	230a      	movs	r3, #10
 8002dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002ddc:	2309      	movs	r3, #9
 8002dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de0:	463b      	mov	r3, r7
 8002de2:	4619      	mov	r1, r3
 8002de4:	481a      	ldr	r0, [pc, #104]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002de6:	f001 f887 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002df0:	f000 fa8e 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002df4:	230b      	movs	r3, #11
 8002df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002df8:	230a      	movs	r3, #10
 8002dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dfc:	463b      	mov	r3, r7
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4813      	ldr	r0, [pc, #76]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002e02:	f001 f879 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002e0c:	f000 fa80 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002e10:	230d      	movs	r3, #13
 8002e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002e14:	230b      	movs	r3, #11
 8002e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e18:	463b      	mov	r3, r7
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	480c      	ldr	r0, [pc, #48]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002e1e:	f001 f86b 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002e28:	f000 fa72 	bl	8003310 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002e2c:	230f      	movs	r3, #15
 8002e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002e30:	230c      	movs	r3, #12
 8002e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e34:	463b      	mov	r3, r7
 8002e36:	4619      	mov	r1, r3
 8002e38:	4805      	ldr	r0, [pc, #20]	; (8002e50 <MX_ADC1_Init+0x1cc>)
 8002e3a:	f001 f85d 	bl	8003ef8 <HAL_ADC_ConfigChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002e44:	f000 fa64 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200022e8 	.word	0x200022e8
 8002e54:	40012000 	.word	0x40012000
 8002e58:	0f000001 	.word	0x0f000001

08002e5c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002e62:	463b      	mov	r3, r7
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <MX_DAC_Init+0x60>)
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <MX_DAC_Init+0x64>)
 8002e6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002e70:	4812      	ldr	r0, [pc, #72]	; (8002ebc <MX_DAC_Init+0x60>)
 8002e72:	f001 fbff 	bl	8004674 <HAL_DAC_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002e7c:	f000 fa48 	bl	8003310 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002e88:	463b      	mov	r3, r7
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	480b      	ldr	r0, [pc, #44]	; (8002ebc <MX_DAC_Init+0x60>)
 8002e90:	f001 fc93 	bl	80047ba <HAL_DAC_ConfigChannel>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002e9a:	f000 fa39 	bl	8003310 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4805      	ldr	r0, [pc, #20]	; (8002ebc <MX_DAC_Init+0x60>)
 8002ea6:	f001 fc88 	bl	80047ba <HAL_DAC_ConfigChannel>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002eb0:	f000 fa2e 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002eb4:	bf00      	nop
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	20002390 	.word	0x20002390
 8002ec0:	40007400 	.word	0x40007400

08002ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002eca:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <MX_SPI1_Init+0x68>)
 8002ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ed6:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002ef8:	2210      	movs	r2, #16
 8002efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002f10:	220a      	movs	r2, #10
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f14:	4804      	ldr	r0, [pc, #16]	; (8002f28 <MX_SPI1_Init+0x64>)
 8002f16:	f002 fef9 	bl	8005d0c <HAL_SPI_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f20:	f000 f9f6 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000224 	.word	0x20000224
 8002f2c:	40013000 	.word	0x40013000

08002f30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f36:	f107 0308 	add.w	r3, r7, #8
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
 8002f40:	609a      	str	r2, [r3, #8]
 8002f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f44:	463b      	mov	r3, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <MX_TIM1_Init+0x9c>)
 8002f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f60:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002f64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f72:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f78:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f7a:	f003 fb1f 	bl	80065bc <HAL_TIM_Base_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002f84:	f000 f9c4 	bl	8003310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	4619      	mov	r1, r3
 8002f94:	480c      	ldr	r0, [pc, #48]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002f96:	f003 fcc1 	bl	800691c <HAL_TIM_ConfigClockSource>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002fa0:	f000 f9b6 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fac:	463b      	mov	r3, r7
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_TIM1_Init+0x98>)
 8002fb2:	f003 fee9 	bl	8006d88 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002fbc:	f000 f9a8 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200023a4 	.word	0x200023a4
 8002fcc:	40010000 	.word	0x40010000

08002fd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002fec:	4b1f      	ldr	r3, [pc, #124]	; (800306c <MX_TIM8_Init+0x9c>)
 8002fee:	4a20      	ldr	r2, [pc, #128]	; (8003070 <MX_TIM8_Init+0xa0>)
 8002ff0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20000-1;
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <MX_TIM8_Init+0x9c>)
 8002ff4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002ff8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <MX_TIM8_Init+0x9c>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8400-1;
 8003000:	4b1a      	ldr	r3, [pc, #104]	; (800306c <MX_TIM8_Init+0x9c>)
 8003002:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003006:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <MX_TIM8_Init+0x9c>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800300e:	4b17      	ldr	r3, [pc, #92]	; (800306c <MX_TIM8_Init+0x9c>)
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <MX_TIM8_Init+0x9c>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800301a:	4814      	ldr	r0, [pc, #80]	; (800306c <MX_TIM8_Init+0x9c>)
 800301c:	f003 face 	bl	80065bc <HAL_TIM_Base_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8003026:	f000 f973 	bl	8003310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800302a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800302e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003030:	f107 0308 	add.w	r3, r7, #8
 8003034:	4619      	mov	r1, r3
 8003036:	480d      	ldr	r0, [pc, #52]	; (800306c <MX_TIM8_Init+0x9c>)
 8003038:	f003 fc70 	bl	800691c <HAL_TIM_ConfigClockSource>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8003042:	f000 f965 	bl	8003310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003046:	2320      	movs	r3, #32
 8003048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800304e:	463b      	mov	r3, r7
 8003050:	4619      	mov	r1, r3
 8003052:	4806      	ldr	r0, [pc, #24]	; (800306c <MX_TIM8_Init+0x9c>)
 8003054:	f003 fe98 	bl	8006d88 <HAL_TIMEx_MasterConfigSynchronization>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800305e:	f000 f957 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200023ec 	.word	0x200023ec
 8003070:	40010400 	.word	0x40010400

08003074 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <MX_UART4_Init+0x4c>)
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <MX_UART4_Init+0x50>)
 800307c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <MX_UART4_Init+0x4c>)
 8003080:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003084:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <MX_UART4_Init+0x4c>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <MX_UART4_Init+0x4c>)
 800308e:	2200      	movs	r2, #0
 8003090:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <MX_UART4_Init+0x4c>)
 8003094:	2200      	movs	r2, #0
 8003096:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003098:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <MX_UART4_Init+0x4c>)
 800309a:	220c      	movs	r2, #12
 800309c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <MX_UART4_Init+0x4c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <MX_UART4_Init+0x4c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80030aa:	4805      	ldr	r0, [pc, #20]	; (80030c0 <MX_UART4_Init+0x4c>)
 80030ac:	f003 fefc 	bl	8006ea8 <HAL_UART_Init>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80030b6:	f000 f92b 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20002434 	.word	0x20002434
 80030c4:	40004c00 	.word	0x40004c00

080030c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 80030ce:	4a12      	ldr	r2, [pc, #72]	; (8003118 <MX_USART2_UART_Init+0x50>)
 80030d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 80030d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80030d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 80030ee:	220c      	movs	r2, #12
 80030f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <MX_USART2_UART_Init+0x4c>)
 8003100:	f003 fed2 	bl	8006ea8 <HAL_UART_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800310a:	f000 f901 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000247c 	.word	0x2000247c
 8003118:	40004400 	.word	0x40004400

0800311c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <MX_USART3_UART_Init+0x50>)
 8003124:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 8003128:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800312c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 8003142:	220c      	movs	r2, #12
 8003144:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 800314e:	2200      	movs	r2, #0
 8003150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003152:	4805      	ldr	r0, [pc, #20]	; (8003168 <MX_USART3_UART_Init+0x4c>)
 8003154:	f003 fea8 	bl	8006ea8 <HAL_UART_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800315e:	f000 f8d7 	bl	8003310 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200024c4 	.word	0x200024c4
 800316c:	40004800 	.word	0x40004800

08003170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <MX_DMA_Init+0x3c>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <MX_DMA_Init+0x3c>)
 8003180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003184:	6313      	str	r3, [r2, #48]	; 0x30
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <MX_DMA_Init+0x3c>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2100      	movs	r1, #0
 8003196:	2038      	movs	r0, #56	; 0x38
 8003198:	f001 fa29 	bl	80045ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800319c:	2038      	movs	r0, #56	; 0x38
 800319e:	f001 fa42 	bl	8004626 <HAL_NVIC_EnableIRQ>

}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	; 0x28
 80031b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	4b33      	ldr	r3, [pc, #204]	; (8003298 <MX_GPIO_Init+0xe8>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a32      	ldr	r2, [pc, #200]	; (8003298 <MX_GPIO_Init+0xe8>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b30      	ldr	r3, [pc, #192]	; (8003298 <MX_GPIO_Init+0xe8>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	4b2c      	ldr	r3, [pc, #176]	; (8003298 <MX_GPIO_Init+0xe8>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <MX_GPIO_Init+0xe8>)
 80031ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <MX_GPIO_Init+0xe8>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	4b25      	ldr	r3, [pc, #148]	; (8003298 <MX_GPIO_Init+0xe8>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	4a24      	ldr	r2, [pc, #144]	; (8003298 <MX_GPIO_Init+0xe8>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6313      	str	r3, [r2, #48]	; 0x30
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <MX_GPIO_Init+0xe8>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <MX_GPIO_Init+0xe8>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <MX_GPIO_Init+0xe8>)
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <MX_GPIO_Init+0xe8>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <MX_GPIO_Init+0xe8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a16      	ldr	r2, [pc, #88]	; (8003298 <MX_GPIO_Init+0xe8>)
 8003240:	f043 0308 	orr.w	r3, r3, #8
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <MX_GPIO_Init+0xe8>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	603b      	str	r3, [r7, #0]
 8003250:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003252:	2201      	movs	r2, #1
 8003254:	2140      	movs	r1, #64	; 0x40
 8003256:	4811      	ldr	r0, [pc, #68]	; (800329c <MX_GPIO_Init+0xec>)
 8003258:	f002 f8a6 	bl	80053a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : REF_Pin */
  GPIO_InitStruct.Pin = REF_Pin;
 800325c:	2301      	movs	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003260:	2303      	movs	r3, #3
 8003262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REF_GPIO_Port, &GPIO_InitStruct);
 8003268:	f107 0314 	add.w	r3, r7, #20
 800326c:	4619      	mov	r1, r3
 800326e:	480c      	ldr	r0, [pc, #48]	; (80032a0 <MX_GPIO_Init+0xf0>)
 8003270:	f001 fefe 	bl	8005070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003274:	2340      	movs	r3, #64	; 0x40
 8003276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003278:	2301      	movs	r3, #1
 800327a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003280:	2301      	movs	r3, #1
 8003282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	4804      	ldr	r0, [pc, #16]	; (800329c <MX_GPIO_Init+0xec>)
 800328c:	f001 fef0 	bl	8005070 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003290:	bf00      	nop
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	40020400 	.word	0x40020400
 80032a0:	40020000 	.word	0x40020000

080032a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  /* TIMER CAGRILDI  */
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == TIM1)  // 50US'DE BIR KESMEYE GIRIP DEGER TOPLAYACAK.
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d109      	bne.n	80032ca <HAL_TIM_PeriodElapsedCallback+0x26>
	 {
		 HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_Buffer, sizeof(adc_Buffer)); /* ADC1 BASLADI VE DEGERLER ADC1'DEN CEKILDI */
 80032b6:	2230      	movs	r2, #48	; 0x30
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80032ba:	480f      	ldr	r0, [pc, #60]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80032bc:	f000 fcf8 	bl	8003cb0 <HAL_ADC_Start_DMA>
		 sec1++;
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80032c8:	6013      	str	r3, [r2, #0]
	 }

	 if(htim->Instance == TIM8) // 1s'de bir tft ekrana verileri gönderecek.
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d109      	bne.n	80032e8 <HAL_TIM_PeriodElapsedCallback+0x44>
	 {


		 HAL_UART_Receive_IT(&huart2, RX_Data, 4);  //UART CallBack'e git ve basılan butona göre değer gönder ekrana.
 80032d4:	2204      	movs	r2, #4
 80032d6:	490b      	ldr	r1, [pc, #44]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80032d8:	480b      	ldr	r0, [pc, #44]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80032da:	f003 fec0 	bl	800705e <HAL_UART_Receive_IT>
		 sec8++;
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80032e6:	6013      	str	r3, [r2, #0]

	 }


}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40010000 	.word	0x40010000
 80032f4:	2000259c 	.word	0x2000259c
 80032f8:	200022e8 	.word	0x200022e8
 80032fc:	20002594 	.word	0x20002594
 8003300:	40010400 	.word	0x40010400
 8003304:	2000273c 	.word	0x2000273c
 8003308:	2000247c 	.word	0x2000247c
 800330c:	20002598 	.word	0x20002598

08003310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003314:	b672      	cpsid	i
}
 8003316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003318:	e7fe      	b.n	8003318 <Error_Handler+0x8>
	...

0800331c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_MspInit+0x4c>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <HAL_MspInit+0x4c>)
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_MspInit+0x4c>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <HAL_MspInit+0x4c>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <HAL_MspInit+0x4c>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334c:	6413      	str	r3, [r2, #64]	; 0x40
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_MspInit+0x4c>)
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800335a:	2007      	movs	r0, #7
 800335c:	f001 f93c 	bl	80045d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08c      	sub	sp, #48	; 0x30
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003374:	f107 031c 	add.w	r3, r7, #28
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	60da      	str	r2, [r3, #12]
 8003382:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a49      	ldr	r2, [pc, #292]	; (80034b0 <HAL_ADC_MspInit+0x144>)
 800338a:	4293      	cmp	r3, r2
 800338c:	f040 808c 	bne.w	80034a8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003390:	2300      	movs	r3, #0
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	4a46      	ldr	r2, [pc, #280]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 800339a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339e:	6453      	str	r3, [r2, #68]	; 0x44
 80033a0:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	4a3f      	ldr	r2, [pc, #252]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	6313      	str	r3, [r2, #48]	; 0x30
 80033bc:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4a38      	ldr	r2, [pc, #224]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6313      	str	r3, [r2, #48]	; 0x30
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033ee:	f043 0302 	orr.w	r3, r3, #2
 80033f2:	6313      	str	r3, [r2, #48]	; 0x30
 80033f4:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_ADC_MspInit+0x148>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_OLC2_Pin|ADC1_OLC3_Pin|ADC1_OLC5_Pin|AKIM_FB_Pin;
 8003400:	232b      	movs	r3, #43	; 0x2b
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003404:	2303      	movs	r3, #3
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4619      	mov	r1, r3
 8003412:	4829      	ldr	r0, [pc, #164]	; (80034b8 <HAL_ADC_MspInit+0x14c>)
 8003414:	f001 fe2c 	bl	8005070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = REF_Pin|L1_OLC_Pin|L2_OLC_Pin|L3_OLC_Pin
 8003418:	23cf      	movs	r3, #207	; 0xcf
 800341a:	61fb      	str	r3, [r7, #28]
                          |I1_OLC_Pin|I2_OLC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800341c:	2303      	movs	r3, #3
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	4619      	mov	r1, r3
 800342a:	4824      	ldr	r0, [pc, #144]	; (80034bc <HAL_ADC_MspInit+0x150>)
 800342c:	f001 fe20 	bl	8005070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I3_OLC_Pin|ADC1_OLC_Pin;
 8003430:	2303      	movs	r3, #3
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003434:	2303      	movs	r3, #3
 8003436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	4619      	mov	r1, r3
 8003442:	481f      	ldr	r0, [pc, #124]	; (80034c0 <HAL_ADC_MspInit+0x154>)
 8003444:	f001 fe14 	bl	8005070 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003448:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 800344a:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_ADC_MspInit+0x15c>)
 800344c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800345a:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003460:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 8003462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003466:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003468:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 800346a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800346e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003470:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 8003472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003476:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 8003482:	2200      	movs	r2, #0
 8003484:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 8003488:	2200      	movs	r2, #0
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800348c:	480d      	ldr	r0, [pc, #52]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 800348e:	f001 f9ed 	bl	800486c <HAL_DMA_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003498:	f7ff ff3a 	bl	8003310 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <HAL_ADC_MspInit+0x158>)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034a8:	bf00      	nop
 80034aa:	3730      	adds	r7, #48	; 0x30
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40012000 	.word	0x40012000
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40020800 	.word	0x40020800
 80034bc:	40020000 	.word	0x40020000
 80034c0:	40020400 	.word	0x40020400
 80034c4:	20002330 	.word	0x20002330
 80034c8:	40026410 	.word	0x40026410

080034cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	605a      	str	r2, [r3, #4]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_DAC_MspInit+0x7c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d127      	bne.n	800353e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_DAC_MspInit+0x80>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <HAL_DAC_MspInit+0x80>)
 80034f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b13      	ldr	r3, [pc, #76]	; (800354c <HAL_DAC_MspInit+0x80>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_DAC_MspInit+0x80>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <HAL_DAC_MspInit+0x80>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <HAL_DAC_MspInit+0x80>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = DAC_VOLTAJ_OUT_Pin|DAC_AKIM_OUT_Pin;
 8003526:	2330      	movs	r3, #48	; 0x30
 8003528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800352a:	2303      	movs	r3, #3
 800352c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	4619      	mov	r1, r3
 8003538:	4805      	ldr	r0, [pc, #20]	; (8003550 <HAL_DAC_MspInit+0x84>)
 800353a:	f001 fd99 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800353e:	bf00      	nop
 8003540:	3728      	adds	r7, #40	; 0x28
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40007400 	.word	0x40007400
 800354c:	40023800 	.word	0x40023800
 8003550:	40020000 	.word	0x40020000

08003554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <HAL_SPI_MspInit+0x84>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d12b      	bne.n	80035ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_SPI_MspInit+0x88>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	4a17      	ldr	r2, [pc, #92]	; (80035dc <HAL_SPI_MspInit+0x88>)
 8003580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003584:	6453      	str	r3, [r2, #68]	; 0x44
 8003586:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_SPI_MspInit+0x88>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_SPI_MspInit+0x88>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a10      	ldr	r2, [pc, #64]	; (80035dc <HAL_SPI_MspInit+0x88>)
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_SPI_MspInit+0x88>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80035ae:	2338      	movs	r3, #56	; 0x38
 80035b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ba:	2303      	movs	r3, #3
 80035bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035be:	2305      	movs	r3, #5
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c2:	f107 0314 	add.w	r3, r7, #20
 80035c6:	4619      	mov	r1, r3
 80035c8:	4805      	ldr	r0, [pc, #20]	; (80035e0 <HAL_SPI_MspInit+0x8c>)
 80035ca:	f001 fd51 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035ce:	bf00      	nop
 80035d0:	3728      	adds	r7, #40	; 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40013000 	.word	0x40013000
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020400 	.word	0x40020400

080035e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <HAL_TIM_Base_MspInit+0x80>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d116      	bne.n	8003624 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <HAL_TIM_Base_MspInit+0x84>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a1a      	ldr	r2, [pc, #104]	; (8003668 <HAL_TIM_Base_MspInit+0x84>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b18      	ldr	r3, [pc, #96]	; (8003668 <HAL_TIM_Base_MspInit+0x84>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003612:	2200      	movs	r2, #0
 8003614:	2100      	movs	r1, #0
 8003616:	2019      	movs	r0, #25
 8003618:	f000 ffe9 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800361c:	2019      	movs	r0, #25
 800361e:	f001 f802 	bl	8004626 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003622:	e01a      	b.n	800365a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM8)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a10      	ldr	r2, [pc, #64]	; (800366c <HAL_TIM_Base_MspInit+0x88>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d115      	bne.n	800365a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	4b0d      	ldr	r3, [pc, #52]	; (8003668 <HAL_TIM_Base_MspInit+0x84>)
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <HAL_TIM_Base_MspInit+0x84>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	6453      	str	r3, [r2, #68]	; 0x44
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_TIM_Base_MspInit+0x84>)
 8003640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	60bb      	str	r3, [r7, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800364a:	2200      	movs	r2, #0
 800364c:	2100      	movs	r1, #0
 800364e:	202c      	movs	r0, #44	; 0x2c
 8003650:	f000 ffcd 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003654:	202c      	movs	r0, #44	; 0x2c
 8003656:	f000 ffe6 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40010000 	.word	0x40010000
 8003668:	40023800 	.word	0x40023800
 800366c:	40010400 	.word	0x40010400

08003670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08e      	sub	sp, #56	; 0x38
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a54      	ldr	r2, [pc, #336]	; (80037e0 <HAL_UART_MspInit+0x170>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d12d      	bne.n	80036ee <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_UART_MspInit+0x174>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_UART_MspInit+0x174>)
 800369c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <HAL_UART_MspInit+0x174>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	4b4c      	ldr	r3, [pc, #304]	; (80037e4 <HAL_UART_MspInit+0x174>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a4b      	ldr	r2, [pc, #300]	; (80037e4 <HAL_UART_MspInit+0x174>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b49      	ldr	r3, [pc, #292]	; (80037e4 <HAL_UART_MspInit+0x174>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d8:	2303      	movs	r3, #3
 80036da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80036dc:	2308      	movs	r3, #8
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	4619      	mov	r1, r3
 80036e6:	4840      	ldr	r0, [pc, #256]	; (80037e8 <HAL_UART_MspInit+0x178>)
 80036e8:	f001 fcc2 	bl	8005070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036ec:	e073      	b.n	80037d6 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a3e      	ldr	r2, [pc, #248]	; (80037ec <HAL_UART_MspInit+0x17c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d134      	bne.n	8003762 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036f8:	2300      	movs	r3, #0
 80036fa:	61bb      	str	r3, [r7, #24]
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <HAL_UART_MspInit+0x174>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	4a38      	ldr	r2, [pc, #224]	; (80037e4 <HAL_UART_MspInit+0x174>)
 8003702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003706:	6413      	str	r3, [r2, #64]	; 0x40
 8003708:	4b36      	ldr	r3, [pc, #216]	; (80037e4 <HAL_UART_MspInit+0x174>)
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <HAL_UART_MspInit+0x174>)
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	4a31      	ldr	r2, [pc, #196]	; (80037e4 <HAL_UART_MspInit+0x174>)
 800371e:	f043 0308 	orr.w	r3, r3, #8
 8003722:	6313      	str	r3, [r2, #48]	; 0x30
 8003724:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_UART_MspInit+0x174>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NEXTION_TX_Pin|NEXTION_RX_Pin;
 8003730:	2360      	movs	r3, #96	; 0x60
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003734:	2302      	movs	r3, #2
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373c:	2303      	movs	r3, #3
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003740:	2307      	movs	r3, #7
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003748:	4619      	mov	r1, r3
 800374a:	4829      	ldr	r0, [pc, #164]	; (80037f0 <HAL_UART_MspInit+0x180>)
 800374c:	f001 fc90 	bl	8005070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003750:	2200      	movs	r2, #0
 8003752:	2100      	movs	r1, #0
 8003754:	2026      	movs	r0, #38	; 0x26
 8003756:	f000 ff4a 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800375a:	2026      	movs	r0, #38	; 0x26
 800375c:	f000 ff63 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 8003760:	e039      	b.n	80037d6 <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_UART_MspInit+0x184>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d134      	bne.n	80037d6 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <HAL_UART_MspInit+0x174>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	4a1b      	ldr	r2, [pc, #108]	; (80037e4 <HAL_UART_MspInit+0x174>)
 8003776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800377a:	6413      	str	r3, [r2, #64]	; 0x40
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_UART_MspInit+0x174>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <HAL_UART_MspInit+0x174>)
 800378e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <HAL_UART_MspInit+0x174>)
 8003792:	f043 0302 	orr.w	r3, r3, #2
 8003796:	6313      	str	r3, [r2, #48]	; 0x30
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_UART_MspInit+0x174>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_CARD_TX_Pin|SD_CARD_RX_Pin;
 80037a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b2:	2303      	movs	r3, #3
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037b6:	2307      	movs	r3, #7
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037be:	4619      	mov	r1, r3
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <HAL_UART_MspInit+0x188>)
 80037c2:	f001 fc55 	bl	8005070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80037c6:	2200      	movs	r2, #0
 80037c8:	2100      	movs	r1, #0
 80037ca:	2027      	movs	r0, #39	; 0x27
 80037cc:	f000 ff0f 	bl	80045ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80037d0:	2027      	movs	r0, #39	; 0x27
 80037d2:	f000 ff28 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 80037d6:	bf00      	nop
 80037d8:	3738      	adds	r7, #56	; 0x38
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40004c00 	.word	0x40004c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40020800 	.word	0x40020800
 80037ec:	40004400 	.word	0x40004400
 80037f0:	40020c00 	.word	0x40020c00
 80037f4:	40004800 	.word	0x40004800
 80037f8:	40020400 	.word	0x40020400

080037fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003800:	e7fe      	b.n	8003800 <NMI_Handler+0x4>

08003802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003806:	e7fe      	b.n	8003806 <HardFault_Handler+0x4>

08003808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800380c:	e7fe      	b.n	800380c <MemManage_Handler+0x4>

0800380e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800380e:	b480      	push	{r7}
 8003810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003812:	e7fe      	b.n	8003812 <BusFault_Handler+0x4>

08003814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003818:	e7fe      	b.n	8003818 <UsageFault_Handler+0x4>

0800381a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <SysTick_Handler+0x44>)
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <SysTick_Handler+0x18>
	   Timer1--;
 8003850:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <SysTick_Handler+0x44>)
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <SysTick_Handler+0x44>)
 800385a:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <SysTick_Handler+0x48>)
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <SysTick_Handler+0x2c>
	   Timer2--;
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <SysTick_Handler+0x48>)
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <SysTick_Handler+0x48>)
 800386e:	801a      	strh	r2, [r3, #0]

	millis++;
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <SysTick_Handler+0x4c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3301      	adds	r3, #1
 8003876:	4a06      	ldr	r2, [pc, #24]	; (8003890 <SysTick_Handler+0x4c>)
 8003878:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800387a:	f000 f991 	bl	8003ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800387e:	f000 feec 	bl	800465a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	2000021c 	.word	0x2000021c
 800388c:	2000021e 	.word	0x2000021e
 8003890:	2000282c 	.word	0x2000282c

08003894 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800389a:	f002 ff4f 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200023a4 	.word	0x200023a4

080038a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <USART2_IRQHandler+0x10>)
 80038ae:	f003 fbfb 	bl	80070a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2000247c 	.word	0x2000247c

080038bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80038c0:	4802      	ldr	r0, [pc, #8]	; (80038cc <USART3_IRQHandler+0x10>)
 80038c2:	f003 fbf1 	bl	80070a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	200024c4 	.word	0x200024c4

080038d0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80038d4:	4802      	ldr	r0, [pc, #8]	; (80038e0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80038d6:	f002 ff31 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	200023ec 	.word	0x200023ec

080038e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80038e8:	4802      	ldr	r0, [pc, #8]	; (80038f4 <DMA2_Stream0_IRQHandler+0x10>)
 80038ea:	f001 f957 	bl	8004b9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20002330 	.word	0x20002330

080038f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return 1;
 80038fc:	2301      	movs	r3, #1
}
 80038fe:	4618      	mov	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <_kill>:

int _kill(int pid, int sig)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003912:	f008 fc41 	bl	800c198 <__errno>
 8003916:	4603      	mov	r3, r0
 8003918:	2216      	movs	r2, #22
 800391a:	601a      	str	r2, [r3, #0]
  return -1;
 800391c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_exit>:

void _exit (int status)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003930:	f04f 31ff 	mov.w	r1, #4294967295
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ffe7 	bl	8003908 <_kill>
  while (1) {}    /* Make sure we hang here */
 800393a:	e7fe      	b.n	800393a <_exit+0x12>

0800393c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e00a      	b.n	8003964 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800394e:	f3af 8000 	nop.w
 8003952:	4601      	mov	r1, r0
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	60ba      	str	r2, [r7, #8]
 800395a:	b2ca      	uxtb	r2, r1
 800395c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	3301      	adds	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	429a      	cmp	r2, r3
 800396a:	dbf0      	blt.n	800394e <_read+0x12>
  }

  return len;
 800396c:	687b      	ldr	r3, [r7, #4]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	60b9      	str	r1, [r7, #8]
 8003980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	e009      	b.n	800399c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	60ba      	str	r2, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd fff7 	bl	8001984 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	3301      	adds	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	dbf1      	blt.n	8003988 <_write+0x12>
  }
  return len;
 80039a4:	687b      	ldr	r3, [r7, #4]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <_close>:

int _close(int file)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039d6:	605a      	str	r2, [r3, #4]
  return 0;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <_isatty>:

int _isatty(int file)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80039ee:	2301      	movs	r3, #1
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <_sbrk+0x5c>)
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <_sbrk+0x60>)
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a2c:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <_sbrk+0x64>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <_sbrk+0x64>)
 8003a36:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <_sbrk+0x68>)
 8003a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a3a:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <_sbrk+0x64>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d207      	bcs.n	8003a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a48:	f008 fba6 	bl	800c198 <__errno>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	220c      	movs	r2, #12
 8003a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	e009      	b.n	8003a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <_sbrk+0x64>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5e:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <_sbrk+0x64>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	4a05      	ldr	r2, [pc, #20]	; (8003a7c <_sbrk+0x64>)
 8003a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20020000 	.word	0x20020000
 8003a78:	00000400 	.word	0x00000400
 8003a7c:	20002830 	.word	0x20002830
 8003a80:	20002bc0 	.word	0x20002bc0

08003a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <SystemInit+0x20>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <SystemInit+0x20>)
 8003a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ae0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003aac:	f7ff ffea 	bl	8003a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ab0:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ab2:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab8:	e002      	b.n	8003ac0 <LoopCopyDataInit>

08003aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003abe:	3304      	adds	r3, #4

08003ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac4:	d3f9      	bcc.n	8003aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ac8:	4c0a      	ldr	r4, [pc, #40]	; (8003af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003acc:	e001      	b.n	8003ad2 <LoopFillZerobss>

08003ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad0:	3204      	adds	r2, #4

08003ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad4:	d3fb      	bcc.n	8003ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ad6:	f008 fb65 	bl	800c1a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ada:	f7fe fec9 	bl	8002870 <main>
  bx  lr    
 8003ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003aec:	08010478 	.word	0x08010478
  ldr r2, =_sbss
 8003af0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003af4:	20002bc0 	.word	0x20002bc0

08003af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af8:	e7fe      	b.n	8003af8 <ADC_IRQHandler>
	...

08003afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_Init+0x40>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <HAL_Init+0x40>)
 8003b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_Init+0x40>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <HAL_Init+0x40>)
 8003b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <HAL_Init+0x40>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b24:	2003      	movs	r0, #3
 8003b26:	f000 fd57 	bl	80045d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f000 f808 	bl	8003b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b30:	f7ff fbf4 	bl	800331c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023c00 	.word	0x40023c00

08003b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_InitTick+0x54>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_InitTick+0x58>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	4619      	mov	r1, r3
 8003b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fd6f 	bl	8004642 <HAL_SYSTICK_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00e      	b.n	8003b8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b0f      	cmp	r3, #15
 8003b72:	d80a      	bhi.n	8003b8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b74:	2200      	movs	r2, #0
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	f04f 30ff 	mov.w	r0, #4294967295
 8003b7c:	f000 fd37 	bl	80045ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b80:	4a06      	ldr	r2, [pc, #24]	; (8003b9c <HAL_InitTick+0x5c>)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000008 	.word	0x20000008
 8003b98:	20000010 	.word	0x20000010
 8003b9c:	2000000c 	.word	0x2000000c

08003ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_IncTick+0x20>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_IncTick+0x24>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4413      	add	r3, r2
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <HAL_IncTick+0x24>)
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000010 	.word	0x20000010
 8003bc4:	20002834 	.word	0x20002834

08003bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return uwTick;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_GetTick+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20002834 	.word	0x20002834

08003be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003be8:	f7ff ffee 	bl	8003bc8 <HAL_GetTick>
 8003bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf8:	d005      	beq.n	8003c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_Delay+0x44>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c06:	bf00      	nop
 8003c08:	f7ff ffde 	bl	8003bc8 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d8f7      	bhi.n	8003c08 <HAL_Delay+0x28>
  {
  }
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000010 	.word	0x20000010

08003c28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e033      	b.n	8003ca6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff fb90 	bl	800336c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d118      	bne.n	8003c98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c6e:	f023 0302 	bic.w	r3, r3, #2
 8003c72:	f043 0202 	orr.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fa5e 	bl	800413c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f023 0303 	bic.w	r3, r3, #3
 8003c8e:	f043 0201 	orr.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
 8003c96:	e001      	b.n	8003c9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_ADC_Start_DMA+0x1e>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e0e9      	b.n	8003ea2 <HAL_ADC_Start_DMA+0x1f2>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d018      	beq.n	8003d16 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cf4:	4b6d      	ldr	r3, [pc, #436]	; (8003eac <HAL_ADC_Start_DMA+0x1fc>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a6d      	ldr	r2, [pc, #436]	; (8003eb0 <HAL_ADC_Start_DMA+0x200>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	0c9a      	lsrs	r2, r3, #18
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003d08:	e002      	b.n	8003d10 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f9      	bne.n	8003d0a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d24:	d107      	bne.n	8003d36 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d34:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f040 80a1 	bne.w	8003e88 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003d4e:	f023 0301 	bic.w	r3, r3, #1
 8003d52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d84:	d106      	bne.n	8003d94 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f023 0206 	bic.w	r2, r3, #6
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
 8003d92:	e002      	b.n	8003d9a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003da2:	4b44      	ldr	r3, [pc, #272]	; (8003eb4 <HAL_ADC_Start_DMA+0x204>)
 8003da4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	4a43      	ldr	r2, [pc, #268]	; (8003eb8 <HAL_ADC_Start_DMA+0x208>)
 8003dac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	4a42      	ldr	r2, [pc, #264]	; (8003ebc <HAL_ADC_Start_DMA+0x20c>)
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	4a41      	ldr	r2, [pc, #260]	; (8003ec0 <HAL_ADC_Start_DMA+0x210>)
 8003dbc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003dd6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	334c      	adds	r3, #76	; 0x4c
 8003df2:	4619      	mov	r1, r3
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f000 fde6 	bl	80049c8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d12a      	bne.n	8003e5e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2d      	ldr	r2, [pc, #180]	; (8003ec4 <HAL_ADC_Start_DMA+0x214>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d015      	beq.n	8003e3e <HAL_ADC_Start_DMA+0x18e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a2c      	ldr	r2, [pc, #176]	; (8003ec8 <HAL_ADC_Start_DMA+0x218>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d105      	bne.n	8003e28 <HAL_ADC_Start_DMA+0x178>
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <HAL_ADC_Start_DMA+0x204>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a27      	ldr	r2, [pc, #156]	; (8003ecc <HAL_ADC_Start_DMA+0x21c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d136      	bne.n	8003ea0 <HAL_ADC_Start_DMA+0x1f0>
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <HAL_ADC_Start_DMA+0x204>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d130      	bne.n	8003ea0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d129      	bne.n	8003ea0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	e020      	b.n	8003ea0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a18      	ldr	r2, [pc, #96]	; (8003ec4 <HAL_ADC_Start_DMA+0x214>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d11b      	bne.n	8003ea0 <HAL_ADC_Start_DMA+0x1f0>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d114      	bne.n	8003ea0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	e00b      	b.n	8003ea0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	f043 0210 	orr.w	r2, r3, #16
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f043 0201 	orr.w	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20000008 	.word	0x20000008
 8003eb0:	431bde83 	.word	0x431bde83
 8003eb4:	40012300 	.word	0x40012300
 8003eb8:	08004335 	.word	0x08004335
 8003ebc:	080043ef 	.word	0x080043ef
 8003ec0:	0800440b 	.word	0x0800440b
 8003ec4:	40012000 	.word	0x40012000
 8003ec8:	40012100 	.word	0x40012100
 8003ecc:	40012200 	.word	0x40012200

08003ed0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x1c>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e105      	b.n	8004120 <HAL_ADC_ConfigChannel+0x228>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b09      	cmp	r3, #9
 8003f22:	d925      	bls.n	8003f70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68d9      	ldr	r1, [r3, #12]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	3b1e      	subs	r3, #30
 8003f3a:	2207      	movs	r2, #7
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43da      	mvns	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	400a      	ands	r2, r1
 8003f48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68d9      	ldr	r1, [r3, #12]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4403      	add	r3, r0
 8003f62:	3b1e      	subs	r3, #30
 8003f64:	409a      	lsls	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	e022      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6919      	ldr	r1, [r3, #16]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	2207      	movs	r2, #7
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	400a      	ands	r2, r1
 8003f92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6919      	ldr	r1, [r3, #16]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4403      	add	r3, r0
 8003fac:	409a      	lsls	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d824      	bhi.n	8004008 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	3b05      	subs	r3, #5
 8003fd0:	221f      	movs	r2, #31
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43da      	mvns	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	400a      	ands	r2, r1
 8003fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	4618      	mov	r0, r3
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3b05      	subs	r3, #5
 8003ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	635a      	str	r2, [r3, #52]	; 0x34
 8004006:	e04c      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b0c      	cmp	r3, #12
 800400e:	d824      	bhi.n	800405a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	3b23      	subs	r3, #35	; 0x23
 8004022:	221f      	movs	r2, #31
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43da      	mvns	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	400a      	ands	r2, r1
 8004030:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	4618      	mov	r0, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	3b23      	subs	r3, #35	; 0x23
 800404c:	fa00 f203 	lsl.w	r2, r0, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
 8004058:	e023      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	3b41      	subs	r3, #65	; 0x41
 800406c:	221f      	movs	r2, #31
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43da      	mvns	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	400a      	ands	r2, r1
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	4618      	mov	r0, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	3b41      	subs	r3, #65	; 0x41
 8004096:	fa00 f203 	lsl.w	r2, r0, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_ADC_ConfigChannel+0x234>)
 80040a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <HAL_ADC_ConfigChannel+0x238>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d109      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x1cc>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b12      	cmp	r3, #18
 80040b6:	d105      	bne.n	80040c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_ADC_ConfigChannel+0x238>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d123      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x21e>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b10      	cmp	r3, #16
 80040d4:	d003      	beq.n	80040de <HAL_ADC_ConfigChannel+0x1e6>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b11      	cmp	r3, #17
 80040dc:	d11b      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d111      	bne.n	8004116 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_ADC_ConfigChannel+0x23c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a10      	ldr	r2, [pc, #64]	; (8004138 <HAL_ADC_ConfigChannel+0x240>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	0c9a      	lsrs	r2, r3, #18
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004108:	e002      	b.n	8004110 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3b01      	subs	r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f9      	bne.n	800410a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40012300 	.word	0x40012300
 8004130:	40012000 	.word	0x40012000
 8004134:	20000008 	.word	0x20000008
 8004138:	431bde83 	.word	0x431bde83

0800413c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004144:	4b79      	ldr	r3, [pc, #484]	; (800432c <ADC_Init+0x1f0>)
 8004146:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	431a      	orrs	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	021a      	lsls	r2, r3, #8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004194:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6859      	ldr	r1, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6899      	ldr	r1, [r3, #8]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	4a58      	ldr	r2, [pc, #352]	; (8004330 <ADC_Init+0x1f4>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6899      	ldr	r1, [r3, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6899      	ldr	r1, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	e00f      	b.n	800423a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004228:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004238:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0202 	bic.w	r2, r2, #2
 8004248:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6899      	ldr	r1, [r3, #8]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7e1b      	ldrb	r3, [r3, #24]
 8004254:	005a      	lsls	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01b      	beq.n	80042a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004276:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004286:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6859      	ldr	r1, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	3b01      	subs	r3, #1
 8004294:	035a      	lsls	r2, r3, #13
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	e007      	b.n	80042b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	051a      	lsls	r2, r3, #20
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6899      	ldr	r1, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042f2:	025a      	lsls	r2, r3, #9
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6899      	ldr	r1, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	029a      	lsls	r2, r3, #10
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40012300 	.word	0x40012300
 8004330:	0f000001 	.word	0x0f000001

08004334 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800434a:	2b00      	cmp	r3, #0
 800434c:	d13c      	bne.n	80043c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d12b      	bne.n	80043c0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800436c:	2b00      	cmp	r3, #0
 800436e:	d127      	bne.n	80043c0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800437a:	2b00      	cmp	r3, #0
 800437c:	d006      	beq.n	800438c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004388:	2b00      	cmp	r3, #0
 800438a:	d119      	bne.n	80043c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0220 	bic.w	r2, r2, #32
 800439a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7fd fd01 	bl	8001dc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043c6:	e00e      	b.n	80043e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fd85 	bl	8003ee4 <HAL_ADC_ErrorCallback>
}
 80043da:	e004      	b.n	80043e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff fd67 	bl	8003ed0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2240      	movs	r2, #64	; 0x40
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff fd5a 	bl	8003ee4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004448:	4b0c      	ldr	r3, [pc, #48]	; (800447c <__NVIC_SetPriorityGrouping+0x44>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004454:	4013      	ands	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800446a:	4a04      	ldr	r2, [pc, #16]	; (800447c <__NVIC_SetPriorityGrouping+0x44>)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	60d3      	str	r3, [r2, #12]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <__NVIC_GetPriorityGrouping+0x18>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	f003 0307 	and.w	r3, r3, #7
}
 800448e:	4618      	mov	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	db0b      	blt.n	80044c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	f003 021f 	and.w	r2, r3, #31
 80044b4:	4907      	ldr	r1, [pc, #28]	; (80044d4 <__NVIC_EnableIRQ+0x38>)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	2001      	movs	r0, #1
 80044be:	fa00 f202 	lsl.w	r2, r0, r2
 80044c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000e100 	.word	0xe000e100

080044d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	6039      	str	r1, [r7, #0]
 80044e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	db0a      	blt.n	8004502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	490c      	ldr	r1, [pc, #48]	; (8004524 <__NVIC_SetPriority+0x4c>)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	0112      	lsls	r2, r2, #4
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	440b      	add	r3, r1
 80044fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004500:	e00a      	b.n	8004518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	4908      	ldr	r1, [pc, #32]	; (8004528 <__NVIC_SetPriority+0x50>)
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	3b04      	subs	r3, #4
 8004510:	0112      	lsls	r2, r2, #4
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	440b      	add	r3, r1
 8004516:	761a      	strb	r2, [r3, #24]
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000e100 	.word	0xe000e100
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f1c3 0307 	rsb	r3, r3, #7
 8004546:	2b04      	cmp	r3, #4
 8004548:	bf28      	it	cs
 800454a:	2304      	movcs	r3, #4
 800454c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3304      	adds	r3, #4
 8004552:	2b06      	cmp	r3, #6
 8004554:	d902      	bls.n	800455c <NVIC_EncodePriority+0x30>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3b03      	subs	r3, #3
 800455a:	e000      	b.n	800455e <NVIC_EncodePriority+0x32>
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43da      	mvns	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	401a      	ands	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004574:	f04f 31ff 	mov.w	r1, #4294967295
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	43d9      	mvns	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004584:	4313      	orrs	r3, r2
         );
}
 8004586:	4618      	mov	r0, r3
 8004588:	3724      	adds	r7, #36	; 0x24
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3b01      	subs	r3, #1
 80045a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a4:	d301      	bcc.n	80045aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00f      	b.n	80045ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <SysTick_Config+0x40>)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b2:	210f      	movs	r1, #15
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	f7ff ff8e 	bl	80044d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <SysTick_Config+0x40>)
 80045be:	2200      	movs	r2, #0
 80045c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c2:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <SysTick_Config+0x40>)
 80045c4:	2207      	movs	r2, #7
 80045c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000e010 	.word	0xe000e010

080045d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff ff29 	bl	8004438 <__NVIC_SetPriorityGrouping>
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	4603      	mov	r3, r0
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
 80045fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004600:	f7ff ff3e 	bl	8004480 <__NVIC_GetPriorityGrouping>
 8004604:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	6978      	ldr	r0, [r7, #20]
 800460c:	f7ff ff8e 	bl	800452c <NVIC_EncodePriority>
 8004610:	4602      	mov	r2, r0
 8004612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004616:	4611      	mov	r1, r2
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff5d 	bl	80044d8 <__NVIC_SetPriority>
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff31 	bl	800449c <__NVIC_EnableIRQ>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ffa2 	bl	8004594 <SysTick_Config>
 8004650:	4603      	mov	r3, r0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800465e:	f000 f802 	bl	8004666 <HAL_SYSTICK_Callback>
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004666:	b480      	push	{r7}
 8004668:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e014      	b.n	80046b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	791b      	ldrb	r3, [r3, #4]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fe ff18 	bl	80034cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e046      	b.n	800475a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	795b      	ldrb	r3, [r3, #5]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_DAC_Start+0x20>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e040      	b.n	800475a <HAL_DAC_Start+0xa2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2201      	movs	r2, #1
 80046f2:	409a      	lsls	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800470c:	2b3c      	cmp	r3, #60	; 0x3c
 800470e:	d11d      	bne.n	800474c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	e014      	b.n	800474c <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	213c      	movs	r1, #60	; 0x3c
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	429a      	cmp	r2, r3
 800473a:	d107      	bne.n	800474c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685a      	ldr	r2, [r3, #4]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0202 	orr.w	r2, r2, #2
 800474a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e015      	b.n	80047ae <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d105      	bne.n	800479a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4413      	add	r3, r2
 8004794:	3308      	adds	r3, #8
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e004      	b.n	80047a4 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4413      	add	r3, r2
 80047a0:	3314      	adds	r3, #20
 80047a2:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	461a      	mov	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b089      	sub	sp, #36	; 0x24
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <HAL_DAC_ConfigChannel+0x1c>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e042      	b.n	8004860 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	795b      	ldrb	r3, [r3, #5]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_DAC_ConfigChannel+0x2c>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e03c      	b.n	8004860 <HAL_DAC_ConfigChannel+0xa6>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2202      	movs	r2, #2
 80047f0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004808:	43db      	mvns	r3, r3
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	4013      	ands	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6819      	ldr	r1, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	22c0      	movs	r2, #192	; 0xc0
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43da      	mvns	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	400a      	ands	r2, r1
 8004850:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2201      	movs	r2, #1
 8004856:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800485e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3724      	adds	r7, #36	; 0x24
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7ff f9a6 	bl	8003bc8 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e099      	b.n	80049bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048a8:	e00f      	b.n	80048ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048aa:	f7ff f98d 	bl	8003bc8 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b05      	cmp	r3, #5
 80048b6:	d908      	bls.n	80048ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2203      	movs	r2, #3
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e078      	b.n	80049bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e8      	bne.n	80048aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <HAL_DMA_Init+0x158>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004902:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800490e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2b04      	cmp	r3, #4
 8004922:	d107      	bne.n	8004934 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	4313      	orrs	r3, r2
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0307 	bic.w	r3, r3, #7
 800494a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b04      	cmp	r3, #4
 800495c:	d117      	bne.n	800498e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fb01 	bl	8004f78 <DMA_CheckFifoParam>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d008      	beq.n	800498e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2240      	movs	r2, #64	; 0x40
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800498a:	2301      	movs	r3, #1
 800498c:	e016      	b.n	80049bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fab8 	bl	8004f0c <DMA_CalcBaseAndBitshift>
 800499c:	4603      	mov	r3, r0
 800499e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	223f      	movs	r2, #63	; 0x3f
 80049a6:	409a      	lsls	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	f010803f 	.word	0xf010803f

080049c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_DMA_Start_IT+0x26>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e040      	b.n	8004a70 <HAL_DMA_Start_IT+0xa8>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d12f      	bne.n	8004a62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2202      	movs	r2, #2
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fa4a 	bl	8004eb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a20:	223f      	movs	r2, #63	; 0x3f
 8004a22:	409a      	lsls	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0216 	orr.w	r2, r2, #22
 8004a36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d007      	beq.n	8004a50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0208 	orr.w	r2, r2, #8
 8004a4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e005      	b.n	8004a6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a86:	f7ff f89f 	bl	8003bc8 <HAL_GetTick>
 8004a8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d008      	beq.n	8004aaa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e052      	b.n	8004b50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0216 	bic.w	r2, r2, #22
 8004ab8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_DMA_Abort+0x62>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0208 	bic.w	r2, r2, #8
 8004ae8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004afa:	e013      	b.n	8004b24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004afc:	f7ff f864 	bl	8003bc8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d90c      	bls.n	8004b24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2203      	movs	r2, #3
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e015      	b.n	8004b50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1e4      	bne.n	8004afc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b36:	223f      	movs	r2, #63	; 0x3f
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d004      	beq.n	8004b76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2280      	movs	r2, #128	; 0x80
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e00c      	b.n	8004b90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2205      	movs	r2, #5
 8004b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0201 	bic.w	r2, r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ba8:	4b8e      	ldr	r3, [pc, #568]	; (8004de4 <HAL_DMA_IRQHandler+0x248>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a8e      	ldr	r2, [pc, #568]	; (8004de8 <HAL_DMA_IRQHandler+0x24c>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0a9b      	lsrs	r3, r3, #10
 8004bb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01a      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d013      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0204 	bic.w	r2, r2, #4
 8004bee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f043 0201 	orr.w	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d012      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f043 0202 	orr.w	r2, r3, #2
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	2204      	movs	r2, #4
 8004c44:	409a      	lsls	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d012      	beq.n	8004c74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	2204      	movs	r2, #4
 8004c62:	409a      	lsls	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	2210      	movs	r2, #16
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d043      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d03c      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c96:	2210      	movs	r2, #16
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d018      	beq.n	8004cde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d108      	bne.n	8004ccc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d024      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
 8004cca:	e01f      	b.n	8004d0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01b      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	e016      	b.n	8004d0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d107      	bne.n	8004cfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0208 	bic.w	r2, r2, #8
 8004cfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d10:	2220      	movs	r2, #32
 8004d12:	409a      	lsls	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4013      	ands	r3, r2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 808f 	beq.w	8004e3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8087 	beq.w	8004e3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	2220      	movs	r2, #32
 8004d34:	409a      	lsls	r2, r3
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b05      	cmp	r3, #5
 8004d44:	d136      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0216 	bic.w	r2, r2, #22
 8004d54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <HAL_DMA_IRQHandler+0x1da>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0208 	bic.w	r2, r2, #8
 8004d84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d8a:	223f      	movs	r2, #63	; 0x3f
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d07e      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
        }
        return;
 8004db2:	e079      	b.n	8004ea8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01d      	beq.n	8004dfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10d      	bne.n	8004dec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d031      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	4798      	blx	r3
 8004de0:	e02c      	b.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
 8004de2:	bf00      	nop
 8004de4:	20000008 	.word	0x20000008
 8004de8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d023      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	4798      	blx	r3
 8004dfc:	e01e      	b.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10f      	bne.n	8004e2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0210 	bic.w	r2, r2, #16
 8004e1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d032      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d022      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2205      	movs	r2, #5
 8004e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d307      	bcc.n	8004e84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f2      	bne.n	8004e68 <HAL_DMA_IRQHandler+0x2cc>
 8004e82:	e000      	b.n	8004e86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
 8004ea6:	e000      	b.n	8004eaa <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ea8:	bf00      	nop
    }
  }
}
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ecc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d108      	bne.n	8004ef0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004eee:	e007      	b.n	8004f00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	60da      	str	r2, [r3, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	3b10      	subs	r3, #16
 8004f1c:	4a14      	ldr	r2, [pc, #80]	; (8004f70 <DMA_CalcBaseAndBitshift+0x64>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f26:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <DMA_CalcBaseAndBitshift+0x68>)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d909      	bls.n	8004f4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f42:	f023 0303 	bic.w	r3, r3, #3
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f4c:	e007      	b.n	8004f5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	aaaaaaab 	.word	0xaaaaaaab
 8004f74:	0800fbf8 	.word	0x0800fbf8

08004f78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11f      	bne.n	8004fd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d856      	bhi.n	8005046 <DMA_CheckFifoParam+0xce>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <DMA_CheckFifoParam+0x28>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fc3 	.word	0x08004fc3
 8004fa8:	08004fb1 	.word	0x08004fb1
 8004fac:	08005047 	.word	0x08005047
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d046      	beq.n	800504a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fc0:	e043      	b.n	800504a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fca:	d140      	bne.n	800504e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd0:	e03d      	b.n	800504e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fda:	d121      	bne.n	8005020 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d837      	bhi.n	8005052 <DMA_CheckFifoParam+0xda>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <DMA_CheckFifoParam+0x70>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08004ff9 	.word	0x08004ff9
 8004fec:	08004fff 	.word	0x08004fff
 8004ff0:	08004ff9 	.word	0x08004ff9
 8004ff4:	08005011 	.word	0x08005011
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8004ffc:	e030      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d025      	beq.n	8005056 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800500e:	e022      	b.n	8005056 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005018:	d11f      	bne.n	800505a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800501e:	e01c      	b.n	800505a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d903      	bls.n	800502e <DMA_CheckFifoParam+0xb6>
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	2b03      	cmp	r3, #3
 800502a:	d003      	beq.n	8005034 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800502c:	e018      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      break;
 8005032:	e015      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00e      	beq.n	800505e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      break;
 8005044:	e00b      	b.n	800505e <DMA_CheckFifoParam+0xe6>
      break;
 8005046:	bf00      	nop
 8005048:	e00a      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800504a:	bf00      	nop
 800504c:	e008      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800504e:	bf00      	nop
 8005050:	e006      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 8005052:	bf00      	nop
 8005054:	e004      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 8005056:	bf00      	nop
 8005058:	e002      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;   
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <DMA_CheckFifoParam+0xe8>
      break;
 800505e:	bf00      	nop
    }
  } 
  
  return status; 
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop

08005070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	; 0x24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	e16b      	b.n	8005364 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800508c:	2201      	movs	r2, #1
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	fa02 f303 	lsl.w	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f040 815a 	bne.w	800535e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d005      	beq.n	80050c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d130      	bne.n	8005124 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	2203      	movs	r2, #3
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050f8:	2201      	movs	r2, #1
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	4013      	ands	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 0201 	and.w	r2, r3, #1
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4313      	orrs	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b03      	cmp	r3, #3
 800512e:	d017      	beq.n	8005160 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	2203      	movs	r2, #3
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4013      	ands	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d123      	bne.n	80051b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	08da      	lsrs	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3208      	adds	r2, #8
 8005174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005178:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	220f      	movs	r2, #15
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 0307 	and.w	r3, r3, #7
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	08da      	lsrs	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3208      	adds	r2, #8
 80051ae:	69b9      	ldr	r1, [r7, #24]
 80051b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	2203      	movs	r2, #3
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0203 	and.w	r2, r3, #3
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4313      	orrs	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80b4 	beq.w	800535e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	4b60      	ldr	r3, [pc, #384]	; (800537c <HAL_GPIO_Init+0x30c>)
 80051fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fe:	4a5f      	ldr	r2, [pc, #380]	; (800537c <HAL_GPIO_Init+0x30c>)
 8005200:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005204:	6453      	str	r3, [r2, #68]	; 0x44
 8005206:	4b5d      	ldr	r3, [pc, #372]	; (800537c <HAL_GPIO_Init+0x30c>)
 8005208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005212:	4a5b      	ldr	r2, [pc, #364]	; (8005380 <HAL_GPIO_Init+0x310>)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	3302      	adds	r3, #2
 800521a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	220f      	movs	r2, #15
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a52      	ldr	r2, [pc, #328]	; (8005384 <HAL_GPIO_Init+0x314>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d02b      	beq.n	8005296 <HAL_GPIO_Init+0x226>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a51      	ldr	r2, [pc, #324]	; (8005388 <HAL_GPIO_Init+0x318>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d025      	beq.n	8005292 <HAL_GPIO_Init+0x222>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a50      	ldr	r2, [pc, #320]	; (800538c <HAL_GPIO_Init+0x31c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d01f      	beq.n	800528e <HAL_GPIO_Init+0x21e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a4f      	ldr	r2, [pc, #316]	; (8005390 <HAL_GPIO_Init+0x320>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d019      	beq.n	800528a <HAL_GPIO_Init+0x21a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a4e      	ldr	r2, [pc, #312]	; (8005394 <HAL_GPIO_Init+0x324>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_GPIO_Init+0x216>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a4d      	ldr	r2, [pc, #308]	; (8005398 <HAL_GPIO_Init+0x328>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00d      	beq.n	8005282 <HAL_GPIO_Init+0x212>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a4c      	ldr	r2, [pc, #304]	; (800539c <HAL_GPIO_Init+0x32c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d007      	beq.n	800527e <HAL_GPIO_Init+0x20e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a4b      	ldr	r2, [pc, #300]	; (80053a0 <HAL_GPIO_Init+0x330>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d101      	bne.n	800527a <HAL_GPIO_Init+0x20a>
 8005276:	2307      	movs	r3, #7
 8005278:	e00e      	b.n	8005298 <HAL_GPIO_Init+0x228>
 800527a:	2308      	movs	r3, #8
 800527c:	e00c      	b.n	8005298 <HAL_GPIO_Init+0x228>
 800527e:	2306      	movs	r3, #6
 8005280:	e00a      	b.n	8005298 <HAL_GPIO_Init+0x228>
 8005282:	2305      	movs	r3, #5
 8005284:	e008      	b.n	8005298 <HAL_GPIO_Init+0x228>
 8005286:	2304      	movs	r3, #4
 8005288:	e006      	b.n	8005298 <HAL_GPIO_Init+0x228>
 800528a:	2303      	movs	r3, #3
 800528c:	e004      	b.n	8005298 <HAL_GPIO_Init+0x228>
 800528e:	2302      	movs	r3, #2
 8005290:	e002      	b.n	8005298 <HAL_GPIO_Init+0x228>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_GPIO_Init+0x228>
 8005296:	2300      	movs	r3, #0
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	f002 0203 	and.w	r2, r2, #3
 800529e:	0092      	lsls	r2, r2, #2
 80052a0:	4093      	lsls	r3, r2
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052a8:	4935      	ldr	r1, [pc, #212]	; (8005380 <HAL_GPIO_Init+0x310>)
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	3302      	adds	r3, #2
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052b6:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_GPIO_Init+0x334>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80052da:	4a32      	ldr	r2, [pc, #200]	; (80053a4 <HAL_GPIO_Init+0x334>)
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80052e0:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <HAL_GPIO_Init+0x334>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005304:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <HAL_GPIO_Init+0x334>)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800530a:	4b26      	ldr	r3, [pc, #152]	; (80053a4 <HAL_GPIO_Init+0x334>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	43db      	mvns	r3, r3
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	4013      	ands	r3, r2
 8005318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_GPIO_Init+0x334>)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005334:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <HAL_GPIO_Init+0x334>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005358:	4a12      	ldr	r2, [pc, #72]	; (80053a4 <HAL_GPIO_Init+0x334>)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	3301      	adds	r3, #1
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	2b0f      	cmp	r3, #15
 8005368:	f67f ae90 	bls.w	800508c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	3724      	adds	r7, #36	; 0x24
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800
 8005380:	40013800 	.word	0x40013800
 8005384:	40020000 	.word	0x40020000
 8005388:	40020400 	.word	0x40020400
 800538c:	40020800 	.word	0x40020800
 8005390:	40020c00 	.word	0x40020c00
 8005394:	40021000 	.word	0x40021000
 8005398:	40021400 	.word	0x40021400
 800539c:	40021800 	.word	0x40021800
 80053a0:	40021c00 	.word	0x40021c00
 80053a4:	40013c00 	.word	0x40013c00

080053a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	460b      	mov	r3, r1
 80053b2:	807b      	strh	r3, [r7, #2]
 80053b4:	4613      	mov	r3, r2
 80053b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053b8:	787b      	ldrb	r3, [r7, #1]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053be:	887a      	ldrh	r2, [r7, #2]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053c4:	e003      	b.n	80053ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053c6:	887b      	ldrh	r3, [r7, #2]
 80053c8:	041a      	lsls	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	619a      	str	r2, [r3, #24]
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e267      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d075      	beq.n	80054e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053fa:	4b88      	ldr	r3, [pc, #544]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b04      	cmp	r3, #4
 8005404:	d00c      	beq.n	8005420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005406:	4b85      	ldr	r3, [pc, #532]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800540e:	2b08      	cmp	r3, #8
 8005410:	d112      	bne.n	8005438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005412:	4b82      	ldr	r3, [pc, #520]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541e:	d10b      	bne.n	8005438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005420:	4b7e      	ldr	r3, [pc, #504]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d05b      	beq.n	80054e4 <HAL_RCC_OscConfig+0x108>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d157      	bne.n	80054e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e242      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d106      	bne.n	8005450 <HAL_RCC_OscConfig+0x74>
 8005442:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a75      	ldr	r2, [pc, #468]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e01d      	b.n	800548c <HAL_RCC_OscConfig+0xb0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005458:	d10c      	bne.n	8005474 <HAL_RCC_OscConfig+0x98>
 800545a:	4b70      	ldr	r3, [pc, #448]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a6f      	ldr	r2, [pc, #444]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4b6d      	ldr	r3, [pc, #436]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a6c      	ldr	r2, [pc, #432]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800546c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e00b      	b.n	800548c <HAL_RCC_OscConfig+0xb0>
 8005474:	4b69      	ldr	r3, [pc, #420]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a68      	ldr	r2, [pc, #416]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800547a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b66      	ldr	r3, [pc, #408]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a65      	ldr	r2, [pc, #404]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d013      	beq.n	80054bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fe fb98 	bl	8003bc8 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800549c:	f7fe fb94 	bl	8003bc8 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e207      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b5b      	ldr	r3, [pc, #364]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0xc0>
 80054ba:	e014      	b.n	80054e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fe fb84 	bl	8003bc8 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c4:	f7fe fb80 	bl	8003bc8 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b64      	cmp	r3, #100	; 0x64
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e1f3      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	4b51      	ldr	r3, [pc, #324]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0xe8>
 80054e2:	e000      	b.n	80054e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d063      	beq.n	80055ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054f2:	4b4a      	ldr	r3, [pc, #296]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005506:	2b08      	cmp	r3, #8
 8005508:	d11c      	bne.n	8005544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550a:	4b44      	ldr	r3, [pc, #272]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d116      	bne.n	8005544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005516:	4b41      	ldr	r3, [pc, #260]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_RCC_OscConfig+0x152>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d001      	beq.n	800552e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e1c7      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552e:	4b3b      	ldr	r3, [pc, #236]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4937      	ldr	r1, [pc, #220]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005542:	e03a      	b.n	80055ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554c:	4b34      	ldr	r3, [pc, #208]	; (8005620 <HAL_RCC_OscConfig+0x244>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fe fb39 	bl	8003bc8 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555a:	f7fe fb35 	bl	8003bc8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e1a8      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005578:	4b28      	ldr	r3, [pc, #160]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4925      	ldr	r1, [pc, #148]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005588:	4313      	orrs	r3, r2
 800558a:	600b      	str	r3, [r1, #0]
 800558c:	e015      	b.n	80055ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <HAL_RCC_OscConfig+0x244>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fe fb18 	bl	8003bc8 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800559c:	f7fe fb14 	bl	8003bc8 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e187      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	4b1b      	ldr	r3, [pc, #108]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d036      	beq.n	8005634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ce:	4b15      	ldr	r3, [pc, #84]	; (8005624 <HAL_RCC_OscConfig+0x248>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d4:	f7fe faf8 	bl	8003bc8 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055dc:	f7fe faf4 	bl	8003bc8 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e167      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80055f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x200>
 80055fa:	e01b      	b.n	8005634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <HAL_RCC_OscConfig+0x248>)
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005602:	f7fe fae1 	bl	8003bc8 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005608:	e00e      	b.n	8005628 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800560a:	f7fe fadd 	bl	8003bc8 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d907      	bls.n	8005628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e150      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
 800561c:	40023800 	.word	0x40023800
 8005620:	42470000 	.word	0x42470000
 8005624:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005628:	4b88      	ldr	r3, [pc, #544]	; (800584c <HAL_RCC_OscConfig+0x470>)
 800562a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ea      	bne.n	800560a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8097 	beq.w	8005770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005642:	2300      	movs	r3, #0
 8005644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005646:	4b81      	ldr	r3, [pc, #516]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10f      	bne.n	8005672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	4b7d      	ldr	r3, [pc, #500]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	4a7c      	ldr	r2, [pc, #496]	; (800584c <HAL_RCC_OscConfig+0x470>)
 800565c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005660:	6413      	str	r3, [r2, #64]	; 0x40
 8005662:	4b7a      	ldr	r3, [pc, #488]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566e:	2301      	movs	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005672:	4b77      	ldr	r3, [pc, #476]	; (8005850 <HAL_RCC_OscConfig+0x474>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	2b00      	cmp	r3, #0
 800567c:	d118      	bne.n	80056b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567e:	4b74      	ldr	r3, [pc, #464]	; (8005850 <HAL_RCC_OscConfig+0x474>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a73      	ldr	r2, [pc, #460]	; (8005850 <HAL_RCC_OscConfig+0x474>)
 8005684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568a:	f7fe fa9d 	bl	8003bc8 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005692:	f7fe fa99 	bl	8003bc8 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e10c      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <HAL_RCC_OscConfig+0x474>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d106      	bne.n	80056c6 <HAL_RCC_OscConfig+0x2ea>
 80056b8:	4b64      	ldr	r3, [pc, #400]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	4a63      	ldr	r2, [pc, #396]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6713      	str	r3, [r2, #112]	; 0x70
 80056c4:	e01c      	b.n	8005700 <HAL_RCC_OscConfig+0x324>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b05      	cmp	r3, #5
 80056cc:	d10c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x30c>
 80056ce:	4b5f      	ldr	r3, [pc, #380]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a5e      	ldr	r2, [pc, #376]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056d4:	f043 0304 	orr.w	r3, r3, #4
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70
 80056da:	4b5c      	ldr	r3, [pc, #368]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	4a5b      	ldr	r2, [pc, #364]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	6713      	str	r3, [r2, #112]	; 0x70
 80056e6:	e00b      	b.n	8005700 <HAL_RCC_OscConfig+0x324>
 80056e8:	4b58      	ldr	r3, [pc, #352]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	4a57      	ldr	r2, [pc, #348]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	6713      	str	r3, [r2, #112]	; 0x70
 80056f4:	4b55      	ldr	r3, [pc, #340]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	4a54      	ldr	r2, [pc, #336]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056fa:	f023 0304 	bic.w	r3, r3, #4
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d015      	beq.n	8005734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fe fa5e 	bl	8003bc8 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570e:	e00a      	b.n	8005726 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005710:	f7fe fa5a 	bl	8003bc8 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f241 3288 	movw	r2, #5000	; 0x1388
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e0cb      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005726:	4b49      	ldr	r3, [pc, #292]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ee      	beq.n	8005710 <HAL_RCC_OscConfig+0x334>
 8005732:	e014      	b.n	800575e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005734:	f7fe fa48 	bl	8003bc8 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800573a:	e00a      	b.n	8005752 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800573c:	f7fe fa44 	bl	8003bc8 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	; 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e0b5      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005752:	4b3e      	ldr	r3, [pc, #248]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1ee      	bne.n	800573c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d105      	bne.n	8005770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005764:	4b39      	ldr	r3, [pc, #228]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	4a38      	ldr	r2, [pc, #224]	; (800584c <HAL_RCC_OscConfig+0x470>)
 800576a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80a1 	beq.w	80058bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800577a:	4b34      	ldr	r3, [pc, #208]	; (800584c <HAL_RCC_OscConfig+0x470>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 030c 	and.w	r3, r3, #12
 8005782:	2b08      	cmp	r3, #8
 8005784:	d05c      	beq.n	8005840 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d141      	bne.n	8005812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_RCC_OscConfig+0x478>)
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fe fa18 	bl	8003bc8 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800579c:	f7fe fa14 	bl	8003bc8 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e087      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ae:	4b27      	ldr	r3, [pc, #156]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	019b      	lsls	r3, r3, #6
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	3b01      	subs	r3, #1
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	491b      	ldr	r1, [pc, #108]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e4:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <HAL_RCC_OscConfig+0x478>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ea:	f7fe f9ed 	bl	8003bc8 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f2:	f7fe f9e9 	bl	8003bc8 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e05c      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x416>
 8005810:	e054      	b.n	80058bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_RCC_OscConfig+0x478>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fe f9d6 	bl	8003bc8 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fe f9d2 	bl	8003bc8 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e045      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x444>
 800583e:	e03d      	b.n	80058bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e038      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
 800584c:	40023800 	.word	0x40023800
 8005850:	40007000 	.word	0x40007000
 8005854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005858:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <HAL_RCC_OscConfig+0x4ec>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d028      	beq.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d121      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d11a      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005888:	4013      	ands	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800588e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005890:	4293      	cmp	r3, r2
 8005892:	d111      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	3b01      	subs	r3, #1
 80058a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800

080058cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0cc      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e0:	4b68      	ldr	r3, [pc, #416]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d90c      	bls.n	8005908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ee:	4b65      	ldr	r3, [pc, #404]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b63      	ldr	r3, [pc, #396]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0307 	and.w	r3, r3, #7
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0b8      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d020      	beq.n	8005956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005920:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800592a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005938:	4b53      	ldr	r3, [pc, #332]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a52      	ldr	r2, [pc, #328]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	4b50      	ldr	r3, [pc, #320]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	494d      	ldr	r1, [pc, #308]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d044      	beq.n	80059ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	4b47      	ldr	r3, [pc, #284]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d119      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e07f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d003      	beq.n	800598a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005986:	2b03      	cmp	r3, #3
 8005988:	d107      	bne.n	800599a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598a:	4b3f      	ldr	r3, [pc, #252]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e06f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599a:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e067      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059aa:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0203 	bic.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4934      	ldr	r1, [pc, #208]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059bc:	f7fe f904 	bl	8003bc8 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	e00a      	b.n	80059da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c4:	f7fe f900 	bl	8003bc8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e04f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059da:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 020c 	and.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d1eb      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d20c      	bcs.n	8005a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e032      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4916      	ldr	r1, [pc, #88]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	490e      	ldr	r1, [pc, #56]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a52:	f000 f821 	bl	8005a98 <HAL_RCC_GetSysClockFreq>
 8005a56:	4602      	mov	r2, r0
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	490a      	ldr	r1, [pc, #40]	; (8005a8c <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	5ccb      	ldrb	r3, [r1, r3]
 8005a66:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6a:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_RCC_ClockConfig+0x1c8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fe f864 	bl	8003b40 <HAL_InitTick>

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40023c00 	.word	0x40023c00
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	0800fbe0 	.word	0x0800fbe0
 8005a90:	20000008 	.word	0x20000008
 8005a94:	2000000c 	.word	0x2000000c

08005a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a9c:	b094      	sub	sp, #80	; 0x50
 8005a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab0:	4b79      	ldr	r3, [pc, #484]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 030c 	and.w	r3, r3, #12
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d00d      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	f200 80e1 	bhi.w	8005c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x34>
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aca:	e0db      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005acc:	4b73      	ldr	r3, [pc, #460]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8005ace:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ad0:	e0db      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ad2:	4b73      	ldr	r3, [pc, #460]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ad6:	e0d8      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ad8:	4b6f      	ldr	r3, [pc, #444]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ae2:	4b6d      	ldr	r3, [pc, #436]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d063      	beq.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aee:	4b6a      	ldr	r3, [pc, #424]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	099b      	lsrs	r3, r3, #6
 8005af4:	2200      	movs	r2, #0
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
 8005b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	f04f 0000 	mov.w	r0, #0
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	0159      	lsls	r1, r3, #5
 8005b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b1c:	0150      	lsls	r0, r2, #5
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4621      	mov	r1, r4
 8005b24:	1a51      	subs	r1, r2, r1
 8005b26:	6139      	str	r1, [r7, #16]
 8005b28:	4629      	mov	r1, r5
 8005b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	018b      	lsls	r3, r1, #6
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b46:	4651      	mov	r1, sl
 8005b48:	018a      	lsls	r2, r1, #6
 8005b4a:	4651      	mov	r1, sl
 8005b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b50:	4659      	mov	r1, fp
 8005b52:	eb63 0901 	sbc.w	r9, r3, r1
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	4623      	mov	r3, r4
 8005b70:	eb18 0303 	adds.w	r3, r8, r3
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	462b      	mov	r3, r5
 8005b78:	eb49 0303 	adc.w	r3, r9, r3
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	024b      	lsls	r3, r1, #9
 8005b8e:	4621      	mov	r1, r4
 8005b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b94:	4621      	mov	r1, r4
 8005b96:	024a      	lsls	r2, r1, #9
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ba8:	f7fb f86e 	bl	8000c88 <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb4:	e058      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb6:	4b38      	ldr	r3, [pc, #224]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
 8005bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	0159      	lsls	r1, r3, #5
 8005bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005be2:	0150      	lsls	r0, r2, #5
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4641      	mov	r1, r8
 8005bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bee:	4649      	mov	r1, r9
 8005bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c08:	ebb2 040a 	subs.w	r4, r2, sl
 8005c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	00eb      	lsls	r3, r5, #3
 8005c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c1e:	00e2      	lsls	r2, r4, #3
 8005c20:	4614      	mov	r4, r2
 8005c22:	461d      	mov	r5, r3
 8005c24:	4643      	mov	r3, r8
 8005c26:	18e3      	adds	r3, r4, r3
 8005c28:	603b      	str	r3, [r7, #0]
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	eb45 0303 	adc.w	r3, r5, r3
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c3e:	4629      	mov	r1, r5
 8005c40:	028b      	lsls	r3, r1, #10
 8005c42:	4621      	mov	r1, r4
 8005c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c48:	4621      	mov	r1, r4
 8005c4a:	028a      	lsls	r2, r1, #10
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c52:	2200      	movs	r2, #0
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	61fa      	str	r2, [r7, #28]
 8005c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c5c:	f7fb f814 	bl	8000c88 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4613      	mov	r3, r2
 8005c66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	0c1b      	lsrs	r3, r3, #16
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	3301      	adds	r3, #1
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c82:	e002      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3750      	adds	r7, #80	; 0x50
 8005c90:	46bd      	mov	sp, r7
 8005c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	00f42400 	.word	0x00f42400
 8005ca0:	007a1200 	.word	0x007a1200

08005ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005caa:	681b      	ldr	r3, [r3, #0]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	20000008 	.word	0x20000008

08005cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cc0:	f7ff fff0 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	0a9b      	lsrs	r3, r3, #10
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	4903      	ldr	r1, [pc, #12]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd2:	5ccb      	ldrb	r3, [r1, r3]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	0800fbf0 	.word	0x0800fbf0

08005ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ce8:	f7ff ffdc 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 8005cec:	4602      	mov	r2, r0
 8005cee:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	0b5b      	lsrs	r3, r3, #13
 8005cf4:	f003 0307 	and.w	r3, r3, #7
 8005cf8:	4903      	ldr	r1, [pc, #12]	; (8005d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cfa:	5ccb      	ldrb	r3, [r1, r3]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	40023800 	.word	0x40023800
 8005d08:	0800fbf0 	.word	0x0800fbf0

08005d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07b      	b.n	8005e16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d108      	bne.n	8005d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2e:	d009      	beq.n	8005d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	61da      	str	r2, [r3, #28]
 8005d36:	e005      	b.n	8005d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fd fbf8 	bl	8003554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	ea42 0103 	orr.w	r1, r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	f003 0104 	and.w	r1, r3, #4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	f003 0210 	and.w	r2, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b088      	sub	sp, #32
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_SPI_Transmit+0x22>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e12d      	b.n	800609c <HAL_SPI_Transmit+0x27e>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e48:	f7fd febe 	bl	8003bc8 <HAL_GetTick>
 8005e4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d002      	beq.n	8005e64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e62:	e116      	b.n	8006092 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_SPI_Transmit+0x52>
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e74:	e10d      	b.n	8006092 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	88fa      	ldrh	r2, [r7, #6]
 8005e8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ebc:	d10f      	bne.n	8005ede <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ecc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005edc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d007      	beq.n	8005efc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f04:	d14f      	bne.n	8005fa6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_SPI_Transmit+0xf6>
 8005f0e:	8afb      	ldrh	r3, [r7, #22]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d142      	bne.n	8005f9a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	1c9a      	adds	r2, r3, #2
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	3b01      	subs	r3, #1
 8005f32:	b29a      	uxth	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f38:	e02f      	b.n	8005f9a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d112      	bne.n	8005f6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	1c9a      	adds	r2, r3, #2
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f6c:	e015      	b.n	8005f9a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6e:	f7fd fe2b 	bl	8003bc8 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d803      	bhi.n	8005f86 <HAL_SPI_Transmit+0x168>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d102      	bne.n	8005f8c <HAL_SPI_Transmit+0x16e>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d106      	bne.n	8005f9a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005f98:	e07b      	b.n	8006092 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1ca      	bne.n	8005f3a <HAL_SPI_Transmit+0x11c>
 8005fa4:	e050      	b.n	8006048 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d002      	beq.n	8005fb4 <HAL_SPI_Transmit+0x196>
 8005fae:	8afb      	ldrh	r3, [r7, #22]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d144      	bne.n	800603e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fda:	e030      	b.n	800603e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d113      	bne.n	8006012 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	7812      	ldrb	r2, [r2, #0]
 8005ff6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006006:	b29b      	uxth	r3, r3
 8006008:	3b01      	subs	r3, #1
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006010:	e015      	b.n	800603e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006012:	f7fd fdd9 	bl	8003bc8 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d803      	bhi.n	800602a <HAL_SPI_Transmit+0x20c>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d102      	bne.n	8006030 <HAL_SPI_Transmit+0x212>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800603c:	e029      	b.n	8006092 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1c9      	bne.n	8005fdc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fa61 	bl	8006514 <SPI_EndRxTxTransaction>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006066:	2300      	movs	r3, #0
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	613b      	str	r3, [r7, #16]
 800607a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	77fb      	strb	r3, [r7, #31]
 8006088:	e003      	b.n	8006092 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800609a:	7ffb      	ldrb	r3, [r7, #31]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08c      	sub	sp, #48	; 0x30
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060b2:	2301      	movs	r3, #1
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_SPI_TransmitReceive+0x26>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e198      	b.n	80063fc <HAL_SPI_TransmitReceive+0x358>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060d2:	f7fd fd79 	bl	8003bc8 <HAL_GetTick>
 80060d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80060e8:	887b      	ldrh	r3, [r7, #2]
 80060ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d00f      	beq.n	8006114 <HAL_SPI_TransmitReceive+0x70>
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060fa:	d107      	bne.n	800610c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <HAL_SPI_TransmitReceive+0x68>
 8006104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006108:	2b04      	cmp	r3, #4
 800610a:	d003      	beq.n	8006114 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800610c:	2302      	movs	r3, #2
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006112:	e16d      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_SPI_TransmitReceive+0x82>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <HAL_SPI_TransmitReceive+0x82>
 8006120:	887b      	ldrh	r3, [r7, #2]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d103      	bne.n	800612e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800612c:	e160      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b04      	cmp	r3, #4
 8006138:	d003      	beq.n	8006142 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2205      	movs	r2, #5
 800613e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	887a      	ldrh	r2, [r7, #2]
 8006152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	887a      	ldrh	r2, [r7, #2]
 8006158:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	887a      	ldrh	r2, [r7, #2]
 8006164:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	887a      	ldrh	r2, [r7, #2]
 800616a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006182:	2b40      	cmp	r3, #64	; 0x40
 8006184:	d007      	beq.n	8006196 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006194:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800619e:	d17c      	bne.n	800629a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_SPI_TransmitReceive+0x10a>
 80061a8:	8b7b      	ldrh	r3, [r7, #26]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d16a      	bne.n	8006284 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	881a      	ldrh	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	1c9a      	adds	r2, r3, #2
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d2:	e057      	b.n	8006284 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d11b      	bne.n	800621a <HAL_SPI_TransmitReceive+0x176>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d016      	beq.n	800621a <HAL_SPI_TransmitReceive+0x176>
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d113      	bne.n	800621a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	881a      	ldrh	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620c:	b29b      	uxth	r3, r3
 800620e:	3b01      	subs	r3, #1
 8006210:	b29a      	uxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b01      	cmp	r3, #1
 8006226:	d119      	bne.n	800625c <HAL_SPI_TransmitReceive+0x1b8>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d014      	beq.n	800625c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68da      	ldr	r2, [r3, #12]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623c:	b292      	uxth	r2, r2
 800623e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006258:	2301      	movs	r3, #1
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800625c:	f7fd fcb4 	bl	8003bc8 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006268:	429a      	cmp	r2, r3
 800626a:	d80b      	bhi.n	8006284 <HAL_SPI_TransmitReceive+0x1e0>
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006272:	d007      	beq.n	8006284 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006282:	e0b5      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1a2      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x130>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d19d      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x130>
 8006298:	e080      	b.n	800639c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x204>
 80062a2:	8b7b      	ldrh	r3, [r7, #26]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d16f      	bne.n	8006388 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	7812      	ldrb	r2, [r2, #0]
 80062b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ce:	e05b      	b.n	8006388 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d11c      	bne.n	8006318 <HAL_SPI_TransmitReceive+0x274>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d017      	beq.n	8006318 <HAL_SPI_TransmitReceive+0x274>
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d114      	bne.n	8006318 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	7812      	ldrb	r2, [r2, #0]
 80062fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b01      	cmp	r3, #1
 8006324:	d119      	bne.n	800635a <HAL_SPI_TransmitReceive+0x2b6>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d014      	beq.n	800635a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634c:	b29b      	uxth	r3, r3
 800634e:	3b01      	subs	r3, #1
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006356:	2301      	movs	r3, #1
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800635a:	f7fd fc35 	bl	8003bc8 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006366:	429a      	cmp	r2, r3
 8006368:	d803      	bhi.n	8006372 <HAL_SPI_TransmitReceive+0x2ce>
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d102      	bne.n	8006378 <HAL_SPI_TransmitReceive+0x2d4>
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	2b00      	cmp	r3, #0
 8006376:	d107      	bne.n	8006388 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006386:	e033      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d19e      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x22c>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d199      	bne.n	80062d0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f8b7 	bl	8006514 <SPI_EndRxTxTransaction>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2220      	movs	r2, #32
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80063b8:	e01a      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e6:	e003      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3730      	adds	r7, #48	; 0x30
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	603b      	str	r3, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006414:	f7fd fbd8 	bl	8003bc8 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	4413      	add	r3, r2
 8006422:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006424:	f7fd fbd0 	bl	8003bc8 <HAL_GetTick>
 8006428:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800642a:	4b39      	ldr	r3, [pc, #228]	; (8006510 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	015b      	lsls	r3, r3, #5
 8006430:	0d1b      	lsrs	r3, r3, #20
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	fb02 f303 	mul.w	r3, r2, r3
 8006438:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800643a:	e054      	b.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006442:	d050      	beq.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006444:	f7fd fbc0 	bl	8003bc8 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	429a      	cmp	r2, r3
 8006452:	d902      	bls.n	800645a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d13d      	bne.n	80064d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006468:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006472:	d111      	bne.n	8006498 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647c:	d004      	beq.n	8006488 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006486:	d107      	bne.n	8006498 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006496:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a0:	d10f      	bne.n	80064c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e017      	b.n	8006506 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4013      	ands	r3, r2
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	bf0c      	ite	eq
 80064f6:	2301      	moveq	r3, #1
 80064f8:	2300      	movne	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	79fb      	ldrb	r3, [r7, #7]
 8006500:	429a      	cmp	r2, r3
 8006502:	d19b      	bne.n	800643c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000008 	.word	0x20000008

08006514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af02      	add	r7, sp, #8
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2201      	movs	r2, #1
 8006528:	2102      	movs	r1, #2
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7ff ff6a 	bl	8006404 <SPI_WaitFlagStateUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	f043 0220 	orr.w	r2, r3, #32
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e032      	b.n	80065ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <SPI_EndRxTxTransaction+0xa0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <SPI_EndRxTxTransaction+0xa4>)
 800654c:	fba2 2303 	umull	r2, r3, r2, r3
 8006550:	0d5b      	lsrs	r3, r3, #21
 8006552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006556:	fb02 f303 	mul.w	r3, r2, r3
 800655a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006564:	d112      	bne.n	800658c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2200      	movs	r2, #0
 800656e:	2180      	movs	r1, #128	; 0x80
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff ff47 	bl	8006404 <SPI_WaitFlagStateUntilTimeout>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d016      	beq.n	80065aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e00f      	b.n	80065ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	3b01      	subs	r3, #1
 8006596:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a2:	2b80      	cmp	r3, #128	; 0x80
 80065a4:	d0f2      	beq.n	800658c <SPI_EndRxTxTransaction+0x78>
 80065a6:	e000      	b.n	80065aa <SPI_EndRxTxTransaction+0x96>
        break;
 80065a8:	bf00      	nop
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	20000008 	.word	0x20000008
 80065b8:	165e9f81 	.word	0x165e9f81

080065bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e041      	b.n	8006652 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fc fffe 	bl	80035e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f000 fa7e 	bl	8006afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d001      	beq.n	8006674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e04e      	b.n	8006712 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a23      	ldr	r2, [pc, #140]	; (8006720 <HAL_TIM_Base_Start_IT+0xc4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d022      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800669e:	d01d      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1f      	ldr	r2, [pc, #124]	; (8006724 <HAL_TIM_Base_Start_IT+0xc8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d018      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <HAL_TIM_Base_Start_IT+0xcc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d013      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a1c      	ldr	r2, [pc, #112]	; (800672c <HAL_TIM_Base_Start_IT+0xd0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00e      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <HAL_TIM_Base_Start_IT+0xd4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a19      	ldr	r2, [pc, #100]	; (8006734 <HAL_TIM_Base_Start_IT+0xd8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_TIM_Base_Start_IT+0x80>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a18      	ldr	r2, [pc, #96]	; (8006738 <HAL_TIM_Base_Start_IT+0xdc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d111      	bne.n	8006700 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b06      	cmp	r3, #6
 80066ec:	d010      	beq.n	8006710 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fe:	e007      	b.n	8006710 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40010000 	.word	0x40010000
 8006724:	40000400 	.word	0x40000400
 8006728:	40000800 	.word	0x40000800
 800672c:	40000c00 	.word	0x40000c00
 8006730:	40010400 	.word	0x40010400
 8006734:	40014000 	.word	0x40014000
 8006738:	40001800 	.word	0x40001800

0800673c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d020      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01b      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0202 	mvn.w	r2, #2
 8006770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f999 	bl	8006abe <HAL_TIM_IC_CaptureCallback>
 800678c:	e005      	b.n	800679a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f98b 	bl	8006aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f99c 	bl	8006ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d020      	beq.n	80067ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01b      	beq.n	80067ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0204 	mvn.w	r2, #4
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f973 	bl	8006abe <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f965 	bl	8006aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f976 	bl	8006ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d020      	beq.n	8006838 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01b      	beq.n	8006838 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0208 	mvn.w	r2, #8
 8006808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2204      	movs	r2, #4
 800680e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f94d 	bl	8006abe <HAL_TIM_IC_CaptureCallback>
 8006824:	e005      	b.n	8006832 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f93f 	bl	8006aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f950 	bl	8006ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	d020      	beq.n	8006884 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01b      	beq.n	8006884 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0210 	mvn.w	r2, #16
 8006854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2208      	movs	r2, #8
 800685a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f927 	bl	8006abe <HAL_TIM_IC_CaptureCallback>
 8006870:	e005      	b.n	800687e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f919 	bl	8006aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f92a 	bl	8006ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00c      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0201 	mvn.w	r2, #1
 80068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fc fcfe 	bl	80032a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fae4 	bl	8006e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00c      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f8fb 	bl	8006ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00c      	beq.n	8006914 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	d007      	beq.n	8006914 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0220 	mvn.w	r2, #32
 800690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fab6 	bl	8006e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006914:	bf00      	nop
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0x1c>
 8006934:	2302      	movs	r3, #2
 8006936:	e0b4      	b.n	8006aa2 <HAL_TIM_ConfigClockSource+0x186>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006970:	d03e      	beq.n	80069f0 <HAL_TIM_ConfigClockSource+0xd4>
 8006972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006976:	f200 8087 	bhi.w	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	f000 8086 	beq.w	8006a8e <HAL_TIM_ConfigClockSource+0x172>
 8006982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006986:	d87f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006988:	2b70      	cmp	r3, #112	; 0x70
 800698a:	d01a      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0xa6>
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d87b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006990:	2b60      	cmp	r3, #96	; 0x60
 8006992:	d050      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0x11a>
 8006994:	2b60      	cmp	r3, #96	; 0x60
 8006996:	d877      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 8006998:	2b50      	cmp	r3, #80	; 0x50
 800699a:	d03c      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0xfa>
 800699c:	2b50      	cmp	r3, #80	; 0x50
 800699e:	d873      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d058      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x13a>
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d86f      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069a8:	2b30      	cmp	r3, #48	; 0x30
 80069aa:	d064      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069ac:	2b30      	cmp	r3, #48	; 0x30
 80069ae:	d86b      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	d060      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d867      	bhi.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d05c      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d05a      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x15a>
 80069c0:	e062      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069d2:	f000 f9b9 	bl	8006d48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	609a      	str	r2, [r3, #8]
      break;
 80069ee:	e04f      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a00:	f000 f9a2 	bl	8006d48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689a      	ldr	r2, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a12:	609a      	str	r2, [r3, #8]
      break;
 8006a14:	e03c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a22:	461a      	mov	r2, r3
 8006a24:	f000 f916 	bl	8006c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2150      	movs	r1, #80	; 0x50
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f96f 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 8006a34:	e02c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a42:	461a      	mov	r2, r3
 8006a44:	f000 f935 	bl	8006cb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2160      	movs	r1, #96	; 0x60
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 f95f 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 8006a54:	e01c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a62:	461a      	mov	r2, r3
 8006a64:	f000 f8f6 	bl	8006c54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2140      	movs	r1, #64	; 0x40
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 f94f 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 8006a74:	e00c      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f000 f946 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 8006a86:	e003      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8c:	e000      	b.n	8006a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a46      	ldr	r2, [pc, #280]	; (8006c28 <TIM_Base_SetConfig+0x12c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d013      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1a:	d00f      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a43      	ldr	r2, [pc, #268]	; (8006c2c <TIM_Base_SetConfig+0x130>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00b      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a42      	ldr	r2, [pc, #264]	; (8006c30 <TIM_Base_SetConfig+0x134>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d007      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a41      	ldr	r2, [pc, #260]	; (8006c34 <TIM_Base_SetConfig+0x138>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d003      	beq.n	8006b3c <TIM_Base_SetConfig+0x40>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a40      	ldr	r2, [pc, #256]	; (8006c38 <TIM_Base_SetConfig+0x13c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d108      	bne.n	8006b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a35      	ldr	r2, [pc, #212]	; (8006c28 <TIM_Base_SetConfig+0x12c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d02b      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5c:	d027      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a32      	ldr	r2, [pc, #200]	; (8006c2c <TIM_Base_SetConfig+0x130>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d023      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a31      	ldr	r2, [pc, #196]	; (8006c30 <TIM_Base_SetConfig+0x134>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d01f      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a30      	ldr	r2, [pc, #192]	; (8006c34 <TIM_Base_SetConfig+0x138>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d01b      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2f      	ldr	r2, [pc, #188]	; (8006c38 <TIM_Base_SetConfig+0x13c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d017      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a2e      	ldr	r2, [pc, #184]	; (8006c3c <TIM_Base_SetConfig+0x140>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2d      	ldr	r2, [pc, #180]	; (8006c40 <TIM_Base_SetConfig+0x144>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00f      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a2c      	ldr	r2, [pc, #176]	; (8006c44 <TIM_Base_SetConfig+0x148>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00b      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a2b      	ldr	r2, [pc, #172]	; (8006c48 <TIM_Base_SetConfig+0x14c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d007      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <TIM_Base_SetConfig+0x150>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d003      	beq.n	8006bae <TIM_Base_SetConfig+0xb2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a29      	ldr	r2, [pc, #164]	; (8006c50 <TIM_Base_SetConfig+0x154>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d108      	bne.n	8006bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a10      	ldr	r2, [pc, #64]	; (8006c28 <TIM_Base_SetConfig+0x12c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_Base_SetConfig+0xf8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a12      	ldr	r2, [pc, #72]	; (8006c38 <TIM_Base_SetConfig+0x13c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d103      	bne.n	8006bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d105      	bne.n	8006c1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f023 0201 	bic.w	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	611a      	str	r2, [r3, #16]
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800
 8006c48:	40001800 	.word	0x40001800
 8006c4c:	40001c00 	.word	0x40001c00
 8006c50:	40002000 	.word	0x40002000

08006c54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0201 	bic.w	r2, r3, #1
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 030a 	bic.w	r3, r3, #10
 8006c90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	f023 0210 	bic.w	r2, r3, #16
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	031b      	lsls	r3, r3, #12
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f043 0307 	orr.w	r3, r3, #7
 8006d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	021a      	lsls	r2, r3, #8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	609a      	str	r2, [r3, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e05a      	b.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a21      	ldr	r2, [pc, #132]	; (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dec:	d01d      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1d      	ldr	r2, [pc, #116]	; (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	; (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1a      	ldr	r2, [pc, #104]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a15      	ldr	r2, [pc, #84]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10c      	bne.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40010400 	.word	0x40010400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40001800 	.word	0x40001800

08006e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e042      	b.n	8006f40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fc fbce 	bl	8003670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2224      	movs	r2, #36	; 0x24
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fdbd 	bl	8007a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08a      	sub	sp, #40	; 0x28
 8006f4c:	af02      	add	r7, sp, #8
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	4613      	mov	r3, r2
 8006f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d175      	bne.n	8007054 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Transmit+0x2c>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e06e      	b.n	8007056 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2221      	movs	r2, #33	; 0x21
 8006f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f86:	f7fc fe1f 	bl	8003bc8 <HAL_GetTick>
 8006f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	88fa      	ldrh	r2, [r7, #6]
 8006f96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa0:	d108      	bne.n	8006fb4 <HAL_UART_Transmit+0x6c>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	61bb      	str	r3, [r7, #24]
 8006fb2:	e003      	b.n	8006fbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fbc:	e02e      	b.n	800701c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2180      	movs	r1, #128	; 0x80
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 fb1f 	bl	800760c <UART_WaitOnFlagUntilTimeout>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e03a      	b.n	8007056 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10b      	bne.n	8006ffe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	881b      	ldrh	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	e007      	b.n	800700e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	3301      	adds	r3, #1
 800700c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1cb      	bne.n	8006fbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2200      	movs	r2, #0
 800702e:	2140      	movs	r1, #64	; 0x40
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 faeb 	bl	800760c <UART_WaitOnFlagUntilTimeout>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d005      	beq.n	8007048 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e006      	b.n	8007056 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	e000      	b.n	8007056 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007054:	2302      	movs	r3, #2
  }
}
 8007056:	4618      	mov	r0, r3
 8007058:	3720      	adds	r7, #32
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	4613      	mov	r3, r2
 800706a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b20      	cmp	r3, #32
 8007076:	d112      	bne.n	800709e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_UART_Receive_IT+0x26>
 800707e:	88fb      	ldrh	r3, [r7, #6]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e00b      	b.n	80070a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	461a      	mov	r2, r3
 8007092:	68b9      	ldr	r1, [r7, #8]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fb12 	bl	80076be <UART_Start_Receive_IT>
 800709a:	4603      	mov	r3, r0
 800709c:	e000      	b.n	80070a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800709e:	2302      	movs	r3, #2
  }
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b0ba      	sub	sp, #232	; 0xe8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80070e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10f      	bne.n	800710e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <HAL_UART_IRQHandler+0x66>
 80070fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fbf2 	bl	80078f0 <UART_Receive_IT>
      return;
 800710c:	e25b      	b.n	80075c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800710e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 80de 	beq.w	80072d4 <HAL_UART_IRQHandler+0x22c>
 8007118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d106      	bne.n	8007132 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007128:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 80d1 	beq.w	80072d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <HAL_UART_IRQHandler+0xae>
 800713e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <HAL_UART_IRQHandler+0xd2>
 8007162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	f043 0202 	orr.w	r2, r3, #2
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <HAL_UART_IRQHandler+0xf6>
 8007186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007196:	f043 0204 	orr.w	r2, r3, #4
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d011      	beq.n	80071ce <HAL_UART_IRQHandler+0x126>
 80071aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d105      	bne.n	80071c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c6:	f043 0208 	orr.w	r2, r3, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 81f2 	beq.w	80075bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_UART_IRQHandler+0x14e>
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e8:	f003 0320 	and.w	r3, r3, #32
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fb7d 	bl	80078f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b40      	cmp	r3, #64	; 0x40
 8007202:	bf0c      	ite	eq
 8007204:	2301      	moveq	r3, #1
 8007206:	2300      	movne	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <HAL_UART_IRQHandler+0x17a>
 800721a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d04f      	beq.n	80072c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa85 	bl	8007732 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	d141      	bne.n	80072ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3314      	adds	r3, #20
 800723c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800724c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3314      	adds	r3, #20
 800725e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007262:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800726e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800727a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1d9      	bne.n	8007236 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d013      	beq.n	80072b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728e:	4a7e      	ldr	r2, [pc, #504]	; (8007488 <HAL_UART_IRQHandler+0x3e0>)
 8007290:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	4618      	mov	r0, r3
 8007298:	f7fd fc5e 	bl	8004b58 <HAL_DMA_Abort_IT>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d016      	beq.n	80072d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b0:	e00e      	b.n	80072d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f994 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b8:	e00a      	b.n	80072d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f990 	bl	80075e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c0:	e006      	b.n	80072d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f98c 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80072ce:	e175      	b.n	80075bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d0:	bf00      	nop
    return;
 80072d2:	e173      	b.n	80075bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	2b01      	cmp	r3, #1
 80072da:	f040 814f 	bne.w	800757c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e2:	f003 0310 	and.w	r3, r3, #16
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 8148 	beq.w	800757c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 8141 	beq.w	800757c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072fa:	2300      	movs	r3, #0
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60bb      	str	r3, [r7, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	60bb      	str	r3, [r7, #8]
 800730e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	f040 80b6 	bne.w	800748c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800732c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8145 	beq.w	80075c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800733a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800733e:	429a      	cmp	r2, r3
 8007340:	f080 813e 	bcs.w	80075c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800734a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007356:	f000 8088 	beq.w	800746a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	330c      	adds	r3, #12
 8007360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	330c      	adds	r3, #12
 8007382:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800738a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007392:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800739e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1d9      	bne.n	800735a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3314      	adds	r3, #20
 80073ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073b8:	f023 0301 	bic.w	r3, r3, #1
 80073bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3314      	adds	r3, #20
 80073c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1e1      	bne.n	80073a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3314      	adds	r3, #20
 80073e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3314      	adds	r3, #20
 8007402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800740c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e3      	bne.n	80073e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	330c      	adds	r3, #12
 800742e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743a:	f023 0310 	bic.w	r3, r3, #16
 800743e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	330c      	adds	r3, #12
 8007448:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800744c:	65ba      	str	r2, [r7, #88]	; 0x58
 800744e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800745a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e3      	bne.n	8007428 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	4618      	mov	r0, r3
 8007466:	f7fd fb07 	bl	8004a78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2202      	movs	r2, #2
 800746e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007478:	b29b      	uxth	r3, r3
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	b29b      	uxth	r3, r3
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f8b7 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007486:	e09b      	b.n	80075c0 <HAL_UART_IRQHandler+0x518>
 8007488:	080077f9 	.word	0x080077f9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007494:	b29b      	uxth	r3, r3
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 808e 	beq.w	80075c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8089 	beq.w	80075c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	330c      	adds	r3, #12
 80074b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	e853 3f00 	ldrex	r3, [r3]
 80074c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80074d6:	647a      	str	r2, [r7, #68]	; 0x44
 80074d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1e3      	bne.n	80074b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3314      	adds	r3, #20
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	623b      	str	r3, [r7, #32]
   return(result);
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3314      	adds	r3, #20
 800750a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800750e:	633a      	str	r2, [r7, #48]	; 0x30
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e3      	bne.n	80074ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	330c      	adds	r3, #12
 8007536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0310 	bic.w	r3, r3, #16
 8007546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007554:	61fa      	str	r2, [r7, #28]
 8007556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007558:	69b9      	ldr	r1, [r7, #24]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	e841 2300 	strex	r3, r2, [r1]
 8007560:	617b      	str	r3, [r7, #20]
   return(result);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1e3      	bne.n	8007530 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800756e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 f83d 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800757a:	e023      	b.n	80075c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <HAL_UART_IRQHandler+0x4f4>
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f943 	bl	8007820 <UART_Transmit_IT>
    return;
 800759a:	e014      	b.n	80075c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800759c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00e      	beq.n	80075c6 <HAL_UART_IRQHandler+0x51e>
 80075a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d008      	beq.n	80075c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f983 	bl	80078c0 <UART_EndTransmit_IT>
    return;
 80075ba:	e004      	b.n	80075c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80075bc:	bf00      	nop
 80075be:	e002      	b.n	80075c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80075c0:	bf00      	nop
 80075c2:	e000      	b.n	80075c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80075c4:	bf00      	nop
  }
}
 80075c6:	37e8      	adds	r7, #232	; 0xe8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	4613      	mov	r3, r2
 800761a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761c:	e03b      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d037      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007626:	f7fc facf 	bl	8003bc8 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	6a3a      	ldr	r2, [r7, #32]
 8007632:	429a      	cmp	r2, r3
 8007634:	d302      	bcc.n	800763c <UART_WaitOnFlagUntilTimeout+0x30>
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e03a      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f003 0304 	and.w	r3, r3, #4
 800764a:	2b00      	cmp	r3, #0
 800764c:	d023      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0x8a>
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b80      	cmp	r3, #128	; 0x80
 8007652:	d020      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b40      	cmp	r3, #64	; 0x40
 8007658:	d01d      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d116      	bne.n	8007696 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f857 	bl	8007732 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2208      	movs	r2, #8
 8007688:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e00f      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4013      	ands	r3, r2
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	bf0c      	ite	eq
 80076a6:	2301      	moveq	r3, #1
 80076a8:	2300      	movne	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d0b4      	beq.n	800761e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	60b9      	str	r1, [r7, #8]
 80076c8:	4613      	mov	r3, r2
 80076ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	88fa      	ldrh	r2, [r7, #6]
 80076d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2222      	movs	r2, #34	; 0x22
 80076e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68da      	ldr	r2, [r3, #12]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007702:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	695a      	ldr	r2, [r3, #20]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0220 	orr.w	r2, r2, #32
 8007722:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007732:	b480      	push	{r7}
 8007734:	b095      	sub	sp, #84	; 0x54
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	330c      	adds	r3, #12
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007750:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	330c      	adds	r3, #12
 8007758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800775a:	643a      	str	r2, [r7, #64]	; 0x40
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e5      	bne.n	800773a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	61fb      	str	r3, [r7, #28]
   return(result);
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	64bb      	str	r3, [r7, #72]	; 0x48
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3314      	adds	r3, #20
 800778c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800778e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e5      	bne.n	800776e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d119      	bne.n	80077de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	330c      	adds	r3, #12
 80077b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	f023 0310 	bic.w	r3, r3, #16
 80077c0:	647b      	str	r3, [r7, #68]	; 0x44
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	330c      	adds	r3, #12
 80077c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ca:	61ba      	str	r2, [r7, #24]
 80077cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6979      	ldr	r1, [r7, #20]
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	613b      	str	r3, [r7, #16]
   return(result);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e5      	bne.n	80077aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80077ec:	bf00      	nop
 80077ee:	3754      	adds	r7, #84	; 0x54
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff fee4 	bl	80075e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b21      	cmp	r3, #33	; 0x21
 8007832:	d13e      	bne.n	80078b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783c:	d114      	bne.n	8007868 <UART_Transmit_IT+0x48>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d110      	bne.n	8007868 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800785a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	1c9a      	adds	r2, r3, #2
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	621a      	str	r2, [r3, #32]
 8007866:	e008      	b.n	800787a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	1c59      	adds	r1, r3, #1
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6211      	str	r1, [r2, #32]
 8007872:	781a      	ldrb	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29b      	uxth	r3, r3
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	4619      	mov	r1, r3
 8007888:	84d1      	strh	r1, [r2, #38]	; 0x26
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10f      	bne.n	80078ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800789c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68da      	ldr	r2, [r3, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e000      	b.n	80078b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078b2:	2302      	movs	r3, #2
  }
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff fe73 	bl	80075cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08c      	sub	sp, #48	; 0x30
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b22      	cmp	r3, #34	; 0x22
 8007902:	f040 80ae 	bne.w	8007a62 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790e:	d117      	bne.n	8007940 <UART_Receive_IT+0x50>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d113      	bne.n	8007940 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007918:	2300      	movs	r3, #0
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	b29b      	uxth	r3, r3
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	b29a      	uxth	r2, r3
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	1c9a      	adds	r2, r3, #2
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	629a      	str	r2, [r3, #40]	; 0x28
 800793e:	e026      	b.n	800798e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007944:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007952:	d007      	beq.n	8007964 <UART_Receive_IT+0x74>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <UART_Receive_IT+0x82>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	b2da      	uxtb	r2, r3
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e008      	b.n	8007984 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797e:	b2da      	uxtb	r2, r3
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29b      	uxth	r3, r3
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	4619      	mov	r1, r3
 800799c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d15d      	bne.n	8007a5e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0220 	bic.w	r2, r2, #32
 80079b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695a      	ldr	r2, [r3, #20]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 0201 	bic.w	r2, r2, #1
 80079d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d135      	bne.n	8007a54 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	613b      	str	r3, [r7, #16]
   return(result);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f023 0310 	bic.w	r3, r3, #16
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0e:	623a      	str	r2, [r7, #32]
 8007a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	69f9      	ldr	r1, [r7, #28]
 8007a14:	6a3a      	ldr	r2, [r7, #32]
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e5      	bne.n	80079ee <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d10a      	bne.n	8007a46 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a30:	2300      	movs	r3, #0
 8007a32:	60fb      	str	r3, [r7, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff fdd1 	bl	80075f4 <HAL_UARTEx_RxEventCallback>
 8007a52:	e002      	b.n	8007a5a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7f9 fffd 	bl	8001a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	e002      	b.n	8007a64 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e000      	b.n	8007a64 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a62:	2302      	movs	r3, #2
  }
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3730      	adds	r7, #48	; 0x30
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a70:	b0c0      	sub	sp, #256	; 0x100
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	68d9      	ldr	r1, [r3, #12]
 8007a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	ea40 0301 	orr.w	r3, r0, r1
 8007a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ac4:	f021 010c 	bic.w	r1, r1, #12
 8007ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae6:	6999      	ldr	r1, [r3, #24]
 8007ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	ea40 0301 	orr.w	r3, r0, r1
 8007af2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	4b8f      	ldr	r3, [pc, #572]	; (8007d38 <UART_SetConfig+0x2cc>)
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d005      	beq.n	8007b0c <UART_SetConfig+0xa0>
 8007b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b8d      	ldr	r3, [pc, #564]	; (8007d3c <UART_SetConfig+0x2d0>)
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d104      	bne.n	8007b16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b0c:	f7fe f8ea 	bl	8005ce4 <HAL_RCC_GetPCLK2Freq>
 8007b10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b14:	e003      	b.n	8007b1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b16:	f7fe f8d1 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 8007b1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b28:	f040 810c 	bne.w	8007d44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007b3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007b3e:	4622      	mov	r2, r4
 8007b40:	462b      	mov	r3, r5
 8007b42:	1891      	adds	r1, r2, r2
 8007b44:	65b9      	str	r1, [r7, #88]	; 0x58
 8007b46:	415b      	adcs	r3, r3
 8007b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b4e:	4621      	mov	r1, r4
 8007b50:	eb12 0801 	adds.w	r8, r2, r1
 8007b54:	4629      	mov	r1, r5
 8007b56:	eb43 0901 	adc.w	r9, r3, r1
 8007b5a:	f04f 0200 	mov.w	r2, #0
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b6e:	4690      	mov	r8, r2
 8007b70:	4699      	mov	r9, r3
 8007b72:	4623      	mov	r3, r4
 8007b74:	eb18 0303 	adds.w	r3, r8, r3
 8007b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b7c:	462b      	mov	r3, r5
 8007b7e:	eb49 0303 	adc.w	r3, r9, r3
 8007b82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	18db      	adds	r3, r3, r3
 8007b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	eb42 0303 	adc.w	r3, r2, r3
 8007ba6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ba8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007bac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007bb0:	f7f9 f86a 	bl	8000c88 <__aeabi_uldivmod>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4b61      	ldr	r3, [pc, #388]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007bba:	fba3 2302 	umull	r2, r3, r3, r2
 8007bbe:	095b      	lsrs	r3, r3, #5
 8007bc0:	011c      	lsls	r4, r3, #4
 8007bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007bd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007bd4:	4642      	mov	r2, r8
 8007bd6:	464b      	mov	r3, r9
 8007bd8:	1891      	adds	r1, r2, r2
 8007bda:	64b9      	str	r1, [r7, #72]	; 0x48
 8007bdc:	415b      	adcs	r3, r3
 8007bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007be4:	4641      	mov	r1, r8
 8007be6:	eb12 0a01 	adds.w	sl, r2, r1
 8007bea:	4649      	mov	r1, r9
 8007bec:	eb43 0b01 	adc.w	fp, r3, r1
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c04:	4692      	mov	sl, r2
 8007c06:	469b      	mov	fp, r3
 8007c08:	4643      	mov	r3, r8
 8007c0a:	eb1a 0303 	adds.w	r3, sl, r3
 8007c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c12:	464b      	mov	r3, r9
 8007c14:	eb4b 0303 	adc.w	r3, fp, r3
 8007c18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c30:	460b      	mov	r3, r1
 8007c32:	18db      	adds	r3, r3, r3
 8007c34:	643b      	str	r3, [r7, #64]	; 0x40
 8007c36:	4613      	mov	r3, r2
 8007c38:	eb42 0303 	adc.w	r3, r2, r3
 8007c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007c46:	f7f9 f81f 	bl	8000c88 <__aeabi_uldivmod>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4b3b      	ldr	r3, [pc, #236]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007c52:	fba3 2301 	umull	r2, r3, r3, r1
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	2264      	movs	r2, #100	; 0x64
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	1acb      	subs	r3, r1, r3
 8007c60:	00db      	lsls	r3, r3, #3
 8007c62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c66:	4b36      	ldr	r3, [pc, #216]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007c68:	fba3 2302 	umull	r2, r3, r3, r2
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	005b      	lsls	r3, r3, #1
 8007c70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c74:	441c      	add	r4, r3
 8007c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c88:	4642      	mov	r2, r8
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	1891      	adds	r1, r2, r2
 8007c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c90:	415b      	adcs	r3, r3
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c98:	4641      	mov	r1, r8
 8007c9a:	1851      	adds	r1, r2, r1
 8007c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	414b      	adcs	r3, r1
 8007ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca4:	f04f 0200 	mov.w	r2, #0
 8007ca8:	f04f 0300 	mov.w	r3, #0
 8007cac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007cb0:	4659      	mov	r1, fp
 8007cb2:	00cb      	lsls	r3, r1, #3
 8007cb4:	4651      	mov	r1, sl
 8007cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cba:	4651      	mov	r1, sl
 8007cbc:	00ca      	lsls	r2, r1, #3
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	189b      	adds	r3, r3, r2
 8007cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ccc:	464b      	mov	r3, r9
 8007cce:	460a      	mov	r2, r1
 8007cd0:	eb42 0303 	adc.w	r3, r2, r3
 8007cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007ce4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ce8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007cec:	460b      	mov	r3, r1
 8007cee:	18db      	adds	r3, r3, r3
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	eb42 0303 	adc.w	r3, r2, r3
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d02:	f7f8 ffc1 	bl	8000c88 <__aeabi_uldivmod>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	2164      	movs	r1, #100	; 0x64
 8007d14:	fb01 f303 	mul.w	r3, r1, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	3332      	adds	r3, #50	; 0x32
 8007d1e:	4a08      	ldr	r2, [pc, #32]	; (8007d40 <UART_SetConfig+0x2d4>)
 8007d20:	fba2 2303 	umull	r2, r3, r2, r3
 8007d24:	095b      	lsrs	r3, r3, #5
 8007d26:	f003 0207 	and.w	r2, r3, #7
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4422      	add	r2, r4
 8007d32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d34:	e106      	b.n	8007f44 <UART_SetConfig+0x4d8>
 8007d36:	bf00      	nop
 8007d38:	40011000 	.word	0x40011000
 8007d3c:	40011400 	.word	0x40011400
 8007d40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007d4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007d52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007d56:	4642      	mov	r2, r8
 8007d58:	464b      	mov	r3, r9
 8007d5a:	1891      	adds	r1, r2, r2
 8007d5c:	6239      	str	r1, [r7, #32]
 8007d5e:	415b      	adcs	r3, r3
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
 8007d62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d66:	4641      	mov	r1, r8
 8007d68:	1854      	adds	r4, r2, r1
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	eb43 0501 	adc.w	r5, r3, r1
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	00eb      	lsls	r3, r5, #3
 8007d7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d7e:	00e2      	lsls	r2, r4, #3
 8007d80:	4614      	mov	r4, r2
 8007d82:	461d      	mov	r5, r3
 8007d84:	4643      	mov	r3, r8
 8007d86:	18e3      	adds	r3, r4, r3
 8007d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d8c:	464b      	mov	r3, r9
 8007d8e:	eb45 0303 	adc.w	r3, r5, r3
 8007d92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007da2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007db2:	4629      	mov	r1, r5
 8007db4:	008b      	lsls	r3, r1, #2
 8007db6:	4621      	mov	r1, r4
 8007db8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	008a      	lsls	r2, r1, #2
 8007dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007dc4:	f7f8 ff60 	bl	8000c88 <__aeabi_uldivmod>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4b60      	ldr	r3, [pc, #384]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007dce:	fba3 2302 	umull	r2, r3, r3, r2
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	011c      	lsls	r4, r3, #4
 8007dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007de0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007de4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007de8:	4642      	mov	r2, r8
 8007dea:	464b      	mov	r3, r9
 8007dec:	1891      	adds	r1, r2, r2
 8007dee:	61b9      	str	r1, [r7, #24]
 8007df0:	415b      	adcs	r3, r3
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007df8:	4641      	mov	r1, r8
 8007dfa:	1851      	adds	r1, r2, r1
 8007dfc:	6139      	str	r1, [r7, #16]
 8007dfe:	4649      	mov	r1, r9
 8007e00:	414b      	adcs	r3, r1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e10:	4659      	mov	r1, fp
 8007e12:	00cb      	lsls	r3, r1, #3
 8007e14:	4651      	mov	r1, sl
 8007e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e1a:	4651      	mov	r1, sl
 8007e1c:	00ca      	lsls	r2, r1, #3
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4619      	mov	r1, r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	4642      	mov	r2, r8
 8007e26:	189b      	adds	r3, r3, r2
 8007e28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e2c:	464b      	mov	r3, r9
 8007e2e:	460a      	mov	r2, r1
 8007e30:	eb42 0303 	adc.w	r3, r2, r3
 8007e34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007e50:	4649      	mov	r1, r9
 8007e52:	008b      	lsls	r3, r1, #2
 8007e54:	4641      	mov	r1, r8
 8007e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e5a:	4641      	mov	r1, r8
 8007e5c:	008a      	lsls	r2, r1, #2
 8007e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007e62:	f7f8 ff11 	bl	8000c88 <__aeabi_uldivmod>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4b38      	ldr	r3, [pc, #224]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	2264      	movs	r2, #100	; 0x64
 8007e76:	fb02 f303 	mul.w	r3, r2, r3
 8007e7a:	1acb      	subs	r3, r1, r3
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	3332      	adds	r3, #50	; 0x32
 8007e80:	4a33      	ldr	r2, [pc, #204]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007e82:	fba2 2303 	umull	r2, r3, r2, r3
 8007e86:	095b      	lsrs	r3, r3, #5
 8007e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e8c:	441c      	add	r4, r3
 8007e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e92:	2200      	movs	r2, #0
 8007e94:	673b      	str	r3, [r7, #112]	; 0x70
 8007e96:	677a      	str	r2, [r7, #116]	; 0x74
 8007e98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	464b      	mov	r3, r9
 8007ea0:	1891      	adds	r1, r2, r2
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	415b      	adcs	r3, r3
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eac:	4641      	mov	r1, r8
 8007eae:	1851      	adds	r1, r2, r1
 8007eb0:	6039      	str	r1, [r7, #0]
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	414b      	adcs	r3, r1
 8007eb6:	607b      	str	r3, [r7, #4]
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ec4:	4659      	mov	r1, fp
 8007ec6:	00cb      	lsls	r3, r1, #3
 8007ec8:	4651      	mov	r1, sl
 8007eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ece:	4651      	mov	r1, sl
 8007ed0:	00ca      	lsls	r2, r1, #3
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4642      	mov	r2, r8
 8007eda:	189b      	adds	r3, r3, r2
 8007edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ede:	464b      	mov	r3, r9
 8007ee0:	460a      	mov	r2, r1
 8007ee2:	eb42 0303 	adc.w	r3, r2, r3
 8007ee6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8007ef2:	667a      	str	r2, [r7, #100]	; 0x64
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f00:	4649      	mov	r1, r9
 8007f02:	008b      	lsls	r3, r1, #2
 8007f04:	4641      	mov	r1, r8
 8007f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	008a      	lsls	r2, r1, #2
 8007f0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f12:	f7f8 feb9 	bl	8000c88 <__aeabi_uldivmod>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f20:	095b      	lsrs	r3, r3, #5
 8007f22:	2164      	movs	r1, #100	; 0x64
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	3332      	adds	r3, #50	; 0x32
 8007f2e:	4a08      	ldr	r2, [pc, #32]	; (8007f50 <UART_SetConfig+0x4e4>)
 8007f30:	fba2 2303 	umull	r2, r3, r2, r3
 8007f34:	095b      	lsrs	r3, r3, #5
 8007f36:	f003 020f 	and.w	r2, r3, #15
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4422      	add	r2, r4
 8007f42:	609a      	str	r2, [r3, #8]
}
 8007f44:	bf00      	nop
 8007f46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f50:	51eb851f 	.word	0x51eb851f

08007f54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007f58:	4904      	ldr	r1, [pc, #16]	; (8007f6c <MX_FATFS_Init+0x18>)
 8007f5a:	4805      	ldr	r0, [pc, #20]	; (8007f70 <MX_FATFS_Init+0x1c>)
 8007f5c:	f002 ff7a 	bl	800ae54 <FATFS_LinkDriver>
 8007f60:	4603      	mov	r3, r0
 8007f62:	461a      	mov	r2, r3
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <MX_FATFS_Init+0x20>)
 8007f66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f68:	bf00      	nop
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	2000283c 	.word	0x2000283c
 8007f70:	20000014 	.word	0x20000014
 8007f74:	20002838 	.word	0x20002838

08007f78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007f7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	SD_disk_initialize (pdrv);
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7f9 f9df 	bl	8001358 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8007f9a:	bf00      	nop
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SD_disk_status (pdrv);
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7f9 fab7 	bl	8001524 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8007fb6:	bf00      	nop
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60b9      	str	r1, [r7, #8]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_disk_read (pdrv, buff, sector, count);
 8007fd0:	7bf8      	ldrb	r0, [r7, #15]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	68b9      	ldr	r1, [r7, #8]
 8007fd8:	f7f9 faba 	bl	8001550 <SD_disk_read>
  /* USER CODE END READ */
}
 8007fdc:	bf00      	nop
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
 8007ff0:	603b      	str	r3, [r7, #0]
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_disk_write (pdrv, buff, sector, count);
 8007ff6:	7bf8      	ldrb	r0, [r7, #15]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	f7f9 fb11 	bl	8001624 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8008002:	bf00      	nop
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	603a      	str	r2, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
 8008018:	460b      	mov	r3, r1
 800801a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	SD_disk_ioctl (pdrv, cmd, buff);
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	79b9      	ldrb	r1, [r7, #6]
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	4618      	mov	r0, r3
 8008024:	f7f9 fb82 	bl	800172c <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8008028:	bf00      	nop
 800802a:	4618      	mov	r0, r3
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800803e:	79fb      	ldrb	r3, [r7, #7]
 8008040:	4a08      	ldr	r2, [pc, #32]	; (8008064 <disk_status+0x30>)
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	4413      	add	r3, r2
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	79fa      	ldrb	r2, [r7, #7]
 800804c:	4905      	ldr	r1, [pc, #20]	; (8008064 <disk_status+0x30>)
 800804e:	440a      	add	r2, r1
 8008050:	7a12      	ldrb	r2, [r2, #8]
 8008052:	4610      	mov	r0, r2
 8008054:	4798      	blx	r3
 8008056:	4603      	mov	r3, r0
 8008058:	73fb      	strb	r3, [r7, #15]
  return stat;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20002a68 	.word	0x20002a68

08008068 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008076:	79fb      	ldrb	r3, [r7, #7]
 8008078:	4a0e      	ldr	r2, [pc, #56]	; (80080b4 <disk_initialize+0x4c>)
 800807a:	5cd3      	ldrb	r3, [r2, r3]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d114      	bne.n	80080aa <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008080:	79fb      	ldrb	r3, [r7, #7]
 8008082:	4a0c      	ldr	r2, [pc, #48]	; (80080b4 <disk_initialize+0x4c>)
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	79fa      	ldrb	r2, [r7, #7]
 800808e:	4909      	ldr	r1, [pc, #36]	; (80080b4 <disk_initialize+0x4c>)
 8008090:	440a      	add	r2, r1
 8008092:	7a12      	ldrb	r2, [r2, #8]
 8008094:	4610      	mov	r0, r2
 8008096:	4798      	blx	r3
 8008098:	4603      	mov	r3, r0
 800809a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d103      	bne.n	80080aa <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	4a03      	ldr	r2, [pc, #12]	; (80080b4 <disk_initialize+0x4c>)
 80080a6:	2101      	movs	r1, #1
 80080a8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20002a68 	.word	0x20002a68

080080b8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80080b8:	b590      	push	{r4, r7, lr}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	4603      	mov	r3, r0
 80080c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <disk_read+0x3c>)
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	689c      	ldr	r4, [r3, #8]
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
 80080d6:	4a07      	ldr	r2, [pc, #28]	; (80080f4 <disk_read+0x3c>)
 80080d8:	4413      	add	r3, r2
 80080da:	7a18      	ldrb	r0, [r3, #8]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	68b9      	ldr	r1, [r7, #8]
 80080e2:	47a0      	blx	r4
 80080e4:	4603      	mov	r3, r0
 80080e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd90      	pop	{r4, r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20002a68 	.word	0x20002a68

080080f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
 8008102:	603b      	str	r3, [r7, #0]
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <disk_write+0x3c>)
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	68dc      	ldr	r4, [r3, #12]
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	4a07      	ldr	r2, [pc, #28]	; (8008134 <disk_write+0x3c>)
 8008118:	4413      	add	r3, r2
 800811a:	7a18      	ldrb	r0, [r3, #8]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	68b9      	ldr	r1, [r7, #8]
 8008122:	47a0      	blx	r4
 8008124:	4603      	mov	r3, r0
 8008126:	75fb      	strb	r3, [r7, #23]
  return res;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd90      	pop	{r4, r7, pc}
 8008132:	bf00      	nop
 8008134:	20002a68 	.word	0x20002a68

08008138 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	603a      	str	r2, [r7, #0]
 8008142:	71fb      	strb	r3, [r7, #7]
 8008144:	460b      	mov	r3, r1
 8008146:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008148:	79fb      	ldrb	r3, [r7, #7]
 800814a:	4a09      	ldr	r2, [pc, #36]	; (8008170 <disk_ioctl+0x38>)
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4413      	add	r3, r2
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	79fa      	ldrb	r2, [r7, #7]
 8008156:	4906      	ldr	r1, [pc, #24]	; (8008170 <disk_ioctl+0x38>)
 8008158:	440a      	add	r2, r1
 800815a:	7a10      	ldrb	r0, [r2, #8]
 800815c:	79b9      	ldrb	r1, [r7, #6]
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	4798      	blx	r3
 8008162:	4603      	mov	r3, r0
 8008164:	73fb      	strb	r3, [r7, #15]
  return res;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20002a68 	.word	0x20002a68

08008174 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3301      	adds	r3, #1
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008184:	89fb      	ldrh	r3, [r7, #14]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b21a      	sxth	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b21b      	sxth	r3, r3
 8008190:	4313      	orrs	r3, r2
 8008192:	b21b      	sxth	r3, r3
 8008194:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008196:	89fb      	ldrh	r3, [r7, #14]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3303      	adds	r3, #3
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	3202      	adds	r2, #2
 80081bc:	7812      	ldrb	r2, [r2, #0]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	021b      	lsls	r3, r3, #8
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	3201      	adds	r2, #1
 80081ca:	7812      	ldrb	r2, [r2, #0]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
	return rv;
 80081dc:	68fb      	ldr	r3, [r7, #12]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	887a      	ldrh	r2, [r7, #2]
 80081fe:	b2d2      	uxtb	r2, r2
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	887b      	ldrh	r3, [r7, #2]
 8008204:	0a1b      	lsrs	r3, r3, #8
 8008206:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	887a      	ldrh	r2, [r7, #2]
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	701a      	strb	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	b2d2      	uxtb	r2, r2
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	0a1b      	lsrs	r3, r3, #8
 800823a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	607a      	str	r2, [r7, #4]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	1c5a      	adds	r2, r3, #1
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	b2d2      	uxtb	r2, r2
 8008258:	701a      	strb	r2, [r3, #0]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	0a1b      	lsrs	r3, r3, #8
 800825e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	607a      	str	r2, [r7, #4]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	b2d2      	uxtb	r2, r2
 800826a:	701a      	strb	r2, [r3, #0]
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00d      	beq.n	80082ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	1c53      	adds	r3, r2, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	1c59      	adds	r1, r3, #1
 800829c:	6179      	str	r1, [r7, #20]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3b01      	subs	r3, #1
 80082a6:	607b      	str	r3, [r7, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f1      	bne.n	8008292 <mem_cpy+0x1a>
	}
}
 80082ae:	bf00      	nop
 80082b0:	371c      	adds	r7, #28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80082ba:	b480      	push	{r7}
 80082bc:	b087      	sub	sp, #28
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	60b9      	str	r1, [r7, #8]
 80082c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	617a      	str	r2, [r7, #20]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3b01      	subs	r3, #1
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f3      	bne.n	80082ca <mem_set+0x10>
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80082f0:	b480      	push	{r7}
 80082f2:	b089      	sub	sp, #36	; 0x24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	61fb      	str	r3, [r7, #28]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	61fa      	str	r2, [r7, #28]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	61ba      	str	r2, [r7, #24]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	1acb      	subs	r3, r1, r3
 800831c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	3b01      	subs	r3, #1
 8008322:	607b      	str	r3, [r7, #4]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d002      	beq.n	8008330 <mem_cmp+0x40>
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0eb      	beq.n	8008308 <mem_cmp+0x18>

	return r;
 8008330:	697b      	ldr	r3, [r7, #20]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3724      	adds	r7, #36	; 0x24
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008348:	e002      	b.n	8008350 <chk_chr+0x12>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3301      	adds	r3, #1
 800834e:	607b      	str	r3, [r7, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <chk_chr+0x26>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	461a      	mov	r2, r3
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	4293      	cmp	r3, r2
 8008362:	d1f2      	bne.n	800834a <chk_chr+0xc>
	return *str;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	781b      	ldrb	r3, [r3, #0]
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	e029      	b.n	80083dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008388:	4a27      	ldr	r2, [pc, #156]	; (8008428 <chk_lock+0xb4>)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	4413      	add	r3, r2
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d01d      	beq.n	80083d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008396:	4a24      	ldr	r2, [pc, #144]	; (8008428 <chk_lock+0xb4>)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	011b      	lsls	r3, r3, #4
 800839c:	4413      	add	r3, r2
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d116      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80083a8:	4a1f      	ldr	r2, [pc, #124]	; (8008428 <chk_lock+0xb4>)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	4413      	add	r3, r2
 80083b0:	3304      	adds	r3, #4
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d10c      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083bc:	4a1a      	ldr	r2, [pc, #104]	; (8008428 <chk_lock+0xb4>)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	4413      	add	r3, r2
 80083c4:	3308      	adds	r3, #8
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d102      	bne.n	80083d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80083d0:	e007      	b.n	80083e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3301      	adds	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d9d2      	bls.n	8008388 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d109      	bne.n	80083fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <chk_lock+0x80>
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d101      	bne.n	80083f8 <chk_lock+0x84>
 80083f4:	2300      	movs	r3, #0
 80083f6:	e010      	b.n	800841a <chk_lock+0xa6>
 80083f8:	2312      	movs	r3, #18
 80083fa:	e00e      	b.n	800841a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d108      	bne.n	8008414 <chk_lock+0xa0>
 8008402:	4a09      	ldr	r2, [pc, #36]	; (8008428 <chk_lock+0xb4>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	4413      	add	r3, r2
 800840a:	330c      	adds	r3, #12
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008412:	d101      	bne.n	8008418 <chk_lock+0xa4>
 8008414:	2310      	movs	r3, #16
 8008416:	e000      	b.n	800841a <chk_lock+0xa6>
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20002848 	.word	0x20002848

0800842c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008432:	2300      	movs	r3, #0
 8008434:	607b      	str	r3, [r7, #4]
 8008436:	e002      	b.n	800843e <enq_lock+0x12>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3301      	adds	r3, #1
 800843c:	607b      	str	r3, [r7, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d806      	bhi.n	8008452 <enq_lock+0x26>
 8008444:	4a09      	ldr	r2, [pc, #36]	; (800846c <enq_lock+0x40>)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	4413      	add	r3, r2
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f2      	bne.n	8008438 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b02      	cmp	r3, #2
 8008456:	bf14      	ite	ne
 8008458:	2301      	movne	r3, #1
 800845a:	2300      	moveq	r3, #0
 800845c:	b2db      	uxtb	r3, r3
}
 800845e:	4618      	mov	r0, r3
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	20002848 	.word	0x20002848

08008470 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e01f      	b.n	80084c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008480:	4a41      	ldr	r2, [pc, #260]	; (8008588 <inc_lock+0x118>)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	011b      	lsls	r3, r3, #4
 8008486:	4413      	add	r3, r2
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d113      	bne.n	80084ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008492:	4a3d      	ldr	r2, [pc, #244]	; (8008588 <inc_lock+0x118>)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	4413      	add	r3, r2
 800849a:	3304      	adds	r3, #4
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d109      	bne.n	80084ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80084a6:	4a38      	ldr	r2, [pc, #224]	; (8008588 <inc_lock+0x118>)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	4413      	add	r3, r2
 80084ae:	3308      	adds	r3, #8
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d006      	beq.n	80084c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3301      	adds	r3, #1
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d9dc      	bls.n	8008480 <inc_lock+0x10>
 80084c6:	e000      	b.n	80084ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80084c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d132      	bne.n	8008536 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e002      	b.n	80084dc <inc_lock+0x6c>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3301      	adds	r3, #1
 80084da:	60fb      	str	r3, [r7, #12]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d806      	bhi.n	80084f0 <inc_lock+0x80>
 80084e2:	4a29      	ldr	r2, [pc, #164]	; (8008588 <inc_lock+0x118>)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	4413      	add	r3, r2
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f2      	bne.n	80084d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d101      	bne.n	80084fa <inc_lock+0x8a>
 80084f6:	2300      	movs	r3, #0
 80084f8:	e040      	b.n	800857c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4922      	ldr	r1, [pc, #136]	; (8008588 <inc_lock+0x118>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	440b      	add	r3, r1
 8008506:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	491e      	ldr	r1, [pc, #120]	; (8008588 <inc_lock+0x118>)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	440b      	add	r3, r1
 8008514:	3304      	adds	r3, #4
 8008516:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	695a      	ldr	r2, [r3, #20]
 800851c:	491a      	ldr	r1, [pc, #104]	; (8008588 <inc_lock+0x118>)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	011b      	lsls	r3, r3, #4
 8008522:	440b      	add	r3, r1
 8008524:	3308      	adds	r3, #8
 8008526:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008528:	4a17      	ldr	r2, [pc, #92]	; (8008588 <inc_lock+0x118>)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	4413      	add	r3, r2
 8008530:	330c      	adds	r3, #12
 8008532:	2200      	movs	r2, #0
 8008534:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d009      	beq.n	8008550 <inc_lock+0xe0>
 800853c:	4a12      	ldr	r2, [pc, #72]	; (8008588 <inc_lock+0x118>)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	4413      	add	r3, r2
 8008544:	330c      	adds	r3, #12
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <inc_lock+0xe0>
 800854c:	2300      	movs	r3, #0
 800854e:	e015      	b.n	800857c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d108      	bne.n	8008568 <inc_lock+0xf8>
 8008556:	4a0c      	ldr	r2, [pc, #48]	; (8008588 <inc_lock+0x118>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	011b      	lsls	r3, r3, #4
 800855c:	4413      	add	r3, r2
 800855e:	330c      	adds	r3, #12
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	e001      	b.n	800856c <inc_lock+0xfc>
 8008568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800856c:	4906      	ldr	r1, [pc, #24]	; (8008588 <inc_lock+0x118>)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	440b      	add	r3, r1
 8008574:	330c      	adds	r3, #12
 8008576:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3301      	adds	r3, #1
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	20002848 	.word	0x20002848

0800858c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	3b01      	subs	r3, #1
 8008598:	607b      	str	r3, [r7, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d825      	bhi.n	80085ec <dec_lock+0x60>
		n = Files[i].ctr;
 80085a0:	4a17      	ldr	r2, [pc, #92]	; (8008600 <dec_lock+0x74>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	4413      	add	r3, r2
 80085a8:	330c      	adds	r3, #12
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80085ae:	89fb      	ldrh	r3, [r7, #14]
 80085b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b4:	d101      	bne.n	80085ba <dec_lock+0x2e>
 80085b6:	2300      	movs	r3, #0
 80085b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80085ba:	89fb      	ldrh	r3, [r7, #14]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <dec_lock+0x3a>
 80085c0:	89fb      	ldrh	r3, [r7, #14]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80085c6:	4a0e      	ldr	r2, [pc, #56]	; (8008600 <dec_lock+0x74>)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	4413      	add	r3, r2
 80085ce:	330c      	adds	r3, #12
 80085d0:	89fa      	ldrh	r2, [r7, #14]
 80085d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80085d4:	89fb      	ldrh	r3, [r7, #14]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <dec_lock+0x5a>
 80085da:	4a09      	ldr	r2, [pc, #36]	; (8008600 <dec_lock+0x74>)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	4413      	add	r3, r2
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	737b      	strb	r3, [r7, #13]
 80085ea:	e001      	b.n	80085f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80085ec:	2302      	movs	r3, #2
 80085ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80085f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20002848 	.word	0x20002848

08008604 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e010      	b.n	8008634 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008612:	4a0d      	ldr	r2, [pc, #52]	; (8008648 <clear_lock+0x44>)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	4413      	add	r3, r2
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d105      	bne.n	800862e <clear_lock+0x2a>
 8008622:	4a09      	ldr	r2, [pc, #36]	; (8008648 <clear_lock+0x44>)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	4413      	add	r3, r2
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3301      	adds	r3, #1
 8008632:	60fb      	str	r3, [r7, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d9eb      	bls.n	8008612 <clear_lock+0xe>
	}
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	20002848 	.word	0x20002848

0800864c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	78db      	ldrb	r3, [r3, #3]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d034      	beq.n	80086ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008664:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7858      	ldrb	r0, [r3, #1]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008670:	2301      	movs	r3, #1
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	f7ff fd40 	bl	80080f8 <disk_write>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <sync_window+0x38>
			res = FR_DISK_ERR;
 800867e:	2301      	movs	r3, #1
 8008680:	73fb      	strb	r3, [r7, #15]
 8008682:	e022      	b.n	80086ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	1ad2      	subs	r2, r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	429a      	cmp	r2, r3
 8008698:	d217      	bcs.n	80086ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	789b      	ldrb	r3, [r3, #2]
 800869e:	613b      	str	r3, [r7, #16]
 80086a0:	e010      	b.n	80086c4 <sync_window+0x78>
					wsect += fs->fsize;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	4413      	add	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7858      	ldrb	r0, [r3, #1]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086b6:	2301      	movs	r3, #1
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	f7ff fd1d 	bl	80080f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d8eb      	bhi.n	80086a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d01b      	beq.n	8008724 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ffad 	bl	800864c <sync_window>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d113      	bne.n	8008724 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7858      	ldrb	r0, [r3, #1]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008706:	2301      	movs	r3, #1
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	f7ff fcd5 	bl	80080b8 <disk_read>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008714:	f04f 33ff 	mov.w	r3, #4294967295
 8008718:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800871a:	2301      	movs	r3, #1
 800871c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff ff87 	bl	800864c <sync_window>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d159      	bne.n	80087fc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b03      	cmp	r3, #3
 800874e:	d149      	bne.n	80087e4 <sync_fs+0xb4>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	791b      	ldrb	r3, [r3, #4]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d145      	bne.n	80087e4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	899b      	ldrh	r3, [r3, #12]
 8008762:	461a      	mov	r2, r3
 8008764:	2100      	movs	r1, #0
 8008766:	f7ff fda8 	bl	80082ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3338      	adds	r3, #56	; 0x38
 800876e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008772:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff fd37 	bl	80081ea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3338      	adds	r3, #56	; 0x38
 8008780:	4921      	ldr	r1, [pc, #132]	; (8008808 <sync_fs+0xd8>)
 8008782:	4618      	mov	r0, r3
 8008784:	f7ff fd4c 	bl	8008220 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	3338      	adds	r3, #56	; 0x38
 800878c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008790:	491e      	ldr	r1, [pc, #120]	; (800880c <sync_fs+0xdc>)
 8008792:	4618      	mov	r0, r3
 8008794:	f7ff fd44 	bl	8008220 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3338      	adds	r3, #56	; 0x38
 800879c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	4619      	mov	r1, r3
 80087a6:	4610      	mov	r0, r2
 80087a8:	f7ff fd3a 	bl	8008220 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	3338      	adds	r3, #56	; 0x38
 80087b0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f7ff fd30 	bl	8008220 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	7858      	ldrb	r0, [r3, #1]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087d8:	2301      	movs	r3, #1
 80087da:	f7ff fc8d 	bl	80080f8 <disk_write>
			fs->fsi_flag = 0;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fca3 	bl	8008138 <disk_ioctl>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <sync_fs+0xcc>
 80087f8:	2301      	movs	r3, #1
 80087fa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	41615252 	.word	0x41615252
 800880c:	61417272 	.word	0x61417272

08008810 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	3b02      	subs	r3, #2
 800881e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	69db      	ldr	r3, [r3, #28]
 8008824:	3b02      	subs	r3, #2
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d301      	bcc.n	8008830 <clust2sect+0x20>
 800882c:	2300      	movs	r3, #0
 800882e:	e008      	b.n	8008842 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	895b      	ldrh	r3, [r3, #10]
 8008834:	461a      	mov	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	fb03 f202 	mul.w	r2, r3, r2
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	4413      	add	r3, r2
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b086      	sub	sp, #24
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d904      	bls.n	800886e <get_fat+0x20>
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d302      	bcc.n	8008874 <get_fat+0x26>
		val = 1;	/* Internal error */
 800886e:	2301      	movs	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	e0bb      	b.n	80089ec <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008874:	f04f 33ff 	mov.w	r3, #4294967295
 8008878:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b03      	cmp	r3, #3
 8008880:	f000 8083 	beq.w	800898a <get_fat+0x13c>
 8008884:	2b03      	cmp	r3, #3
 8008886:	f300 80a7 	bgt.w	80089d8 <get_fat+0x18a>
 800888a:	2b01      	cmp	r3, #1
 800888c:	d002      	beq.n	8008894 <get_fat+0x46>
 800888e:	2b02      	cmp	r3, #2
 8008890:	d056      	beq.n	8008940 <get_fat+0xf2>
 8008892:	e0a1      	b.n	80089d8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	899b      	ldrh	r3, [r3, #12]
 80088aa:	4619      	mov	r1, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80088b2:	4413      	add	r3, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	6938      	ldr	r0, [r7, #16]
 80088b8:	f7ff ff0c 	bl	80086d4 <move_window>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 808d 	bne.w	80089de <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	60fa      	str	r2, [r7, #12]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	8992      	ldrh	r2, [r2, #12]
 80088ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80088d2:	fb01 f202 	mul.w	r2, r1, r2
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4413      	add	r3, r2
 80088dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	899b      	ldrh	r3, [r3, #12]
 80088ea:	4619      	mov	r1, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80088f2:	4413      	add	r3, r2
 80088f4:	4619      	mov	r1, r3
 80088f6:	6938      	ldr	r0, [r7, #16]
 80088f8:	f7ff feec 	bl	80086d4 <move_window>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d16f      	bne.n	80089e2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	899b      	ldrh	r3, [r3, #12]
 8008906:	461a      	mov	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	fbb3 f1f2 	udiv	r1, r3, r2
 800890e:	fb01 f202 	mul.w	r2, r1, r2
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	4413      	add	r3, r2
 8008918:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	461a      	mov	r2, r3
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4313      	orrs	r3, r2
 8008924:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d002      	beq.n	8008936 <get_fat+0xe8>
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	091b      	lsrs	r3, r3, #4
 8008934:	e002      	b.n	800893c <get_fat+0xee>
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800893c:	617b      	str	r3, [r7, #20]
			break;
 800893e:	e055      	b.n	80089ec <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	899b      	ldrh	r3, [r3, #12]
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	b29b      	uxth	r3, r3
 800894c:	4619      	mov	r1, r3
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	fbb3 f3f1 	udiv	r3, r3, r1
 8008954:	4413      	add	r3, r2
 8008956:	4619      	mov	r1, r3
 8008958:	6938      	ldr	r0, [r7, #16]
 800895a:	f7ff febb 	bl	80086d4 <move_window>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d140      	bne.n	80089e6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	8992      	ldrh	r2, [r2, #12]
 8008972:	fbb3 f0f2 	udiv	r0, r3, r2
 8008976:	fb00 f202 	mul.w	r2, r0, r2
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	440b      	add	r3, r1
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff fbf8 	bl	8008174 <ld_word>
 8008984:	4603      	mov	r3, r0
 8008986:	617b      	str	r3, [r7, #20]
			break;
 8008988:	e030      	b.n	80089ec <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	899b      	ldrh	r3, [r3, #12]
 8008992:	089b      	lsrs	r3, r3, #2
 8008994:	b29b      	uxth	r3, r3
 8008996:	4619      	mov	r1, r3
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	fbb3 f3f1 	udiv	r3, r3, r1
 800899e:	4413      	add	r3, r2
 80089a0:	4619      	mov	r1, r3
 80089a2:	6938      	ldr	r0, [r7, #16]
 80089a4:	f7ff fe96 	bl	80086d4 <move_window>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d11d      	bne.n	80089ea <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	8992      	ldrh	r2, [r2, #12]
 80089bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80089c0:	fb00 f202 	mul.w	r2, r0, r2
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	440b      	add	r3, r1
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff fbeb 	bl	80081a4 <ld_dword>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80089d4:	617b      	str	r3, [r7, #20]
			break;
 80089d6:	e009      	b.n	80089ec <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80089d8:	2301      	movs	r3, #1
 80089da:	617b      	str	r3, [r7, #20]
 80089dc:	e006      	b.n	80089ec <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089de:	bf00      	nop
 80089e0:	e004      	b.n	80089ec <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089e2:	bf00      	nop
 80089e4:	e002      	b.n	80089ec <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80089ea:	bf00      	nop
		}
	}

	return val;
 80089ec:	697b      	ldr	r3, [r7, #20]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80089f6:	b590      	push	{r4, r7, lr}
 80089f8:	b089      	sub	sp, #36	; 0x24
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a02:	2302      	movs	r3, #2
 8008a04:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	f240 8109 	bls.w	8008c20 <put_fat+0x22a>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	f080 8103 	bcs.w	8008c20 <put_fat+0x22a>
		switch (fs->fs_type) {
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	f000 80b6 	beq.w	8008b90 <put_fat+0x19a>
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	f300 80fb 	bgt.w	8008c20 <put_fat+0x22a>
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d003      	beq.n	8008a36 <put_fat+0x40>
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	f000 8083 	beq.w	8008b3a <put_fat+0x144>
 8008a34:	e0f4      	b.n	8008c20 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	085b      	lsrs	r3, r3, #1
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4413      	add	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	899b      	ldrh	r3, [r3, #12]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a54:	4413      	add	r3, r2
 8008a56:	4619      	mov	r1, r3
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff fe3b 	bl	80086d4 <move_window>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008a62:	7ffb      	ldrb	r3, [r7, #31]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f040 80d4 	bne.w	8008c12 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	1c5a      	adds	r2, r3, #1
 8008a74:	61ba      	str	r2, [r7, #24]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	8992      	ldrh	r2, [r2, #12]
 8008a7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a7e:	fb00 f202 	mul.w	r2, r0, r2
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	440b      	add	r3, r1
 8008a86:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00d      	beq.n	8008aae <put_fat+0xb8>
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b25b      	sxtb	r3, r3
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	b25a      	sxtb	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	b25b      	sxtb	r3, r3
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	e001      	b.n	8008ab2 <put_fat+0xbc>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	899b      	ldrh	r3, [r3, #12]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008acc:	4413      	add	r3, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fdff 	bl	80086d4 <move_window>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ada:	7ffb      	ldrb	r3, [r7, #31]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f040 809a 	bne.w	8008c16 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	899b      	ldrh	r3, [r3, #12]
 8008aec:	461a      	mov	r2, r3
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8008af4:	fb00 f202 	mul.w	r2, r0, r2
 8008af8:	1a9b      	subs	r3, r3, r2
 8008afa:	440b      	add	r3, r1
 8008afc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <put_fat+0x11a>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	091b      	lsrs	r3, r3, #4
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	e00e      	b.n	8008b2e <put_fat+0x138>
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	b25b      	sxtb	r3, r3
 8008b16:	f023 030f 	bic.w	r3, r3, #15
 8008b1a:	b25a      	sxtb	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	b25b      	sxtb	r3, r3
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	b25b      	sxtb	r3, r3
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	b25b      	sxtb	r3, r3
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	697a      	ldr	r2, [r7, #20]
 8008b30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2201      	movs	r2, #1
 8008b36:	70da      	strb	r2, [r3, #3]
			break;
 8008b38:	e072      	b.n	8008c20 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	899b      	ldrh	r3, [r3, #12]
 8008b42:	085b      	lsrs	r3, r3, #1
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4619      	mov	r1, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b4e:	4413      	add	r3, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fdbe 	bl	80086d4 <move_window>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b5c:	7ffb      	ldrb	r3, [r7, #31]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d15b      	bne.n	8008c1a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	8992      	ldrh	r2, [r2, #12]
 8008b70:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b74:	fb00 f202 	mul.w	r2, r0, r2
 8008b78:	1a9b      	subs	r3, r3, r2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	b292      	uxth	r2, r2
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fb31 	bl	80081ea <st_word>
			fs->wflag = 1;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	70da      	strb	r2, [r3, #3]
			break;
 8008b8e:	e047      	b.n	8008c20 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	899b      	ldrh	r3, [r3, #12]
 8008b98:	089b      	lsrs	r3, r3, #2
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ba4:	4413      	add	r3, r2
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7ff fd93 	bl	80086d4 <move_window>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bb2:	7ffb      	ldrb	r3, [r7, #31]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d132      	bne.n	8008c1e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	8992      	ldrh	r2, [r2, #12]
 8008bcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bd0:	fb00 f202 	mul.w	r2, r0, r2
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fae3 	bl	80081a4 <ld_dword>
 8008bde:	4603      	mov	r3, r0
 8008be0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008be4:	4323      	orrs	r3, r4
 8008be6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	8992      	ldrh	r2, [r2, #12]
 8008bf6:	fbb3 f0f2 	udiv	r0, r3, r2
 8008bfa:	fb00 f202 	mul.w	r2, r0, r2
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	440b      	add	r3, r1
 8008c02:	6879      	ldr	r1, [r7, #4]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff fb0b 	bl	8008220 <st_dword>
			fs->wflag = 1;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	70da      	strb	r2, [r3, #3]
			break;
 8008c10:	e006      	b.n	8008c20 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c12:	bf00      	nop
 8008c14:	e004      	b.n	8008c20 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c16:	bf00      	nop
 8008c18:	e002      	b.n	8008c20 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c1a:	bf00      	nop
 8008c1c:	e000      	b.n	8008c20 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008c1e:	bf00      	nop
		}
	}
	return res;
 8008c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3724      	adds	r7, #36	; 0x24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd90      	pop	{r4, r7, pc}

08008c2a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b088      	sub	sp, #32
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	60f8      	str	r0, [r7, #12]
 8008c32:	60b9      	str	r1, [r7, #8]
 8008c34:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d904      	bls.n	8008c50 <remove_chain+0x26>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d301      	bcc.n	8008c54 <remove_chain+0x2a>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e04b      	b.n	8008cec <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00c      	beq.n	8008c74 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	69b8      	ldr	r0, [r7, #24]
 8008c62:	f7ff fec8 	bl	80089f6 <put_fat>
 8008c66:	4603      	mov	r3, r0
 8008c68:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008c6a:	7ffb      	ldrb	r3, [r7, #31]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <remove_chain+0x4a>
 8008c70:	7ffb      	ldrb	r3, [r7, #31]
 8008c72:	e03b      	b.n	8008cec <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff fde9 	bl	800884e <get_fat>
 8008c7c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d031      	beq.n	8008ce8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d101      	bne.n	8008c8e <remove_chain+0x64>
 8008c8a:	2302      	movs	r3, #2
 8008c8c:	e02e      	b.n	8008cec <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c94:	d101      	bne.n	8008c9a <remove_chain+0x70>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e028      	b.n	8008cec <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	69b8      	ldr	r0, [r7, #24]
 8008ca0:	f7ff fea9 	bl	80089f6 <put_fat>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ca8:	7ffb      	ldrb	r3, [r7, #31]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <remove_chain+0x88>
 8008cae:	7ffb      	ldrb	r3, [r7, #31]
 8008cb0:	e01c      	b.n	8008cec <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	699a      	ldr	r2, [r3, #24]
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	3b02      	subs	r3, #2
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d20b      	bcs.n	8008cd8 <remove_chain+0xae>
			fs->free_clst++;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	791b      	ldrb	r3, [r3, #4]
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	68ba      	ldr	r2, [r7, #8]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d3c6      	bcc.n	8008c74 <remove_chain+0x4a>
 8008ce6:	e000      	b.n	8008cea <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008ce8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3720      	adds	r7, #32
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b088      	sub	sp, #32
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10d      	bne.n	8008d26 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d004      	beq.n	8008d20 <create_chain+0x2c>
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d31b      	bcc.n	8008d58 <create_chain+0x64>
 8008d20:	2301      	movs	r3, #1
 8008d22:	61bb      	str	r3, [r7, #24]
 8008d24:	e018      	b.n	8008d58 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fd90 	bl	800884e <get_fat>
 8008d2e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d801      	bhi.n	8008d3a <create_chain+0x46>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e070      	b.n	8008e1c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d40:	d101      	bne.n	8008d46 <create_chain+0x52>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	e06a      	b.n	8008e1c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d201      	bcs.n	8008d54 <create_chain+0x60>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	e063      	b.n	8008e1c <create_chain+0x128>
		scl = clst;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	69fa      	ldr	r2, [r7, #28]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d307      	bcc.n	8008d7c <create_chain+0x88>
				ncl = 2;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008d70:	69fa      	ldr	r2, [r7, #28]
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d901      	bls.n	8008d7c <create_chain+0x88>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e04f      	b.n	8008e1c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008d7c:	69f9      	ldr	r1, [r7, #28]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fd65 	bl	800884e <get_fat>
 8008d84:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00e      	beq.n	8008daa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d003      	beq.n	8008d9a <create_chain+0xa6>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d101      	bne.n	8008d9e <create_chain+0xaa>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	e03e      	b.n	8008e1c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d1da      	bne.n	8008d5c <create_chain+0x68>
 8008da6:	2300      	movs	r3, #0
 8008da8:	e038      	b.n	8008e1c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008daa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008dac:	f04f 32ff 	mov.w	r2, #4294967295
 8008db0:	69f9      	ldr	r1, [r7, #28]
 8008db2:	6938      	ldr	r0, [r7, #16]
 8008db4:	f7ff fe1f 	bl	80089f6 <put_fat>
 8008db8:	4603      	mov	r3, r0
 8008dba:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d109      	bne.n	8008dd6 <create_chain+0xe2>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d006      	beq.n	8008dd6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6938      	ldr	r0, [r7, #16]
 8008dce:	f7ff fe12 	bl	80089f6 <put_fat>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008dd6:	7dfb      	ldrb	r3, [r7, #23]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d116      	bne.n	8008e0a <create_chain+0x116>
		fs->last_clst = ncl;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	699a      	ldr	r2, [r3, #24]
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	3b02      	subs	r3, #2
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d804      	bhi.n	8008dfa <create_chain+0x106>
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	1e5a      	subs	r2, r3, #1
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	791b      	ldrb	r3, [r3, #4]
 8008dfe:	f043 0301 	orr.w	r3, r3, #1
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	711a      	strb	r2, [r3, #4]
 8008e08:	e007      	b.n	8008e1a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d102      	bne.n	8008e16 <create_chain+0x122>
 8008e10:	f04f 33ff 	mov.w	r3, #4294967295
 8008e14:	e000      	b.n	8008e18 <create_chain+0x124>
 8008e16:	2301      	movs	r3, #1
 8008e18:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e1a:	69fb      	ldr	r3, [r7, #28]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3720      	adds	r7, #32
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	3304      	adds	r3, #4
 8008e3a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	899b      	ldrh	r3, [r3, #12]
 8008e40:	461a      	mov	r2, r3
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	8952      	ldrh	r2, [r2, #10]
 8008e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e50:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1d1a      	adds	r2, r3, #4
 8008e56:	613a      	str	r2, [r7, #16]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <clmt_clust+0x42>
 8008e62:	2300      	movs	r3, #0
 8008e64:	e010      	b.n	8008e88 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d307      	bcc.n	8008e7e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	617b      	str	r3, [r7, #20]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e7c:	e7e9      	b.n	8008e52 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008e7e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	4413      	add	r3, r2
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eaa:	d204      	bcs.n	8008eb6 <dir_sdi+0x22>
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	f003 031f 	and.w	r3, r3, #31
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <dir_sdi+0x26>
		return FR_INT_ERR;
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e071      	b.n	8008f9e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <dir_sdi+0x46>
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d902      	bls.n	8008eda <dir_sdi+0x46>
		clst = fs->dirbase;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10c      	bne.n	8008efa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	095b      	lsrs	r3, r3, #5
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	8912      	ldrh	r2, [r2, #8]
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d301      	bcc.n	8008ef0 <dir_sdi+0x5c>
 8008eec:	2302      	movs	r3, #2
 8008eee:	e056      	b.n	8008f9e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	61da      	str	r2, [r3, #28]
 8008ef8:	e02d      	b.n	8008f56 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	895b      	ldrh	r3, [r3, #10]
 8008efe:	461a      	mov	r2, r3
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	899b      	ldrh	r3, [r3, #12]
 8008f04:	fb02 f303 	mul.w	r3, r2, r3
 8008f08:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f0a:	e019      	b.n	8008f40 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6979      	ldr	r1, [r7, #20]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7ff fc9c 	bl	800884e <get_fat>
 8008f16:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d101      	bne.n	8008f24 <dir_sdi+0x90>
 8008f20:	2301      	movs	r3, #1
 8008f22:	e03c      	b.n	8008f9e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d904      	bls.n	8008f34 <dir_sdi+0xa0>
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d301      	bcc.n	8008f38 <dir_sdi+0xa4>
 8008f34:	2302      	movs	r3, #2
 8008f36:	e032      	b.n	8008f9e <dir_sdi+0x10a>
			ofs -= csz;
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d2e1      	bcs.n	8008f0c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008f48:	6979      	ldr	r1, [r7, #20]
 8008f4a:	6938      	ldr	r0, [r7, #16]
 8008f4c:	f7ff fc60 	bl	8008810 <clust2sect>
 8008f50:	4602      	mov	r2, r0
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d101      	bne.n	8008f68 <dir_sdi+0xd4>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e01a      	b.n	8008f9e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	69da      	ldr	r2, [r3, #28]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	899b      	ldrh	r3, [r3, #12]
 8008f70:	4619      	mov	r1, r3
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f78:	441a      	add	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	899b      	ldrh	r3, [r3, #12]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f90:	fb00 f202 	mul.w	r2, r0, r2
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	18ca      	adds	r2, r1, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3718      	adds	r7, #24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b086      	sub	sp, #24
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	3320      	adds	r3, #32
 8008fbc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d003      	beq.n	8008fce <dir_next+0x28>
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fcc:	d301      	bcc.n	8008fd2 <dir_next+0x2c>
 8008fce:	2304      	movs	r3, #4
 8008fd0:	e0bb      	b.n	800914a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	899b      	ldrh	r3, [r3, #12]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fde:	fb01 f202 	mul.w	r2, r1, r2
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f040 809d 	bne.w	8009124 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	1c5a      	adds	r2, r3, #1
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10b      	bne.n	8009014 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	095b      	lsrs	r3, r3, #5
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	8912      	ldrh	r2, [r2, #8]
 8009004:	4293      	cmp	r3, r2
 8009006:	f0c0 808d 	bcc.w	8009124 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	61da      	str	r2, [r3, #28]
 8009010:	2304      	movs	r3, #4
 8009012:	e09a      	b.n	800914a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	899b      	ldrh	r3, [r3, #12]
 8009018:	461a      	mov	r2, r3
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	8952      	ldrh	r2, [r2, #10]
 8009024:	3a01      	subs	r2, #1
 8009026:	4013      	ands	r3, r2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d17b      	bne.n	8009124 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	4619      	mov	r1, r3
 8009034:	4610      	mov	r0, r2
 8009036:	f7ff fc0a 	bl	800884e <get_fat>
 800903a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d801      	bhi.n	8009046 <dir_next+0xa0>
 8009042:	2302      	movs	r3, #2
 8009044:	e081      	b.n	800914a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d101      	bne.n	8009052 <dir_next+0xac>
 800904e:	2301      	movs	r3, #1
 8009050:	e07b      	b.n	800914a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	429a      	cmp	r2, r3
 800905a:	d359      	bcc.n	8009110 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d104      	bne.n	800906c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	61da      	str	r2, [r3, #28]
 8009068:	2304      	movs	r3, #4
 800906a:	e06e      	b.n	800914a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	4619      	mov	r1, r3
 8009074:	4610      	mov	r0, r2
 8009076:	f7ff fe3d 	bl	8008cf4 <create_chain>
 800907a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <dir_next+0xe0>
 8009082:	2307      	movs	r3, #7
 8009084:	e061      	b.n	800914a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <dir_next+0xea>
 800908c:	2302      	movs	r3, #2
 800908e:	e05c      	b.n	800914a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	d101      	bne.n	800909c <dir_next+0xf6>
 8009098:	2301      	movs	r3, #1
 800909a:	e056      	b.n	800914a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7ff fad5 	bl	800864c <sync_window>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <dir_next+0x106>
 80090a8:	2301      	movs	r3, #1
 80090aa:	e04e      	b.n	800914a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	899b      	ldrh	r3, [r3, #12]
 80090b6:	461a      	mov	r2, r3
 80090b8:	2100      	movs	r1, #0
 80090ba:	f7ff f8fe 	bl	80082ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090be:	2300      	movs	r3, #0
 80090c0:	613b      	str	r3, [r7, #16]
 80090c2:	6979      	ldr	r1, [r7, #20]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7ff fba3 	bl	8008810 <clust2sect>
 80090ca:	4602      	mov	r2, r0
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	635a      	str	r2, [r3, #52]	; 0x34
 80090d0:	e012      	b.n	80090f8 <dir_next+0x152>
						fs->wflag = 1;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2201      	movs	r2, #1
 80090d6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff fab7 	bl	800864c <sync_window>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d001      	beq.n	80090e8 <dir_next+0x142>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e030      	b.n	800914a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	3301      	adds	r3, #1
 80090ec:	613b      	str	r3, [r7, #16]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	635a      	str	r2, [r3, #52]	; 0x34
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	895b      	ldrh	r3, [r3, #10]
 80090fc:	461a      	mov	r2, r3
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	4293      	cmp	r3, r2
 8009102:	d3e6      	bcc.n	80090d2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad2      	subs	r2, r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009116:	6979      	ldr	r1, [r7, #20]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff fb79 	bl	8008810 <clust2sect>
 800911e:	4602      	mov	r2, r0
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	899b      	ldrh	r3, [r3, #12]
 8009134:	461a      	mov	r2, r3
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	fbb3 f0f2 	udiv	r0, r3, r2
 800913c:	fb00 f202 	mul.w	r2, r0, r2
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	18ca      	adds	r2, r1, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009148:	2300      	movs	r3, #0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b086      	sub	sp, #24
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009162:	2100      	movs	r1, #0
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff fe95 	bl	8008e94 <dir_sdi>
 800916a:	4603      	mov	r3, r0
 800916c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d12b      	bne.n	80091cc <dir_alloc+0x7a>
		n = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	4619      	mov	r1, r3
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff faa8 	bl	80086d4 <move_window>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d11d      	bne.n	80091ca <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2be5      	cmp	r3, #229	; 0xe5
 8009196:	d004      	beq.n	80091a2 <dir_alloc+0x50>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a1b      	ldr	r3, [r3, #32]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d107      	bne.n	80091b2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	3301      	adds	r3, #1
 80091a6:	613b      	str	r3, [r7, #16]
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d102      	bne.n	80091b6 <dir_alloc+0x64>
 80091b0:	e00c      	b.n	80091cc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091b2:	2300      	movs	r3, #0
 80091b4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091b6:	2101      	movs	r1, #1
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff fef4 	bl	8008fa6 <dir_next>
 80091be:	4603      	mov	r3, r0
 80091c0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0d7      	beq.n	8009178 <dir_alloc+0x26>
 80091c8:	e000      	b.n	80091cc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80091ca:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d101      	bne.n	80091d6 <dir_alloc+0x84>
 80091d2:	2307      	movs	r3, #7
 80091d4:	75fb      	strb	r3, [r7, #23]
	return res;
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3718      	adds	r7, #24
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	331a      	adds	r3, #26
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe ffc0 	bl	8008174 <ld_word>
 80091f4:	4603      	mov	r3, r0
 80091f6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d109      	bne.n	8009214 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	3314      	adds	r3, #20
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe ffb5 	bl	8008174 <ld_word>
 800920a:	4603      	mov	r3, r0
 800920c:	041b      	lsls	r3, r3, #16
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	4313      	orrs	r3, r2
 8009212:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009214:	68fb      	ldr	r3, [r7, #12]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	331a      	adds	r3, #26
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	b292      	uxth	r2, r2
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe ffd8 	bl	80081ea <st_word>
	if (fs->fs_type == FS_FAT32) {
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b03      	cmp	r3, #3
 8009240:	d109      	bne.n	8009256 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f103 0214 	add.w	r2, r3, #20
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	0c1b      	lsrs	r3, r3, #16
 800924c:	b29b      	uxth	r3, r3
 800924e:	4619      	mov	r1, r3
 8009250:	4610      	mov	r0, r2
 8009252:	f7fe ffca 	bl	80081ea <st_word>
	}
}
 8009256:	bf00      	nop
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
	...

08009260 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	331a      	adds	r3, #26
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe ff80 	bl	8008174 <ld_word>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <cmp_lfn+0x1e>
 800927a:	2300      	movs	r3, #0
 800927c:	e059      	b.n	8009332 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009286:	1e5a      	subs	r2, r3, #1
 8009288:	4613      	mov	r3, r2
 800928a:	005b      	lsls	r3, r3, #1
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009294:	2301      	movs	r3, #1
 8009296:	81fb      	strh	r3, [r7, #14]
 8009298:	2300      	movs	r3, #0
 800929a:	613b      	str	r3, [r7, #16]
 800929c:	e033      	b.n	8009306 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800929e:	4a27      	ldr	r2, [pc, #156]	; (800933c <cmp_lfn+0xdc>)
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	4413      	add	r3, r2
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	4413      	add	r3, r2
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe ff61 	bl	8008174 <ld_word>
 80092b2:	4603      	mov	r3, r0
 80092b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80092b6:	89fb      	ldrh	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01a      	beq.n	80092f2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2bfe      	cmp	r3, #254	; 0xfe
 80092c0:	d812      	bhi.n	80092e8 <cmp_lfn+0x88>
 80092c2:	89bb      	ldrh	r3, [r7, #12]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f001 fe11 	bl	800aeec <ff_wtoupper>
 80092ca:	4603      	mov	r3, r0
 80092cc:	461c      	mov	r4, r3
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	617a      	str	r2, [r7, #20]
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	4413      	add	r3, r2
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	4618      	mov	r0, r3
 80092de:	f001 fe05 	bl	800aeec <ff_wtoupper>
 80092e2:	4603      	mov	r3, r0
 80092e4:	429c      	cmp	r4, r3
 80092e6:	d001      	beq.n	80092ec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80092e8:	2300      	movs	r3, #0
 80092ea:	e022      	b.n	8009332 <cmp_lfn+0xd2>
			}
			wc = uc;
 80092ec:	89bb      	ldrh	r3, [r7, #12]
 80092ee:	81fb      	strh	r3, [r7, #14]
 80092f0:	e006      	b.n	8009300 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80092f2:	89bb      	ldrh	r3, [r7, #12]
 80092f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d001      	beq.n	8009300 <cmp_lfn+0xa0>
 80092fc:	2300      	movs	r3, #0
 80092fe:	e018      	b.n	8009332 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	3301      	adds	r3, #1
 8009304:	613b      	str	r3, [r7, #16]
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	2b0c      	cmp	r3, #12
 800930a:	d9c8      	bls.n	800929e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <cmp_lfn+0xd0>
 8009318:	89fb      	ldrh	r3, [r7, #14]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d008      	beq.n	8009330 <cmp_lfn+0xd0>
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	005b      	lsls	r3, r3, #1
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	4413      	add	r3, r2
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <cmp_lfn+0xd0>
 800932c:	2300      	movs	r3, #0
 800932e:	e000      	b.n	8009332 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009330:	2301      	movs	r3, #1
}
 8009332:	4618      	mov	r0, r3
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	bd90      	pop	{r4, r7, pc}
 800933a:	bf00      	nop
 800933c:	0800fc80 	.word	0x0800fc80

08009340 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4611      	mov	r1, r2
 800934c:	461a      	mov	r2, r3
 800934e:	460b      	mov	r3, r1
 8009350:	71fb      	strb	r3, [r7, #7]
 8009352:	4613      	mov	r3, r2
 8009354:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	330d      	adds	r3, #13
 800935a:	79ba      	ldrb	r2, [r7, #6]
 800935c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	330b      	adds	r3, #11
 8009362:	220f      	movs	r2, #15
 8009364:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	330c      	adds	r3, #12
 800936a:	2200      	movs	r2, #0
 800936c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	331a      	adds	r3, #26
 8009372:	2100      	movs	r1, #0
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe ff38 	bl	80081ea <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	1e5a      	subs	r2, r3, #1
 800937e:	4613      	mov	r3, r2
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	4413      	add	r3, r2
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4413      	add	r3, r2
 8009388:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	82fb      	strh	r3, [r7, #22]
 800938e:	2300      	movs	r3, #0
 8009390:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009392:	8afb      	ldrh	r3, [r7, #22]
 8009394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009398:	4293      	cmp	r3, r2
 800939a:	d007      	beq.n	80093ac <put_lfn+0x6c>
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	1c5a      	adds	r2, r3, #1
 80093a0:	61fa      	str	r2, [r7, #28]
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4413      	add	r3, r2
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80093ac:	4a17      	ldr	r2, [pc, #92]	; (800940c <put_lfn+0xcc>)
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	4413      	add	r3, r2
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	461a      	mov	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	4413      	add	r3, r2
 80093ba:	8afa      	ldrh	r2, [r7, #22]
 80093bc:	4611      	mov	r1, r2
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe ff13 	bl	80081ea <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80093c4:	8afb      	ldrh	r3, [r7, #22]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <put_lfn+0x90>
 80093ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093ce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	3301      	adds	r3, #1
 80093d4:	61bb      	str	r3, [r7, #24]
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b0c      	cmp	r3, #12
 80093da:	d9da      	bls.n	8009392 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80093dc:	8afb      	ldrh	r3, [r7, #22]
 80093de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d006      	beq.n	80093f4 <put_lfn+0xb4>
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4413      	add	r3, r2
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <put_lfn+0xbc>
 80093f4:	79fb      	ldrb	r3, [r7, #7]
 80093f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	79fa      	ldrb	r2, [r7, #7]
 8009400:	701a      	strb	r2, [r3, #0]
}
 8009402:	bf00      	nop
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	0800fc80 	.word	0x0800fc80

08009410 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08c      	sub	sp, #48	; 0x30
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800941e:	220b      	movs	r2, #11
 8009420:	68b9      	ldr	r1, [r7, #8]
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f7fe ff28 	bl	8008278 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b05      	cmp	r3, #5
 800942c:	d92b      	bls.n	8009486 <gen_numname+0x76>
		sr = seq;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009432:	e022      	b.n	800947a <gen_numname+0x6a>
			wc = *lfn++;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	1c9a      	adds	r2, r3, #2
 8009438:	607a      	str	r2, [r7, #4]
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800943e:	2300      	movs	r3, #0
 8009440:	62bb      	str	r3, [r7, #40]	; 0x28
 8009442:	e017      	b.n	8009474 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	005a      	lsls	r2, r3, #1
 8009448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	4413      	add	r3, r2
 8009450:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009452:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009454:	085b      	lsrs	r3, r3, #1
 8009456:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <gen_numname+0x5e>
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009468:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800946c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	3301      	adds	r3, #1
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	2b0f      	cmp	r3, #15
 8009478:	d9e4      	bls.n	8009444 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1d8      	bne.n	8009434 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009482:	69fb      	ldr	r3, [r7, #28]
 8009484:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009486:	2307      	movs	r3, #7
 8009488:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	f003 030f 	and.w	r3, r3, #15
 8009492:	b2db      	uxtb	r3, r3
 8009494:	3330      	adds	r3, #48	; 0x30
 8009496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800949a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800949e:	2b39      	cmp	r3, #57	; 0x39
 80094a0:	d904      	bls.n	80094ac <gen_numname+0x9c>
 80094a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094a6:	3307      	adds	r3, #7
 80094a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80094ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ae:	1e5a      	subs	r2, r3, #1
 80094b0:	62ba      	str	r2, [r7, #40]	; 0x28
 80094b2:	3330      	adds	r3, #48	; 0x30
 80094b4:	443b      	add	r3, r7
 80094b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80094ba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	091b      	lsrs	r3, r3, #4
 80094c2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1df      	bne.n	800948a <gen_numname+0x7a>
	ns[i] = '~';
 80094ca:	f107 0214 	add.w	r2, r7, #20
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	4413      	add	r3, r2
 80094d2:	227e      	movs	r2, #126	; 0x7e
 80094d4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80094d6:	2300      	movs	r3, #0
 80094d8:	627b      	str	r3, [r7, #36]	; 0x24
 80094da:	e002      	b.n	80094e2 <gen_numname+0xd2>
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	3301      	adds	r3, #1
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24
 80094e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d205      	bcs.n	80094f6 <gen_numname+0xe6>
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	4413      	add	r3, r2
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b20      	cmp	r3, #32
 80094f4:	d1f2      	bne.n	80094dc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	2b07      	cmp	r3, #7
 80094fa:	d807      	bhi.n	800950c <gen_numname+0xfc>
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	62ba      	str	r2, [r7, #40]	; 0x28
 8009502:	3330      	adds	r3, #48	; 0x30
 8009504:	443b      	add	r3, r7
 8009506:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800950a:	e000      	b.n	800950e <gen_numname+0xfe>
 800950c:	2120      	movs	r1, #32
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	627a      	str	r2, [r7, #36]	; 0x24
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	460a      	mov	r2, r1
 800951a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	2b07      	cmp	r3, #7
 8009520:	d9e9      	bls.n	80094f6 <gen_numname+0xe6>
}
 8009522:	bf00      	nop
 8009524:	bf00      	nop
 8009526:	3730      	adds	r7, #48	; 0x30
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009538:	230b      	movs	r3, #11
 800953a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	b2da      	uxtb	r2, r3
 8009540:	0852      	lsrs	r2, r2, #1
 8009542:	01db      	lsls	r3, r3, #7
 8009544:	4313      	orrs	r3, r2
 8009546:	b2da      	uxtb	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	1c59      	adds	r1, r3, #1
 800954c:	6079      	str	r1, [r7, #4]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	4413      	add	r3, r2
 8009552:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	3b01      	subs	r3, #1
 8009558:	60bb      	str	r3, [r7, #8]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1ed      	bne.n	800953c <sum_sfn+0x10>
	return sum;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b086      	sub	sp, #24
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800957c:	2100      	movs	r1, #0
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fc88 	bl	8008e94 <dir_sdi>
 8009584:	4603      	mov	r3, r0
 8009586:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <dir_find+0x24>
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	e0a9      	b.n	80096e6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009592:	23ff      	movs	r3, #255	; 0xff
 8009594:	753b      	strb	r3, [r7, #20]
 8009596:	7d3b      	ldrb	r3, [r7, #20]
 8009598:	757b      	strb	r3, [r7, #21]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6938      	ldr	r0, [r7, #16]
 80095aa:	f7ff f893 	bl	80086d4 <move_window>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f040 8090 	bne.w	80096da <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80095c2:	7dbb      	ldrb	r3, [r7, #22]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d102      	bne.n	80095ce <dir_find+0x60>
 80095c8:	2304      	movs	r3, #4
 80095ca:	75fb      	strb	r3, [r7, #23]
 80095cc:	e08a      	b.n	80096e4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	330b      	adds	r3, #11
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095da:	73fb      	strb	r3, [r7, #15]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7bfa      	ldrb	r2, [r7, #15]
 80095e0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80095e2:	7dbb      	ldrb	r3, [r7, #22]
 80095e4:	2be5      	cmp	r3, #229	; 0xe5
 80095e6:	d007      	beq.n	80095f8 <dir_find+0x8a>
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	f003 0308 	and.w	r3, r3, #8
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d009      	beq.n	8009606 <dir_find+0x98>
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	2b0f      	cmp	r3, #15
 80095f6:	d006      	beq.n	8009606 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80095f8:	23ff      	movs	r3, #255	; 0xff
 80095fa:	757b      	strb	r3, [r7, #21]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009602:	631a      	str	r2, [r3, #48]	; 0x30
 8009604:	e05e      	b.n	80096c4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	2b0f      	cmp	r3, #15
 800960a:	d136      	bne.n	800967a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	d154      	bne.n	80096c4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800961a:	7dbb      	ldrb	r3, [r7, #22]
 800961c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00d      	beq.n	8009640 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	7b5b      	ldrb	r3, [r3, #13]
 800962a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800962c:	7dbb      	ldrb	r3, [r7, #22]
 800962e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009632:	75bb      	strb	r3, [r7, #22]
 8009634:	7dbb      	ldrb	r3, [r7, #22]
 8009636:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	695a      	ldr	r2, [r3, #20]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009640:	7dba      	ldrb	r2, [r7, #22]
 8009642:	7d7b      	ldrb	r3, [r7, #21]
 8009644:	429a      	cmp	r2, r3
 8009646:	d115      	bne.n	8009674 <dir_find+0x106>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a1b      	ldr	r3, [r3, #32]
 800964c:	330d      	adds	r3, #13
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	7d3a      	ldrb	r2, [r7, #20]
 8009652:	429a      	cmp	r2, r3
 8009654:	d10e      	bne.n	8009674 <dir_find+0x106>
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	4619      	mov	r1, r3
 8009660:	4610      	mov	r0, r2
 8009662:	f7ff fdfd 	bl	8009260 <cmp_lfn>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <dir_find+0x106>
 800966c:	7d7b      	ldrb	r3, [r7, #21]
 800966e:	3b01      	subs	r3, #1
 8009670:	b2db      	uxtb	r3, r3
 8009672:	e000      	b.n	8009676 <dir_find+0x108>
 8009674:	23ff      	movs	r3, #255	; 0xff
 8009676:	757b      	strb	r3, [r7, #21]
 8009678:	e024      	b.n	80096c4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800967a:	7d7b      	ldrb	r3, [r7, #21]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <dir_find+0x126>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	4618      	mov	r0, r3
 8009686:	f7ff ff51 	bl	800952c <sum_sfn>
 800968a:	4603      	mov	r3, r0
 800968c:	461a      	mov	r2, r3
 800968e:	7d3b      	ldrb	r3, [r7, #20]
 8009690:	4293      	cmp	r3, r2
 8009692:	d024      	beq.n	80096de <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d10a      	bne.n	80096b8 <dir_find+0x14a>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a18      	ldr	r0, [r3, #32]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3324      	adds	r3, #36	; 0x24
 80096aa:	220b      	movs	r2, #11
 80096ac:	4619      	mov	r1, r3
 80096ae:	f7fe fe1f 	bl	80082f0 <mem_cmp>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d014      	beq.n	80096e2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80096b8:	23ff      	movs	r3, #255	; 0xff
 80096ba:	757b      	strb	r3, [r7, #21]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f04f 32ff 	mov.w	r2, #4294967295
 80096c2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80096c4:	2100      	movs	r1, #0
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff fc6d 	bl	8008fa6 <dir_next>
 80096cc:	4603      	mov	r3, r0
 80096ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f43f af65 	beq.w	80095a2 <dir_find+0x34>
 80096d8:	e004      	b.n	80096e4 <dir_find+0x176>
		if (res != FR_OK) break;
 80096da:	bf00      	nop
 80096dc:	e002      	b.n	80096e4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80096de:	bf00      	nop
 80096e0:	e000      	b.n	80096e4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80096e2:	bf00      	nop

	return res;
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
	...

080096f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08c      	sub	sp, #48	; 0x30
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009704:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <dir_register+0x20>
 800970c:	2306      	movs	r3, #6
 800970e:	e0e0      	b.n	80098d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009710:	2300      	movs	r3, #0
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
 8009714:	e002      	b.n	800971c <dir_register+0x2c>
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	3301      	adds	r3, #1
 800971a:	627b      	str	r3, [r7, #36]	; 0x24
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	691a      	ldr	r2, [r3, #16]
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	4413      	add	r3, r2
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1f4      	bne.n	8009716 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	220c      	movs	r2, #12
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe fd9d 	bl	8008278 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d032      	beq.n	80097ae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2240      	movs	r2, #64	; 0x40
 800974c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009750:	2301      	movs	r3, #1
 8009752:	62bb      	str	r3, [r7, #40]	; 0x28
 8009754:	e016      	b.n	8009784 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	f107 010c 	add.w	r1, r7, #12
 8009764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009766:	f7ff fe53 	bl	8009410 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff feff 	bl	800956e <dir_find>
 8009770:	4603      	mov	r3, r0
 8009772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800977a:	2b00      	cmp	r3, #0
 800977c:	d106      	bne.n	800978c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	3301      	adds	r3, #1
 8009782:	62bb      	str	r3, [r7, #40]	; 0x28
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	2b63      	cmp	r3, #99	; 0x63
 8009788:	d9e5      	bls.n	8009756 <dir_register+0x66>
 800978a:	e000      	b.n	800978e <dir_register+0x9e>
			if (res != FR_OK) break;
 800978c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	2b64      	cmp	r3, #100	; 0x64
 8009792:	d101      	bne.n	8009798 <dir_register+0xa8>
 8009794:	2307      	movs	r3, #7
 8009796:	e09c      	b.n	80098d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800979c:	2b04      	cmp	r3, #4
 800979e:	d002      	beq.n	80097a6 <dir_register+0xb6>
 80097a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097a4:	e095      	b.n	80098d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80097a6:	7dfa      	ldrb	r2, [r7, #23]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80097ae:	7dfb      	ldrb	r3, [r7, #23]
 80097b0:	f003 0302 	and.w	r3, r3, #2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <dir_register+0xd8>
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	330c      	adds	r3, #12
 80097bc:	4a47      	ldr	r2, [pc, #284]	; (80098dc <dir_register+0x1ec>)
 80097be:	fba2 2303 	umull	r2, r3, r2, r3
 80097c2:	089b      	lsrs	r3, r3, #2
 80097c4:	3301      	adds	r3, #1
 80097c6:	e000      	b.n	80097ca <dir_register+0xda>
 80097c8:	2301      	movs	r3, #1
 80097ca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80097cc:	6a39      	ldr	r1, [r7, #32]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff fcbf 	bl	8009152 <dir_alloc>
 80097d4:	4603      	mov	r3, r0
 80097d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80097da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d148      	bne.n	8009874 <dir_register+0x184>
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	3b01      	subs	r3, #1
 80097e6:	623b      	str	r3, [r7, #32]
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d042      	beq.n	8009874 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	695a      	ldr	r2, [r3, #20]
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	015b      	lsls	r3, r3, #5
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff fb4a 	bl	8008e94 <dir_sdi>
 8009800:	4603      	mov	r3, r0
 8009802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800980a:	2b00      	cmp	r3, #0
 800980c:	d132      	bne.n	8009874 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3324      	adds	r3, #36	; 0x24
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fe8a 	bl	800952c <sum_sfn>
 8009818:	4603      	mov	r3, r0
 800981a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	4619      	mov	r1, r3
 8009822:	69f8      	ldr	r0, [r7, #28]
 8009824:	f7fe ff56 	bl	80086d4 <move_window>
 8009828:	4603      	mov	r3, r0
 800982a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800982e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009832:	2b00      	cmp	r3, #0
 8009834:	d11d      	bne.n	8009872 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	6918      	ldr	r0, [r3, #16]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a19      	ldr	r1, [r3, #32]
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	b2da      	uxtb	r2, r3
 8009842:	7efb      	ldrb	r3, [r7, #27]
 8009844:	f7ff fd7c 	bl	8009340 <put_lfn>
				fs->wflag = 1;
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	2201      	movs	r2, #1
 800984c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800984e:	2100      	movs	r1, #0
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff fba8 	bl	8008fa6 <dir_next>
 8009856:	4603      	mov	r3, r0
 8009858:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800985c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009860:	2b00      	cmp	r3, #0
 8009862:	d107      	bne.n	8009874 <dir_register+0x184>
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	3b01      	subs	r3, #1
 8009868:	623b      	str	r3, [r7, #32]
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1d5      	bne.n	800981c <dir_register+0x12c>
 8009870:	e000      	b.n	8009874 <dir_register+0x184>
				if (res != FR_OK) break;
 8009872:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009878:	2b00      	cmp	r3, #0
 800987a:	d128      	bne.n	80098ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	4619      	mov	r1, r3
 8009882:	69f8      	ldr	r0, [r7, #28]
 8009884:	f7fe ff26 	bl	80086d4 <move_window>
 8009888:	4603      	mov	r3, r0
 800988a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800988e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009892:	2b00      	cmp	r3, #0
 8009894:	d11b      	bne.n	80098ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	2220      	movs	r2, #32
 800989c:	2100      	movs	r1, #0
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe fd0b 	bl	80082ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a18      	ldr	r0, [r3, #32]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	220b      	movs	r2, #11
 80098ae:	4619      	mov	r1, r3
 80098b0:	f7fe fce2 	bl	8008278 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	330c      	adds	r3, #12
 80098c0:	f002 0218 	and.w	r2, r2, #24
 80098c4:	b2d2      	uxtb	r2, r2
 80098c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	2201      	movs	r2, #1
 80098cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80098ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3730      	adds	r7, #48	; 0x30
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	4ec4ec4f 	.word	0x4ec4ec4f

080098e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08a      	sub	sp, #40	; 0x28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	613b      	str	r3, [r7, #16]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	61ba      	str	r2, [r7, #24]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4413      	add	r3, r2
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800990e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009910:	2b1f      	cmp	r3, #31
 8009912:	d940      	bls.n	8009996 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009916:	2b2f      	cmp	r3, #47	; 0x2f
 8009918:	d006      	beq.n	8009928 <create_name+0x48>
 800991a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800991c:	2b5c      	cmp	r3, #92	; 0x5c
 800991e:	d110      	bne.n	8009942 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009920:	e002      	b.n	8009928 <create_name+0x48>
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	3301      	adds	r3, #1
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	4413      	add	r3, r2
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b2f      	cmp	r3, #47	; 0x2f
 8009932:	d0f6      	beq.n	8009922 <create_name+0x42>
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	4413      	add	r3, r2
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b5c      	cmp	r3, #92	; 0x5c
 800993e:	d0f0      	beq.n	8009922 <create_name+0x42>
			break;
 8009940:	e02a      	b.n	8009998 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	2bfe      	cmp	r3, #254	; 0xfe
 8009946:	d901      	bls.n	800994c <create_name+0x6c>
 8009948:	2306      	movs	r3, #6
 800994a:	e17d      	b.n	8009c48 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800994c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800994e:	b2db      	uxtb	r3, r3
 8009950:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009954:	2101      	movs	r1, #1
 8009956:	4618      	mov	r0, r3
 8009958:	f001 fa8c 	bl	800ae74 <ff_convert>
 800995c:	4603      	mov	r3, r0
 800995e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009960:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <create_name+0x8a>
 8009966:	2306      	movs	r3, #6
 8009968:	e16e      	b.n	8009c48 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800996a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800996c:	2b7f      	cmp	r3, #127	; 0x7f
 800996e:	d809      	bhi.n	8009984 <create_name+0xa4>
 8009970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009972:	4619      	mov	r1, r3
 8009974:	488d      	ldr	r0, [pc, #564]	; (8009bac <create_name+0x2cc>)
 8009976:	f7fe fce2 	bl	800833e <chk_chr>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <create_name+0xa4>
 8009980:	2306      	movs	r3, #6
 8009982:	e161      	b.n	8009c48 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	617a      	str	r2, [r7, #20]
 800998a:	005b      	lsls	r3, r3, #1
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4413      	add	r3, r2
 8009990:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009992:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009994:	e7b4      	b.n	8009900 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8009996:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	441a      	add	r2, r3
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80099a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099a4:	2b1f      	cmp	r3, #31
 80099a6:	d801      	bhi.n	80099ac <create_name+0xcc>
 80099a8:	2304      	movs	r3, #4
 80099aa:	e000      	b.n	80099ae <create_name+0xce>
 80099ac:	2300      	movs	r3, #0
 80099ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099b2:	e011      	b.n	80099d8 <create_name+0xf8>
		w = lfn[di - 1];
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80099ba:	3b01      	subs	r3, #1
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	4413      	add	r3, r2
 80099c2:	881b      	ldrh	r3, [r3, #0]
 80099c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80099c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099c8:	2b20      	cmp	r3, #32
 80099ca:	d002      	beq.n	80099d2 <create_name+0xf2>
 80099cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ce:	2b2e      	cmp	r3, #46	; 0x2e
 80099d0:	d106      	bne.n	80099e0 <create_name+0x100>
		di--;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1ea      	bne.n	80099b4 <create_name+0xd4>
 80099de:	e000      	b.n	80099e2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80099e0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4413      	add	r3, r2
 80099ea:	2200      	movs	r2, #0
 80099ec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <create_name+0x118>
 80099f4:	2306      	movs	r3, #6
 80099f6:	e127      	b.n	8009c48 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3324      	adds	r3, #36	; 0x24
 80099fc:	220b      	movs	r2, #11
 80099fe:	2120      	movs	r1, #32
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fe fc5a 	bl	80082ba <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009a06:	2300      	movs	r3, #0
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	e002      	b.n	8009a12 <create_name+0x132>
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	61bb      	str	r3, [r7, #24]
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4413      	add	r3, r2
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d0f5      	beq.n	8009a0c <create_name+0x12c>
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a2c:	d0ee      	beq.n	8009a0c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d009      	beq.n	8009a48 <create_name+0x168>
 8009a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a38:	f043 0303 	orr.w	r3, r3, #3
 8009a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009a40:	e002      	b.n	8009a48 <create_name+0x168>
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d009      	beq.n	8009a62 <create_name+0x182>
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a54:	3b01      	subs	r3, #1
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a60:	d1ef      	bne.n	8009a42 <create_name+0x162>

	i = b = 0; ni = 8;
 8009a62:	2300      	movs	r3, #0
 8009a64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a68:	2300      	movs	r3, #0
 8009a6a:	623b      	str	r3, [r7, #32]
 8009a6c:	2308      	movs	r3, #8
 8009a6e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	61ba      	str	r2, [r7, #24]
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8009a80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 8090 	beq.w	8009ba8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	d006      	beq.n	8009a9c <create_name+0x1bc>
 8009a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a90:	2b2e      	cmp	r3, #46	; 0x2e
 8009a92:	d10a      	bne.n	8009aaa <create_name+0x1ca>
 8009a94:	69ba      	ldr	r2, [r7, #24]
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d006      	beq.n	8009aaa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa0:	f043 0303 	orr.w	r3, r3, #3
 8009aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009aa8:	e07d      	b.n	8009ba6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009aaa:	6a3a      	ldr	r2, [r7, #32]
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d203      	bcs.n	8009aba <create_name+0x1da>
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d123      	bne.n	8009b02 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	2b0b      	cmp	r3, #11
 8009abe:	d106      	bne.n	8009ace <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ac4:	f043 0303 	orr.w	r3, r3, #3
 8009ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009acc:	e075      	b.n	8009bba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d005      	beq.n	8009ae2 <create_name+0x202>
 8009ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ada:	f043 0303 	orr.w	r3, r3, #3
 8009ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d866      	bhi.n	8009bb8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	61bb      	str	r3, [r7, #24]
 8009aee:	2308      	movs	r3, #8
 8009af0:	623b      	str	r3, [r7, #32]
 8009af2:	230b      	movs	r3, #11
 8009af4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009af6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b00:	e051      	b.n	8009ba6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b04:	2b7f      	cmp	r3, #127	; 0x7f
 8009b06:	d914      	bls.n	8009b32 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f001 f9b1 	bl	800ae74 <ff_convert>
 8009b12:	4603      	mov	r3, r0
 8009b14:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d004      	beq.n	8009b26 <create_name+0x246>
 8009b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b1e:	3b80      	subs	r3, #128	; 0x80
 8009b20:	4a23      	ldr	r2, [pc, #140]	; (8009bb0 <create_name+0x2d0>)
 8009b22:	5cd3      	ldrb	r3, [r2, r3]
 8009b24:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b2a:	f043 0302 	orr.w	r3, r3, #2
 8009b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d007      	beq.n	8009b48 <create_name+0x268>
 8009b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	481d      	ldr	r0, [pc, #116]	; (8009bb4 <create_name+0x2d4>)
 8009b3e:	f7fe fbfe 	bl	800833e <chk_chr>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d008      	beq.n	8009b5a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009b48:	235f      	movs	r3, #95	; 0x5f
 8009b4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b50:	f043 0303 	orr.w	r3, r3, #3
 8009b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b58:	e01b      	b.n	8009b92 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009b5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b5c:	2b40      	cmp	r3, #64	; 0x40
 8009b5e:	d909      	bls.n	8009b74 <create_name+0x294>
 8009b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b62:	2b5a      	cmp	r3, #90	; 0x5a
 8009b64:	d806      	bhi.n	8009b74 <create_name+0x294>
					b |= 2;
 8009b66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b6a:	f043 0302 	orr.w	r3, r3, #2
 8009b6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b72:	e00e      	b.n	8009b92 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b76:	2b60      	cmp	r3, #96	; 0x60
 8009b78:	d90b      	bls.n	8009b92 <create_name+0x2b2>
 8009b7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b7c:	2b7a      	cmp	r3, #122	; 0x7a
 8009b7e:	d808      	bhi.n	8009b92 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8009b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b84:	f043 0301 	orr.w	r3, r3, #1
 8009b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b8e:	3b20      	subs	r3, #32
 8009b90:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	623a      	str	r2, [r7, #32]
 8009b98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009b9a:	b2d1      	uxtb	r1, r2
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	460a      	mov	r2, r1
 8009ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8009ba6:	e763      	b.n	8009a70 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009ba8:	bf00      	nop
 8009baa:	e006      	b.n	8009bba <create_name+0x2da>
 8009bac:	0800fb98 	.word	0x0800fb98
 8009bb0:	0800fc00 	.word	0x0800fc00
 8009bb4:	0800fba4 	.word	0x0800fba4
			if (si > di) break;			/* No extension */
 8009bb8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009bc0:	2be5      	cmp	r3, #229	; 0xe5
 8009bc2:	d103      	bne.n	8009bcc <create_name+0x2ec>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2205      	movs	r2, #5
 8009bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	2b08      	cmp	r3, #8
 8009bd0:	d104      	bne.n	8009bdc <create_name+0x2fc>
 8009bd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009be0:	f003 030c 	and.w	r3, r3, #12
 8009be4:	2b0c      	cmp	r3, #12
 8009be6:	d005      	beq.n	8009bf4 <create_name+0x314>
 8009be8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d105      	bne.n	8009c00 <create_name+0x320>
 8009bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bf8:	f043 0302 	orr.w	r3, r3, #2
 8009bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d117      	bne.n	8009c3c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d105      	bne.n	8009c24 <create_name+0x344>
 8009c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c1c:	f043 0310 	orr.w	r3, r3, #16
 8009c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009c24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c28:	f003 030c 	and.w	r3, r3, #12
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	d105      	bne.n	8009c3c <create_name+0x35c>
 8009c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c34:	f043 0308 	orr.w	r3, r3, #8
 8009c38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009c42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009c46:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3728      	adds	r7, #40	; 0x28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c64:	e002      	b.n	8009c6c <follow_path+0x1c>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	603b      	str	r3, [r7, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b2f      	cmp	r3, #47	; 0x2f
 8009c72:	d0f8      	beq.n	8009c66 <follow_path+0x16>
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	2b5c      	cmp	r3, #92	; 0x5c
 8009c7a:	d0f4      	beq.n	8009c66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b1f      	cmp	r3, #31
 8009c88:	d80a      	bhi.n	8009ca0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2280      	movs	r2, #128	; 0x80
 8009c8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009c92:	2100      	movs	r1, #0
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7ff f8fd 	bl	8008e94 <dir_sdi>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]
 8009c9e:	e048      	b.n	8009d32 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ca0:	463b      	mov	r3, r7
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7ff fe1b 	bl	80098e0 <create_name>
 8009caa:	4603      	mov	r3, r0
 8009cac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d139      	bne.n	8009d28 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7ff fc5a 	bl	800956e <dir_find>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009cc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00a      	beq.n	8009ce2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d12c      	bne.n	8009d2c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d127      	bne.n	8009d2c <follow_path+0xdc>
 8009cdc:	2305      	movs	r3, #5
 8009cde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ce0:	e024      	b.n	8009d2c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d121      	bne.n	8009d30 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	799b      	ldrb	r3, [r3, #6]
 8009cf0:	f003 0310 	and.w	r3, r3, #16
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d102      	bne.n	8009cfe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009cf8:	2305      	movs	r3, #5
 8009cfa:	75fb      	strb	r3, [r7, #23]
 8009cfc:	e019      	b.n	8009d32 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	8992      	ldrh	r2, [r2, #12]
 8009d0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009d10:	fb00 f202 	mul.w	r2, r0, r2
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	440b      	add	r3, r1
 8009d18:	4619      	mov	r1, r3
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f7ff fa60 	bl	80091e0 <ld_clust>
 8009d20:	4602      	mov	r2, r0
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009d26:	e7bb      	b.n	8009ca0 <follow_path+0x50>
			if (res != FR_OK) break;
 8009d28:	bf00      	nop
 8009d2a:	e002      	b.n	8009d32 <follow_path+0xe2>
				break;
 8009d2c:	bf00      	nop
 8009d2e:	e000      	b.n	8009d32 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009d30:	bf00      	nop
			}
		}
	}

	return res;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009d44:	f04f 33ff 	mov.w	r3, #4294967295
 8009d48:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d031      	beq.n	8009db6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e002      	b.n	8009d60 <get_ldnumber+0x24>
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	617b      	str	r3, [r7, #20]
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b1f      	cmp	r3, #31
 8009d66:	d903      	bls.n	8009d70 <get_ldnumber+0x34>
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	2b3a      	cmp	r3, #58	; 0x3a
 8009d6e:	d1f4      	bne.n	8009d5a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b3a      	cmp	r3, #58	; 0x3a
 8009d76:	d11c      	bne.n	8009db2 <get_ldnumber+0x76>
			tp = *path;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	60fa      	str	r2, [r7, #12]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	3b30      	subs	r3, #48	; 0x30
 8009d88:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	2b09      	cmp	r3, #9
 8009d8e:	d80e      	bhi.n	8009dae <get_ldnumber+0x72>
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d10a      	bne.n	8009dae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d107      	bne.n	8009dae <get_ldnumber+0x72>
					vol = (int)i;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	3301      	adds	r3, #1
 8009da6:	617b      	str	r3, [r7, #20]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	e002      	b.n	8009db8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009db2:	2300      	movs	r3, #0
 8009db4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009db6:	693b      	ldr	r3, [r7, #16]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	371c      	adds	r7, #28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	70da      	strb	r2, [r3, #3]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7fe fc78 	bl	80086d4 <move_window>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <check_fs+0x2a>
 8009dea:	2304      	movs	r3, #4
 8009dec:	e038      	b.n	8009e60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3338      	adds	r3, #56	; 0x38
 8009df2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe f9bc 	bl	8008174 <ld_word>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	461a      	mov	r2, r3
 8009e00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d001      	beq.n	8009e0c <check_fs+0x48>
 8009e08:	2303      	movs	r3, #3
 8009e0a:	e029      	b.n	8009e60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e12:	2be9      	cmp	r3, #233	; 0xe9
 8009e14:	d009      	beq.n	8009e2a <check_fs+0x66>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e1c:	2beb      	cmp	r3, #235	; 0xeb
 8009e1e:	d11e      	bne.n	8009e5e <check_fs+0x9a>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e26:	2b90      	cmp	r3, #144	; 0x90
 8009e28:	d119      	bne.n	8009e5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3338      	adds	r3, #56	; 0x38
 8009e2e:	3336      	adds	r3, #54	; 0x36
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fe f9b7 	bl	80081a4 <ld_dword>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e3c:	4a0a      	ldr	r2, [pc, #40]	; (8009e68 <check_fs+0xa4>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d101      	bne.n	8009e46 <check_fs+0x82>
 8009e42:	2300      	movs	r3, #0
 8009e44:	e00c      	b.n	8009e60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3338      	adds	r3, #56	; 0x38
 8009e4a:	3352      	adds	r3, #82	; 0x52
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fe f9a9 	bl	80081a4 <ld_dword>
 8009e52:	4603      	mov	r3, r0
 8009e54:	4a05      	ldr	r2, [pc, #20]	; (8009e6c <check_fs+0xa8>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d101      	bne.n	8009e5e <check_fs+0x9a>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	e000      	b.n	8009e60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e5e:	2302      	movs	r3, #2
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	00544146 	.word	0x00544146
 8009e6c:	33544146 	.word	0x33544146

08009e70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b096      	sub	sp, #88	; 0x58
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7ff ff59 	bl	8009d3c <get_ldnumber>
 8009e8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	da01      	bge.n	8009e96 <find_volume+0x26>
 8009e92:	230b      	movs	r3, #11
 8009e94:	e265      	b.n	800a362 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e96:	4a9f      	ldr	r2, [pc, #636]	; (800a114 <find_volume+0x2a4>)
 8009e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <find_volume+0x3a>
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	e25b      	b.n	800a362 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009eae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	f023 0301 	bic.w	r3, r3, #1
 8009eb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d01a      	beq.n	8009ef6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec2:	785b      	ldrb	r3, [r3, #1]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7fe f8b5 	bl	8008034 <disk_status>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10c      	bne.n	8009ef6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d007      	beq.n	8009ef2 <find_volume+0x82>
 8009ee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ee6:	f003 0304 	and.w	r3, r3, #4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009eee:	230a      	movs	r3, #10
 8009ef0:	e237      	b.n	800a362 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	e235      	b.n	800a362 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	2200      	movs	r2, #0
 8009efa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fe f8ad 	bl	8008068 <disk_initialize>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009f14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f18:	f003 0301 	and.w	r3, r3, #1
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009f20:	2303      	movs	r3, #3
 8009f22:	e21e      	b.n	800a362 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009f24:	79fb      	ldrb	r3, [r7, #7]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <find_volume+0xca>
 8009f2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009f2e:	f003 0304 	and.w	r3, r3, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d001      	beq.n	8009f3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009f36:	230a      	movs	r3, #10
 8009f38:	e213      	b.n	800a362 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	7858      	ldrb	r0, [r3, #1]
 8009f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f40:	330c      	adds	r3, #12
 8009f42:	461a      	mov	r2, r3
 8009f44:	2102      	movs	r1, #2
 8009f46:	f7fe f8f7 	bl	8008138 <disk_ioctl>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <find_volume+0xe4>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e206      	b.n	800a362 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	899b      	ldrh	r3, [r3, #12]
 8009f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f5c:	d80d      	bhi.n	8009f7a <find_volume+0x10a>
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	899b      	ldrh	r3, [r3, #12]
 8009f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f66:	d308      	bcc.n	8009f7a <find_volume+0x10a>
 8009f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6a:	899b      	ldrh	r3, [r3, #12]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	899b      	ldrh	r3, [r3, #12]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	4013      	ands	r3, r2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <find_volume+0x10e>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e1f1      	b.n	800a362 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009f82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f86:	f7ff ff1d 	bl	8009dc4 <check_fs>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d149      	bne.n	800a02c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f98:	2300      	movs	r3, #0
 8009f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8009f9c:	e01e      	b.n	8009fdc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fa6:	011b      	lsls	r3, r3, #4
 8009fa8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009fac:	4413      	add	r3, r2
 8009fae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d006      	beq.n	8009fc8 <find_volume+0x158>
 8009fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe f8f0 	bl	80081a4 <ld_dword>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	e000      	b.n	8009fca <find_volume+0x15a>
 8009fc8:	2200      	movs	r2, #0
 8009fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	3358      	adds	r3, #88	; 0x58
 8009fd0:	443b      	add	r3, r7
 8009fd2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fd8:	3301      	adds	r3, #1
 8009fda:	643b      	str	r3, [r7, #64]	; 0x40
 8009fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	d9dd      	bls.n	8009f9e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <find_volume+0x182>
 8009fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	3358      	adds	r3, #88	; 0x58
 8009ff8:	443b      	add	r3, r7
 8009ffa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009ffe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a002:	2b00      	cmp	r3, #0
 800a004:	d005      	beq.n	800a012 <find_volume+0x1a2>
 800a006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a00a:	f7ff fedb 	bl	8009dc4 <check_fs>
 800a00e:	4603      	mov	r3, r0
 800a010:	e000      	b.n	800a014 <find_volume+0x1a4>
 800a012:	2303      	movs	r3, #3
 800a014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d905      	bls.n	800a02c <find_volume+0x1bc>
 800a020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a022:	3301      	adds	r3, #1
 800a024:	643b      	str	r3, [r7, #64]	; 0x40
 800a026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d9e2      	bls.n	8009ff2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a02c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a030:	2b04      	cmp	r3, #4
 800a032:	d101      	bne.n	800a038 <find_volume+0x1c8>
 800a034:	2301      	movs	r3, #1
 800a036:	e194      	b.n	800a362 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a038:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d901      	bls.n	800a044 <find_volume+0x1d4>
 800a040:	230d      	movs	r3, #13
 800a042:	e18e      	b.n	800a362 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	3338      	adds	r3, #56	; 0x38
 800a048:	330b      	adds	r3, #11
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fe f892 	bl	8008174 <ld_word>
 800a050:	4603      	mov	r3, r0
 800a052:	461a      	mov	r2, r3
 800a054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a056:	899b      	ldrh	r3, [r3, #12]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d001      	beq.n	800a060 <find_volume+0x1f0>
 800a05c:	230d      	movs	r3, #13
 800a05e:	e180      	b.n	800a362 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a062:	3338      	adds	r3, #56	; 0x38
 800a064:	3316      	adds	r3, #22
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe f884 	bl	8008174 <ld_word>
 800a06c:	4603      	mov	r3, r0
 800a06e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <find_volume+0x214>
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	3338      	adds	r3, #56	; 0x38
 800a07a:	3324      	adds	r3, #36	; 0x24
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fe f891 	bl	80081a4 <ld_dword>
 800a082:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a088:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800a090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a092:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	789b      	ldrb	r3, [r3, #2]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d005      	beq.n	800a0a8 <find_volume+0x238>
 800a09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09e:	789b      	ldrb	r3, [r3, #2]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d001      	beq.n	800a0a8 <find_volume+0x238>
 800a0a4:	230d      	movs	r3, #13
 800a0a6:	e15c      	b.n	800a362 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0aa:	789b      	ldrb	r3, [r3, #2]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0b0:	fb02 f303 	mul.w	r3, r2, r3
 800a0b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c4:	895b      	ldrh	r3, [r3, #10]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d008      	beq.n	800a0dc <find_volume+0x26c>
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0cc:	895b      	ldrh	r3, [r3, #10]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d2:	895b      	ldrh	r3, [r3, #10]
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <find_volume+0x270>
 800a0dc:	230d      	movs	r3, #13
 800a0de:	e140      	b.n	800a362 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e2:	3338      	adds	r3, #56	; 0x38
 800a0e4:	3311      	adds	r3, #17
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe f844 	bl	8008174 <ld_word>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	891b      	ldrh	r3, [r3, #8]
 800a0f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0fa:	8992      	ldrh	r2, [r2, #12]
 800a0fc:	0952      	lsrs	r2, r2, #5
 800a0fe:	b292      	uxth	r2, r2
 800a100:	fbb3 f1f2 	udiv	r1, r3, r2
 800a104:	fb01 f202 	mul.w	r2, r1, r2
 800a108:	1a9b      	subs	r3, r3, r2
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <find_volume+0x2a8>
 800a110:	230d      	movs	r3, #13
 800a112:	e126      	b.n	800a362 <find_volume+0x4f2>
 800a114:	20002840 	.word	0x20002840

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	3338      	adds	r3, #56	; 0x38
 800a11c:	3313      	adds	r3, #19
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe f828 	bl	8008174 <ld_word>
 800a124:	4603      	mov	r3, r0
 800a126:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <find_volume+0x2cc>
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	3338      	adds	r3, #56	; 0x38
 800a132:	3320      	adds	r3, #32
 800a134:	4618      	mov	r0, r3
 800a136:	f7fe f835 	bl	80081a4 <ld_dword>
 800a13a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13e:	3338      	adds	r3, #56	; 0x38
 800a140:	330e      	adds	r3, #14
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe f816 	bl	8008174 <ld_word>
 800a148:	4603      	mov	r3, r0
 800a14a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a14c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <find_volume+0x2e6>
 800a152:	230d      	movs	r3, #13
 800a154:	e105      	b.n	800a362 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a156:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a15a:	4413      	add	r3, r2
 800a15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a15e:	8911      	ldrh	r1, [r2, #8]
 800a160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a162:	8992      	ldrh	r2, [r2, #12]
 800a164:	0952      	lsrs	r2, r2, #5
 800a166:	b292      	uxth	r2, r2
 800a168:	fbb1 f2f2 	udiv	r2, r1, r2
 800a16c:	b292      	uxth	r2, r2
 800a16e:	4413      	add	r3, r2
 800a170:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a176:	429a      	cmp	r2, r3
 800a178:	d201      	bcs.n	800a17e <find_volume+0x30e>
 800a17a:	230d      	movs	r3, #13
 800a17c:	e0f1      	b.n	800a362 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a17e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a186:	8952      	ldrh	r2, [r2, #10]
 800a188:	fbb3 f3f2 	udiv	r3, r3, r2
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	d101      	bne.n	800a198 <find_volume+0x328>
 800a194:	230d      	movs	r3, #13
 800a196:	e0e4      	b.n	800a362 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a198:	2303      	movs	r3, #3
 800a19a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d802      	bhi.n	800a1ae <find_volume+0x33e>
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d802      	bhi.n	800a1be <find_volume+0x34e>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	1c9a      	adds	r2, r3, #2
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1ca:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a1cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1d0:	441a      	add	r2, r3
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a1d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	441a      	add	r2, r3
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1de:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a1e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d11e      	bne.n	800a226 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	3338      	adds	r3, #56	; 0x38
 800a1ec:	332a      	adds	r3, #42	; 0x2a
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fd ffc0 	bl	8008174 <ld_word>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <find_volume+0x38e>
 800a1fa:	230d      	movs	r3, #13
 800a1fc:	e0b1      	b.n	800a362 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	891b      	ldrh	r3, [r3, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <find_volume+0x39a>
 800a206:	230d      	movs	r3, #13
 800a208:	e0ab      	b.n	800a362 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20c:	3338      	adds	r3, #56	; 0x38
 800a20e:	332c      	adds	r3, #44	; 0x2c
 800a210:	4618      	mov	r0, r3
 800a212:	f7fd ffc7 	bl	80081a4 <ld_dword>
 800a216:	4602      	mov	r2, r0
 800a218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	647b      	str	r3, [r7, #68]	; 0x44
 800a224:	e01f      	b.n	800a266 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	891b      	ldrh	r3, [r3, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <find_volume+0x3c2>
 800a22e:	230d      	movs	r3, #13
 800a230:	e097      	b.n	800a362 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a238:	441a      	add	r2, r3
 800a23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a23e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a242:	2b02      	cmp	r3, #2
 800a244:	d103      	bne.n	800a24e <find_volume+0x3de>
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	e00a      	b.n	800a264 <find_volume+0x3f4>
 800a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a250:	69da      	ldr	r2, [r3, #28]
 800a252:	4613      	mov	r3, r2
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	4413      	add	r3, r2
 800a258:	085a      	lsrs	r2, r3, #1
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a264:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a268:	6a1a      	ldr	r2, [r3, #32]
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	899b      	ldrh	r3, [r3, #12]
 800a26e:	4619      	mov	r1, r3
 800a270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a272:	440b      	add	r3, r1
 800a274:	3b01      	subs	r3, #1
 800a276:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a278:	8989      	ldrh	r1, [r1, #12]
 800a27a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a27e:	429a      	cmp	r2, r3
 800a280:	d201      	bcs.n	800a286 <find_volume+0x416>
 800a282:	230d      	movs	r3, #13
 800a284:	e06d      	b.n	800a362 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	f04f 32ff 	mov.w	r2, #4294967295
 800a28c:	619a      	str	r2, [r3, #24]
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	699a      	ldr	r2, [r3, #24]
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a298:	2280      	movs	r2, #128	; 0x80
 800a29a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a29c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a2a0:	2b03      	cmp	r3, #3
 800a2a2:	d149      	bne.n	800a338 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a6:	3338      	adds	r3, #56	; 0x38
 800a2a8:	3330      	adds	r3, #48	; 0x30
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fd ff62 	bl	8008174 <ld_word>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d140      	bne.n	800a338 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2be:	f7fe fa09 	bl	80086d4 <move_window>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d137      	bne.n	800a338 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	3338      	adds	r3, #56	; 0x38
 800a2d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fd ff4c 	bl	8008174 <ld_word>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d127      	bne.n	800a338 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ea:	3338      	adds	r3, #56	; 0x38
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fd ff59 	bl	80081a4 <ld_dword>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	4a1d      	ldr	r2, [pc, #116]	; (800a36c <find_volume+0x4fc>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d11e      	bne.n	800a338 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	3338      	adds	r3, #56	; 0x38
 800a2fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a302:	4618      	mov	r0, r3
 800a304:	f7fd ff4e 	bl	80081a4 <ld_dword>
 800a308:	4603      	mov	r3, r0
 800a30a:	4a19      	ldr	r2, [pc, #100]	; (800a370 <find_volume+0x500>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d113      	bne.n	800a338 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a312:	3338      	adds	r3, #56	; 0x38
 800a314:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fd ff43 	bl	80081a4 <ld_dword>
 800a31e:	4602      	mov	r2, r0
 800a320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a322:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a326:	3338      	adds	r3, #56	; 0x38
 800a328:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fd ff39 	bl	80081a4 <ld_dword>
 800a332:	4602      	mov	r2, r0
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a33e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a340:	4b0c      	ldr	r3, [pc, #48]	; (800a374 <find_volume+0x504>)
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	3301      	adds	r3, #1
 800a346:	b29a      	uxth	r2, r3
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <find_volume+0x504>)
 800a34a:	801a      	strh	r2, [r3, #0]
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <find_volume+0x504>)
 800a34e:	881a      	ldrh	r2, [r3, #0]
 800a350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a352:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	4a08      	ldr	r2, [pc, #32]	; (800a378 <find_volume+0x508>)
 800a358:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a35a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a35c:	f7fe f952 	bl	8008604 <clear_lock>
#endif
	return FR_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3758      	adds	r7, #88	; 0x58
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	41615252 	.word	0x41615252
 800a370:	61417272 	.word	0x61417272
 800a374:	20002844 	.word	0x20002844
 800a378:	20002868 	.word	0x20002868

0800a37c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a386:	2309      	movs	r3, #9
 800a388:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d01c      	beq.n	800a3ca <validate+0x4e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d018      	beq.n	800a3ca <validate+0x4e>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d013      	beq.n	800a3ca <validate+0x4e>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	889a      	ldrh	r2, [r3, #4]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	88db      	ldrh	r3, [r3, #6]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d10c      	bne.n	800a3ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	785b      	ldrb	r3, [r3, #1]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fd fe3c 	bl	8008034 <disk_status>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <validate+0x4e>
			res = FR_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d102      	bne.n	800a3d6 <validate+0x5a>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	e000      	b.n	800a3d8 <validate+0x5c>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	6013      	str	r3, [r2, #0]
	return res;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
	...

0800a3e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b088      	sub	sp, #32
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a3fa:	f107 0310 	add.w	r3, r7, #16
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff fc9c 	bl	8009d3c <get_ldnumber>
 800a404:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	da01      	bge.n	800a410 <f_mount+0x28>
 800a40c:	230b      	movs	r3, #11
 800a40e:	e02b      	b.n	800a468 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a410:	4a17      	ldr	r2, [pc, #92]	; (800a470 <f_mount+0x88>)
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a418:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d005      	beq.n	800a42c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a420:	69b8      	ldr	r0, [r7, #24]
 800a422:	f7fe f8ef 	bl	8008604 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d002      	beq.n	800a438 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	490d      	ldr	r1, [pc, #52]	; (800a470 <f_mount+0x88>)
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d002      	beq.n	800a44e <f_mount+0x66>
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d001      	beq.n	800a452 <f_mount+0x6a>
 800a44e:	2300      	movs	r3, #0
 800a450:	e00a      	b.n	800a468 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a452:	f107 010c 	add.w	r1, r7, #12
 800a456:	f107 0308 	add.w	r3, r7, #8
 800a45a:	2200      	movs	r2, #0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff fd07 	bl	8009e70 <find_volume>
 800a462:	4603      	mov	r3, r0
 800a464:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a466:	7dfb      	ldrb	r3, [r7, #23]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3720      	adds	r7, #32
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20002840 	.word	0x20002840

0800a474 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b09a      	sub	sp, #104	; 0x68
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	4613      	mov	r3, r2
 800a480:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <f_open+0x18>
 800a488:	2309      	movs	r3, #9
 800a48a:	e1bb      	b.n	800a804 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a48c:	79fb      	ldrb	r3, [r7, #7]
 800a48e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a492:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a494:	79fa      	ldrb	r2, [r7, #7]
 800a496:	f107 0114 	add.w	r1, r7, #20
 800a49a:	f107 0308 	add.w	r3, r7, #8
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7ff fce6 	bl	8009e70 <find_volume>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a4aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 819f 	bne.w	800a7f2 <f_open+0x37e>
		dj.obj.fs = fs;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	f107 0318 	add.w	r3, r7, #24
 800a4be:	4611      	mov	r1, r2
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7ff fbc5 	bl	8009c50 <follow_path>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a4cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d11a      	bne.n	800a50a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a4d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a4d8:	b25b      	sxtb	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	da03      	bge.n	800a4e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a4de:	2306      	movs	r3, #6
 800a4e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a4e4:	e011      	b.n	800a50a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	f023 0301 	bic.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	bf14      	ite	ne
 800a4f0:	2301      	movne	r3, #1
 800a4f2:	2300      	moveq	r3, #0
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f107 0318 	add.w	r3, r7, #24
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fd ff38 	bl	8008374 <chk_lock>
 800a504:	4603      	mov	r3, r0
 800a506:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	f003 031c 	and.w	r3, r3, #28
 800a510:	2b00      	cmp	r3, #0
 800a512:	d07f      	beq.n	800a614 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a514:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d017      	beq.n	800a54c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a51c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a520:	2b04      	cmp	r3, #4
 800a522:	d10e      	bne.n	800a542 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a524:	f7fd ff82 	bl	800842c <enq_lock>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d006      	beq.n	800a53c <f_open+0xc8>
 800a52e:	f107 0318 	add.w	r3, r7, #24
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff f8dc 	bl	80096f0 <dir_register>
 800a538:	4603      	mov	r3, r0
 800a53a:	e000      	b.n	800a53e <f_open+0xca>
 800a53c:	2312      	movs	r3, #18
 800a53e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	f043 0308 	orr.w	r3, r3, #8
 800a548:	71fb      	strb	r3, [r7, #7]
 800a54a:	e010      	b.n	800a56e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a54c:	7fbb      	ldrb	r3, [r7, #30]
 800a54e:	f003 0311 	and.w	r3, r3, #17
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <f_open+0xea>
					res = FR_DENIED;
 800a556:	2307      	movs	r3, #7
 800a558:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a55c:	e007      	b.n	800a56e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a55e:	79fb      	ldrb	r3, [r7, #7]
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <f_open+0xfa>
 800a568:	2308      	movs	r3, #8
 800a56a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a56e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a572:	2b00      	cmp	r3, #0
 800a574:	d168      	bne.n	800a648 <f_open+0x1d4>
 800a576:	79fb      	ldrb	r3, [r7, #7]
 800a578:	f003 0308 	and.w	r3, r3, #8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d063      	beq.n	800a648 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a580:	f7fd fcfa 	bl	8007f78 <get_fattime>
 800a584:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	330e      	adds	r3, #14
 800a58a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fd fe47 	bl	8008220 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	3316      	adds	r3, #22
 800a596:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fd fe41 	bl	8008220 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a0:	330b      	adds	r3, #11
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fe17 	bl	80091e0 <ld_clust>
 800a5b2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7fe fe2f 	bl	800921e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c2:	331c      	adds	r3, #28
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fd fe2a 	bl	8008220 <st_dword>
					fs->wflag = 1;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d037      	beq.n	800a648 <f_open+0x1d4>
						dw = fs->winsect;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5dc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a5de:	f107 0318 	add.w	r3, r7, #24
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fe fb1f 	bl	8008c2a <remove_chain>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a5f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d126      	bne.n	800a648 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe f868 	bl	80086d4 <move_window>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a60e:	3a01      	subs	r2, #1
 800a610:	615a      	str	r2, [r3, #20]
 800a612:	e019      	b.n	800a648 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a614:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d115      	bne.n	800a648 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a61c:	7fbb      	ldrb	r3, [r7, #30]
 800a61e:	f003 0310 	and.w	r3, r3, #16
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a626:	2304      	movs	r3, #4
 800a628:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a62c:	e00c      	b.n	800a648 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	f003 0302 	and.w	r3, r3, #2
 800a634:	2b00      	cmp	r3, #0
 800a636:	d007      	beq.n	800a648 <f_open+0x1d4>
 800a638:	7fbb      	ldrb	r3, [r7, #30]
 800a63a:	f003 0301 	and.w	r3, r3, #1
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d002      	beq.n	800a648 <f_open+0x1d4>
						res = FR_DENIED;
 800a642:	2307      	movs	r3, #7
 800a644:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a648:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d128      	bne.n	800a6a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	f003 0308 	and.w	r3, r3, #8
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a660:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a66a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a670:	79fb      	ldrb	r3, [r7, #7]
 800a672:	f023 0301 	bic.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	bf14      	ite	ne
 800a67a:	2301      	movne	r3, #1
 800a67c:	2300      	moveq	r3, #0
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	461a      	mov	r2, r3
 800a682:	f107 0318 	add.w	r3, r7, #24
 800a686:	4611      	mov	r1, r2
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fd fef1 	bl	8008470 <inc_lock>
 800a68e:	4602      	mov	r2, r0
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <f_open+0x22e>
 800a69c:	2302      	movs	r3, #2
 800a69e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a6a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f040 80a3 	bne.w	800a7f2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fd94 	bl	80091e0 <ld_clust>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	331c      	adds	r3, #28
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fd fd6e 	bl	80081a4 <ld_dword>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	88da      	ldrh	r2, [r3, #6]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	79fa      	ldrb	r2, [r7, #7]
 800a6e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3330      	adds	r3, #48	; 0x30
 800a6fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f7fd fdd8 	bl	80082ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	f003 0320 	and.w	r3, r3, #32
 800a710:	2b00      	cmp	r3, #0
 800a712:	d06e      	beq.n	800a7f2 <f_open+0x37e>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d06a      	beq.n	800a7f2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	895b      	ldrh	r3, [r3, #10]
 800a728:	461a      	mov	r2, r3
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	899b      	ldrh	r3, [r3, #12]
 800a72e:	fb02 f303 	mul.w	r3, r2, r3
 800a732:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a740:	e016      	b.n	800a770 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe f881 	bl	800884e <get_fat>
 800a74c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a74e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a750:	2b01      	cmp	r3, #1
 800a752:	d802      	bhi.n	800a75a <f_open+0x2e6>
 800a754:	2302      	movs	r3, #2
 800a756:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a75a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a760:	d102      	bne.n	800a768 <f_open+0x2f4>
 800a762:	2301      	movs	r3, #1
 800a764:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a768:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a76a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a770:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a774:	2b00      	cmp	r3, #0
 800a776:	d103      	bne.n	800a780 <f_open+0x30c>
 800a778:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a77a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d8e0      	bhi.n	800a742 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a784:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a786:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d131      	bne.n	800a7f2 <f_open+0x37e>
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	899b      	ldrh	r3, [r3, #12]
 800a792:	461a      	mov	r2, r3
 800a794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a796:	fbb3 f1f2 	udiv	r1, r3, r2
 800a79a:	fb01 f202 	mul.w	r2, r1, r2
 800a79e:	1a9b      	subs	r3, r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d026      	beq.n	800a7f2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe f831 	bl	8008810 <clust2sect>
 800a7ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a7b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d103      	bne.n	800a7be <f_open+0x34a>
						res = FR_INT_ERR;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a7bc:	e019      	b.n	800a7f2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	899b      	ldrh	r3, [r3, #12]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7cc:	441a      	add	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	7858      	ldrb	r0, [r3, #1]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6a1a      	ldr	r2, [r3, #32]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f7fd fc69 	bl	80080b8 <disk_read>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <f_open+0x37e>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a7f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d002      	beq.n	800a800 <f_open+0x38c>
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a804:	4618      	mov	r0, r3
 800a806:	3768      	adds	r7, #104	; 0x68
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08c      	sub	sp, #48	; 0x30
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	2200      	movs	r2, #0
 800a822:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f107 0210 	add.w	r2, r7, #16
 800a82a:	4611      	mov	r1, r2
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff fda5 	bl	800a37c <validate>
 800a832:	4603      	mov	r3, r0
 800a834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d107      	bne.n	800a850 <f_write+0x44>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	7d5b      	ldrb	r3, [r3, #21]
 800a844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <f_write+0x4a>
 800a850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a854:	e16a      	b.n	800ab2c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	7d1b      	ldrb	r3, [r3, #20]
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d101      	bne.n	800a866 <f_write+0x5a>
 800a862:	2307      	movs	r3, #7
 800a864:	e162      	b.n	800ab2c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	441a      	add	r2, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	429a      	cmp	r2, r3
 800a874:	f080 814c 	bcs.w	800ab10 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	43db      	mvns	r3, r3
 800a87e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a880:	e146      	b.n	800ab10 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	8992      	ldrh	r2, [r2, #12]
 800a88a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a88e:	fb01 f202 	mul.w	r2, r1, r2
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	f040 80f1 	bne.w	800aa7c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	8992      	ldrh	r2, [r2, #12]
 800a8a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	8952      	ldrh	r2, [r2, #10]
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d143      	bne.n	800a93e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10c      	bne.n	800a8d8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d11a      	bne.n	800a900 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fa10 	bl	8008cf4 <create_chain>
 800a8d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800a8d6:	e013      	b.n	800a900 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d007      	beq.n	800a8f0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7fe fa9c 	bl	8008e24 <clmt_clust>
 800a8ec:	62b8      	str	r0, [r7, #40]	; 0x28
 800a8ee:	e007      	b.n	800a900 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	f7fe f9fb 	bl	8008cf4 <create_chain>
 800a8fe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 8109 	beq.w	800ab1a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d104      	bne.n	800a918 <f_write+0x10c>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2202      	movs	r2, #2
 800a912:	755a      	strb	r2, [r3, #21]
 800a914:	2302      	movs	r3, #2
 800a916:	e109      	b.n	800ab2c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d104      	bne.n	800a92a <f_write+0x11e>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	755a      	strb	r2, [r3, #21]
 800a926:	2301      	movs	r3, #1
 800a928:	e100      	b.n	800ab2c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a92e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <f_write+0x132>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a93c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	7d1b      	ldrb	r3, [r3, #20]
 800a942:	b25b      	sxtb	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	da18      	bge.n	800a97a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	7858      	ldrb	r0, [r3, #1]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6a1a      	ldr	r2, [r3, #32]
 800a956:	2301      	movs	r3, #1
 800a958:	f7fd fbce 	bl	80080f8 <disk_write>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <f_write+0x160>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2201      	movs	r2, #1
 800a966:	755a      	strb	r2, [r3, #21]
 800a968:	2301      	movs	r3, #1
 800a96a:	e0df      	b.n	800ab2c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	7d1b      	ldrb	r3, [r3, #20]
 800a970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a974:	b2da      	uxtb	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	4619      	mov	r1, r3
 800a982:	4610      	mov	r0, r2
 800a984:	f7fd ff44 	bl	8008810 <clust2sect>
 800a988:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d104      	bne.n	800a99a <f_write+0x18e>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2202      	movs	r2, #2
 800a994:	755a      	strb	r2, [r3, #21]
 800a996:	2302      	movs	r3, #2
 800a998:	e0c8      	b.n	800ab2c <f_write+0x320>
			sect += csect;
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	4413      	add	r3, r2
 800a9a0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	899b      	ldrh	r3, [r3, #12]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9ae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a9b0:	6a3b      	ldr	r3, [r7, #32]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d043      	beq.n	800aa3e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	8952      	ldrh	r2, [r2, #10]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d905      	bls.n	800a9d0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	895b      	ldrh	r3, [r3, #10]
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	7858      	ldrb	r0, [r3, #1]
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	69f9      	ldr	r1, [r7, #28]
 800a9da:	f7fd fb8d 	bl	80080f8 <disk_write>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d004      	beq.n	800a9ee <f_write+0x1e2>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	755a      	strb	r2, [r3, #21]
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e09e      	b.n	800ab2c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6a1a      	ldr	r2, [r3, #32]
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	6a3a      	ldr	r2, [r7, #32]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d918      	bls.n	800aa2e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6a1a      	ldr	r2, [r3, #32]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	8992      	ldrh	r2, [r2, #12]
 800aa0e:	fb02 f303 	mul.w	r3, r2, r3
 800aa12:	69fa      	ldr	r2, [r7, #28]
 800aa14:	18d1      	adds	r1, r2, r3
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	899b      	ldrh	r3, [r3, #12]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f7fd fc2c 	bl	8008278 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	7d1b      	ldrb	r3, [r3, #20]
 800aa24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	899b      	ldrh	r3, [r3, #12]
 800aa32:	461a      	mov	r2, r3
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	fb02 f303 	mul.w	r3, r2, r3
 800aa3a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800aa3c:	e04b      	b.n	800aad6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d016      	beq.n	800aa76 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	699a      	ldr	r2, [r3, #24]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d210      	bcs.n	800aa76 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	7858      	ldrb	r0, [r3, #1]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa5e:	2301      	movs	r3, #1
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	f7fd fb29 	bl	80080b8 <disk_read>
 800aa66:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d004      	beq.n	800aa76 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	755a      	strb	r2, [r3, #21]
 800aa72:	2301      	movs	r3, #1
 800aa74:	e05a      	b.n	800ab2c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	899b      	ldrh	r3, [r3, #12]
 800aa80:	4618      	mov	r0, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	8992      	ldrh	r2, [r2, #12]
 800aa8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa8e:	fb01 f202 	mul.w	r2, r1, r2
 800aa92:	1a9b      	subs	r3, r3, r2
 800aa94:	1ac3      	subs	r3, r0, r3
 800aa96:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800aa98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d901      	bls.n	800aaa4 <f_write+0x298>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	8992      	ldrh	r2, [r2, #12]
 800aab2:	fbb3 f0f2 	udiv	r0, r3, r2
 800aab6:	fb00 f202 	mul.w	r2, r0, r2
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	440b      	add	r3, r1
 800aabe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac0:	69f9      	ldr	r1, [r7, #28]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fd fbd8 	bl	8008278 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	7d1b      	ldrb	r3, [r3, #20]
 800aacc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aad6:	69fa      	ldr	r2, [r7, #28]
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	4413      	add	r3, r2
 800aadc:	61fb      	str	r3, [r7, #28]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	699a      	ldr	r2, [r3, #24]
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	441a      	add	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	619a      	str	r2, [r3, #24]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	68da      	ldr	r2, [r3, #12]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	bf38      	it	cc
 800aaf6:	461a      	movcc	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	60da      	str	r2, [r3, #12]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	441a      	add	r2, r3
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	601a      	str	r2, [r3, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f47f aeb5 	bne.w	800a882 <f_write+0x76>
 800ab18:	e000      	b.n	800ab1c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ab1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	7d1b      	ldrb	r3, [r3, #20]
 800ab20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3730      	adds	r7, #48	; 0x30
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f107 0208 	add.w	r2, r7, #8
 800ab42:	4611      	mov	r1, r2
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff fc19 	bl	800a37c <validate>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d168      	bne.n	800ac26 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7d1b      	ldrb	r3, [r3, #20]
 800ab58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d062      	beq.n	800ac26 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7d1b      	ldrb	r3, [r3, #20]
 800ab64:	b25b      	sxtb	r3, r3
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	da15      	bge.n	800ab96 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	7858      	ldrb	r0, [r3, #1]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a1a      	ldr	r2, [r3, #32]
 800ab78:	2301      	movs	r3, #1
 800ab7a:	f7fd fabd 	bl	80080f8 <disk_write>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d001      	beq.n	800ab88 <f_sync+0x54>
 800ab84:	2301      	movs	r3, #1
 800ab86:	e04f      	b.n	800ac28 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	7d1b      	ldrb	r3, [r3, #20]
 800ab8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ab96:	f7fd f9ef 	bl	8007f78 <get_fattime>
 800ab9a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ab9c:	68ba      	ldr	r2, [r7, #8]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	4619      	mov	r1, r3
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7fd fd95 	bl	80086d4 <move_window>
 800abaa:	4603      	mov	r3, r0
 800abac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d138      	bne.n	800ac26 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abb8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	330b      	adds	r3, #11
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	330b      	adds	r3, #11
 800abc4:	f042 0220 	orr.w	r2, r2, #32
 800abc8:	b2d2      	uxtb	r2, r2
 800abca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6818      	ldr	r0, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	461a      	mov	r2, r3
 800abd6:	68f9      	ldr	r1, [r7, #12]
 800abd8:	f7fe fb21 	bl	800921e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f103 021c 	add.w	r2, r3, #28
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	4619      	mov	r1, r3
 800abe8:	4610      	mov	r0, r2
 800abea:	f7fd fb19 	bl	8008220 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3316      	adds	r3, #22
 800abf2:	6939      	ldr	r1, [r7, #16]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fd fb13 	bl	8008220 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3312      	adds	r3, #18
 800abfe:	2100      	movs	r1, #0
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7fd faf2 	bl	80081ea <st_word>
					fs->wflag = 1;
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fd fd8e 	bl	8008730 <sync_fs>
 800ac14:	4603      	mov	r3, r0
 800ac16:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	7d1b      	ldrb	r3, [r3, #20]
 800ac1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7ff ff7b 	bl	800ab34 <f_sync>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d118      	bne.n	800ac7a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f107 0208 	add.w	r2, r7, #8
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7ff fb93 	bl	800a37c <validate>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10c      	bne.n	800ac7a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fd fc91 	bl	800858c <dec_lock>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ac7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ac90:	78fb      	ldrb	r3, [r7, #3]
 800ac92:	2b0a      	cmp	r3, #10
 800ac94:	d103      	bne.n	800ac9e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ac96:	210d      	movs	r1, #13
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f7ff fff3 	bl	800ac84 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	db25      	blt.n	800acf6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	60fa      	str	r2, [r7, #12]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	4413      	add	r3, r2
 800acb4:	78fa      	ldrb	r2, [r7, #3]
 800acb6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b3c      	cmp	r3, #60	; 0x3c
 800acbc:	dd12      	ble.n	800ace4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f103 010c 	add.w	r1, r3, #12
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f107 0308 	add.w	r3, r7, #8
 800acce:	f7ff fd9d 	bl	800a80c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d101      	bne.n	800acde <putc_bfd+0x5a>
 800acda:	2300      	movs	r3, #0
 800acdc:	e001      	b.n	800ace2 <putc_bfd+0x5e>
 800acde:	f04f 33ff 	mov.w	r3, #4294967295
 800ace2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	609a      	str	r2, [r3, #8]
 800acf4:	e000      	b.n	800acf8 <putc_bfd+0x74>
	if (i < 0) return;
 800acf6:	bf00      	nop
}
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	db16      	blt.n	800ad3c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f103 010c 	add.w	r1, r3, #12
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	f107 030c 	add.w	r3, r7, #12
 800ad22:	f7ff fd73 	bl	800a80c <f_write>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d107      	bne.n	800ad3c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d102      	bne.n	800ad3c <putc_flush+0x3e>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	e001      	b.n	800ad40 <putc_flush+0x42>
	return EOF;
 800ad3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	605a      	str	r2, [r3, #4]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	609a      	str	r2, [r3, #8]
}
 800ad66:	bf00      	nop
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b096      	sub	sp, #88	; 0x58
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
 800ad7a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ad7c:	f107 030c 	add.w	r3, r7, #12
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7ff ffe0 	bl	800ad48 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ad88:	e009      	b.n	800ad9e <f_puts+0x2c>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	1c5a      	adds	r2, r3, #1
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	781a      	ldrb	r2, [r3, #0]
 800ad92:	f107 030c 	add.w	r3, r7, #12
 800ad96:	4611      	mov	r1, r2
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7ff ff73 	bl	800ac84 <putc_bfd>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1f1      	bne.n	800ad8a <f_puts+0x18>
	return putc_flush(&pb);
 800ada6:	f107 030c 	add.w	r3, r7, #12
 800adaa:	4618      	mov	r0, r3
 800adac:	f7ff ffa7 	bl	800acfe <putc_flush>
 800adb0:	4603      	mov	r3, r0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3758      	adds	r7, #88	; 0x58
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800adca:	2301      	movs	r3, #1
 800adcc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800add2:	4b1f      	ldr	r3, [pc, #124]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800add4:	7a5b      	ldrb	r3, [r3, #9]
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	d131      	bne.n	800ae40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800addc:	4b1c      	ldr	r3, [pc, #112]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800adde:	7a5b      	ldrb	r3, [r3, #9]
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	461a      	mov	r2, r3
 800ade4:	4b1a      	ldr	r3, [pc, #104]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800ade6:	2100      	movs	r1, #0
 800ade8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800adea:	4b19      	ldr	r3, [pc, #100]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800adec:	7a5b      	ldrb	r3, [r3, #9]
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	4a17      	ldr	r2, [pc, #92]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800adfa:	4b15      	ldr	r3, [pc, #84]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800adfc:	7a5b      	ldrb	r3, [r3, #9]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	461a      	mov	r2, r3
 800ae02:	4b13      	ldr	r3, [pc, #76]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800ae04:	4413      	add	r3, r2
 800ae06:	79fa      	ldrb	r2, [r7, #7]
 800ae08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ae0a:	4b11      	ldr	r3, [pc, #68]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800ae0c:	7a5b      	ldrb	r3, [r3, #9]
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	b2d1      	uxtb	r1, r2
 800ae14:	4a0e      	ldr	r2, [pc, #56]	; (800ae50 <FATFS_LinkDriverEx+0x94>)
 800ae16:	7251      	strb	r1, [r2, #9]
 800ae18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae1a:	7dbb      	ldrb	r3, [r7, #22]
 800ae1c:	3330      	adds	r3, #48	; 0x30
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	3301      	adds	r3, #1
 800ae28:	223a      	movs	r2, #58	; 0x3a
 800ae2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	3302      	adds	r3, #2
 800ae30:	222f      	movs	r2, #47	; 0x2f
 800ae32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	3303      	adds	r3, #3
 800ae38:	2200      	movs	r2, #0
 800ae3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	371c      	adds	r7, #28
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	20002a68 	.word	0x20002a68

0800ae54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae5e:	2200      	movs	r2, #0
 800ae60:	6839      	ldr	r1, [r7, #0]
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff ffaa 	bl	800adbc <FATFS_LinkDriverEx>
 800ae68:	4603      	mov	r3, r0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	6039      	str	r1, [r7, #0]
 800ae7e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ae80:	88fb      	ldrh	r3, [r7, #6]
 800ae82:	2b7f      	cmp	r3, #127	; 0x7f
 800ae84:	d802      	bhi.n	800ae8c <ff_convert+0x18>
		c = chr;
 800ae86:	88fb      	ldrh	r3, [r7, #6]
 800ae88:	81fb      	strh	r3, [r7, #14]
 800ae8a:	e025      	b.n	800aed8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00b      	beq.n	800aeaa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ae92:	88fb      	ldrh	r3, [r7, #6]
 800ae94:	2bff      	cmp	r3, #255	; 0xff
 800ae96:	d805      	bhi.n	800aea4 <ff_convert+0x30>
 800ae98:	88fb      	ldrh	r3, [r7, #6]
 800ae9a:	3b80      	subs	r3, #128	; 0x80
 800ae9c:	4a12      	ldr	r2, [pc, #72]	; (800aee8 <ff_convert+0x74>)
 800ae9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aea2:	e000      	b.n	800aea6 <ff_convert+0x32>
 800aea4:	2300      	movs	r3, #0
 800aea6:	81fb      	strh	r3, [r7, #14]
 800aea8:	e016      	b.n	800aed8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800aeaa:	2300      	movs	r3, #0
 800aeac:	81fb      	strh	r3, [r7, #14]
 800aeae:	e009      	b.n	800aec4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800aeb0:	89fb      	ldrh	r3, [r7, #14]
 800aeb2:	4a0d      	ldr	r2, [pc, #52]	; (800aee8 <ff_convert+0x74>)
 800aeb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeb8:	88fa      	ldrh	r2, [r7, #6]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d006      	beq.n	800aecc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800aebe:	89fb      	ldrh	r3, [r7, #14]
 800aec0:	3301      	adds	r3, #1
 800aec2:	81fb      	strh	r3, [r7, #14]
 800aec4:	89fb      	ldrh	r3, [r7, #14]
 800aec6:	2b7f      	cmp	r3, #127	; 0x7f
 800aec8:	d9f2      	bls.n	800aeb0 <ff_convert+0x3c>
 800aeca:	e000      	b.n	800aece <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800aecc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800aece:	89fb      	ldrh	r3, [r7, #14]
 800aed0:	3380      	adds	r3, #128	; 0x80
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800aed8:	89fb      	ldrh	r3, [r7, #14]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3714      	adds	r7, #20
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	0800fc90 	.word	0x0800fc90

0800aeec <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b087      	sub	sp, #28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800aef6:	88fb      	ldrh	r3, [r7, #6]
 800aef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aefc:	d201      	bcs.n	800af02 <ff_wtoupper+0x16>
 800aefe:	4b3e      	ldr	r3, [pc, #248]	; (800aff8 <ff_wtoupper+0x10c>)
 800af00:	e000      	b.n	800af04 <ff_wtoupper+0x18>
 800af02:	4b3e      	ldr	r3, [pc, #248]	; (800affc <ff_wtoupper+0x110>)
 800af04:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	1c9a      	adds	r2, r3, #2
 800af0a:	617a      	str	r2, [r7, #20]
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800af10:	8a7b      	ldrh	r3, [r7, #18]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d068      	beq.n	800afe8 <ff_wtoupper+0xfc>
 800af16:	88fa      	ldrh	r2, [r7, #6]
 800af18:	8a7b      	ldrh	r3, [r7, #18]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d364      	bcc.n	800afe8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	1c9a      	adds	r2, r3, #2
 800af22:	617a      	str	r2, [r7, #20]
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	823b      	strh	r3, [r7, #16]
 800af28:	8a3b      	ldrh	r3, [r7, #16]
 800af2a:	0a1b      	lsrs	r3, r3, #8
 800af2c:	81fb      	strh	r3, [r7, #14]
 800af2e:	8a3b      	ldrh	r3, [r7, #16]
 800af30:	b2db      	uxtb	r3, r3
 800af32:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800af34:	88fa      	ldrh	r2, [r7, #6]
 800af36:	8a79      	ldrh	r1, [r7, #18]
 800af38:	8a3b      	ldrh	r3, [r7, #16]
 800af3a:	440b      	add	r3, r1
 800af3c:	429a      	cmp	r2, r3
 800af3e:	da49      	bge.n	800afd4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800af40:	89fb      	ldrh	r3, [r7, #14]
 800af42:	2b08      	cmp	r3, #8
 800af44:	d84f      	bhi.n	800afe6 <ff_wtoupper+0xfa>
 800af46:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <ff_wtoupper+0x60>)
 800af48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4c:	0800af71 	.word	0x0800af71
 800af50:	0800af83 	.word	0x0800af83
 800af54:	0800af99 	.word	0x0800af99
 800af58:	0800afa1 	.word	0x0800afa1
 800af5c:	0800afa9 	.word	0x0800afa9
 800af60:	0800afb1 	.word	0x0800afb1
 800af64:	0800afb9 	.word	0x0800afb9
 800af68:	0800afc1 	.word	0x0800afc1
 800af6c:	0800afc9 	.word	0x0800afc9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800af70:	88fa      	ldrh	r2, [r7, #6]
 800af72:	8a7b      	ldrh	r3, [r7, #18]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	005b      	lsls	r3, r3, #1
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	4413      	add	r3, r2
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	80fb      	strh	r3, [r7, #6]
 800af80:	e027      	b.n	800afd2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800af82:	88fa      	ldrh	r2, [r7, #6]
 800af84:	8a7b      	ldrh	r3, [r7, #18]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	b29b      	uxth	r3, r3
 800af90:	88fa      	ldrh	r2, [r7, #6]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	80fb      	strh	r3, [r7, #6]
 800af96:	e01c      	b.n	800afd2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800af98:	88fb      	ldrh	r3, [r7, #6]
 800af9a:	3b10      	subs	r3, #16
 800af9c:	80fb      	strh	r3, [r7, #6]
 800af9e:	e018      	b.n	800afd2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800afa0:	88fb      	ldrh	r3, [r7, #6]
 800afa2:	3b20      	subs	r3, #32
 800afa4:	80fb      	strh	r3, [r7, #6]
 800afa6:	e014      	b.n	800afd2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800afa8:	88fb      	ldrh	r3, [r7, #6]
 800afaa:	3b30      	subs	r3, #48	; 0x30
 800afac:	80fb      	strh	r3, [r7, #6]
 800afae:	e010      	b.n	800afd2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800afb0:	88fb      	ldrh	r3, [r7, #6]
 800afb2:	3b1a      	subs	r3, #26
 800afb4:	80fb      	strh	r3, [r7, #6]
 800afb6:	e00c      	b.n	800afd2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800afb8:	88fb      	ldrh	r3, [r7, #6]
 800afba:	3308      	adds	r3, #8
 800afbc:	80fb      	strh	r3, [r7, #6]
 800afbe:	e008      	b.n	800afd2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800afc0:	88fb      	ldrh	r3, [r7, #6]
 800afc2:	3b50      	subs	r3, #80	; 0x50
 800afc4:	80fb      	strh	r3, [r7, #6]
 800afc6:	e004      	b.n	800afd2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800afc8:	88fb      	ldrh	r3, [r7, #6]
 800afca:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800afce:	80fb      	strh	r3, [r7, #6]
 800afd0:	bf00      	nop
			}
			break;
 800afd2:	e008      	b.n	800afe6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800afd4:	89fb      	ldrh	r3, [r7, #14]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d195      	bne.n	800af06 <ff_wtoupper+0x1a>
 800afda:	8a3b      	ldrh	r3, [r7, #16]
 800afdc:	005b      	lsls	r3, r3, #1
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	4413      	add	r3, r2
 800afe2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800afe4:	e78f      	b.n	800af06 <ff_wtoupper+0x1a>
			break;
 800afe6:	bf00      	nop
	}

	return chr;
 800afe8:	88fb      	ldrh	r3, [r7, #6]
}
 800afea:	4618      	mov	r0, r3
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	0800fd90 	.word	0x0800fd90
 800affc:	0800ff84 	.word	0x0800ff84

0800b000 <malloc>:
 800b000:	4b02      	ldr	r3, [pc, #8]	; (800b00c <malloc+0xc>)
 800b002:	4601      	mov	r1, r0
 800b004:	6818      	ldr	r0, [r3, #0]
 800b006:	f000 b82b 	b.w	800b060 <_malloc_r>
 800b00a:	bf00      	nop
 800b00c:	20000080 	.word	0x20000080

0800b010 <free>:
 800b010:	4b02      	ldr	r3, [pc, #8]	; (800b01c <free+0xc>)
 800b012:	4601      	mov	r1, r0
 800b014:	6818      	ldr	r0, [r3, #0]
 800b016:	f001 bf6d 	b.w	800cef4 <_free_r>
 800b01a:	bf00      	nop
 800b01c:	20000080 	.word	0x20000080

0800b020 <sbrk_aligned>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	4e0e      	ldr	r6, [pc, #56]	; (800b05c <sbrk_aligned+0x3c>)
 800b024:	460c      	mov	r4, r1
 800b026:	6831      	ldr	r1, [r6, #0]
 800b028:	4605      	mov	r5, r0
 800b02a:	b911      	cbnz	r1, 800b032 <sbrk_aligned+0x12>
 800b02c:	f001 f892 	bl	800c154 <_sbrk_r>
 800b030:	6030      	str	r0, [r6, #0]
 800b032:	4621      	mov	r1, r4
 800b034:	4628      	mov	r0, r5
 800b036:	f001 f88d 	bl	800c154 <_sbrk_r>
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	d00a      	beq.n	800b054 <sbrk_aligned+0x34>
 800b03e:	1cc4      	adds	r4, r0, #3
 800b040:	f024 0403 	bic.w	r4, r4, #3
 800b044:	42a0      	cmp	r0, r4
 800b046:	d007      	beq.n	800b058 <sbrk_aligned+0x38>
 800b048:	1a21      	subs	r1, r4, r0
 800b04a:	4628      	mov	r0, r5
 800b04c:	f001 f882 	bl	800c154 <_sbrk_r>
 800b050:	3001      	adds	r0, #1
 800b052:	d101      	bne.n	800b058 <sbrk_aligned+0x38>
 800b054:	f04f 34ff 	mov.w	r4, #4294967295
 800b058:	4620      	mov	r0, r4
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	20002a78 	.word	0x20002a78

0800b060 <_malloc_r>:
 800b060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b064:	1ccd      	adds	r5, r1, #3
 800b066:	f025 0503 	bic.w	r5, r5, #3
 800b06a:	3508      	adds	r5, #8
 800b06c:	2d0c      	cmp	r5, #12
 800b06e:	bf38      	it	cc
 800b070:	250c      	movcc	r5, #12
 800b072:	2d00      	cmp	r5, #0
 800b074:	4607      	mov	r7, r0
 800b076:	db01      	blt.n	800b07c <_malloc_r+0x1c>
 800b078:	42a9      	cmp	r1, r5
 800b07a:	d905      	bls.n	800b088 <_malloc_r+0x28>
 800b07c:	230c      	movs	r3, #12
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	2600      	movs	r6, #0
 800b082:	4630      	mov	r0, r6
 800b084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b088:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b15c <_malloc_r+0xfc>
 800b08c:	f000 f868 	bl	800b160 <__malloc_lock>
 800b090:	f8d8 3000 	ldr.w	r3, [r8]
 800b094:	461c      	mov	r4, r3
 800b096:	bb5c      	cbnz	r4, 800b0f0 <_malloc_r+0x90>
 800b098:	4629      	mov	r1, r5
 800b09a:	4638      	mov	r0, r7
 800b09c:	f7ff ffc0 	bl	800b020 <sbrk_aligned>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	d155      	bne.n	800b152 <_malloc_r+0xf2>
 800b0a6:	f8d8 4000 	ldr.w	r4, [r8]
 800b0aa:	4626      	mov	r6, r4
 800b0ac:	2e00      	cmp	r6, #0
 800b0ae:	d145      	bne.n	800b13c <_malloc_r+0xdc>
 800b0b0:	2c00      	cmp	r4, #0
 800b0b2:	d048      	beq.n	800b146 <_malloc_r+0xe6>
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	eb04 0903 	add.w	r9, r4, r3
 800b0be:	f001 f849 	bl	800c154 <_sbrk_r>
 800b0c2:	4581      	cmp	r9, r0
 800b0c4:	d13f      	bne.n	800b146 <_malloc_r+0xe6>
 800b0c6:	6821      	ldr	r1, [r4, #0]
 800b0c8:	1a6d      	subs	r5, r5, r1
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff ffa7 	bl	800b020 <sbrk_aligned>
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d037      	beq.n	800b146 <_malloc_r+0xe6>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	442b      	add	r3, r5
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d038      	beq.n	800b156 <_malloc_r+0xf6>
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	42a2      	cmp	r2, r4
 800b0e8:	d12b      	bne.n	800b142 <_malloc_r+0xe2>
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	605a      	str	r2, [r3, #4]
 800b0ee:	e00f      	b.n	800b110 <_malloc_r+0xb0>
 800b0f0:	6822      	ldr	r2, [r4, #0]
 800b0f2:	1b52      	subs	r2, r2, r5
 800b0f4:	d41f      	bmi.n	800b136 <_malloc_r+0xd6>
 800b0f6:	2a0b      	cmp	r2, #11
 800b0f8:	d917      	bls.n	800b12a <_malloc_r+0xca>
 800b0fa:	1961      	adds	r1, r4, r5
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	6025      	str	r5, [r4, #0]
 800b100:	bf18      	it	ne
 800b102:	6059      	strne	r1, [r3, #4]
 800b104:	6863      	ldr	r3, [r4, #4]
 800b106:	bf08      	it	eq
 800b108:	f8c8 1000 	streq.w	r1, [r8]
 800b10c:	5162      	str	r2, [r4, r5]
 800b10e:	604b      	str	r3, [r1, #4]
 800b110:	4638      	mov	r0, r7
 800b112:	f104 060b 	add.w	r6, r4, #11
 800b116:	f000 f829 	bl	800b16c <__malloc_unlock>
 800b11a:	f026 0607 	bic.w	r6, r6, #7
 800b11e:	1d23      	adds	r3, r4, #4
 800b120:	1af2      	subs	r2, r6, r3
 800b122:	d0ae      	beq.n	800b082 <_malloc_r+0x22>
 800b124:	1b9b      	subs	r3, r3, r6
 800b126:	50a3      	str	r3, [r4, r2]
 800b128:	e7ab      	b.n	800b082 <_malloc_r+0x22>
 800b12a:	42a3      	cmp	r3, r4
 800b12c:	6862      	ldr	r2, [r4, #4]
 800b12e:	d1dd      	bne.n	800b0ec <_malloc_r+0x8c>
 800b130:	f8c8 2000 	str.w	r2, [r8]
 800b134:	e7ec      	b.n	800b110 <_malloc_r+0xb0>
 800b136:	4623      	mov	r3, r4
 800b138:	6864      	ldr	r4, [r4, #4]
 800b13a:	e7ac      	b.n	800b096 <_malloc_r+0x36>
 800b13c:	4634      	mov	r4, r6
 800b13e:	6876      	ldr	r6, [r6, #4]
 800b140:	e7b4      	b.n	800b0ac <_malloc_r+0x4c>
 800b142:	4613      	mov	r3, r2
 800b144:	e7cc      	b.n	800b0e0 <_malloc_r+0x80>
 800b146:	230c      	movs	r3, #12
 800b148:	603b      	str	r3, [r7, #0]
 800b14a:	4638      	mov	r0, r7
 800b14c:	f000 f80e 	bl	800b16c <__malloc_unlock>
 800b150:	e797      	b.n	800b082 <_malloc_r+0x22>
 800b152:	6025      	str	r5, [r4, #0]
 800b154:	e7dc      	b.n	800b110 <_malloc_r+0xb0>
 800b156:	605b      	str	r3, [r3, #4]
 800b158:	deff      	udf	#255	; 0xff
 800b15a:	bf00      	nop
 800b15c:	20002a74 	.word	0x20002a74

0800b160 <__malloc_lock>:
 800b160:	4801      	ldr	r0, [pc, #4]	; (800b168 <__malloc_lock+0x8>)
 800b162:	f001 b844 	b.w	800c1ee <__retarget_lock_acquire_recursive>
 800b166:	bf00      	nop
 800b168:	20002bbc 	.word	0x20002bbc

0800b16c <__malloc_unlock>:
 800b16c:	4801      	ldr	r0, [pc, #4]	; (800b174 <__malloc_unlock+0x8>)
 800b16e:	f001 b83f 	b.w	800c1f0 <__retarget_lock_release_recursive>
 800b172:	bf00      	nop
 800b174:	20002bbc 	.word	0x20002bbc

0800b178 <__cvt>:
 800b178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	ec55 4b10 	vmov	r4, r5, d0
 800b180:	2d00      	cmp	r5, #0
 800b182:	460e      	mov	r6, r1
 800b184:	4619      	mov	r1, r3
 800b186:	462b      	mov	r3, r5
 800b188:	bfbb      	ittet	lt
 800b18a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b18e:	461d      	movlt	r5, r3
 800b190:	2300      	movge	r3, #0
 800b192:	232d      	movlt	r3, #45	; 0x2d
 800b194:	700b      	strb	r3, [r1, #0]
 800b196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b198:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b19c:	4691      	mov	r9, r2
 800b19e:	f023 0820 	bic.w	r8, r3, #32
 800b1a2:	bfbc      	itt	lt
 800b1a4:	4622      	movlt	r2, r4
 800b1a6:	4614      	movlt	r4, r2
 800b1a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1ac:	d005      	beq.n	800b1ba <__cvt+0x42>
 800b1ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b1b2:	d100      	bne.n	800b1b6 <__cvt+0x3e>
 800b1b4:	3601      	adds	r6, #1
 800b1b6:	2102      	movs	r1, #2
 800b1b8:	e000      	b.n	800b1bc <__cvt+0x44>
 800b1ba:	2103      	movs	r1, #3
 800b1bc:	ab03      	add	r3, sp, #12
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	ab02      	add	r3, sp, #8
 800b1c2:	9300      	str	r3, [sp, #0]
 800b1c4:	ec45 4b10 	vmov	d0, r4, r5
 800b1c8:	4653      	mov	r3, sl
 800b1ca:	4632      	mov	r2, r6
 800b1cc:	f001 f8a0 	bl	800c310 <_dtoa_r>
 800b1d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b1d4:	4607      	mov	r7, r0
 800b1d6:	d102      	bne.n	800b1de <__cvt+0x66>
 800b1d8:	f019 0f01 	tst.w	r9, #1
 800b1dc:	d022      	beq.n	800b224 <__cvt+0xac>
 800b1de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1e2:	eb07 0906 	add.w	r9, r7, r6
 800b1e6:	d110      	bne.n	800b20a <__cvt+0x92>
 800b1e8:	783b      	ldrb	r3, [r7, #0]
 800b1ea:	2b30      	cmp	r3, #48	; 0x30
 800b1ec:	d10a      	bne.n	800b204 <__cvt+0x8c>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f7f5 fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1fa:	b918      	cbnz	r0, 800b204 <__cvt+0x8c>
 800b1fc:	f1c6 0601 	rsb	r6, r6, #1
 800b200:	f8ca 6000 	str.w	r6, [sl]
 800b204:	f8da 3000 	ldr.w	r3, [sl]
 800b208:	4499      	add	r9, r3
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	4620      	mov	r0, r4
 800b210:	4629      	mov	r1, r5
 800b212:	f7f5 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 800b216:	b108      	cbz	r0, 800b21c <__cvt+0xa4>
 800b218:	f8cd 900c 	str.w	r9, [sp, #12]
 800b21c:	2230      	movs	r2, #48	; 0x30
 800b21e:	9b03      	ldr	r3, [sp, #12]
 800b220:	454b      	cmp	r3, r9
 800b222:	d307      	bcc.n	800b234 <__cvt+0xbc>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b228:	1bdb      	subs	r3, r3, r7
 800b22a:	4638      	mov	r0, r7
 800b22c:	6013      	str	r3, [r2, #0]
 800b22e:	b004      	add	sp, #16
 800b230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b234:	1c59      	adds	r1, r3, #1
 800b236:	9103      	str	r1, [sp, #12]
 800b238:	701a      	strb	r2, [r3, #0]
 800b23a:	e7f0      	b.n	800b21e <__cvt+0xa6>

0800b23c <__exponent>:
 800b23c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b23e:	4603      	mov	r3, r0
 800b240:	2900      	cmp	r1, #0
 800b242:	bfb8      	it	lt
 800b244:	4249      	neglt	r1, r1
 800b246:	f803 2b02 	strb.w	r2, [r3], #2
 800b24a:	bfb4      	ite	lt
 800b24c:	222d      	movlt	r2, #45	; 0x2d
 800b24e:	222b      	movge	r2, #43	; 0x2b
 800b250:	2909      	cmp	r1, #9
 800b252:	7042      	strb	r2, [r0, #1]
 800b254:	dd2a      	ble.n	800b2ac <__exponent+0x70>
 800b256:	f10d 0207 	add.w	r2, sp, #7
 800b25a:	4617      	mov	r7, r2
 800b25c:	260a      	movs	r6, #10
 800b25e:	4694      	mov	ip, r2
 800b260:	fb91 f5f6 	sdiv	r5, r1, r6
 800b264:	fb06 1415 	mls	r4, r6, r5, r1
 800b268:	3430      	adds	r4, #48	; 0x30
 800b26a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b26e:	460c      	mov	r4, r1
 800b270:	2c63      	cmp	r4, #99	; 0x63
 800b272:	f102 32ff 	add.w	r2, r2, #4294967295
 800b276:	4629      	mov	r1, r5
 800b278:	dcf1      	bgt.n	800b25e <__exponent+0x22>
 800b27a:	3130      	adds	r1, #48	; 0x30
 800b27c:	f1ac 0402 	sub.w	r4, ip, #2
 800b280:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b284:	1c41      	adds	r1, r0, #1
 800b286:	4622      	mov	r2, r4
 800b288:	42ba      	cmp	r2, r7
 800b28a:	d30a      	bcc.n	800b2a2 <__exponent+0x66>
 800b28c:	f10d 0209 	add.w	r2, sp, #9
 800b290:	eba2 020c 	sub.w	r2, r2, ip
 800b294:	42bc      	cmp	r4, r7
 800b296:	bf88      	it	hi
 800b298:	2200      	movhi	r2, #0
 800b29a:	4413      	add	r3, r2
 800b29c:	1a18      	subs	r0, r3, r0
 800b29e:	b003      	add	sp, #12
 800b2a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b2a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b2aa:	e7ed      	b.n	800b288 <__exponent+0x4c>
 800b2ac:	2330      	movs	r3, #48	; 0x30
 800b2ae:	3130      	adds	r1, #48	; 0x30
 800b2b0:	7083      	strb	r3, [r0, #2]
 800b2b2:	70c1      	strb	r1, [r0, #3]
 800b2b4:	1d03      	adds	r3, r0, #4
 800b2b6:	e7f1      	b.n	800b29c <__exponent+0x60>

0800b2b8 <_printf_float>:
 800b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	ed2d 8b02 	vpush	{d8}
 800b2c0:	b08d      	sub	sp, #52	; 0x34
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b2c8:	4616      	mov	r6, r2
 800b2ca:	461f      	mov	r7, r3
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	f000 ff09 	bl	800c0e4 <_localeconv_r>
 800b2d2:	f8d0 a000 	ldr.w	sl, [r0]
 800b2d6:	4650      	mov	r0, sl
 800b2d8:	f7f4 ffca 	bl	8000270 <strlen>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	930a      	str	r3, [sp, #40]	; 0x28
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	9305      	str	r3, [sp, #20]
 800b2e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b2e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b2ec:	3307      	adds	r3, #7
 800b2ee:	f023 0307 	bic.w	r3, r3, #7
 800b2f2:	f103 0208 	add.w	r2, r3, #8
 800b2f6:	f8c8 2000 	str.w	r2, [r8]
 800b2fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b302:	9307      	str	r3, [sp, #28]
 800b304:	f8cd 8018 	str.w	r8, [sp, #24]
 800b308:	ee08 0a10 	vmov	s16, r0
 800b30c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b314:	4b9e      	ldr	r3, [pc, #632]	; (800b590 <_printf_float+0x2d8>)
 800b316:	f04f 32ff 	mov.w	r2, #4294967295
 800b31a:	f7f5 fc07 	bl	8000b2c <__aeabi_dcmpun>
 800b31e:	bb88      	cbnz	r0, 800b384 <_printf_float+0xcc>
 800b320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b324:	4b9a      	ldr	r3, [pc, #616]	; (800b590 <_printf_float+0x2d8>)
 800b326:	f04f 32ff 	mov.w	r2, #4294967295
 800b32a:	f7f5 fbe1 	bl	8000af0 <__aeabi_dcmple>
 800b32e:	bb48      	cbnz	r0, 800b384 <_printf_float+0xcc>
 800b330:	2200      	movs	r2, #0
 800b332:	2300      	movs	r3, #0
 800b334:	4640      	mov	r0, r8
 800b336:	4649      	mov	r1, r9
 800b338:	f7f5 fbd0 	bl	8000adc <__aeabi_dcmplt>
 800b33c:	b110      	cbz	r0, 800b344 <_printf_float+0x8c>
 800b33e:	232d      	movs	r3, #45	; 0x2d
 800b340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b344:	4a93      	ldr	r2, [pc, #588]	; (800b594 <_printf_float+0x2dc>)
 800b346:	4b94      	ldr	r3, [pc, #592]	; (800b598 <_printf_float+0x2e0>)
 800b348:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b34c:	bf94      	ite	ls
 800b34e:	4690      	movls	r8, r2
 800b350:	4698      	movhi	r8, r3
 800b352:	2303      	movs	r3, #3
 800b354:	6123      	str	r3, [r4, #16]
 800b356:	9b05      	ldr	r3, [sp, #20]
 800b358:	f023 0304 	bic.w	r3, r3, #4
 800b35c:	6023      	str	r3, [r4, #0]
 800b35e:	f04f 0900 	mov.w	r9, #0
 800b362:	9700      	str	r7, [sp, #0]
 800b364:	4633      	mov	r3, r6
 800b366:	aa0b      	add	r2, sp, #44	; 0x2c
 800b368:	4621      	mov	r1, r4
 800b36a:	4628      	mov	r0, r5
 800b36c:	f000 f9da 	bl	800b724 <_printf_common>
 800b370:	3001      	adds	r0, #1
 800b372:	f040 8090 	bne.w	800b496 <_printf_float+0x1de>
 800b376:	f04f 30ff 	mov.w	r0, #4294967295
 800b37a:	b00d      	add	sp, #52	; 0x34
 800b37c:	ecbd 8b02 	vpop	{d8}
 800b380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b384:	4642      	mov	r2, r8
 800b386:	464b      	mov	r3, r9
 800b388:	4640      	mov	r0, r8
 800b38a:	4649      	mov	r1, r9
 800b38c:	f7f5 fbce 	bl	8000b2c <__aeabi_dcmpun>
 800b390:	b140      	cbz	r0, 800b3a4 <_printf_float+0xec>
 800b392:	464b      	mov	r3, r9
 800b394:	2b00      	cmp	r3, #0
 800b396:	bfbc      	itt	lt
 800b398:	232d      	movlt	r3, #45	; 0x2d
 800b39a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b39e:	4a7f      	ldr	r2, [pc, #508]	; (800b59c <_printf_float+0x2e4>)
 800b3a0:	4b7f      	ldr	r3, [pc, #508]	; (800b5a0 <_printf_float+0x2e8>)
 800b3a2:	e7d1      	b.n	800b348 <_printf_float+0x90>
 800b3a4:	6863      	ldr	r3, [r4, #4]
 800b3a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b3aa:	9206      	str	r2, [sp, #24]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	d13f      	bne.n	800b430 <_printf_float+0x178>
 800b3b0:	2306      	movs	r3, #6
 800b3b2:	6063      	str	r3, [r4, #4]
 800b3b4:	9b05      	ldr	r3, [sp, #20]
 800b3b6:	6861      	ldr	r1, [r4, #4]
 800b3b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b3bc:	2300      	movs	r3, #0
 800b3be:	9303      	str	r3, [sp, #12]
 800b3c0:	ab0a      	add	r3, sp, #40	; 0x28
 800b3c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b3c6:	ab09      	add	r3, sp, #36	; 0x24
 800b3c8:	ec49 8b10 	vmov	d0, r8, r9
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	6022      	str	r2, [r4, #0]
 800b3d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f7ff fecf 	bl	800b178 <__cvt>
 800b3da:	9b06      	ldr	r3, [sp, #24]
 800b3dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3de:	2b47      	cmp	r3, #71	; 0x47
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	d108      	bne.n	800b3f6 <_printf_float+0x13e>
 800b3e4:	1cc8      	adds	r0, r1, #3
 800b3e6:	db02      	blt.n	800b3ee <_printf_float+0x136>
 800b3e8:	6863      	ldr	r3, [r4, #4]
 800b3ea:	4299      	cmp	r1, r3
 800b3ec:	dd41      	ble.n	800b472 <_printf_float+0x1ba>
 800b3ee:	f1ab 0302 	sub.w	r3, fp, #2
 800b3f2:	fa5f fb83 	uxtb.w	fp, r3
 800b3f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b3fa:	d820      	bhi.n	800b43e <_printf_float+0x186>
 800b3fc:	3901      	subs	r1, #1
 800b3fe:	465a      	mov	r2, fp
 800b400:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b404:	9109      	str	r1, [sp, #36]	; 0x24
 800b406:	f7ff ff19 	bl	800b23c <__exponent>
 800b40a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b40c:	1813      	adds	r3, r2, r0
 800b40e:	2a01      	cmp	r2, #1
 800b410:	4681      	mov	r9, r0
 800b412:	6123      	str	r3, [r4, #16]
 800b414:	dc02      	bgt.n	800b41c <_printf_float+0x164>
 800b416:	6822      	ldr	r2, [r4, #0]
 800b418:	07d2      	lsls	r2, r2, #31
 800b41a:	d501      	bpl.n	800b420 <_printf_float+0x168>
 800b41c:	3301      	adds	r3, #1
 800b41e:	6123      	str	r3, [r4, #16]
 800b420:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b424:	2b00      	cmp	r3, #0
 800b426:	d09c      	beq.n	800b362 <_printf_float+0xaa>
 800b428:	232d      	movs	r3, #45	; 0x2d
 800b42a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b42e:	e798      	b.n	800b362 <_printf_float+0xaa>
 800b430:	9a06      	ldr	r2, [sp, #24]
 800b432:	2a47      	cmp	r2, #71	; 0x47
 800b434:	d1be      	bne.n	800b3b4 <_printf_float+0xfc>
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1bc      	bne.n	800b3b4 <_printf_float+0xfc>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e7b9      	b.n	800b3b2 <_printf_float+0xfa>
 800b43e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b442:	d118      	bne.n	800b476 <_printf_float+0x1be>
 800b444:	2900      	cmp	r1, #0
 800b446:	6863      	ldr	r3, [r4, #4]
 800b448:	dd0b      	ble.n	800b462 <_printf_float+0x1aa>
 800b44a:	6121      	str	r1, [r4, #16]
 800b44c:	b913      	cbnz	r3, 800b454 <_printf_float+0x19c>
 800b44e:	6822      	ldr	r2, [r4, #0]
 800b450:	07d0      	lsls	r0, r2, #31
 800b452:	d502      	bpl.n	800b45a <_printf_float+0x1a2>
 800b454:	3301      	adds	r3, #1
 800b456:	440b      	add	r3, r1
 800b458:	6123      	str	r3, [r4, #16]
 800b45a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b45c:	f04f 0900 	mov.w	r9, #0
 800b460:	e7de      	b.n	800b420 <_printf_float+0x168>
 800b462:	b913      	cbnz	r3, 800b46a <_printf_float+0x1b2>
 800b464:	6822      	ldr	r2, [r4, #0]
 800b466:	07d2      	lsls	r2, r2, #31
 800b468:	d501      	bpl.n	800b46e <_printf_float+0x1b6>
 800b46a:	3302      	adds	r3, #2
 800b46c:	e7f4      	b.n	800b458 <_printf_float+0x1a0>
 800b46e:	2301      	movs	r3, #1
 800b470:	e7f2      	b.n	800b458 <_printf_float+0x1a0>
 800b472:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b478:	4299      	cmp	r1, r3
 800b47a:	db05      	blt.n	800b488 <_printf_float+0x1d0>
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	6121      	str	r1, [r4, #16]
 800b480:	07d8      	lsls	r0, r3, #31
 800b482:	d5ea      	bpl.n	800b45a <_printf_float+0x1a2>
 800b484:	1c4b      	adds	r3, r1, #1
 800b486:	e7e7      	b.n	800b458 <_printf_float+0x1a0>
 800b488:	2900      	cmp	r1, #0
 800b48a:	bfd4      	ite	le
 800b48c:	f1c1 0202 	rsble	r2, r1, #2
 800b490:	2201      	movgt	r2, #1
 800b492:	4413      	add	r3, r2
 800b494:	e7e0      	b.n	800b458 <_printf_float+0x1a0>
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	055a      	lsls	r2, r3, #21
 800b49a:	d407      	bmi.n	800b4ac <_printf_float+0x1f4>
 800b49c:	6923      	ldr	r3, [r4, #16]
 800b49e:	4642      	mov	r2, r8
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	d12c      	bne.n	800b504 <_printf_float+0x24c>
 800b4aa:	e764      	b.n	800b376 <_printf_float+0xbe>
 800b4ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b4b0:	f240 80e0 	bls.w	800b674 <_printf_float+0x3bc>
 800b4b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f7f5 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	d034      	beq.n	800b52e <_printf_float+0x276>
 800b4c4:	4a37      	ldr	r2, [pc, #220]	; (800b5a4 <_printf_float+0x2ec>)
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f af51 	beq.w	800b376 <_printf_float+0xbe>
 800b4d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	db02      	blt.n	800b4e2 <_printf_float+0x22a>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	07d8      	lsls	r0, r3, #31
 800b4e0:	d510      	bpl.n	800b504 <_printf_float+0x24c>
 800b4e2:	ee18 3a10 	vmov	r3, s16
 800b4e6:	4652      	mov	r2, sl
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	47b8      	blx	r7
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	f43f af41 	beq.w	800b376 <_printf_float+0xbe>
 800b4f4:	f04f 0800 	mov.w	r8, #0
 800b4f8:	f104 091a 	add.w	r9, r4, #26
 800b4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4fe:	3b01      	subs	r3, #1
 800b500:	4543      	cmp	r3, r8
 800b502:	dc09      	bgt.n	800b518 <_printf_float+0x260>
 800b504:	6823      	ldr	r3, [r4, #0]
 800b506:	079b      	lsls	r3, r3, #30
 800b508:	f100 8107 	bmi.w	800b71a <_printf_float+0x462>
 800b50c:	68e0      	ldr	r0, [r4, #12]
 800b50e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b510:	4298      	cmp	r0, r3
 800b512:	bfb8      	it	lt
 800b514:	4618      	movlt	r0, r3
 800b516:	e730      	b.n	800b37a <_printf_float+0xc2>
 800b518:	2301      	movs	r3, #1
 800b51a:	464a      	mov	r2, r9
 800b51c:	4631      	mov	r1, r6
 800b51e:	4628      	mov	r0, r5
 800b520:	47b8      	blx	r7
 800b522:	3001      	adds	r0, #1
 800b524:	f43f af27 	beq.w	800b376 <_printf_float+0xbe>
 800b528:	f108 0801 	add.w	r8, r8, #1
 800b52c:	e7e6      	b.n	800b4fc <_printf_float+0x244>
 800b52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b530:	2b00      	cmp	r3, #0
 800b532:	dc39      	bgt.n	800b5a8 <_printf_float+0x2f0>
 800b534:	4a1b      	ldr	r2, [pc, #108]	; (800b5a4 <_printf_float+0x2ec>)
 800b536:	2301      	movs	r3, #1
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	f43f af19 	beq.w	800b376 <_printf_float+0xbe>
 800b544:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b548:	4313      	orrs	r3, r2
 800b54a:	d102      	bne.n	800b552 <_printf_float+0x29a>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	d5d8      	bpl.n	800b504 <_printf_float+0x24c>
 800b552:	ee18 3a10 	vmov	r3, s16
 800b556:	4652      	mov	r2, sl
 800b558:	4631      	mov	r1, r6
 800b55a:	4628      	mov	r0, r5
 800b55c:	47b8      	blx	r7
 800b55e:	3001      	adds	r0, #1
 800b560:	f43f af09 	beq.w	800b376 <_printf_float+0xbe>
 800b564:	f04f 0900 	mov.w	r9, #0
 800b568:	f104 0a1a 	add.w	sl, r4, #26
 800b56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b56e:	425b      	negs	r3, r3
 800b570:	454b      	cmp	r3, r9
 800b572:	dc01      	bgt.n	800b578 <_printf_float+0x2c0>
 800b574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b576:	e792      	b.n	800b49e <_printf_float+0x1e6>
 800b578:	2301      	movs	r3, #1
 800b57a:	4652      	mov	r2, sl
 800b57c:	4631      	mov	r1, r6
 800b57e:	4628      	mov	r0, r5
 800b580:	47b8      	blx	r7
 800b582:	3001      	adds	r0, #1
 800b584:	f43f aef7 	beq.w	800b376 <_printf_float+0xbe>
 800b588:	f109 0901 	add.w	r9, r9, #1
 800b58c:	e7ee      	b.n	800b56c <_printf_float+0x2b4>
 800b58e:	bf00      	nop
 800b590:	7fefffff 	.word	0x7fefffff
 800b594:	08010040 	.word	0x08010040
 800b598:	08010044 	.word	0x08010044
 800b59c:	08010048 	.word	0x08010048
 800b5a0:	0801004c 	.word	0x0801004c
 800b5a4:	08010050 	.word	0x08010050
 800b5a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	bfa8      	it	ge
 800b5b0:	461a      	movge	r2, r3
 800b5b2:	2a00      	cmp	r2, #0
 800b5b4:	4691      	mov	r9, r2
 800b5b6:	dc37      	bgt.n	800b628 <_printf_float+0x370>
 800b5b8:	f04f 0b00 	mov.w	fp, #0
 800b5bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5c0:	f104 021a 	add.w	r2, r4, #26
 800b5c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5c6:	9305      	str	r3, [sp, #20]
 800b5c8:	eba3 0309 	sub.w	r3, r3, r9
 800b5cc:	455b      	cmp	r3, fp
 800b5ce:	dc33      	bgt.n	800b638 <_printf_float+0x380>
 800b5d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	db3b      	blt.n	800b650 <_printf_float+0x398>
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	07da      	lsls	r2, r3, #31
 800b5dc:	d438      	bmi.n	800b650 <_printf_float+0x398>
 800b5de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b5e2:	eba2 0903 	sub.w	r9, r2, r3
 800b5e6:	9b05      	ldr	r3, [sp, #20]
 800b5e8:	1ad2      	subs	r2, r2, r3
 800b5ea:	4591      	cmp	r9, r2
 800b5ec:	bfa8      	it	ge
 800b5ee:	4691      	movge	r9, r2
 800b5f0:	f1b9 0f00 	cmp.w	r9, #0
 800b5f4:	dc35      	bgt.n	800b662 <_printf_float+0x3aa>
 800b5f6:	f04f 0800 	mov.w	r8, #0
 800b5fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5fe:	f104 0a1a 	add.w	sl, r4, #26
 800b602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b606:	1a9b      	subs	r3, r3, r2
 800b608:	eba3 0309 	sub.w	r3, r3, r9
 800b60c:	4543      	cmp	r3, r8
 800b60e:	f77f af79 	ble.w	800b504 <_printf_float+0x24c>
 800b612:	2301      	movs	r3, #1
 800b614:	4652      	mov	r2, sl
 800b616:	4631      	mov	r1, r6
 800b618:	4628      	mov	r0, r5
 800b61a:	47b8      	blx	r7
 800b61c:	3001      	adds	r0, #1
 800b61e:	f43f aeaa 	beq.w	800b376 <_printf_float+0xbe>
 800b622:	f108 0801 	add.w	r8, r8, #1
 800b626:	e7ec      	b.n	800b602 <_printf_float+0x34a>
 800b628:	4613      	mov	r3, r2
 800b62a:	4631      	mov	r1, r6
 800b62c:	4642      	mov	r2, r8
 800b62e:	4628      	mov	r0, r5
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	d1c0      	bne.n	800b5b8 <_printf_float+0x300>
 800b636:	e69e      	b.n	800b376 <_printf_float+0xbe>
 800b638:	2301      	movs	r3, #1
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	9205      	str	r2, [sp, #20]
 800b640:	47b8      	blx	r7
 800b642:	3001      	adds	r0, #1
 800b644:	f43f ae97 	beq.w	800b376 <_printf_float+0xbe>
 800b648:	9a05      	ldr	r2, [sp, #20]
 800b64a:	f10b 0b01 	add.w	fp, fp, #1
 800b64e:	e7b9      	b.n	800b5c4 <_printf_float+0x30c>
 800b650:	ee18 3a10 	vmov	r3, s16
 800b654:	4652      	mov	r2, sl
 800b656:	4631      	mov	r1, r6
 800b658:	4628      	mov	r0, r5
 800b65a:	47b8      	blx	r7
 800b65c:	3001      	adds	r0, #1
 800b65e:	d1be      	bne.n	800b5de <_printf_float+0x326>
 800b660:	e689      	b.n	800b376 <_printf_float+0xbe>
 800b662:	9a05      	ldr	r2, [sp, #20]
 800b664:	464b      	mov	r3, r9
 800b666:	4442      	add	r2, r8
 800b668:	4631      	mov	r1, r6
 800b66a:	4628      	mov	r0, r5
 800b66c:	47b8      	blx	r7
 800b66e:	3001      	adds	r0, #1
 800b670:	d1c1      	bne.n	800b5f6 <_printf_float+0x33e>
 800b672:	e680      	b.n	800b376 <_printf_float+0xbe>
 800b674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b676:	2a01      	cmp	r2, #1
 800b678:	dc01      	bgt.n	800b67e <_printf_float+0x3c6>
 800b67a:	07db      	lsls	r3, r3, #31
 800b67c:	d53a      	bpl.n	800b6f4 <_printf_float+0x43c>
 800b67e:	2301      	movs	r3, #1
 800b680:	4642      	mov	r2, r8
 800b682:	4631      	mov	r1, r6
 800b684:	4628      	mov	r0, r5
 800b686:	47b8      	blx	r7
 800b688:	3001      	adds	r0, #1
 800b68a:	f43f ae74 	beq.w	800b376 <_printf_float+0xbe>
 800b68e:	ee18 3a10 	vmov	r3, s16
 800b692:	4652      	mov	r2, sl
 800b694:	4631      	mov	r1, r6
 800b696:	4628      	mov	r0, r5
 800b698:	47b8      	blx	r7
 800b69a:	3001      	adds	r0, #1
 800b69c:	f43f ae6b 	beq.w	800b376 <_printf_float+0xbe>
 800b6a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b6ac:	f7f5 fa0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6b0:	b9d8      	cbnz	r0, 800b6ea <_printf_float+0x432>
 800b6b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b6b6:	f108 0201 	add.w	r2, r8, #1
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b8      	blx	r7
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d10e      	bne.n	800b6e2 <_printf_float+0x42a>
 800b6c4:	e657      	b.n	800b376 <_printf_float+0xbe>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4652      	mov	r2, sl
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	47b8      	blx	r7
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f43f ae50 	beq.w	800b376 <_printf_float+0xbe>
 800b6d6:	f108 0801 	add.w	r8, r8, #1
 800b6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	4543      	cmp	r3, r8
 800b6e0:	dcf1      	bgt.n	800b6c6 <_printf_float+0x40e>
 800b6e2:	464b      	mov	r3, r9
 800b6e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b6e8:	e6da      	b.n	800b4a0 <_printf_float+0x1e8>
 800b6ea:	f04f 0800 	mov.w	r8, #0
 800b6ee:	f104 0a1a 	add.w	sl, r4, #26
 800b6f2:	e7f2      	b.n	800b6da <_printf_float+0x422>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	4642      	mov	r2, r8
 800b6f8:	e7df      	b.n	800b6ba <_printf_float+0x402>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	464a      	mov	r2, r9
 800b6fe:	4631      	mov	r1, r6
 800b700:	4628      	mov	r0, r5
 800b702:	47b8      	blx	r7
 800b704:	3001      	adds	r0, #1
 800b706:	f43f ae36 	beq.w	800b376 <_printf_float+0xbe>
 800b70a:	f108 0801 	add.w	r8, r8, #1
 800b70e:	68e3      	ldr	r3, [r4, #12]
 800b710:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b712:	1a5b      	subs	r3, r3, r1
 800b714:	4543      	cmp	r3, r8
 800b716:	dcf0      	bgt.n	800b6fa <_printf_float+0x442>
 800b718:	e6f8      	b.n	800b50c <_printf_float+0x254>
 800b71a:	f04f 0800 	mov.w	r8, #0
 800b71e:	f104 0919 	add.w	r9, r4, #25
 800b722:	e7f4      	b.n	800b70e <_printf_float+0x456>

0800b724 <_printf_common>:
 800b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b728:	4616      	mov	r6, r2
 800b72a:	4699      	mov	r9, r3
 800b72c:	688a      	ldr	r2, [r1, #8]
 800b72e:	690b      	ldr	r3, [r1, #16]
 800b730:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b734:	4293      	cmp	r3, r2
 800b736:	bfb8      	it	lt
 800b738:	4613      	movlt	r3, r2
 800b73a:	6033      	str	r3, [r6, #0]
 800b73c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b740:	4607      	mov	r7, r0
 800b742:	460c      	mov	r4, r1
 800b744:	b10a      	cbz	r2, 800b74a <_printf_common+0x26>
 800b746:	3301      	adds	r3, #1
 800b748:	6033      	str	r3, [r6, #0]
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	0699      	lsls	r1, r3, #26
 800b74e:	bf42      	ittt	mi
 800b750:	6833      	ldrmi	r3, [r6, #0]
 800b752:	3302      	addmi	r3, #2
 800b754:	6033      	strmi	r3, [r6, #0]
 800b756:	6825      	ldr	r5, [r4, #0]
 800b758:	f015 0506 	ands.w	r5, r5, #6
 800b75c:	d106      	bne.n	800b76c <_printf_common+0x48>
 800b75e:	f104 0a19 	add.w	sl, r4, #25
 800b762:	68e3      	ldr	r3, [r4, #12]
 800b764:	6832      	ldr	r2, [r6, #0]
 800b766:	1a9b      	subs	r3, r3, r2
 800b768:	42ab      	cmp	r3, r5
 800b76a:	dc26      	bgt.n	800b7ba <_printf_common+0x96>
 800b76c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b770:	1e13      	subs	r3, r2, #0
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	bf18      	it	ne
 800b776:	2301      	movne	r3, #1
 800b778:	0692      	lsls	r2, r2, #26
 800b77a:	d42b      	bmi.n	800b7d4 <_printf_common+0xb0>
 800b77c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b780:	4649      	mov	r1, r9
 800b782:	4638      	mov	r0, r7
 800b784:	47c0      	blx	r8
 800b786:	3001      	adds	r0, #1
 800b788:	d01e      	beq.n	800b7c8 <_printf_common+0xa4>
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	6922      	ldr	r2, [r4, #16]
 800b78e:	f003 0306 	and.w	r3, r3, #6
 800b792:	2b04      	cmp	r3, #4
 800b794:	bf02      	ittt	eq
 800b796:	68e5      	ldreq	r5, [r4, #12]
 800b798:	6833      	ldreq	r3, [r6, #0]
 800b79a:	1aed      	subeq	r5, r5, r3
 800b79c:	68a3      	ldr	r3, [r4, #8]
 800b79e:	bf0c      	ite	eq
 800b7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7a4:	2500      	movne	r5, #0
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	bfc4      	itt	gt
 800b7aa:	1a9b      	subgt	r3, r3, r2
 800b7ac:	18ed      	addgt	r5, r5, r3
 800b7ae:	2600      	movs	r6, #0
 800b7b0:	341a      	adds	r4, #26
 800b7b2:	42b5      	cmp	r5, r6
 800b7b4:	d11a      	bne.n	800b7ec <_printf_common+0xc8>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	e008      	b.n	800b7cc <_printf_common+0xa8>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	4652      	mov	r2, sl
 800b7be:	4649      	mov	r1, r9
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	47c0      	blx	r8
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d103      	bne.n	800b7d0 <_printf_common+0xac>
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d0:	3501      	adds	r5, #1
 800b7d2:	e7c6      	b.n	800b762 <_printf_common+0x3e>
 800b7d4:	18e1      	adds	r1, r4, r3
 800b7d6:	1c5a      	adds	r2, r3, #1
 800b7d8:	2030      	movs	r0, #48	; 0x30
 800b7da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7de:	4422      	add	r2, r4
 800b7e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b7e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b7e8:	3302      	adds	r3, #2
 800b7ea:	e7c7      	b.n	800b77c <_printf_common+0x58>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	4649      	mov	r1, r9
 800b7f2:	4638      	mov	r0, r7
 800b7f4:	47c0      	blx	r8
 800b7f6:	3001      	adds	r0, #1
 800b7f8:	d0e6      	beq.n	800b7c8 <_printf_common+0xa4>
 800b7fa:	3601      	adds	r6, #1
 800b7fc:	e7d9      	b.n	800b7b2 <_printf_common+0x8e>
	...

0800b800 <_printf_i>:
 800b800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b804:	7e0f      	ldrb	r7, [r1, #24]
 800b806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b808:	2f78      	cmp	r7, #120	; 0x78
 800b80a:	4691      	mov	r9, r2
 800b80c:	4680      	mov	r8, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	469a      	mov	sl, r3
 800b812:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b816:	d807      	bhi.n	800b828 <_printf_i+0x28>
 800b818:	2f62      	cmp	r7, #98	; 0x62
 800b81a:	d80a      	bhi.n	800b832 <_printf_i+0x32>
 800b81c:	2f00      	cmp	r7, #0
 800b81e:	f000 80d4 	beq.w	800b9ca <_printf_i+0x1ca>
 800b822:	2f58      	cmp	r7, #88	; 0x58
 800b824:	f000 80c0 	beq.w	800b9a8 <_printf_i+0x1a8>
 800b828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b82c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b830:	e03a      	b.n	800b8a8 <_printf_i+0xa8>
 800b832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b836:	2b15      	cmp	r3, #21
 800b838:	d8f6      	bhi.n	800b828 <_printf_i+0x28>
 800b83a:	a101      	add	r1, pc, #4	; (adr r1, 800b840 <_printf_i+0x40>)
 800b83c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b840:	0800b899 	.word	0x0800b899
 800b844:	0800b8ad 	.word	0x0800b8ad
 800b848:	0800b829 	.word	0x0800b829
 800b84c:	0800b829 	.word	0x0800b829
 800b850:	0800b829 	.word	0x0800b829
 800b854:	0800b829 	.word	0x0800b829
 800b858:	0800b8ad 	.word	0x0800b8ad
 800b85c:	0800b829 	.word	0x0800b829
 800b860:	0800b829 	.word	0x0800b829
 800b864:	0800b829 	.word	0x0800b829
 800b868:	0800b829 	.word	0x0800b829
 800b86c:	0800b9b1 	.word	0x0800b9b1
 800b870:	0800b8d9 	.word	0x0800b8d9
 800b874:	0800b96b 	.word	0x0800b96b
 800b878:	0800b829 	.word	0x0800b829
 800b87c:	0800b829 	.word	0x0800b829
 800b880:	0800b9d3 	.word	0x0800b9d3
 800b884:	0800b829 	.word	0x0800b829
 800b888:	0800b8d9 	.word	0x0800b8d9
 800b88c:	0800b829 	.word	0x0800b829
 800b890:	0800b829 	.word	0x0800b829
 800b894:	0800b973 	.word	0x0800b973
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	1d1a      	adds	r2, r3, #4
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	602a      	str	r2, [r5, #0]
 800b8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e09f      	b.n	800b9ec <_printf_i+0x1ec>
 800b8ac:	6820      	ldr	r0, [r4, #0]
 800b8ae:	682b      	ldr	r3, [r5, #0]
 800b8b0:	0607      	lsls	r7, r0, #24
 800b8b2:	f103 0104 	add.w	r1, r3, #4
 800b8b6:	6029      	str	r1, [r5, #0]
 800b8b8:	d501      	bpl.n	800b8be <_printf_i+0xbe>
 800b8ba:	681e      	ldr	r6, [r3, #0]
 800b8bc:	e003      	b.n	800b8c6 <_printf_i+0xc6>
 800b8be:	0646      	lsls	r6, r0, #25
 800b8c0:	d5fb      	bpl.n	800b8ba <_printf_i+0xba>
 800b8c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b8c6:	2e00      	cmp	r6, #0
 800b8c8:	da03      	bge.n	800b8d2 <_printf_i+0xd2>
 800b8ca:	232d      	movs	r3, #45	; 0x2d
 800b8cc:	4276      	negs	r6, r6
 800b8ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8d2:	485a      	ldr	r0, [pc, #360]	; (800ba3c <_printf_i+0x23c>)
 800b8d4:	230a      	movs	r3, #10
 800b8d6:	e012      	b.n	800b8fe <_printf_i+0xfe>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	6820      	ldr	r0, [r4, #0]
 800b8dc:	1d19      	adds	r1, r3, #4
 800b8de:	6029      	str	r1, [r5, #0]
 800b8e0:	0605      	lsls	r5, r0, #24
 800b8e2:	d501      	bpl.n	800b8e8 <_printf_i+0xe8>
 800b8e4:	681e      	ldr	r6, [r3, #0]
 800b8e6:	e002      	b.n	800b8ee <_printf_i+0xee>
 800b8e8:	0641      	lsls	r1, r0, #25
 800b8ea:	d5fb      	bpl.n	800b8e4 <_printf_i+0xe4>
 800b8ec:	881e      	ldrh	r6, [r3, #0]
 800b8ee:	4853      	ldr	r0, [pc, #332]	; (800ba3c <_printf_i+0x23c>)
 800b8f0:	2f6f      	cmp	r7, #111	; 0x6f
 800b8f2:	bf0c      	ite	eq
 800b8f4:	2308      	moveq	r3, #8
 800b8f6:	230a      	movne	r3, #10
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8fe:	6865      	ldr	r5, [r4, #4]
 800b900:	60a5      	str	r5, [r4, #8]
 800b902:	2d00      	cmp	r5, #0
 800b904:	bfa2      	ittt	ge
 800b906:	6821      	ldrge	r1, [r4, #0]
 800b908:	f021 0104 	bicge.w	r1, r1, #4
 800b90c:	6021      	strge	r1, [r4, #0]
 800b90e:	b90e      	cbnz	r6, 800b914 <_printf_i+0x114>
 800b910:	2d00      	cmp	r5, #0
 800b912:	d04b      	beq.n	800b9ac <_printf_i+0x1ac>
 800b914:	4615      	mov	r5, r2
 800b916:	fbb6 f1f3 	udiv	r1, r6, r3
 800b91a:	fb03 6711 	mls	r7, r3, r1, r6
 800b91e:	5dc7      	ldrb	r7, [r0, r7]
 800b920:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b924:	4637      	mov	r7, r6
 800b926:	42bb      	cmp	r3, r7
 800b928:	460e      	mov	r6, r1
 800b92a:	d9f4      	bls.n	800b916 <_printf_i+0x116>
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d10b      	bne.n	800b948 <_printf_i+0x148>
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	07de      	lsls	r6, r3, #31
 800b934:	d508      	bpl.n	800b948 <_printf_i+0x148>
 800b936:	6923      	ldr	r3, [r4, #16]
 800b938:	6861      	ldr	r1, [r4, #4]
 800b93a:	4299      	cmp	r1, r3
 800b93c:	bfde      	ittt	le
 800b93e:	2330      	movle	r3, #48	; 0x30
 800b940:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b944:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b948:	1b52      	subs	r2, r2, r5
 800b94a:	6122      	str	r2, [r4, #16]
 800b94c:	f8cd a000 	str.w	sl, [sp]
 800b950:	464b      	mov	r3, r9
 800b952:	aa03      	add	r2, sp, #12
 800b954:	4621      	mov	r1, r4
 800b956:	4640      	mov	r0, r8
 800b958:	f7ff fee4 	bl	800b724 <_printf_common>
 800b95c:	3001      	adds	r0, #1
 800b95e:	d14a      	bne.n	800b9f6 <_printf_i+0x1f6>
 800b960:	f04f 30ff 	mov.w	r0, #4294967295
 800b964:	b004      	add	sp, #16
 800b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	f043 0320 	orr.w	r3, r3, #32
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	4833      	ldr	r0, [pc, #204]	; (800ba40 <_printf_i+0x240>)
 800b974:	2778      	movs	r7, #120	; 0x78
 800b976:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	6829      	ldr	r1, [r5, #0]
 800b97e:	061f      	lsls	r7, r3, #24
 800b980:	f851 6b04 	ldr.w	r6, [r1], #4
 800b984:	d402      	bmi.n	800b98c <_printf_i+0x18c>
 800b986:	065f      	lsls	r7, r3, #25
 800b988:	bf48      	it	mi
 800b98a:	b2b6      	uxthmi	r6, r6
 800b98c:	07df      	lsls	r7, r3, #31
 800b98e:	bf48      	it	mi
 800b990:	f043 0320 	orrmi.w	r3, r3, #32
 800b994:	6029      	str	r1, [r5, #0]
 800b996:	bf48      	it	mi
 800b998:	6023      	strmi	r3, [r4, #0]
 800b99a:	b91e      	cbnz	r6, 800b9a4 <_printf_i+0x1a4>
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	f023 0320 	bic.w	r3, r3, #32
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	2310      	movs	r3, #16
 800b9a6:	e7a7      	b.n	800b8f8 <_printf_i+0xf8>
 800b9a8:	4824      	ldr	r0, [pc, #144]	; (800ba3c <_printf_i+0x23c>)
 800b9aa:	e7e4      	b.n	800b976 <_printf_i+0x176>
 800b9ac:	4615      	mov	r5, r2
 800b9ae:	e7bd      	b.n	800b92c <_printf_i+0x12c>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	6826      	ldr	r6, [r4, #0]
 800b9b4:	6961      	ldr	r1, [r4, #20]
 800b9b6:	1d18      	adds	r0, r3, #4
 800b9b8:	6028      	str	r0, [r5, #0]
 800b9ba:	0635      	lsls	r5, r6, #24
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	d501      	bpl.n	800b9c4 <_printf_i+0x1c4>
 800b9c0:	6019      	str	r1, [r3, #0]
 800b9c2:	e002      	b.n	800b9ca <_printf_i+0x1ca>
 800b9c4:	0670      	lsls	r0, r6, #25
 800b9c6:	d5fb      	bpl.n	800b9c0 <_printf_i+0x1c0>
 800b9c8:	8019      	strh	r1, [r3, #0]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	6123      	str	r3, [r4, #16]
 800b9ce:	4615      	mov	r5, r2
 800b9d0:	e7bc      	b.n	800b94c <_printf_i+0x14c>
 800b9d2:	682b      	ldr	r3, [r5, #0]
 800b9d4:	1d1a      	adds	r2, r3, #4
 800b9d6:	602a      	str	r2, [r5, #0]
 800b9d8:	681d      	ldr	r5, [r3, #0]
 800b9da:	6862      	ldr	r2, [r4, #4]
 800b9dc:	2100      	movs	r1, #0
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f7f4 fbf6 	bl	80001d0 <memchr>
 800b9e4:	b108      	cbz	r0, 800b9ea <_printf_i+0x1ea>
 800b9e6:	1b40      	subs	r0, r0, r5
 800b9e8:	6060      	str	r0, [r4, #4]
 800b9ea:	6863      	ldr	r3, [r4, #4]
 800b9ec:	6123      	str	r3, [r4, #16]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9f4:	e7aa      	b.n	800b94c <_printf_i+0x14c>
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	47d0      	blx	sl
 800ba00:	3001      	adds	r0, #1
 800ba02:	d0ad      	beq.n	800b960 <_printf_i+0x160>
 800ba04:	6823      	ldr	r3, [r4, #0]
 800ba06:	079b      	lsls	r3, r3, #30
 800ba08:	d413      	bmi.n	800ba32 <_printf_i+0x232>
 800ba0a:	68e0      	ldr	r0, [r4, #12]
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	4298      	cmp	r0, r3
 800ba10:	bfb8      	it	lt
 800ba12:	4618      	movlt	r0, r3
 800ba14:	e7a6      	b.n	800b964 <_printf_i+0x164>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4632      	mov	r2, r6
 800ba1a:	4649      	mov	r1, r9
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	47d0      	blx	sl
 800ba20:	3001      	adds	r0, #1
 800ba22:	d09d      	beq.n	800b960 <_printf_i+0x160>
 800ba24:	3501      	adds	r5, #1
 800ba26:	68e3      	ldr	r3, [r4, #12]
 800ba28:	9903      	ldr	r1, [sp, #12]
 800ba2a:	1a5b      	subs	r3, r3, r1
 800ba2c:	42ab      	cmp	r3, r5
 800ba2e:	dcf2      	bgt.n	800ba16 <_printf_i+0x216>
 800ba30:	e7eb      	b.n	800ba0a <_printf_i+0x20a>
 800ba32:	2500      	movs	r5, #0
 800ba34:	f104 0619 	add.w	r6, r4, #25
 800ba38:	e7f5      	b.n	800ba26 <_printf_i+0x226>
 800ba3a:	bf00      	nop
 800ba3c:	08010052 	.word	0x08010052
 800ba40:	08010063 	.word	0x08010063

0800ba44 <_scanf_float>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	b087      	sub	sp, #28
 800ba4a:	4617      	mov	r7, r2
 800ba4c:	9303      	str	r3, [sp, #12]
 800ba4e:	688b      	ldr	r3, [r1, #8]
 800ba50:	1e5a      	subs	r2, r3, #1
 800ba52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ba56:	bf83      	ittte	hi
 800ba58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ba5c:	195b      	addhi	r3, r3, r5
 800ba5e:	9302      	strhi	r3, [sp, #8]
 800ba60:	2300      	movls	r3, #0
 800ba62:	bf86      	itte	hi
 800ba64:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ba68:	608b      	strhi	r3, [r1, #8]
 800ba6a:	9302      	strls	r3, [sp, #8]
 800ba6c:	680b      	ldr	r3, [r1, #0]
 800ba6e:	468b      	mov	fp, r1
 800ba70:	2500      	movs	r5, #0
 800ba72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ba76:	f84b 3b1c 	str.w	r3, [fp], #28
 800ba7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ba7e:	4680      	mov	r8, r0
 800ba80:	460c      	mov	r4, r1
 800ba82:	465e      	mov	r6, fp
 800ba84:	46aa      	mov	sl, r5
 800ba86:	46a9      	mov	r9, r5
 800ba88:	9501      	str	r5, [sp, #4]
 800ba8a:	68a2      	ldr	r2, [r4, #8]
 800ba8c:	b152      	cbz	r2, 800baa4 <_scanf_float+0x60>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b4e      	cmp	r3, #78	; 0x4e
 800ba94:	d864      	bhi.n	800bb60 <_scanf_float+0x11c>
 800ba96:	2b40      	cmp	r3, #64	; 0x40
 800ba98:	d83c      	bhi.n	800bb14 <_scanf_float+0xd0>
 800ba9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ba9e:	b2c8      	uxtb	r0, r1
 800baa0:	280e      	cmp	r0, #14
 800baa2:	d93a      	bls.n	800bb1a <_scanf_float+0xd6>
 800baa4:	f1b9 0f00 	cmp.w	r9, #0
 800baa8:	d003      	beq.n	800bab2 <_scanf_float+0x6e>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bab6:	f1ba 0f01 	cmp.w	sl, #1
 800baba:	f200 8113 	bhi.w	800bce4 <_scanf_float+0x2a0>
 800babe:	455e      	cmp	r6, fp
 800bac0:	f200 8105 	bhi.w	800bcce <_scanf_float+0x28a>
 800bac4:	2501      	movs	r5, #1
 800bac6:	4628      	mov	r0, r5
 800bac8:	b007      	add	sp, #28
 800baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bace:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bad2:	2a0d      	cmp	r2, #13
 800bad4:	d8e6      	bhi.n	800baa4 <_scanf_float+0x60>
 800bad6:	a101      	add	r1, pc, #4	; (adr r1, 800badc <_scanf_float+0x98>)
 800bad8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800badc:	0800bc1b 	.word	0x0800bc1b
 800bae0:	0800baa5 	.word	0x0800baa5
 800bae4:	0800baa5 	.word	0x0800baa5
 800bae8:	0800baa5 	.word	0x0800baa5
 800baec:	0800bc7b 	.word	0x0800bc7b
 800baf0:	0800bc53 	.word	0x0800bc53
 800baf4:	0800baa5 	.word	0x0800baa5
 800baf8:	0800baa5 	.word	0x0800baa5
 800bafc:	0800bc29 	.word	0x0800bc29
 800bb00:	0800baa5 	.word	0x0800baa5
 800bb04:	0800baa5 	.word	0x0800baa5
 800bb08:	0800baa5 	.word	0x0800baa5
 800bb0c:	0800baa5 	.word	0x0800baa5
 800bb10:	0800bbe1 	.word	0x0800bbe1
 800bb14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bb18:	e7db      	b.n	800bad2 <_scanf_float+0x8e>
 800bb1a:	290e      	cmp	r1, #14
 800bb1c:	d8c2      	bhi.n	800baa4 <_scanf_float+0x60>
 800bb1e:	a001      	add	r0, pc, #4	; (adr r0, 800bb24 <_scanf_float+0xe0>)
 800bb20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bb24:	0800bbd3 	.word	0x0800bbd3
 800bb28:	0800baa5 	.word	0x0800baa5
 800bb2c:	0800bbd3 	.word	0x0800bbd3
 800bb30:	0800bc67 	.word	0x0800bc67
 800bb34:	0800baa5 	.word	0x0800baa5
 800bb38:	0800bb81 	.word	0x0800bb81
 800bb3c:	0800bbbd 	.word	0x0800bbbd
 800bb40:	0800bbbd 	.word	0x0800bbbd
 800bb44:	0800bbbd 	.word	0x0800bbbd
 800bb48:	0800bbbd 	.word	0x0800bbbd
 800bb4c:	0800bbbd 	.word	0x0800bbbd
 800bb50:	0800bbbd 	.word	0x0800bbbd
 800bb54:	0800bbbd 	.word	0x0800bbbd
 800bb58:	0800bbbd 	.word	0x0800bbbd
 800bb5c:	0800bbbd 	.word	0x0800bbbd
 800bb60:	2b6e      	cmp	r3, #110	; 0x6e
 800bb62:	d809      	bhi.n	800bb78 <_scanf_float+0x134>
 800bb64:	2b60      	cmp	r3, #96	; 0x60
 800bb66:	d8b2      	bhi.n	800bace <_scanf_float+0x8a>
 800bb68:	2b54      	cmp	r3, #84	; 0x54
 800bb6a:	d077      	beq.n	800bc5c <_scanf_float+0x218>
 800bb6c:	2b59      	cmp	r3, #89	; 0x59
 800bb6e:	d199      	bne.n	800baa4 <_scanf_float+0x60>
 800bb70:	2d07      	cmp	r5, #7
 800bb72:	d197      	bne.n	800baa4 <_scanf_float+0x60>
 800bb74:	2508      	movs	r5, #8
 800bb76:	e029      	b.n	800bbcc <_scanf_float+0x188>
 800bb78:	2b74      	cmp	r3, #116	; 0x74
 800bb7a:	d06f      	beq.n	800bc5c <_scanf_float+0x218>
 800bb7c:	2b79      	cmp	r3, #121	; 0x79
 800bb7e:	e7f6      	b.n	800bb6e <_scanf_float+0x12a>
 800bb80:	6821      	ldr	r1, [r4, #0]
 800bb82:	05c8      	lsls	r0, r1, #23
 800bb84:	d51a      	bpl.n	800bbbc <_scanf_float+0x178>
 800bb86:	9b02      	ldr	r3, [sp, #8]
 800bb88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bb8c:	6021      	str	r1, [r4, #0]
 800bb8e:	f109 0901 	add.w	r9, r9, #1
 800bb92:	b11b      	cbz	r3, 800bb9c <_scanf_float+0x158>
 800bb94:	3b01      	subs	r3, #1
 800bb96:	3201      	adds	r2, #1
 800bb98:	9302      	str	r3, [sp, #8]
 800bb9a:	60a2      	str	r2, [r4, #8]
 800bb9c:	68a3      	ldr	r3, [r4, #8]
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	60a3      	str	r3, [r4, #8]
 800bba2:	6923      	ldr	r3, [r4, #16]
 800bba4:	3301      	adds	r3, #1
 800bba6:	6123      	str	r3, [r4, #16]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	607b      	str	r3, [r7, #4]
 800bbb0:	f340 8084 	ble.w	800bcbc <_scanf_float+0x278>
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	603b      	str	r3, [r7, #0]
 800bbba:	e766      	b.n	800ba8a <_scanf_float+0x46>
 800bbbc:	eb1a 0f05 	cmn.w	sl, r5
 800bbc0:	f47f af70 	bne.w	800baa4 <_scanf_float+0x60>
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bbca:	6022      	str	r2, [r4, #0]
 800bbcc:	f806 3b01 	strb.w	r3, [r6], #1
 800bbd0:	e7e4      	b.n	800bb9c <_scanf_float+0x158>
 800bbd2:	6822      	ldr	r2, [r4, #0]
 800bbd4:	0610      	lsls	r0, r2, #24
 800bbd6:	f57f af65 	bpl.w	800baa4 <_scanf_float+0x60>
 800bbda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbde:	e7f4      	b.n	800bbca <_scanf_float+0x186>
 800bbe0:	f1ba 0f00 	cmp.w	sl, #0
 800bbe4:	d10e      	bne.n	800bc04 <_scanf_float+0x1c0>
 800bbe6:	f1b9 0f00 	cmp.w	r9, #0
 800bbea:	d10e      	bne.n	800bc0a <_scanf_float+0x1c6>
 800bbec:	6822      	ldr	r2, [r4, #0]
 800bbee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bbf2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bbf6:	d108      	bne.n	800bc0a <_scanf_float+0x1c6>
 800bbf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bbfc:	6022      	str	r2, [r4, #0]
 800bbfe:	f04f 0a01 	mov.w	sl, #1
 800bc02:	e7e3      	b.n	800bbcc <_scanf_float+0x188>
 800bc04:	f1ba 0f02 	cmp.w	sl, #2
 800bc08:	d055      	beq.n	800bcb6 <_scanf_float+0x272>
 800bc0a:	2d01      	cmp	r5, #1
 800bc0c:	d002      	beq.n	800bc14 <_scanf_float+0x1d0>
 800bc0e:	2d04      	cmp	r5, #4
 800bc10:	f47f af48 	bne.w	800baa4 <_scanf_float+0x60>
 800bc14:	3501      	adds	r5, #1
 800bc16:	b2ed      	uxtb	r5, r5
 800bc18:	e7d8      	b.n	800bbcc <_scanf_float+0x188>
 800bc1a:	f1ba 0f01 	cmp.w	sl, #1
 800bc1e:	f47f af41 	bne.w	800baa4 <_scanf_float+0x60>
 800bc22:	f04f 0a02 	mov.w	sl, #2
 800bc26:	e7d1      	b.n	800bbcc <_scanf_float+0x188>
 800bc28:	b97d      	cbnz	r5, 800bc4a <_scanf_float+0x206>
 800bc2a:	f1b9 0f00 	cmp.w	r9, #0
 800bc2e:	f47f af3c 	bne.w	800baaa <_scanf_float+0x66>
 800bc32:	6822      	ldr	r2, [r4, #0]
 800bc34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bc38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bc3c:	f47f af39 	bne.w	800bab2 <_scanf_float+0x6e>
 800bc40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc44:	6022      	str	r2, [r4, #0]
 800bc46:	2501      	movs	r5, #1
 800bc48:	e7c0      	b.n	800bbcc <_scanf_float+0x188>
 800bc4a:	2d03      	cmp	r5, #3
 800bc4c:	d0e2      	beq.n	800bc14 <_scanf_float+0x1d0>
 800bc4e:	2d05      	cmp	r5, #5
 800bc50:	e7de      	b.n	800bc10 <_scanf_float+0x1cc>
 800bc52:	2d02      	cmp	r5, #2
 800bc54:	f47f af26 	bne.w	800baa4 <_scanf_float+0x60>
 800bc58:	2503      	movs	r5, #3
 800bc5a:	e7b7      	b.n	800bbcc <_scanf_float+0x188>
 800bc5c:	2d06      	cmp	r5, #6
 800bc5e:	f47f af21 	bne.w	800baa4 <_scanf_float+0x60>
 800bc62:	2507      	movs	r5, #7
 800bc64:	e7b2      	b.n	800bbcc <_scanf_float+0x188>
 800bc66:	6822      	ldr	r2, [r4, #0]
 800bc68:	0591      	lsls	r1, r2, #22
 800bc6a:	f57f af1b 	bpl.w	800baa4 <_scanf_float+0x60>
 800bc6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bc72:	6022      	str	r2, [r4, #0]
 800bc74:	f8cd 9004 	str.w	r9, [sp, #4]
 800bc78:	e7a8      	b.n	800bbcc <_scanf_float+0x188>
 800bc7a:	6822      	ldr	r2, [r4, #0]
 800bc7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bc80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bc84:	d006      	beq.n	800bc94 <_scanf_float+0x250>
 800bc86:	0550      	lsls	r0, r2, #21
 800bc88:	f57f af0c 	bpl.w	800baa4 <_scanf_float+0x60>
 800bc8c:	f1b9 0f00 	cmp.w	r9, #0
 800bc90:	f43f af0f 	beq.w	800bab2 <_scanf_float+0x6e>
 800bc94:	0591      	lsls	r1, r2, #22
 800bc96:	bf58      	it	pl
 800bc98:	9901      	ldrpl	r1, [sp, #4]
 800bc9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bc9e:	bf58      	it	pl
 800bca0:	eba9 0101 	subpl.w	r1, r9, r1
 800bca4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bca8:	bf58      	it	pl
 800bcaa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bcae:	6022      	str	r2, [r4, #0]
 800bcb0:	f04f 0900 	mov.w	r9, #0
 800bcb4:	e78a      	b.n	800bbcc <_scanf_float+0x188>
 800bcb6:	f04f 0a03 	mov.w	sl, #3
 800bcba:	e787      	b.n	800bbcc <_scanf_float+0x188>
 800bcbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bcc0:	4639      	mov	r1, r7
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4798      	blx	r3
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f43f aedf 	beq.w	800ba8a <_scanf_float+0x46>
 800bccc:	e6ea      	b.n	800baa4 <_scanf_float+0x60>
 800bcce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcd6:	463a      	mov	r2, r7
 800bcd8:	4640      	mov	r0, r8
 800bcda:	4798      	blx	r3
 800bcdc:	6923      	ldr	r3, [r4, #16]
 800bcde:	3b01      	subs	r3, #1
 800bce0:	6123      	str	r3, [r4, #16]
 800bce2:	e6ec      	b.n	800babe <_scanf_float+0x7a>
 800bce4:	1e6b      	subs	r3, r5, #1
 800bce6:	2b06      	cmp	r3, #6
 800bce8:	d825      	bhi.n	800bd36 <_scanf_float+0x2f2>
 800bcea:	2d02      	cmp	r5, #2
 800bcec:	d836      	bhi.n	800bd5c <_scanf_float+0x318>
 800bcee:	455e      	cmp	r6, fp
 800bcf0:	f67f aee8 	bls.w	800bac4 <_scanf_float+0x80>
 800bcf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bcf8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcfc:	463a      	mov	r2, r7
 800bcfe:	4640      	mov	r0, r8
 800bd00:	4798      	blx	r3
 800bd02:	6923      	ldr	r3, [r4, #16]
 800bd04:	3b01      	subs	r3, #1
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	e7f1      	b.n	800bcee <_scanf_float+0x2aa>
 800bd0a:	9802      	ldr	r0, [sp, #8]
 800bd0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bd14:	9002      	str	r0, [sp, #8]
 800bd16:	463a      	mov	r2, r7
 800bd18:	4640      	mov	r0, r8
 800bd1a:	4798      	blx	r3
 800bd1c:	6923      	ldr	r3, [r4, #16]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	6123      	str	r3, [r4, #16]
 800bd22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd26:	fa5f fa8a 	uxtb.w	sl, sl
 800bd2a:	f1ba 0f02 	cmp.w	sl, #2
 800bd2e:	d1ec      	bne.n	800bd0a <_scanf_float+0x2c6>
 800bd30:	3d03      	subs	r5, #3
 800bd32:	b2ed      	uxtb	r5, r5
 800bd34:	1b76      	subs	r6, r6, r5
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	05da      	lsls	r2, r3, #23
 800bd3a:	d52f      	bpl.n	800bd9c <_scanf_float+0x358>
 800bd3c:	055b      	lsls	r3, r3, #21
 800bd3e:	d510      	bpl.n	800bd62 <_scanf_float+0x31e>
 800bd40:	455e      	cmp	r6, fp
 800bd42:	f67f aebf 	bls.w	800bac4 <_scanf_float+0x80>
 800bd46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bd4e:	463a      	mov	r2, r7
 800bd50:	4640      	mov	r0, r8
 800bd52:	4798      	blx	r3
 800bd54:	6923      	ldr	r3, [r4, #16]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	6123      	str	r3, [r4, #16]
 800bd5a:	e7f1      	b.n	800bd40 <_scanf_float+0x2fc>
 800bd5c:	46aa      	mov	sl, r5
 800bd5e:	9602      	str	r6, [sp, #8]
 800bd60:	e7df      	b.n	800bd22 <_scanf_float+0x2de>
 800bd62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bd66:	6923      	ldr	r3, [r4, #16]
 800bd68:	2965      	cmp	r1, #101	; 0x65
 800bd6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd6e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bd72:	6123      	str	r3, [r4, #16]
 800bd74:	d00c      	beq.n	800bd90 <_scanf_float+0x34c>
 800bd76:	2945      	cmp	r1, #69	; 0x45
 800bd78:	d00a      	beq.n	800bd90 <_scanf_float+0x34c>
 800bd7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd7e:	463a      	mov	r2, r7
 800bd80:	4640      	mov	r0, r8
 800bd82:	4798      	blx	r3
 800bd84:	6923      	ldr	r3, [r4, #16]
 800bd86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	1eb5      	subs	r5, r6, #2
 800bd8e:	6123      	str	r3, [r4, #16]
 800bd90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bd94:	463a      	mov	r2, r7
 800bd96:	4640      	mov	r0, r8
 800bd98:	4798      	blx	r3
 800bd9a:	462e      	mov	r6, r5
 800bd9c:	6825      	ldr	r5, [r4, #0]
 800bd9e:	f015 0510 	ands.w	r5, r5, #16
 800bda2:	d158      	bne.n	800be56 <_scanf_float+0x412>
 800bda4:	7035      	strb	r5, [r6, #0]
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bdac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdb0:	d11c      	bne.n	800bdec <_scanf_float+0x3a8>
 800bdb2:	9b01      	ldr	r3, [sp, #4]
 800bdb4:	454b      	cmp	r3, r9
 800bdb6:	eba3 0209 	sub.w	r2, r3, r9
 800bdba:	d124      	bne.n	800be06 <_scanf_float+0x3c2>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	4659      	mov	r1, fp
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	f002 fb9d 	bl	800e500 <_strtod_r>
 800bdc6:	9b03      	ldr	r3, [sp, #12]
 800bdc8:	6821      	ldr	r1, [r4, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f011 0f02 	tst.w	r1, #2
 800bdd0:	ec57 6b10 	vmov	r6, r7, d0
 800bdd4:	f103 0204 	add.w	r2, r3, #4
 800bdd8:	d020      	beq.n	800be1c <_scanf_float+0x3d8>
 800bdda:	9903      	ldr	r1, [sp, #12]
 800bddc:	600a      	str	r2, [r1, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	e9c3 6700 	strd	r6, r7, [r3]
 800bde4:	68e3      	ldr	r3, [r4, #12]
 800bde6:	3301      	adds	r3, #1
 800bde8:	60e3      	str	r3, [r4, #12]
 800bdea:	e66c      	b.n	800bac6 <_scanf_float+0x82>
 800bdec:	9b04      	ldr	r3, [sp, #16]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0e4      	beq.n	800bdbc <_scanf_float+0x378>
 800bdf2:	9905      	ldr	r1, [sp, #20]
 800bdf4:	230a      	movs	r3, #10
 800bdf6:	462a      	mov	r2, r5
 800bdf8:	3101      	adds	r1, #1
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	f002 fc08 	bl	800e610 <_strtol_r>
 800be00:	9b04      	ldr	r3, [sp, #16]
 800be02:	9e05      	ldr	r6, [sp, #20]
 800be04:	1ac2      	subs	r2, r0, r3
 800be06:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800be0a:	429e      	cmp	r6, r3
 800be0c:	bf28      	it	cs
 800be0e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800be12:	4912      	ldr	r1, [pc, #72]	; (800be5c <_scanf_float+0x418>)
 800be14:	4630      	mov	r0, r6
 800be16:	f000 f8f9 	bl	800c00c <siprintf>
 800be1a:	e7cf      	b.n	800bdbc <_scanf_float+0x378>
 800be1c:	f011 0f04 	tst.w	r1, #4
 800be20:	9903      	ldr	r1, [sp, #12]
 800be22:	600a      	str	r2, [r1, #0]
 800be24:	d1db      	bne.n	800bdde <_scanf_float+0x39a>
 800be26:	f8d3 8000 	ldr.w	r8, [r3]
 800be2a:	ee10 2a10 	vmov	r2, s0
 800be2e:	ee10 0a10 	vmov	r0, s0
 800be32:	463b      	mov	r3, r7
 800be34:	4639      	mov	r1, r7
 800be36:	f7f4 fe79 	bl	8000b2c <__aeabi_dcmpun>
 800be3a:	b128      	cbz	r0, 800be48 <_scanf_float+0x404>
 800be3c:	4808      	ldr	r0, [pc, #32]	; (800be60 <_scanf_float+0x41c>)
 800be3e:	f000 f9d9 	bl	800c1f4 <nanf>
 800be42:	ed88 0a00 	vstr	s0, [r8]
 800be46:	e7cd      	b.n	800bde4 <_scanf_float+0x3a0>
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	f7f4 fecc 	bl	8000be8 <__aeabi_d2f>
 800be50:	f8c8 0000 	str.w	r0, [r8]
 800be54:	e7c6      	b.n	800bde4 <_scanf_float+0x3a0>
 800be56:	2500      	movs	r5, #0
 800be58:	e635      	b.n	800bac6 <_scanf_float+0x82>
 800be5a:	bf00      	nop
 800be5c:	08010074 	.word	0x08010074
 800be60:	08010405 	.word	0x08010405

0800be64 <std>:
 800be64:	2300      	movs	r3, #0
 800be66:	b510      	push	{r4, lr}
 800be68:	4604      	mov	r4, r0
 800be6a:	e9c0 3300 	strd	r3, r3, [r0]
 800be6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be72:	6083      	str	r3, [r0, #8]
 800be74:	8181      	strh	r1, [r0, #12]
 800be76:	6643      	str	r3, [r0, #100]	; 0x64
 800be78:	81c2      	strh	r2, [r0, #14]
 800be7a:	6183      	str	r3, [r0, #24]
 800be7c:	4619      	mov	r1, r3
 800be7e:	2208      	movs	r2, #8
 800be80:	305c      	adds	r0, #92	; 0x5c
 800be82:	f000 f926 	bl	800c0d2 <memset>
 800be86:	4b0d      	ldr	r3, [pc, #52]	; (800bebc <std+0x58>)
 800be88:	6263      	str	r3, [r4, #36]	; 0x24
 800be8a:	4b0d      	ldr	r3, [pc, #52]	; (800bec0 <std+0x5c>)
 800be8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800be8e:	4b0d      	ldr	r3, [pc, #52]	; (800bec4 <std+0x60>)
 800be90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be92:	4b0d      	ldr	r3, [pc, #52]	; (800bec8 <std+0x64>)
 800be94:	6323      	str	r3, [r4, #48]	; 0x30
 800be96:	4b0d      	ldr	r3, [pc, #52]	; (800becc <std+0x68>)
 800be98:	6224      	str	r4, [r4, #32]
 800be9a:	429c      	cmp	r4, r3
 800be9c:	d006      	beq.n	800beac <std+0x48>
 800be9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bea2:	4294      	cmp	r4, r2
 800bea4:	d002      	beq.n	800beac <std+0x48>
 800bea6:	33d0      	adds	r3, #208	; 0xd0
 800bea8:	429c      	cmp	r4, r3
 800beaa:	d105      	bne.n	800beb8 <std+0x54>
 800beac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800beb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb4:	f000 b99a 	b.w	800c1ec <__retarget_lock_init_recursive>
 800beb8:	bd10      	pop	{r4, pc}
 800beba:	bf00      	nop
 800bebc:	0800c04d 	.word	0x0800c04d
 800bec0:	0800c06f 	.word	0x0800c06f
 800bec4:	0800c0a7 	.word	0x0800c0a7
 800bec8:	0800c0cb 	.word	0x0800c0cb
 800becc:	20002a7c 	.word	0x20002a7c

0800bed0 <stdio_exit_handler>:
 800bed0:	4a02      	ldr	r2, [pc, #8]	; (800bedc <stdio_exit_handler+0xc>)
 800bed2:	4903      	ldr	r1, [pc, #12]	; (800bee0 <stdio_exit_handler+0x10>)
 800bed4:	4803      	ldr	r0, [pc, #12]	; (800bee4 <stdio_exit_handler+0x14>)
 800bed6:	f000 b869 	b.w	800bfac <_fwalk_sglue>
 800beda:	bf00      	nop
 800bedc:	20000028 	.word	0x20000028
 800bee0:	0800ec59 	.word	0x0800ec59
 800bee4:	20000034 	.word	0x20000034

0800bee8 <cleanup_stdio>:
 800bee8:	6841      	ldr	r1, [r0, #4]
 800beea:	4b0c      	ldr	r3, [pc, #48]	; (800bf1c <cleanup_stdio+0x34>)
 800beec:	4299      	cmp	r1, r3
 800beee:	b510      	push	{r4, lr}
 800bef0:	4604      	mov	r4, r0
 800bef2:	d001      	beq.n	800bef8 <cleanup_stdio+0x10>
 800bef4:	f002 feb0 	bl	800ec58 <_fflush_r>
 800bef8:	68a1      	ldr	r1, [r4, #8]
 800befa:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <cleanup_stdio+0x38>)
 800befc:	4299      	cmp	r1, r3
 800befe:	d002      	beq.n	800bf06 <cleanup_stdio+0x1e>
 800bf00:	4620      	mov	r0, r4
 800bf02:	f002 fea9 	bl	800ec58 <_fflush_r>
 800bf06:	68e1      	ldr	r1, [r4, #12]
 800bf08:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <cleanup_stdio+0x3c>)
 800bf0a:	4299      	cmp	r1, r3
 800bf0c:	d004      	beq.n	800bf18 <cleanup_stdio+0x30>
 800bf0e:	4620      	mov	r0, r4
 800bf10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf14:	f002 bea0 	b.w	800ec58 <_fflush_r>
 800bf18:	bd10      	pop	{r4, pc}
 800bf1a:	bf00      	nop
 800bf1c:	20002a7c 	.word	0x20002a7c
 800bf20:	20002ae4 	.word	0x20002ae4
 800bf24:	20002b4c 	.word	0x20002b4c

0800bf28 <global_stdio_init.part.0>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	; (800bf58 <global_stdio_init.part.0+0x30>)
 800bf2c:	4c0b      	ldr	r4, [pc, #44]	; (800bf5c <global_stdio_init.part.0+0x34>)
 800bf2e:	4a0c      	ldr	r2, [pc, #48]	; (800bf60 <global_stdio_init.part.0+0x38>)
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	4620      	mov	r0, r4
 800bf34:	2200      	movs	r2, #0
 800bf36:	2104      	movs	r1, #4
 800bf38:	f7ff ff94 	bl	800be64 <std>
 800bf3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bf40:	2201      	movs	r2, #1
 800bf42:	2109      	movs	r1, #9
 800bf44:	f7ff ff8e 	bl	800be64 <std>
 800bf48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf52:	2112      	movs	r1, #18
 800bf54:	f7ff bf86 	b.w	800be64 <std>
 800bf58:	20002bb4 	.word	0x20002bb4
 800bf5c:	20002a7c 	.word	0x20002a7c
 800bf60:	0800bed1 	.word	0x0800bed1

0800bf64 <__sfp_lock_acquire>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__sfp_lock_acquire+0x8>)
 800bf66:	f000 b942 	b.w	800c1ee <__retarget_lock_acquire_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20002bbd 	.word	0x20002bbd

0800bf70 <__sfp_lock_release>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__sfp_lock_release+0x8>)
 800bf72:	f000 b93d 	b.w	800c1f0 <__retarget_lock_release_recursive>
 800bf76:	bf00      	nop
 800bf78:	20002bbd 	.word	0x20002bbd

0800bf7c <__sinit>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	4604      	mov	r4, r0
 800bf80:	f7ff fff0 	bl	800bf64 <__sfp_lock_acquire>
 800bf84:	6a23      	ldr	r3, [r4, #32]
 800bf86:	b11b      	cbz	r3, 800bf90 <__sinit+0x14>
 800bf88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf8c:	f7ff bff0 	b.w	800bf70 <__sfp_lock_release>
 800bf90:	4b04      	ldr	r3, [pc, #16]	; (800bfa4 <__sinit+0x28>)
 800bf92:	6223      	str	r3, [r4, #32]
 800bf94:	4b04      	ldr	r3, [pc, #16]	; (800bfa8 <__sinit+0x2c>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1f5      	bne.n	800bf88 <__sinit+0xc>
 800bf9c:	f7ff ffc4 	bl	800bf28 <global_stdio_init.part.0>
 800bfa0:	e7f2      	b.n	800bf88 <__sinit+0xc>
 800bfa2:	bf00      	nop
 800bfa4:	0800bee9 	.word	0x0800bee9
 800bfa8:	20002bb4 	.word	0x20002bb4

0800bfac <_fwalk_sglue>:
 800bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb0:	4607      	mov	r7, r0
 800bfb2:	4688      	mov	r8, r1
 800bfb4:	4614      	mov	r4, r2
 800bfb6:	2600      	movs	r6, #0
 800bfb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfbc:	f1b9 0901 	subs.w	r9, r9, #1
 800bfc0:	d505      	bpl.n	800bfce <_fwalk_sglue+0x22>
 800bfc2:	6824      	ldr	r4, [r4, #0]
 800bfc4:	2c00      	cmp	r4, #0
 800bfc6:	d1f7      	bne.n	800bfb8 <_fwalk_sglue+0xc>
 800bfc8:	4630      	mov	r0, r6
 800bfca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfce:	89ab      	ldrh	r3, [r5, #12]
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d907      	bls.n	800bfe4 <_fwalk_sglue+0x38>
 800bfd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	d003      	beq.n	800bfe4 <_fwalk_sglue+0x38>
 800bfdc:	4629      	mov	r1, r5
 800bfde:	4638      	mov	r0, r7
 800bfe0:	47c0      	blx	r8
 800bfe2:	4306      	orrs	r6, r0
 800bfe4:	3568      	adds	r5, #104	; 0x68
 800bfe6:	e7e9      	b.n	800bfbc <_fwalk_sglue+0x10>

0800bfe8 <iprintf>:
 800bfe8:	b40f      	push	{r0, r1, r2, r3}
 800bfea:	b507      	push	{r0, r1, r2, lr}
 800bfec:	4906      	ldr	r1, [pc, #24]	; (800c008 <iprintf+0x20>)
 800bfee:	ab04      	add	r3, sp, #16
 800bff0:	6808      	ldr	r0, [r1, #0]
 800bff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff6:	6881      	ldr	r1, [r0, #8]
 800bff8:	9301      	str	r3, [sp, #4]
 800bffa:	f002 fc8d 	bl	800e918 <_vfiprintf_r>
 800bffe:	b003      	add	sp, #12
 800c000:	f85d eb04 	ldr.w	lr, [sp], #4
 800c004:	b004      	add	sp, #16
 800c006:	4770      	bx	lr
 800c008:	20000080 	.word	0x20000080

0800c00c <siprintf>:
 800c00c:	b40e      	push	{r1, r2, r3}
 800c00e:	b500      	push	{lr}
 800c010:	b09c      	sub	sp, #112	; 0x70
 800c012:	ab1d      	add	r3, sp, #116	; 0x74
 800c014:	9002      	str	r0, [sp, #8]
 800c016:	9006      	str	r0, [sp, #24]
 800c018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c01c:	4809      	ldr	r0, [pc, #36]	; (800c044 <siprintf+0x38>)
 800c01e:	9107      	str	r1, [sp, #28]
 800c020:	9104      	str	r1, [sp, #16]
 800c022:	4909      	ldr	r1, [pc, #36]	; (800c048 <siprintf+0x3c>)
 800c024:	f853 2b04 	ldr.w	r2, [r3], #4
 800c028:	9105      	str	r1, [sp, #20]
 800c02a:	6800      	ldr	r0, [r0, #0]
 800c02c:	9301      	str	r3, [sp, #4]
 800c02e:	a902      	add	r1, sp, #8
 800c030:	f002 fb4a 	bl	800e6c8 <_svfiprintf_r>
 800c034:	9b02      	ldr	r3, [sp, #8]
 800c036:	2200      	movs	r2, #0
 800c038:	701a      	strb	r2, [r3, #0]
 800c03a:	b01c      	add	sp, #112	; 0x70
 800c03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c040:	b003      	add	sp, #12
 800c042:	4770      	bx	lr
 800c044:	20000080 	.word	0x20000080
 800c048:	ffff0208 	.word	0xffff0208

0800c04c <__sread>:
 800c04c:	b510      	push	{r4, lr}
 800c04e:	460c      	mov	r4, r1
 800c050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c054:	f000 f86c 	bl	800c130 <_read_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	bfab      	itete	ge
 800c05c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c05e:	89a3      	ldrhlt	r3, [r4, #12]
 800c060:	181b      	addge	r3, r3, r0
 800c062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c066:	bfac      	ite	ge
 800c068:	6563      	strge	r3, [r4, #84]	; 0x54
 800c06a:	81a3      	strhlt	r3, [r4, #12]
 800c06c:	bd10      	pop	{r4, pc}

0800c06e <__swrite>:
 800c06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c072:	461f      	mov	r7, r3
 800c074:	898b      	ldrh	r3, [r1, #12]
 800c076:	05db      	lsls	r3, r3, #23
 800c078:	4605      	mov	r5, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	4616      	mov	r6, r2
 800c07e:	d505      	bpl.n	800c08c <__swrite+0x1e>
 800c080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c084:	2302      	movs	r3, #2
 800c086:	2200      	movs	r2, #0
 800c088:	f000 f840 	bl	800c10c <_lseek_r>
 800c08c:	89a3      	ldrh	r3, [r4, #12]
 800c08e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c096:	81a3      	strh	r3, [r4, #12]
 800c098:	4632      	mov	r2, r6
 800c09a:	463b      	mov	r3, r7
 800c09c:	4628      	mov	r0, r5
 800c09e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a2:	f000 b867 	b.w	800c174 <_write_r>

0800c0a6 <__sseek>:
 800c0a6:	b510      	push	{r4, lr}
 800c0a8:	460c      	mov	r4, r1
 800c0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ae:	f000 f82d 	bl	800c10c <_lseek_r>
 800c0b2:	1c43      	adds	r3, r0, #1
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	bf15      	itete	ne
 800c0b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0c2:	81a3      	strheq	r3, [r4, #12]
 800c0c4:	bf18      	it	ne
 800c0c6:	81a3      	strhne	r3, [r4, #12]
 800c0c8:	bd10      	pop	{r4, pc}

0800c0ca <__sclose>:
 800c0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ce:	f000 b80d 	b.w	800c0ec <_close_r>

0800c0d2 <memset>:
 800c0d2:	4402      	add	r2, r0
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d100      	bne.n	800c0dc <memset+0xa>
 800c0da:	4770      	bx	lr
 800c0dc:	f803 1b01 	strb.w	r1, [r3], #1
 800c0e0:	e7f9      	b.n	800c0d6 <memset+0x4>
	...

0800c0e4 <_localeconv_r>:
 800c0e4:	4800      	ldr	r0, [pc, #0]	; (800c0e8 <_localeconv_r+0x4>)
 800c0e6:	4770      	bx	lr
 800c0e8:	20000174 	.word	0x20000174

0800c0ec <_close_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d06      	ldr	r5, [pc, #24]	; (800c108 <_close_r+0x1c>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	602b      	str	r3, [r5, #0]
 800c0f8:	f7f7 fc59 	bl	80039ae <_close>
 800c0fc:	1c43      	adds	r3, r0, #1
 800c0fe:	d102      	bne.n	800c106 <_close_r+0x1a>
 800c100:	682b      	ldr	r3, [r5, #0]
 800c102:	b103      	cbz	r3, 800c106 <_close_r+0x1a>
 800c104:	6023      	str	r3, [r4, #0]
 800c106:	bd38      	pop	{r3, r4, r5, pc}
 800c108:	20002bb8 	.word	0x20002bb8

0800c10c <_lseek_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4d07      	ldr	r5, [pc, #28]	; (800c12c <_lseek_r+0x20>)
 800c110:	4604      	mov	r4, r0
 800c112:	4608      	mov	r0, r1
 800c114:	4611      	mov	r1, r2
 800c116:	2200      	movs	r2, #0
 800c118:	602a      	str	r2, [r5, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	f7f7 fc6e 	bl	80039fc <_lseek>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <_lseek_r+0x1e>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	b103      	cbz	r3, 800c12a <_lseek_r+0x1e>
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	20002bb8 	.word	0x20002bb8

0800c130 <_read_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4d07      	ldr	r5, [pc, #28]	; (800c150 <_read_r+0x20>)
 800c134:	4604      	mov	r4, r0
 800c136:	4608      	mov	r0, r1
 800c138:	4611      	mov	r1, r2
 800c13a:	2200      	movs	r2, #0
 800c13c:	602a      	str	r2, [r5, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	f7f7 fbfc 	bl	800393c <_read>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d102      	bne.n	800c14e <_read_r+0x1e>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	b103      	cbz	r3, 800c14e <_read_r+0x1e>
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	20002bb8 	.word	0x20002bb8

0800c154 <_sbrk_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	4d06      	ldr	r5, [pc, #24]	; (800c170 <_sbrk_r+0x1c>)
 800c158:	2300      	movs	r3, #0
 800c15a:	4604      	mov	r4, r0
 800c15c:	4608      	mov	r0, r1
 800c15e:	602b      	str	r3, [r5, #0]
 800c160:	f7f7 fc5a 	bl	8003a18 <_sbrk>
 800c164:	1c43      	adds	r3, r0, #1
 800c166:	d102      	bne.n	800c16e <_sbrk_r+0x1a>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	b103      	cbz	r3, 800c16e <_sbrk_r+0x1a>
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	20002bb8 	.word	0x20002bb8

0800c174 <_write_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4d07      	ldr	r5, [pc, #28]	; (800c194 <_write_r+0x20>)
 800c178:	4604      	mov	r4, r0
 800c17a:	4608      	mov	r0, r1
 800c17c:	4611      	mov	r1, r2
 800c17e:	2200      	movs	r2, #0
 800c180:	602a      	str	r2, [r5, #0]
 800c182:	461a      	mov	r2, r3
 800c184:	f7f7 fbf7 	bl	8003976 <_write>
 800c188:	1c43      	adds	r3, r0, #1
 800c18a:	d102      	bne.n	800c192 <_write_r+0x1e>
 800c18c:	682b      	ldr	r3, [r5, #0]
 800c18e:	b103      	cbz	r3, 800c192 <_write_r+0x1e>
 800c190:	6023      	str	r3, [r4, #0]
 800c192:	bd38      	pop	{r3, r4, r5, pc}
 800c194:	20002bb8 	.word	0x20002bb8

0800c198 <__errno>:
 800c198:	4b01      	ldr	r3, [pc, #4]	; (800c1a0 <__errno+0x8>)
 800c19a:	6818      	ldr	r0, [r3, #0]
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	20000080 	.word	0x20000080

0800c1a4 <__libc_init_array>:
 800c1a4:	b570      	push	{r4, r5, r6, lr}
 800c1a6:	4d0d      	ldr	r5, [pc, #52]	; (800c1dc <__libc_init_array+0x38>)
 800c1a8:	4c0d      	ldr	r4, [pc, #52]	; (800c1e0 <__libc_init_array+0x3c>)
 800c1aa:	1b64      	subs	r4, r4, r5
 800c1ac:	10a4      	asrs	r4, r4, #2
 800c1ae:	2600      	movs	r6, #0
 800c1b0:	42a6      	cmp	r6, r4
 800c1b2:	d109      	bne.n	800c1c8 <__libc_init_array+0x24>
 800c1b4:	4d0b      	ldr	r5, [pc, #44]	; (800c1e4 <__libc_init_array+0x40>)
 800c1b6:	4c0c      	ldr	r4, [pc, #48]	; (800c1e8 <__libc_init_array+0x44>)
 800c1b8:	f003 fc18 	bl	800f9ec <_init>
 800c1bc:	1b64      	subs	r4, r4, r5
 800c1be:	10a4      	asrs	r4, r4, #2
 800c1c0:	2600      	movs	r6, #0
 800c1c2:	42a6      	cmp	r6, r4
 800c1c4:	d105      	bne.n	800c1d2 <__libc_init_array+0x2e>
 800c1c6:	bd70      	pop	{r4, r5, r6, pc}
 800c1c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1cc:	4798      	blx	r3
 800c1ce:	3601      	adds	r6, #1
 800c1d0:	e7ee      	b.n	800c1b0 <__libc_init_array+0xc>
 800c1d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1d6:	4798      	blx	r3
 800c1d8:	3601      	adds	r6, #1
 800c1da:	e7f2      	b.n	800c1c2 <__libc_init_array+0x1e>
 800c1dc:	08010470 	.word	0x08010470
 800c1e0:	08010470 	.word	0x08010470
 800c1e4:	08010470 	.word	0x08010470
 800c1e8:	08010474 	.word	0x08010474

0800c1ec <__retarget_lock_init_recursive>:
 800c1ec:	4770      	bx	lr

0800c1ee <__retarget_lock_acquire_recursive>:
 800c1ee:	4770      	bx	lr

0800c1f0 <__retarget_lock_release_recursive>:
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <nanf>:
 800c1f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1fc <nanf+0x8>
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	7fc00000 	.word	0x7fc00000

0800c200 <quorem>:
 800c200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	6903      	ldr	r3, [r0, #16]
 800c206:	690c      	ldr	r4, [r1, #16]
 800c208:	42a3      	cmp	r3, r4
 800c20a:	4607      	mov	r7, r0
 800c20c:	db7e      	blt.n	800c30c <quorem+0x10c>
 800c20e:	3c01      	subs	r4, #1
 800c210:	f101 0814 	add.w	r8, r1, #20
 800c214:	f100 0514 	add.w	r5, r0, #20
 800c218:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c222:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c226:	3301      	adds	r3, #1
 800c228:	429a      	cmp	r2, r3
 800c22a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c22e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c232:	fbb2 f6f3 	udiv	r6, r2, r3
 800c236:	d331      	bcc.n	800c29c <quorem+0x9c>
 800c238:	f04f 0e00 	mov.w	lr, #0
 800c23c:	4640      	mov	r0, r8
 800c23e:	46ac      	mov	ip, r5
 800c240:	46f2      	mov	sl, lr
 800c242:	f850 2b04 	ldr.w	r2, [r0], #4
 800c246:	b293      	uxth	r3, r2
 800c248:	fb06 e303 	mla	r3, r6, r3, lr
 800c24c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c250:	0c1a      	lsrs	r2, r3, #16
 800c252:	b29b      	uxth	r3, r3
 800c254:	ebaa 0303 	sub.w	r3, sl, r3
 800c258:	f8dc a000 	ldr.w	sl, [ip]
 800c25c:	fa13 f38a 	uxtah	r3, r3, sl
 800c260:	fb06 220e 	mla	r2, r6, lr, r2
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	9b00      	ldr	r3, [sp, #0]
 800c268:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c26c:	b292      	uxth	r2, r2
 800c26e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c272:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c276:	f8bd 3000 	ldrh.w	r3, [sp]
 800c27a:	4581      	cmp	r9, r0
 800c27c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c280:	f84c 3b04 	str.w	r3, [ip], #4
 800c284:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c288:	d2db      	bcs.n	800c242 <quorem+0x42>
 800c28a:	f855 300b 	ldr.w	r3, [r5, fp]
 800c28e:	b92b      	cbnz	r3, 800c29c <quorem+0x9c>
 800c290:	9b01      	ldr	r3, [sp, #4]
 800c292:	3b04      	subs	r3, #4
 800c294:	429d      	cmp	r5, r3
 800c296:	461a      	mov	r2, r3
 800c298:	d32c      	bcc.n	800c2f4 <quorem+0xf4>
 800c29a:	613c      	str	r4, [r7, #16]
 800c29c:	4638      	mov	r0, r7
 800c29e:	f001 f93b 	bl	800d518 <__mcmp>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	db22      	blt.n	800c2ec <quorem+0xec>
 800c2a6:	3601      	adds	r6, #1
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2b0:	f8d1 c000 	ldr.w	ip, [r1]
 800c2b4:	b293      	uxth	r3, r2
 800c2b6:	1ac3      	subs	r3, r0, r3
 800c2b8:	0c12      	lsrs	r2, r2, #16
 800c2ba:	fa13 f38c 	uxtah	r3, r3, ip
 800c2be:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c2c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2cc:	45c1      	cmp	r9, r8
 800c2ce:	f841 3b04 	str.w	r3, [r1], #4
 800c2d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c2d6:	d2e9      	bcs.n	800c2ac <quorem+0xac>
 800c2d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2e0:	b922      	cbnz	r2, 800c2ec <quorem+0xec>
 800c2e2:	3b04      	subs	r3, #4
 800c2e4:	429d      	cmp	r5, r3
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	d30a      	bcc.n	800c300 <quorem+0x100>
 800c2ea:	613c      	str	r4, [r7, #16]
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	b003      	add	sp, #12
 800c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f4:	6812      	ldr	r2, [r2, #0]
 800c2f6:	3b04      	subs	r3, #4
 800c2f8:	2a00      	cmp	r2, #0
 800c2fa:	d1ce      	bne.n	800c29a <quorem+0x9a>
 800c2fc:	3c01      	subs	r4, #1
 800c2fe:	e7c9      	b.n	800c294 <quorem+0x94>
 800c300:	6812      	ldr	r2, [r2, #0]
 800c302:	3b04      	subs	r3, #4
 800c304:	2a00      	cmp	r2, #0
 800c306:	d1f0      	bne.n	800c2ea <quorem+0xea>
 800c308:	3c01      	subs	r4, #1
 800c30a:	e7eb      	b.n	800c2e4 <quorem+0xe4>
 800c30c:	2000      	movs	r0, #0
 800c30e:	e7ee      	b.n	800c2ee <quorem+0xee>

0800c310 <_dtoa_r>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	ed2d 8b04 	vpush	{d8-d9}
 800c318:	69c5      	ldr	r5, [r0, #28]
 800c31a:	b093      	sub	sp, #76	; 0x4c
 800c31c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c320:	ec57 6b10 	vmov	r6, r7, d0
 800c324:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c328:	9107      	str	r1, [sp, #28]
 800c32a:	4604      	mov	r4, r0
 800c32c:	920a      	str	r2, [sp, #40]	; 0x28
 800c32e:	930d      	str	r3, [sp, #52]	; 0x34
 800c330:	b975      	cbnz	r5, 800c350 <_dtoa_r+0x40>
 800c332:	2010      	movs	r0, #16
 800c334:	f7fe fe64 	bl	800b000 <malloc>
 800c338:	4602      	mov	r2, r0
 800c33a:	61e0      	str	r0, [r4, #28]
 800c33c:	b920      	cbnz	r0, 800c348 <_dtoa_r+0x38>
 800c33e:	4bae      	ldr	r3, [pc, #696]	; (800c5f8 <_dtoa_r+0x2e8>)
 800c340:	21ef      	movs	r1, #239	; 0xef
 800c342:	48ae      	ldr	r0, [pc, #696]	; (800c5fc <_dtoa_r+0x2ec>)
 800c344:	f002 fd88 	bl	800ee58 <__assert_func>
 800c348:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c34c:	6005      	str	r5, [r0, #0]
 800c34e:	60c5      	str	r5, [r0, #12]
 800c350:	69e3      	ldr	r3, [r4, #28]
 800c352:	6819      	ldr	r1, [r3, #0]
 800c354:	b151      	cbz	r1, 800c36c <_dtoa_r+0x5c>
 800c356:	685a      	ldr	r2, [r3, #4]
 800c358:	604a      	str	r2, [r1, #4]
 800c35a:	2301      	movs	r3, #1
 800c35c:	4093      	lsls	r3, r2
 800c35e:	608b      	str	r3, [r1, #8]
 800c360:	4620      	mov	r0, r4
 800c362:	f000 fe53 	bl	800d00c <_Bfree>
 800c366:	69e3      	ldr	r3, [r4, #28]
 800c368:	2200      	movs	r2, #0
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	1e3b      	subs	r3, r7, #0
 800c36e:	bfbb      	ittet	lt
 800c370:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c374:	9303      	strlt	r3, [sp, #12]
 800c376:	2300      	movge	r3, #0
 800c378:	2201      	movlt	r2, #1
 800c37a:	bfac      	ite	ge
 800c37c:	f8c8 3000 	strge.w	r3, [r8]
 800c380:	f8c8 2000 	strlt.w	r2, [r8]
 800c384:	4b9e      	ldr	r3, [pc, #632]	; (800c600 <_dtoa_r+0x2f0>)
 800c386:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c38a:	ea33 0308 	bics.w	r3, r3, r8
 800c38e:	d11b      	bne.n	800c3c8 <_dtoa_r+0xb8>
 800c390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c392:	f242 730f 	movw	r3, #9999	; 0x270f
 800c396:	6013      	str	r3, [r2, #0]
 800c398:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c39c:	4333      	orrs	r3, r6
 800c39e:	f000 8593 	beq.w	800cec8 <_dtoa_r+0xbb8>
 800c3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3a4:	b963      	cbnz	r3, 800c3c0 <_dtoa_r+0xb0>
 800c3a6:	4b97      	ldr	r3, [pc, #604]	; (800c604 <_dtoa_r+0x2f4>)
 800c3a8:	e027      	b.n	800c3fa <_dtoa_r+0xea>
 800c3aa:	4b97      	ldr	r3, [pc, #604]	; (800c608 <_dtoa_r+0x2f8>)
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3b2:	6013      	str	r3, [r2, #0]
 800c3b4:	9800      	ldr	r0, [sp, #0]
 800c3b6:	b013      	add	sp, #76	; 0x4c
 800c3b8:	ecbd 8b04 	vpop	{d8-d9}
 800c3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	4b90      	ldr	r3, [pc, #576]	; (800c604 <_dtoa_r+0x2f4>)
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	3303      	adds	r3, #3
 800c3c6:	e7f3      	b.n	800c3b0 <_dtoa_r+0xa0>
 800c3c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	ec51 0b17 	vmov	r0, r1, d7
 800c3d2:	eeb0 8a47 	vmov.f32	s16, s14
 800c3d6:	eef0 8a67 	vmov.f32	s17, s15
 800c3da:	2300      	movs	r3, #0
 800c3dc:	f7f4 fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3e0:	4681      	mov	r9, r0
 800c3e2:	b160      	cbz	r0, 800c3fe <_dtoa_r+0xee>
 800c3e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	6013      	str	r3, [r2, #0]
 800c3ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 8568 	beq.w	800cec2 <_dtoa_r+0xbb2>
 800c3f2:	4b86      	ldr	r3, [pc, #536]	; (800c60c <_dtoa_r+0x2fc>)
 800c3f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	e7da      	b.n	800c3b4 <_dtoa_r+0xa4>
 800c3fe:	aa10      	add	r2, sp, #64	; 0x40
 800c400:	a911      	add	r1, sp, #68	; 0x44
 800c402:	4620      	mov	r0, r4
 800c404:	eeb0 0a48 	vmov.f32	s0, s16
 800c408:	eef0 0a68 	vmov.f32	s1, s17
 800c40c:	f001 f99a 	bl	800d744 <__d2b>
 800c410:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c414:	4682      	mov	sl, r0
 800c416:	2d00      	cmp	r5, #0
 800c418:	d07f      	beq.n	800c51a <_dtoa_r+0x20a>
 800c41a:	ee18 3a90 	vmov	r3, s17
 800c41e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c422:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c426:	ec51 0b18 	vmov	r0, r1, d8
 800c42a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c42e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c432:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c436:	4619      	mov	r1, r3
 800c438:	2200      	movs	r2, #0
 800c43a:	4b75      	ldr	r3, [pc, #468]	; (800c610 <_dtoa_r+0x300>)
 800c43c:	f7f3 ff24 	bl	8000288 <__aeabi_dsub>
 800c440:	a367      	add	r3, pc, #412	; (adr r3, 800c5e0 <_dtoa_r+0x2d0>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	f7f4 f8d7 	bl	80005f8 <__aeabi_dmul>
 800c44a:	a367      	add	r3, pc, #412	; (adr r3, 800c5e8 <_dtoa_r+0x2d8>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f7f3 ff1c 	bl	800028c <__adddf3>
 800c454:	4606      	mov	r6, r0
 800c456:	4628      	mov	r0, r5
 800c458:	460f      	mov	r7, r1
 800c45a:	f7f4 f863 	bl	8000524 <__aeabi_i2d>
 800c45e:	a364      	add	r3, pc, #400	; (adr r3, 800c5f0 <_dtoa_r+0x2e0>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f4 f8c8 	bl	80005f8 <__aeabi_dmul>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4630      	mov	r0, r6
 800c46e:	4639      	mov	r1, r7
 800c470:	f7f3 ff0c 	bl	800028c <__adddf3>
 800c474:	4606      	mov	r6, r0
 800c476:	460f      	mov	r7, r1
 800c478:	f7f4 fb6e 	bl	8000b58 <__aeabi_d2iz>
 800c47c:	2200      	movs	r2, #0
 800c47e:	4683      	mov	fp, r0
 800c480:	2300      	movs	r3, #0
 800c482:	4630      	mov	r0, r6
 800c484:	4639      	mov	r1, r7
 800c486:	f7f4 fb29 	bl	8000adc <__aeabi_dcmplt>
 800c48a:	b148      	cbz	r0, 800c4a0 <_dtoa_r+0x190>
 800c48c:	4658      	mov	r0, fp
 800c48e:	f7f4 f849 	bl	8000524 <__aeabi_i2d>
 800c492:	4632      	mov	r2, r6
 800c494:	463b      	mov	r3, r7
 800c496:	f7f4 fb17 	bl	8000ac8 <__aeabi_dcmpeq>
 800c49a:	b908      	cbnz	r0, 800c4a0 <_dtoa_r+0x190>
 800c49c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4a0:	f1bb 0f16 	cmp.w	fp, #22
 800c4a4:	d857      	bhi.n	800c556 <_dtoa_r+0x246>
 800c4a6:	4b5b      	ldr	r3, [pc, #364]	; (800c614 <_dtoa_r+0x304>)
 800c4a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	ec51 0b18 	vmov	r0, r1, d8
 800c4b4:	f7f4 fb12 	bl	8000adc <__aeabi_dcmplt>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d04e      	beq.n	800c55a <_dtoa_r+0x24a>
 800c4bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	930c      	str	r3, [sp, #48]	; 0x30
 800c4c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4c6:	1b5b      	subs	r3, r3, r5
 800c4c8:	1e5a      	subs	r2, r3, #1
 800c4ca:	bf45      	ittet	mi
 800c4cc:	f1c3 0301 	rsbmi	r3, r3, #1
 800c4d0:	9305      	strmi	r3, [sp, #20]
 800c4d2:	2300      	movpl	r3, #0
 800c4d4:	2300      	movmi	r3, #0
 800c4d6:	9206      	str	r2, [sp, #24]
 800c4d8:	bf54      	ite	pl
 800c4da:	9305      	strpl	r3, [sp, #20]
 800c4dc:	9306      	strmi	r3, [sp, #24]
 800c4de:	f1bb 0f00 	cmp.w	fp, #0
 800c4e2:	db3c      	blt.n	800c55e <_dtoa_r+0x24e>
 800c4e4:	9b06      	ldr	r3, [sp, #24]
 800c4e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c4ea:	445b      	add	r3, fp
 800c4ec:	9306      	str	r3, [sp, #24]
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9308      	str	r3, [sp, #32]
 800c4f2:	9b07      	ldr	r3, [sp, #28]
 800c4f4:	2b09      	cmp	r3, #9
 800c4f6:	d868      	bhi.n	800c5ca <_dtoa_r+0x2ba>
 800c4f8:	2b05      	cmp	r3, #5
 800c4fa:	bfc4      	itt	gt
 800c4fc:	3b04      	subgt	r3, #4
 800c4fe:	9307      	strgt	r3, [sp, #28]
 800c500:	9b07      	ldr	r3, [sp, #28]
 800c502:	f1a3 0302 	sub.w	r3, r3, #2
 800c506:	bfcc      	ite	gt
 800c508:	2500      	movgt	r5, #0
 800c50a:	2501      	movle	r5, #1
 800c50c:	2b03      	cmp	r3, #3
 800c50e:	f200 8085 	bhi.w	800c61c <_dtoa_r+0x30c>
 800c512:	e8df f003 	tbb	[pc, r3]
 800c516:	3b2e      	.short	0x3b2e
 800c518:	5839      	.short	0x5839
 800c51a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c51e:	441d      	add	r5, r3
 800c520:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c524:	2b20      	cmp	r3, #32
 800c526:	bfc1      	itttt	gt
 800c528:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c52c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c530:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c534:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c538:	bfd6      	itet	le
 800c53a:	f1c3 0320 	rsble	r3, r3, #32
 800c53e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c542:	fa06 f003 	lslle.w	r0, r6, r3
 800c546:	f7f3 ffdd 	bl	8000504 <__aeabi_ui2d>
 800c54a:	2201      	movs	r2, #1
 800c54c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c550:	3d01      	subs	r5, #1
 800c552:	920e      	str	r2, [sp, #56]	; 0x38
 800c554:	e76f      	b.n	800c436 <_dtoa_r+0x126>
 800c556:	2301      	movs	r3, #1
 800c558:	e7b3      	b.n	800c4c2 <_dtoa_r+0x1b2>
 800c55a:	900c      	str	r0, [sp, #48]	; 0x30
 800c55c:	e7b2      	b.n	800c4c4 <_dtoa_r+0x1b4>
 800c55e:	9b05      	ldr	r3, [sp, #20]
 800c560:	eba3 030b 	sub.w	r3, r3, fp
 800c564:	9305      	str	r3, [sp, #20]
 800c566:	f1cb 0300 	rsb	r3, fp, #0
 800c56a:	9308      	str	r3, [sp, #32]
 800c56c:	2300      	movs	r3, #0
 800c56e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c570:	e7bf      	b.n	800c4f2 <_dtoa_r+0x1e2>
 800c572:	2300      	movs	r3, #0
 800c574:	9309      	str	r3, [sp, #36]	; 0x24
 800c576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c578:	2b00      	cmp	r3, #0
 800c57a:	dc52      	bgt.n	800c622 <_dtoa_r+0x312>
 800c57c:	2301      	movs	r3, #1
 800c57e:	9301      	str	r3, [sp, #4]
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	461a      	mov	r2, r3
 800c584:	920a      	str	r2, [sp, #40]	; 0x28
 800c586:	e00b      	b.n	800c5a0 <_dtoa_r+0x290>
 800c588:	2301      	movs	r3, #1
 800c58a:	e7f3      	b.n	800c574 <_dtoa_r+0x264>
 800c58c:	2300      	movs	r3, #0
 800c58e:	9309      	str	r3, [sp, #36]	; 0x24
 800c590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c592:	445b      	add	r3, fp
 800c594:	9301      	str	r3, [sp, #4]
 800c596:	3301      	adds	r3, #1
 800c598:	2b01      	cmp	r3, #1
 800c59a:	9304      	str	r3, [sp, #16]
 800c59c:	bfb8      	it	lt
 800c59e:	2301      	movlt	r3, #1
 800c5a0:	69e0      	ldr	r0, [r4, #28]
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	2204      	movs	r2, #4
 800c5a6:	f102 0614 	add.w	r6, r2, #20
 800c5aa:	429e      	cmp	r6, r3
 800c5ac:	d93d      	bls.n	800c62a <_dtoa_r+0x31a>
 800c5ae:	6041      	str	r1, [r0, #4]
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f000 fceb 	bl	800cf8c <_Balloc>
 800c5b6:	9000      	str	r0, [sp, #0]
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d139      	bne.n	800c630 <_dtoa_r+0x320>
 800c5bc:	4b16      	ldr	r3, [pc, #88]	; (800c618 <_dtoa_r+0x308>)
 800c5be:	4602      	mov	r2, r0
 800c5c0:	f240 11af 	movw	r1, #431	; 0x1af
 800c5c4:	e6bd      	b.n	800c342 <_dtoa_r+0x32>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	e7e1      	b.n	800c58e <_dtoa_r+0x27e>
 800c5ca:	2501      	movs	r5, #1
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	9307      	str	r3, [sp, #28]
 800c5d0:	9509      	str	r5, [sp, #36]	; 0x24
 800c5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d6:	9301      	str	r3, [sp, #4]
 800c5d8:	9304      	str	r3, [sp, #16]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	2312      	movs	r3, #18
 800c5de:	e7d1      	b.n	800c584 <_dtoa_r+0x274>
 800c5e0:	636f4361 	.word	0x636f4361
 800c5e4:	3fd287a7 	.word	0x3fd287a7
 800c5e8:	8b60c8b3 	.word	0x8b60c8b3
 800c5ec:	3fc68a28 	.word	0x3fc68a28
 800c5f0:	509f79fb 	.word	0x509f79fb
 800c5f4:	3fd34413 	.word	0x3fd34413
 800c5f8:	08010086 	.word	0x08010086
 800c5fc:	0801009d 	.word	0x0801009d
 800c600:	7ff00000 	.word	0x7ff00000
 800c604:	08010082 	.word	0x08010082
 800c608:	08010079 	.word	0x08010079
 800c60c:	08010051 	.word	0x08010051
 800c610:	3ff80000 	.word	0x3ff80000
 800c614:	08010188 	.word	0x08010188
 800c618:	080100f5 	.word	0x080100f5
 800c61c:	2301      	movs	r3, #1
 800c61e:	9309      	str	r3, [sp, #36]	; 0x24
 800c620:	e7d7      	b.n	800c5d2 <_dtoa_r+0x2c2>
 800c622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	9304      	str	r3, [sp, #16]
 800c628:	e7ba      	b.n	800c5a0 <_dtoa_r+0x290>
 800c62a:	3101      	adds	r1, #1
 800c62c:	0052      	lsls	r2, r2, #1
 800c62e:	e7ba      	b.n	800c5a6 <_dtoa_r+0x296>
 800c630:	69e3      	ldr	r3, [r4, #28]
 800c632:	9a00      	ldr	r2, [sp, #0]
 800c634:	601a      	str	r2, [r3, #0]
 800c636:	9b04      	ldr	r3, [sp, #16]
 800c638:	2b0e      	cmp	r3, #14
 800c63a:	f200 80a8 	bhi.w	800c78e <_dtoa_r+0x47e>
 800c63e:	2d00      	cmp	r5, #0
 800c640:	f000 80a5 	beq.w	800c78e <_dtoa_r+0x47e>
 800c644:	f1bb 0f00 	cmp.w	fp, #0
 800c648:	dd38      	ble.n	800c6bc <_dtoa_r+0x3ac>
 800c64a:	4bc0      	ldr	r3, [pc, #768]	; (800c94c <_dtoa_r+0x63c>)
 800c64c:	f00b 020f 	and.w	r2, fp, #15
 800c650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c654:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c658:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c65c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c660:	d019      	beq.n	800c696 <_dtoa_r+0x386>
 800c662:	4bbb      	ldr	r3, [pc, #748]	; (800c950 <_dtoa_r+0x640>)
 800c664:	ec51 0b18 	vmov	r0, r1, d8
 800c668:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c66c:	f7f4 f8ee 	bl	800084c <__aeabi_ddiv>
 800c670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c674:	f008 080f 	and.w	r8, r8, #15
 800c678:	2503      	movs	r5, #3
 800c67a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c950 <_dtoa_r+0x640>
 800c67e:	f1b8 0f00 	cmp.w	r8, #0
 800c682:	d10a      	bne.n	800c69a <_dtoa_r+0x38a>
 800c684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c688:	4632      	mov	r2, r6
 800c68a:	463b      	mov	r3, r7
 800c68c:	f7f4 f8de 	bl	800084c <__aeabi_ddiv>
 800c690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c694:	e02b      	b.n	800c6ee <_dtoa_r+0x3de>
 800c696:	2502      	movs	r5, #2
 800c698:	e7ef      	b.n	800c67a <_dtoa_r+0x36a>
 800c69a:	f018 0f01 	tst.w	r8, #1
 800c69e:	d008      	beq.n	800c6b2 <_dtoa_r+0x3a2>
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c6a8:	f7f3 ffa6 	bl	80005f8 <__aeabi_dmul>
 800c6ac:	3501      	adds	r5, #1
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	460f      	mov	r7, r1
 800c6b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c6b6:	f109 0908 	add.w	r9, r9, #8
 800c6ba:	e7e0      	b.n	800c67e <_dtoa_r+0x36e>
 800c6bc:	f000 809f 	beq.w	800c7fe <_dtoa_r+0x4ee>
 800c6c0:	f1cb 0600 	rsb	r6, fp, #0
 800c6c4:	4ba1      	ldr	r3, [pc, #644]	; (800c94c <_dtoa_r+0x63c>)
 800c6c6:	4fa2      	ldr	r7, [pc, #648]	; (800c950 <_dtoa_r+0x640>)
 800c6c8:	f006 020f 	and.w	r2, r6, #15
 800c6cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	ec51 0b18 	vmov	r0, r1, d8
 800c6d8:	f7f3 ff8e 	bl	80005f8 <__aeabi_dmul>
 800c6dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6e0:	1136      	asrs	r6, r6, #4
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	2502      	movs	r5, #2
 800c6e6:	2e00      	cmp	r6, #0
 800c6e8:	d17e      	bne.n	800c7e8 <_dtoa_r+0x4d8>
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1d0      	bne.n	800c690 <_dtoa_r+0x380>
 800c6ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 8084 	beq.w	800c802 <_dtoa_r+0x4f2>
 800c6fa:	4b96      	ldr	r3, [pc, #600]	; (800c954 <_dtoa_r+0x644>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	4640      	mov	r0, r8
 800c700:	4649      	mov	r1, r9
 800c702:	f7f4 f9eb 	bl	8000adc <__aeabi_dcmplt>
 800c706:	2800      	cmp	r0, #0
 800c708:	d07b      	beq.n	800c802 <_dtoa_r+0x4f2>
 800c70a:	9b04      	ldr	r3, [sp, #16]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d078      	beq.n	800c802 <_dtoa_r+0x4f2>
 800c710:	9b01      	ldr	r3, [sp, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	dd39      	ble.n	800c78a <_dtoa_r+0x47a>
 800c716:	4b90      	ldr	r3, [pc, #576]	; (800c958 <_dtoa_r+0x648>)
 800c718:	2200      	movs	r2, #0
 800c71a:	4640      	mov	r0, r8
 800c71c:	4649      	mov	r1, r9
 800c71e:	f7f3 ff6b 	bl	80005f8 <__aeabi_dmul>
 800c722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c726:	9e01      	ldr	r6, [sp, #4]
 800c728:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c72c:	3501      	adds	r5, #1
 800c72e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c732:	4628      	mov	r0, r5
 800c734:	f7f3 fef6 	bl	8000524 <__aeabi_i2d>
 800c738:	4642      	mov	r2, r8
 800c73a:	464b      	mov	r3, r9
 800c73c:	f7f3 ff5c 	bl	80005f8 <__aeabi_dmul>
 800c740:	4b86      	ldr	r3, [pc, #536]	; (800c95c <_dtoa_r+0x64c>)
 800c742:	2200      	movs	r2, #0
 800c744:	f7f3 fda2 	bl	800028c <__adddf3>
 800c748:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c74c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c750:	9303      	str	r3, [sp, #12]
 800c752:	2e00      	cmp	r6, #0
 800c754:	d158      	bne.n	800c808 <_dtoa_r+0x4f8>
 800c756:	4b82      	ldr	r3, [pc, #520]	; (800c960 <_dtoa_r+0x650>)
 800c758:	2200      	movs	r2, #0
 800c75a:	4640      	mov	r0, r8
 800c75c:	4649      	mov	r1, r9
 800c75e:	f7f3 fd93 	bl	8000288 <__aeabi_dsub>
 800c762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c766:	4680      	mov	r8, r0
 800c768:	4689      	mov	r9, r1
 800c76a:	f7f4 f9d5 	bl	8000b18 <__aeabi_dcmpgt>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f040 8296 	bne.w	800cca0 <_dtoa_r+0x990>
 800c774:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c778:	4640      	mov	r0, r8
 800c77a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c77e:	4649      	mov	r1, r9
 800c780:	f7f4 f9ac 	bl	8000adc <__aeabi_dcmplt>
 800c784:	2800      	cmp	r0, #0
 800c786:	f040 8289 	bne.w	800cc9c <_dtoa_r+0x98c>
 800c78a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c78e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c790:	2b00      	cmp	r3, #0
 800c792:	f2c0 814e 	blt.w	800ca32 <_dtoa_r+0x722>
 800c796:	f1bb 0f0e 	cmp.w	fp, #14
 800c79a:	f300 814a 	bgt.w	800ca32 <_dtoa_r+0x722>
 800c79e:	4b6b      	ldr	r3, [pc, #428]	; (800c94c <_dtoa_r+0x63c>)
 800c7a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c7a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f280 80dc 	bge.w	800c968 <_dtoa_r+0x658>
 800c7b0:	9b04      	ldr	r3, [sp, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f300 80d8 	bgt.w	800c968 <_dtoa_r+0x658>
 800c7b8:	f040 826f 	bne.w	800cc9a <_dtoa_r+0x98a>
 800c7bc:	4b68      	ldr	r3, [pc, #416]	; (800c960 <_dtoa_r+0x650>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	4640      	mov	r0, r8
 800c7c2:	4649      	mov	r1, r9
 800c7c4:	f7f3 ff18 	bl	80005f8 <__aeabi_dmul>
 800c7c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7cc:	f7f4 f99a 	bl	8000b04 <__aeabi_dcmpge>
 800c7d0:	9e04      	ldr	r6, [sp, #16]
 800c7d2:	4637      	mov	r7, r6
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	f040 8245 	bne.w	800cc64 <_dtoa_r+0x954>
 800c7da:	9d00      	ldr	r5, [sp, #0]
 800c7dc:	2331      	movs	r3, #49	; 0x31
 800c7de:	f805 3b01 	strb.w	r3, [r5], #1
 800c7e2:	f10b 0b01 	add.w	fp, fp, #1
 800c7e6:	e241      	b.n	800cc6c <_dtoa_r+0x95c>
 800c7e8:	07f2      	lsls	r2, r6, #31
 800c7ea:	d505      	bpl.n	800c7f8 <_dtoa_r+0x4e8>
 800c7ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7f0:	f7f3 ff02 	bl	80005f8 <__aeabi_dmul>
 800c7f4:	3501      	adds	r5, #1
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	1076      	asrs	r6, r6, #1
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	e773      	b.n	800c6e6 <_dtoa_r+0x3d6>
 800c7fe:	2502      	movs	r5, #2
 800c800:	e775      	b.n	800c6ee <_dtoa_r+0x3de>
 800c802:	9e04      	ldr	r6, [sp, #16]
 800c804:	465f      	mov	r7, fp
 800c806:	e792      	b.n	800c72e <_dtoa_r+0x41e>
 800c808:	9900      	ldr	r1, [sp, #0]
 800c80a:	4b50      	ldr	r3, [pc, #320]	; (800c94c <_dtoa_r+0x63c>)
 800c80c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c810:	4431      	add	r1, r6
 800c812:	9102      	str	r1, [sp, #8]
 800c814:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c816:	eeb0 9a47 	vmov.f32	s18, s14
 800c81a:	eef0 9a67 	vmov.f32	s19, s15
 800c81e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c822:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c826:	2900      	cmp	r1, #0
 800c828:	d044      	beq.n	800c8b4 <_dtoa_r+0x5a4>
 800c82a:	494e      	ldr	r1, [pc, #312]	; (800c964 <_dtoa_r+0x654>)
 800c82c:	2000      	movs	r0, #0
 800c82e:	f7f4 f80d 	bl	800084c <__aeabi_ddiv>
 800c832:	ec53 2b19 	vmov	r2, r3, d9
 800c836:	f7f3 fd27 	bl	8000288 <__aeabi_dsub>
 800c83a:	9d00      	ldr	r5, [sp, #0]
 800c83c:	ec41 0b19 	vmov	d9, r0, r1
 800c840:	4649      	mov	r1, r9
 800c842:	4640      	mov	r0, r8
 800c844:	f7f4 f988 	bl	8000b58 <__aeabi_d2iz>
 800c848:	4606      	mov	r6, r0
 800c84a:	f7f3 fe6b 	bl	8000524 <__aeabi_i2d>
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	4640      	mov	r0, r8
 800c854:	4649      	mov	r1, r9
 800c856:	f7f3 fd17 	bl	8000288 <__aeabi_dsub>
 800c85a:	3630      	adds	r6, #48	; 0x30
 800c85c:	f805 6b01 	strb.w	r6, [r5], #1
 800c860:	ec53 2b19 	vmov	r2, r3, d9
 800c864:	4680      	mov	r8, r0
 800c866:	4689      	mov	r9, r1
 800c868:	f7f4 f938 	bl	8000adc <__aeabi_dcmplt>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	d164      	bne.n	800c93a <_dtoa_r+0x62a>
 800c870:	4642      	mov	r2, r8
 800c872:	464b      	mov	r3, r9
 800c874:	4937      	ldr	r1, [pc, #220]	; (800c954 <_dtoa_r+0x644>)
 800c876:	2000      	movs	r0, #0
 800c878:	f7f3 fd06 	bl	8000288 <__aeabi_dsub>
 800c87c:	ec53 2b19 	vmov	r2, r3, d9
 800c880:	f7f4 f92c 	bl	8000adc <__aeabi_dcmplt>
 800c884:	2800      	cmp	r0, #0
 800c886:	f040 80b6 	bne.w	800c9f6 <_dtoa_r+0x6e6>
 800c88a:	9b02      	ldr	r3, [sp, #8]
 800c88c:	429d      	cmp	r5, r3
 800c88e:	f43f af7c 	beq.w	800c78a <_dtoa_r+0x47a>
 800c892:	4b31      	ldr	r3, [pc, #196]	; (800c958 <_dtoa_r+0x648>)
 800c894:	ec51 0b19 	vmov	r0, r1, d9
 800c898:	2200      	movs	r2, #0
 800c89a:	f7f3 fead 	bl	80005f8 <__aeabi_dmul>
 800c89e:	4b2e      	ldr	r3, [pc, #184]	; (800c958 <_dtoa_r+0x648>)
 800c8a0:	ec41 0b19 	vmov	d9, r0, r1
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fea5 	bl	80005f8 <__aeabi_dmul>
 800c8ae:	4680      	mov	r8, r0
 800c8b0:	4689      	mov	r9, r1
 800c8b2:	e7c5      	b.n	800c840 <_dtoa_r+0x530>
 800c8b4:	ec51 0b17 	vmov	r0, r1, d7
 800c8b8:	f7f3 fe9e 	bl	80005f8 <__aeabi_dmul>
 800c8bc:	9b02      	ldr	r3, [sp, #8]
 800c8be:	9d00      	ldr	r5, [sp, #0]
 800c8c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8c2:	ec41 0b19 	vmov	d9, r0, r1
 800c8c6:	4649      	mov	r1, r9
 800c8c8:	4640      	mov	r0, r8
 800c8ca:	f7f4 f945 	bl	8000b58 <__aeabi_d2iz>
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	f7f3 fe28 	bl	8000524 <__aeabi_i2d>
 800c8d4:	3630      	adds	r6, #48	; 0x30
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	f7f3 fcd3 	bl	8000288 <__aeabi_dsub>
 800c8e2:	f805 6b01 	strb.w	r6, [r5], #1
 800c8e6:	9b02      	ldr	r3, [sp, #8]
 800c8e8:	429d      	cmp	r5, r3
 800c8ea:	4680      	mov	r8, r0
 800c8ec:	4689      	mov	r9, r1
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	d124      	bne.n	800c93e <_dtoa_r+0x62e>
 800c8f4:	4b1b      	ldr	r3, [pc, #108]	; (800c964 <_dtoa_r+0x654>)
 800c8f6:	ec51 0b19 	vmov	r0, r1, d9
 800c8fa:	f7f3 fcc7 	bl	800028c <__adddf3>
 800c8fe:	4602      	mov	r2, r0
 800c900:	460b      	mov	r3, r1
 800c902:	4640      	mov	r0, r8
 800c904:	4649      	mov	r1, r9
 800c906:	f7f4 f907 	bl	8000b18 <__aeabi_dcmpgt>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	d173      	bne.n	800c9f6 <_dtoa_r+0x6e6>
 800c90e:	ec53 2b19 	vmov	r2, r3, d9
 800c912:	4914      	ldr	r1, [pc, #80]	; (800c964 <_dtoa_r+0x654>)
 800c914:	2000      	movs	r0, #0
 800c916:	f7f3 fcb7 	bl	8000288 <__aeabi_dsub>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4640      	mov	r0, r8
 800c920:	4649      	mov	r1, r9
 800c922:	f7f4 f8db 	bl	8000adc <__aeabi_dcmplt>
 800c926:	2800      	cmp	r0, #0
 800c928:	f43f af2f 	beq.w	800c78a <_dtoa_r+0x47a>
 800c92c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c92e:	1e6b      	subs	r3, r5, #1
 800c930:	930f      	str	r3, [sp, #60]	; 0x3c
 800c932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c936:	2b30      	cmp	r3, #48	; 0x30
 800c938:	d0f8      	beq.n	800c92c <_dtoa_r+0x61c>
 800c93a:	46bb      	mov	fp, r7
 800c93c:	e04a      	b.n	800c9d4 <_dtoa_r+0x6c4>
 800c93e:	4b06      	ldr	r3, [pc, #24]	; (800c958 <_dtoa_r+0x648>)
 800c940:	f7f3 fe5a 	bl	80005f8 <__aeabi_dmul>
 800c944:	4680      	mov	r8, r0
 800c946:	4689      	mov	r9, r1
 800c948:	e7bd      	b.n	800c8c6 <_dtoa_r+0x5b6>
 800c94a:	bf00      	nop
 800c94c:	08010188 	.word	0x08010188
 800c950:	08010160 	.word	0x08010160
 800c954:	3ff00000 	.word	0x3ff00000
 800c958:	40240000 	.word	0x40240000
 800c95c:	401c0000 	.word	0x401c0000
 800c960:	40140000 	.word	0x40140000
 800c964:	3fe00000 	.word	0x3fe00000
 800c968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c96c:	9d00      	ldr	r5, [sp, #0]
 800c96e:	4642      	mov	r2, r8
 800c970:	464b      	mov	r3, r9
 800c972:	4630      	mov	r0, r6
 800c974:	4639      	mov	r1, r7
 800c976:	f7f3 ff69 	bl	800084c <__aeabi_ddiv>
 800c97a:	f7f4 f8ed 	bl	8000b58 <__aeabi_d2iz>
 800c97e:	9001      	str	r0, [sp, #4]
 800c980:	f7f3 fdd0 	bl	8000524 <__aeabi_i2d>
 800c984:	4642      	mov	r2, r8
 800c986:	464b      	mov	r3, r9
 800c988:	f7f3 fe36 	bl	80005f8 <__aeabi_dmul>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	f7f3 fc78 	bl	8000288 <__aeabi_dsub>
 800c998:	9e01      	ldr	r6, [sp, #4]
 800c99a:	9f04      	ldr	r7, [sp, #16]
 800c99c:	3630      	adds	r6, #48	; 0x30
 800c99e:	f805 6b01 	strb.w	r6, [r5], #1
 800c9a2:	9e00      	ldr	r6, [sp, #0]
 800c9a4:	1bae      	subs	r6, r5, r6
 800c9a6:	42b7      	cmp	r7, r6
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	d134      	bne.n	800ca18 <_dtoa_r+0x708>
 800c9ae:	f7f3 fc6d 	bl	800028c <__adddf3>
 800c9b2:	4642      	mov	r2, r8
 800c9b4:	464b      	mov	r3, r9
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	460f      	mov	r7, r1
 800c9ba:	f7f4 f8ad 	bl	8000b18 <__aeabi_dcmpgt>
 800c9be:	b9c8      	cbnz	r0, 800c9f4 <_dtoa_r+0x6e4>
 800c9c0:	4642      	mov	r2, r8
 800c9c2:	464b      	mov	r3, r9
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	f7f4 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9cc:	b110      	cbz	r0, 800c9d4 <_dtoa_r+0x6c4>
 800c9ce:	9b01      	ldr	r3, [sp, #4]
 800c9d0:	07db      	lsls	r3, r3, #31
 800c9d2:	d40f      	bmi.n	800c9f4 <_dtoa_r+0x6e4>
 800c9d4:	4651      	mov	r1, sl
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f000 fb18 	bl	800d00c <_Bfree>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9e0:	702b      	strb	r3, [r5, #0]
 800c9e2:	f10b 0301 	add.w	r3, fp, #1
 800c9e6:	6013      	str	r3, [r2, #0]
 800c9e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f43f ace2 	beq.w	800c3b4 <_dtoa_r+0xa4>
 800c9f0:	601d      	str	r5, [r3, #0]
 800c9f2:	e4df      	b.n	800c3b4 <_dtoa_r+0xa4>
 800c9f4:	465f      	mov	r7, fp
 800c9f6:	462b      	mov	r3, r5
 800c9f8:	461d      	mov	r5, r3
 800c9fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9fe:	2a39      	cmp	r2, #57	; 0x39
 800ca00:	d106      	bne.n	800ca10 <_dtoa_r+0x700>
 800ca02:	9a00      	ldr	r2, [sp, #0]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d1f7      	bne.n	800c9f8 <_dtoa_r+0x6e8>
 800ca08:	9900      	ldr	r1, [sp, #0]
 800ca0a:	2230      	movs	r2, #48	; 0x30
 800ca0c:	3701      	adds	r7, #1
 800ca0e:	700a      	strb	r2, [r1, #0]
 800ca10:	781a      	ldrb	r2, [r3, #0]
 800ca12:	3201      	adds	r2, #1
 800ca14:	701a      	strb	r2, [r3, #0]
 800ca16:	e790      	b.n	800c93a <_dtoa_r+0x62a>
 800ca18:	4ba3      	ldr	r3, [pc, #652]	; (800cca8 <_dtoa_r+0x998>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f7f3 fdec 	bl	80005f8 <__aeabi_dmul>
 800ca20:	2200      	movs	r2, #0
 800ca22:	2300      	movs	r3, #0
 800ca24:	4606      	mov	r6, r0
 800ca26:	460f      	mov	r7, r1
 800ca28:	f7f4 f84e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d09e      	beq.n	800c96e <_dtoa_r+0x65e>
 800ca30:	e7d0      	b.n	800c9d4 <_dtoa_r+0x6c4>
 800ca32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	f000 80ca 	beq.w	800cbce <_dtoa_r+0x8be>
 800ca3a:	9a07      	ldr	r2, [sp, #28]
 800ca3c:	2a01      	cmp	r2, #1
 800ca3e:	f300 80ad 	bgt.w	800cb9c <_dtoa_r+0x88c>
 800ca42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca44:	2a00      	cmp	r2, #0
 800ca46:	f000 80a5 	beq.w	800cb94 <_dtoa_r+0x884>
 800ca4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca4e:	9e08      	ldr	r6, [sp, #32]
 800ca50:	9d05      	ldr	r5, [sp, #20]
 800ca52:	9a05      	ldr	r2, [sp, #20]
 800ca54:	441a      	add	r2, r3
 800ca56:	9205      	str	r2, [sp, #20]
 800ca58:	9a06      	ldr	r2, [sp, #24]
 800ca5a:	2101      	movs	r1, #1
 800ca5c:	441a      	add	r2, r3
 800ca5e:	4620      	mov	r0, r4
 800ca60:	9206      	str	r2, [sp, #24]
 800ca62:	f000 fbd3 	bl	800d20c <__i2b>
 800ca66:	4607      	mov	r7, r0
 800ca68:	b165      	cbz	r5, 800ca84 <_dtoa_r+0x774>
 800ca6a:	9b06      	ldr	r3, [sp, #24]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	dd09      	ble.n	800ca84 <_dtoa_r+0x774>
 800ca70:	42ab      	cmp	r3, r5
 800ca72:	9a05      	ldr	r2, [sp, #20]
 800ca74:	bfa8      	it	ge
 800ca76:	462b      	movge	r3, r5
 800ca78:	1ad2      	subs	r2, r2, r3
 800ca7a:	9205      	str	r2, [sp, #20]
 800ca7c:	9a06      	ldr	r2, [sp, #24]
 800ca7e:	1aed      	subs	r5, r5, r3
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	9306      	str	r3, [sp, #24]
 800ca84:	9b08      	ldr	r3, [sp, #32]
 800ca86:	b1f3      	cbz	r3, 800cac6 <_dtoa_r+0x7b6>
 800ca88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f000 80a3 	beq.w	800cbd6 <_dtoa_r+0x8c6>
 800ca90:	2e00      	cmp	r6, #0
 800ca92:	dd10      	ble.n	800cab6 <_dtoa_r+0x7a6>
 800ca94:	4639      	mov	r1, r7
 800ca96:	4632      	mov	r2, r6
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f000 fc77 	bl	800d38c <__pow5mult>
 800ca9e:	4652      	mov	r2, sl
 800caa0:	4601      	mov	r1, r0
 800caa2:	4607      	mov	r7, r0
 800caa4:	4620      	mov	r0, r4
 800caa6:	f000 fbc7 	bl	800d238 <__multiply>
 800caaa:	4651      	mov	r1, sl
 800caac:	4680      	mov	r8, r0
 800caae:	4620      	mov	r0, r4
 800cab0:	f000 faac 	bl	800d00c <_Bfree>
 800cab4:	46c2      	mov	sl, r8
 800cab6:	9b08      	ldr	r3, [sp, #32]
 800cab8:	1b9a      	subs	r2, r3, r6
 800caba:	d004      	beq.n	800cac6 <_dtoa_r+0x7b6>
 800cabc:	4651      	mov	r1, sl
 800cabe:	4620      	mov	r0, r4
 800cac0:	f000 fc64 	bl	800d38c <__pow5mult>
 800cac4:	4682      	mov	sl, r0
 800cac6:	2101      	movs	r1, #1
 800cac8:	4620      	mov	r0, r4
 800caca:	f000 fb9f 	bl	800d20c <__i2b>
 800cace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	4606      	mov	r6, r0
 800cad4:	f340 8081 	ble.w	800cbda <_dtoa_r+0x8ca>
 800cad8:	461a      	mov	r2, r3
 800cada:	4601      	mov	r1, r0
 800cadc:	4620      	mov	r0, r4
 800cade:	f000 fc55 	bl	800d38c <__pow5mult>
 800cae2:	9b07      	ldr	r3, [sp, #28]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	4606      	mov	r6, r0
 800cae8:	dd7a      	ble.n	800cbe0 <_dtoa_r+0x8d0>
 800caea:	f04f 0800 	mov.w	r8, #0
 800caee:	6933      	ldr	r3, [r6, #16]
 800caf0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800caf4:	6918      	ldr	r0, [r3, #16]
 800caf6:	f000 fb3b 	bl	800d170 <__hi0bits>
 800cafa:	f1c0 0020 	rsb	r0, r0, #32
 800cafe:	9b06      	ldr	r3, [sp, #24]
 800cb00:	4418      	add	r0, r3
 800cb02:	f010 001f 	ands.w	r0, r0, #31
 800cb06:	f000 8094 	beq.w	800cc32 <_dtoa_r+0x922>
 800cb0a:	f1c0 0320 	rsb	r3, r0, #32
 800cb0e:	2b04      	cmp	r3, #4
 800cb10:	f340 8085 	ble.w	800cc1e <_dtoa_r+0x90e>
 800cb14:	9b05      	ldr	r3, [sp, #20]
 800cb16:	f1c0 001c 	rsb	r0, r0, #28
 800cb1a:	4403      	add	r3, r0
 800cb1c:	9305      	str	r3, [sp, #20]
 800cb1e:	9b06      	ldr	r3, [sp, #24]
 800cb20:	4403      	add	r3, r0
 800cb22:	4405      	add	r5, r0
 800cb24:	9306      	str	r3, [sp, #24]
 800cb26:	9b05      	ldr	r3, [sp, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dd05      	ble.n	800cb38 <_dtoa_r+0x828>
 800cb2c:	4651      	mov	r1, sl
 800cb2e:	461a      	mov	r2, r3
 800cb30:	4620      	mov	r0, r4
 800cb32:	f000 fc85 	bl	800d440 <__lshift>
 800cb36:	4682      	mov	sl, r0
 800cb38:	9b06      	ldr	r3, [sp, #24]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	dd05      	ble.n	800cb4a <_dtoa_r+0x83a>
 800cb3e:	4631      	mov	r1, r6
 800cb40:	461a      	mov	r2, r3
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 fc7c 	bl	800d440 <__lshift>
 800cb48:	4606      	mov	r6, r0
 800cb4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d072      	beq.n	800cc36 <_dtoa_r+0x926>
 800cb50:	4631      	mov	r1, r6
 800cb52:	4650      	mov	r0, sl
 800cb54:	f000 fce0 	bl	800d518 <__mcmp>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	da6c      	bge.n	800cc36 <_dtoa_r+0x926>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	4651      	mov	r1, sl
 800cb60:	220a      	movs	r2, #10
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 fa74 	bl	800d050 <__multadd>
 800cb68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb6e:	4682      	mov	sl, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 81b0 	beq.w	800ced6 <_dtoa_r+0xbc6>
 800cb76:	2300      	movs	r3, #0
 800cb78:	4639      	mov	r1, r7
 800cb7a:	220a      	movs	r2, #10
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f000 fa67 	bl	800d050 <__multadd>
 800cb82:	9b01      	ldr	r3, [sp, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	4607      	mov	r7, r0
 800cb88:	f300 8096 	bgt.w	800ccb8 <_dtoa_r+0x9a8>
 800cb8c:	9b07      	ldr	r3, [sp, #28]
 800cb8e:	2b02      	cmp	r3, #2
 800cb90:	dc59      	bgt.n	800cc46 <_dtoa_r+0x936>
 800cb92:	e091      	b.n	800ccb8 <_dtoa_r+0x9a8>
 800cb94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb9a:	e758      	b.n	800ca4e <_dtoa_r+0x73e>
 800cb9c:	9b04      	ldr	r3, [sp, #16]
 800cb9e:	1e5e      	subs	r6, r3, #1
 800cba0:	9b08      	ldr	r3, [sp, #32]
 800cba2:	42b3      	cmp	r3, r6
 800cba4:	bfbf      	itttt	lt
 800cba6:	9b08      	ldrlt	r3, [sp, #32]
 800cba8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cbaa:	9608      	strlt	r6, [sp, #32]
 800cbac:	1af3      	sublt	r3, r6, r3
 800cbae:	bfb4      	ite	lt
 800cbb0:	18d2      	addlt	r2, r2, r3
 800cbb2:	1b9e      	subge	r6, r3, r6
 800cbb4:	9b04      	ldr	r3, [sp, #16]
 800cbb6:	bfbc      	itt	lt
 800cbb8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cbba:	2600      	movlt	r6, #0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	bfb7      	itett	lt
 800cbc0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cbc4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cbc8:	1a9d      	sublt	r5, r3, r2
 800cbca:	2300      	movlt	r3, #0
 800cbcc:	e741      	b.n	800ca52 <_dtoa_r+0x742>
 800cbce:	9e08      	ldr	r6, [sp, #32]
 800cbd0:	9d05      	ldr	r5, [sp, #20]
 800cbd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cbd4:	e748      	b.n	800ca68 <_dtoa_r+0x758>
 800cbd6:	9a08      	ldr	r2, [sp, #32]
 800cbd8:	e770      	b.n	800cabc <_dtoa_r+0x7ac>
 800cbda:	9b07      	ldr	r3, [sp, #28]
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	dc19      	bgt.n	800cc14 <_dtoa_r+0x904>
 800cbe0:	9b02      	ldr	r3, [sp, #8]
 800cbe2:	b9bb      	cbnz	r3, 800cc14 <_dtoa_r+0x904>
 800cbe4:	9b03      	ldr	r3, [sp, #12]
 800cbe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbea:	b99b      	cbnz	r3, 800cc14 <_dtoa_r+0x904>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbf2:	0d1b      	lsrs	r3, r3, #20
 800cbf4:	051b      	lsls	r3, r3, #20
 800cbf6:	b183      	cbz	r3, 800cc1a <_dtoa_r+0x90a>
 800cbf8:	9b05      	ldr	r3, [sp, #20]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	9305      	str	r3, [sp, #20]
 800cbfe:	9b06      	ldr	r3, [sp, #24]
 800cc00:	3301      	adds	r3, #1
 800cc02:	9306      	str	r3, [sp, #24]
 800cc04:	f04f 0801 	mov.w	r8, #1
 800cc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f47f af6f 	bne.w	800caee <_dtoa_r+0x7de>
 800cc10:	2001      	movs	r0, #1
 800cc12:	e774      	b.n	800cafe <_dtoa_r+0x7ee>
 800cc14:	f04f 0800 	mov.w	r8, #0
 800cc18:	e7f6      	b.n	800cc08 <_dtoa_r+0x8f8>
 800cc1a:	4698      	mov	r8, r3
 800cc1c:	e7f4      	b.n	800cc08 <_dtoa_r+0x8f8>
 800cc1e:	d082      	beq.n	800cb26 <_dtoa_r+0x816>
 800cc20:	9a05      	ldr	r2, [sp, #20]
 800cc22:	331c      	adds	r3, #28
 800cc24:	441a      	add	r2, r3
 800cc26:	9205      	str	r2, [sp, #20]
 800cc28:	9a06      	ldr	r2, [sp, #24]
 800cc2a:	441a      	add	r2, r3
 800cc2c:	441d      	add	r5, r3
 800cc2e:	9206      	str	r2, [sp, #24]
 800cc30:	e779      	b.n	800cb26 <_dtoa_r+0x816>
 800cc32:	4603      	mov	r3, r0
 800cc34:	e7f4      	b.n	800cc20 <_dtoa_r+0x910>
 800cc36:	9b04      	ldr	r3, [sp, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dc37      	bgt.n	800ccac <_dtoa_r+0x99c>
 800cc3c:	9b07      	ldr	r3, [sp, #28]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	dd34      	ble.n	800ccac <_dtoa_r+0x99c>
 800cc42:	9b04      	ldr	r3, [sp, #16]
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	9b01      	ldr	r3, [sp, #4]
 800cc48:	b963      	cbnz	r3, 800cc64 <_dtoa_r+0x954>
 800cc4a:	4631      	mov	r1, r6
 800cc4c:	2205      	movs	r2, #5
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f000 f9fe 	bl	800d050 <__multadd>
 800cc54:	4601      	mov	r1, r0
 800cc56:	4606      	mov	r6, r0
 800cc58:	4650      	mov	r0, sl
 800cc5a:	f000 fc5d 	bl	800d518 <__mcmp>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f73f adbb 	bgt.w	800c7da <_dtoa_r+0x4ca>
 800cc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc66:	9d00      	ldr	r5, [sp, #0]
 800cc68:	ea6f 0b03 	mvn.w	fp, r3
 800cc6c:	f04f 0800 	mov.w	r8, #0
 800cc70:	4631      	mov	r1, r6
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 f9ca 	bl	800d00c <_Bfree>
 800cc78:	2f00      	cmp	r7, #0
 800cc7a:	f43f aeab 	beq.w	800c9d4 <_dtoa_r+0x6c4>
 800cc7e:	f1b8 0f00 	cmp.w	r8, #0
 800cc82:	d005      	beq.n	800cc90 <_dtoa_r+0x980>
 800cc84:	45b8      	cmp	r8, r7
 800cc86:	d003      	beq.n	800cc90 <_dtoa_r+0x980>
 800cc88:	4641      	mov	r1, r8
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f000 f9be 	bl	800d00c <_Bfree>
 800cc90:	4639      	mov	r1, r7
 800cc92:	4620      	mov	r0, r4
 800cc94:	f000 f9ba 	bl	800d00c <_Bfree>
 800cc98:	e69c      	b.n	800c9d4 <_dtoa_r+0x6c4>
 800cc9a:	2600      	movs	r6, #0
 800cc9c:	4637      	mov	r7, r6
 800cc9e:	e7e1      	b.n	800cc64 <_dtoa_r+0x954>
 800cca0:	46bb      	mov	fp, r7
 800cca2:	4637      	mov	r7, r6
 800cca4:	e599      	b.n	800c7da <_dtoa_r+0x4ca>
 800cca6:	bf00      	nop
 800cca8:	40240000 	.word	0x40240000
 800ccac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	f000 80c8 	beq.w	800ce44 <_dtoa_r+0xb34>
 800ccb4:	9b04      	ldr	r3, [sp, #16]
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	2d00      	cmp	r5, #0
 800ccba:	dd05      	ble.n	800ccc8 <_dtoa_r+0x9b8>
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	462a      	mov	r2, r5
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f000 fbbd 	bl	800d440 <__lshift>
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	f1b8 0f00 	cmp.w	r8, #0
 800cccc:	d05b      	beq.n	800cd86 <_dtoa_r+0xa76>
 800ccce:	6879      	ldr	r1, [r7, #4]
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f000 f95b 	bl	800cf8c <_Balloc>
 800ccd6:	4605      	mov	r5, r0
 800ccd8:	b928      	cbnz	r0, 800cce6 <_dtoa_r+0x9d6>
 800ccda:	4b83      	ldr	r3, [pc, #524]	; (800cee8 <_dtoa_r+0xbd8>)
 800ccdc:	4602      	mov	r2, r0
 800ccde:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cce2:	f7ff bb2e 	b.w	800c342 <_dtoa_r+0x32>
 800cce6:	693a      	ldr	r2, [r7, #16]
 800cce8:	3202      	adds	r2, #2
 800ccea:	0092      	lsls	r2, r2, #2
 800ccec:	f107 010c 	add.w	r1, r7, #12
 800ccf0:	300c      	adds	r0, #12
 800ccf2:	f002 f89b 	bl	800ee2c <memcpy>
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 fba0 	bl	800d440 <__lshift>
 800cd00:	9b00      	ldr	r3, [sp, #0]
 800cd02:	3301      	adds	r3, #1
 800cd04:	9304      	str	r3, [sp, #16]
 800cd06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	9308      	str	r3, [sp, #32]
 800cd0e:	9b02      	ldr	r3, [sp, #8]
 800cd10:	f003 0301 	and.w	r3, r3, #1
 800cd14:	46b8      	mov	r8, r7
 800cd16:	9306      	str	r3, [sp, #24]
 800cd18:	4607      	mov	r7, r0
 800cd1a:	9b04      	ldr	r3, [sp, #16]
 800cd1c:	4631      	mov	r1, r6
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	4650      	mov	r0, sl
 800cd22:	9301      	str	r3, [sp, #4]
 800cd24:	f7ff fa6c 	bl	800c200 <quorem>
 800cd28:	4641      	mov	r1, r8
 800cd2a:	9002      	str	r0, [sp, #8]
 800cd2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cd30:	4650      	mov	r0, sl
 800cd32:	f000 fbf1 	bl	800d518 <__mcmp>
 800cd36:	463a      	mov	r2, r7
 800cd38:	9005      	str	r0, [sp, #20]
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	f000 fc07 	bl	800d550 <__mdiff>
 800cd42:	68c2      	ldr	r2, [r0, #12]
 800cd44:	4605      	mov	r5, r0
 800cd46:	bb02      	cbnz	r2, 800cd8a <_dtoa_r+0xa7a>
 800cd48:	4601      	mov	r1, r0
 800cd4a:	4650      	mov	r0, sl
 800cd4c:	f000 fbe4 	bl	800d518 <__mcmp>
 800cd50:	4602      	mov	r2, r0
 800cd52:	4629      	mov	r1, r5
 800cd54:	4620      	mov	r0, r4
 800cd56:	9209      	str	r2, [sp, #36]	; 0x24
 800cd58:	f000 f958 	bl	800d00c <_Bfree>
 800cd5c:	9b07      	ldr	r3, [sp, #28]
 800cd5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd60:	9d04      	ldr	r5, [sp, #16]
 800cd62:	ea43 0102 	orr.w	r1, r3, r2
 800cd66:	9b06      	ldr	r3, [sp, #24]
 800cd68:	4319      	orrs	r1, r3
 800cd6a:	d110      	bne.n	800cd8e <_dtoa_r+0xa7e>
 800cd6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd70:	d029      	beq.n	800cdc6 <_dtoa_r+0xab6>
 800cd72:	9b05      	ldr	r3, [sp, #20]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	dd02      	ble.n	800cd7e <_dtoa_r+0xa6e>
 800cd78:	9b02      	ldr	r3, [sp, #8]
 800cd7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cd7e:	9b01      	ldr	r3, [sp, #4]
 800cd80:	f883 9000 	strb.w	r9, [r3]
 800cd84:	e774      	b.n	800cc70 <_dtoa_r+0x960>
 800cd86:	4638      	mov	r0, r7
 800cd88:	e7ba      	b.n	800cd00 <_dtoa_r+0x9f0>
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	e7e1      	b.n	800cd52 <_dtoa_r+0xa42>
 800cd8e:	9b05      	ldr	r3, [sp, #20]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	db04      	blt.n	800cd9e <_dtoa_r+0xa8e>
 800cd94:	9907      	ldr	r1, [sp, #28]
 800cd96:	430b      	orrs	r3, r1
 800cd98:	9906      	ldr	r1, [sp, #24]
 800cd9a:	430b      	orrs	r3, r1
 800cd9c:	d120      	bne.n	800cde0 <_dtoa_r+0xad0>
 800cd9e:	2a00      	cmp	r2, #0
 800cda0:	dded      	ble.n	800cd7e <_dtoa_r+0xa6e>
 800cda2:	4651      	mov	r1, sl
 800cda4:	2201      	movs	r2, #1
 800cda6:	4620      	mov	r0, r4
 800cda8:	f000 fb4a 	bl	800d440 <__lshift>
 800cdac:	4631      	mov	r1, r6
 800cdae:	4682      	mov	sl, r0
 800cdb0:	f000 fbb2 	bl	800d518 <__mcmp>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	dc03      	bgt.n	800cdc0 <_dtoa_r+0xab0>
 800cdb8:	d1e1      	bne.n	800cd7e <_dtoa_r+0xa6e>
 800cdba:	f019 0f01 	tst.w	r9, #1
 800cdbe:	d0de      	beq.n	800cd7e <_dtoa_r+0xa6e>
 800cdc0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cdc4:	d1d8      	bne.n	800cd78 <_dtoa_r+0xa68>
 800cdc6:	9a01      	ldr	r2, [sp, #4]
 800cdc8:	2339      	movs	r3, #57	; 0x39
 800cdca:	7013      	strb	r3, [r2, #0]
 800cdcc:	462b      	mov	r3, r5
 800cdce:	461d      	mov	r5, r3
 800cdd0:	3b01      	subs	r3, #1
 800cdd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cdd6:	2a39      	cmp	r2, #57	; 0x39
 800cdd8:	d06c      	beq.n	800ceb4 <_dtoa_r+0xba4>
 800cdda:	3201      	adds	r2, #1
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	e747      	b.n	800cc70 <_dtoa_r+0x960>
 800cde0:	2a00      	cmp	r2, #0
 800cde2:	dd07      	ble.n	800cdf4 <_dtoa_r+0xae4>
 800cde4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cde8:	d0ed      	beq.n	800cdc6 <_dtoa_r+0xab6>
 800cdea:	9a01      	ldr	r2, [sp, #4]
 800cdec:	f109 0301 	add.w	r3, r9, #1
 800cdf0:	7013      	strb	r3, [r2, #0]
 800cdf2:	e73d      	b.n	800cc70 <_dtoa_r+0x960>
 800cdf4:	9b04      	ldr	r3, [sp, #16]
 800cdf6:	9a08      	ldr	r2, [sp, #32]
 800cdf8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d043      	beq.n	800ce88 <_dtoa_r+0xb78>
 800ce00:	4651      	mov	r1, sl
 800ce02:	2300      	movs	r3, #0
 800ce04:	220a      	movs	r2, #10
 800ce06:	4620      	mov	r0, r4
 800ce08:	f000 f922 	bl	800d050 <__multadd>
 800ce0c:	45b8      	cmp	r8, r7
 800ce0e:	4682      	mov	sl, r0
 800ce10:	f04f 0300 	mov.w	r3, #0
 800ce14:	f04f 020a 	mov.w	r2, #10
 800ce18:	4641      	mov	r1, r8
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	d107      	bne.n	800ce2e <_dtoa_r+0xb1e>
 800ce1e:	f000 f917 	bl	800d050 <__multadd>
 800ce22:	4680      	mov	r8, r0
 800ce24:	4607      	mov	r7, r0
 800ce26:	9b04      	ldr	r3, [sp, #16]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	e775      	b.n	800cd1a <_dtoa_r+0xa0a>
 800ce2e:	f000 f90f 	bl	800d050 <__multadd>
 800ce32:	4639      	mov	r1, r7
 800ce34:	4680      	mov	r8, r0
 800ce36:	2300      	movs	r3, #0
 800ce38:	220a      	movs	r2, #10
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f000 f908 	bl	800d050 <__multadd>
 800ce40:	4607      	mov	r7, r0
 800ce42:	e7f0      	b.n	800ce26 <_dtoa_r+0xb16>
 800ce44:	9b04      	ldr	r3, [sp, #16]
 800ce46:	9301      	str	r3, [sp, #4]
 800ce48:	9d00      	ldr	r5, [sp, #0]
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4650      	mov	r0, sl
 800ce4e:	f7ff f9d7 	bl	800c200 <quorem>
 800ce52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce56:	9b00      	ldr	r3, [sp, #0]
 800ce58:	f805 9b01 	strb.w	r9, [r5], #1
 800ce5c:	1aea      	subs	r2, r5, r3
 800ce5e:	9b01      	ldr	r3, [sp, #4]
 800ce60:	4293      	cmp	r3, r2
 800ce62:	dd07      	ble.n	800ce74 <_dtoa_r+0xb64>
 800ce64:	4651      	mov	r1, sl
 800ce66:	2300      	movs	r3, #0
 800ce68:	220a      	movs	r2, #10
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f000 f8f0 	bl	800d050 <__multadd>
 800ce70:	4682      	mov	sl, r0
 800ce72:	e7ea      	b.n	800ce4a <_dtoa_r+0xb3a>
 800ce74:	9b01      	ldr	r3, [sp, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	bfc8      	it	gt
 800ce7a:	461d      	movgt	r5, r3
 800ce7c:	9b00      	ldr	r3, [sp, #0]
 800ce7e:	bfd8      	it	le
 800ce80:	2501      	movle	r5, #1
 800ce82:	441d      	add	r5, r3
 800ce84:	f04f 0800 	mov.w	r8, #0
 800ce88:	4651      	mov	r1, sl
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f000 fad7 	bl	800d440 <__lshift>
 800ce92:	4631      	mov	r1, r6
 800ce94:	4682      	mov	sl, r0
 800ce96:	f000 fb3f 	bl	800d518 <__mcmp>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	dc96      	bgt.n	800cdcc <_dtoa_r+0xabc>
 800ce9e:	d102      	bne.n	800cea6 <_dtoa_r+0xb96>
 800cea0:	f019 0f01 	tst.w	r9, #1
 800cea4:	d192      	bne.n	800cdcc <_dtoa_r+0xabc>
 800cea6:	462b      	mov	r3, r5
 800cea8:	461d      	mov	r5, r3
 800ceaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ceae:	2a30      	cmp	r2, #48	; 0x30
 800ceb0:	d0fa      	beq.n	800cea8 <_dtoa_r+0xb98>
 800ceb2:	e6dd      	b.n	800cc70 <_dtoa_r+0x960>
 800ceb4:	9a00      	ldr	r2, [sp, #0]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d189      	bne.n	800cdce <_dtoa_r+0xabe>
 800ceba:	f10b 0b01 	add.w	fp, fp, #1
 800cebe:	2331      	movs	r3, #49	; 0x31
 800cec0:	e796      	b.n	800cdf0 <_dtoa_r+0xae0>
 800cec2:	4b0a      	ldr	r3, [pc, #40]	; (800ceec <_dtoa_r+0xbdc>)
 800cec4:	f7ff ba99 	b.w	800c3fa <_dtoa_r+0xea>
 800cec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f47f aa6d 	bne.w	800c3aa <_dtoa_r+0x9a>
 800ced0:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <_dtoa_r+0xbe0>)
 800ced2:	f7ff ba92 	b.w	800c3fa <_dtoa_r+0xea>
 800ced6:	9b01      	ldr	r3, [sp, #4]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	dcb5      	bgt.n	800ce48 <_dtoa_r+0xb38>
 800cedc:	9b07      	ldr	r3, [sp, #28]
 800cede:	2b02      	cmp	r3, #2
 800cee0:	f73f aeb1 	bgt.w	800cc46 <_dtoa_r+0x936>
 800cee4:	e7b0      	b.n	800ce48 <_dtoa_r+0xb38>
 800cee6:	bf00      	nop
 800cee8:	080100f5 	.word	0x080100f5
 800ceec:	08010050 	.word	0x08010050
 800cef0:	08010079 	.word	0x08010079

0800cef4 <_free_r>:
 800cef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cef6:	2900      	cmp	r1, #0
 800cef8:	d044      	beq.n	800cf84 <_free_r+0x90>
 800cefa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cefe:	9001      	str	r0, [sp, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f1a1 0404 	sub.w	r4, r1, #4
 800cf06:	bfb8      	it	lt
 800cf08:	18e4      	addlt	r4, r4, r3
 800cf0a:	f7fe f929 	bl	800b160 <__malloc_lock>
 800cf0e:	4a1e      	ldr	r2, [pc, #120]	; (800cf88 <_free_r+0x94>)
 800cf10:	9801      	ldr	r0, [sp, #4]
 800cf12:	6813      	ldr	r3, [r2, #0]
 800cf14:	b933      	cbnz	r3, 800cf24 <_free_r+0x30>
 800cf16:	6063      	str	r3, [r4, #4]
 800cf18:	6014      	str	r4, [r2, #0]
 800cf1a:	b003      	add	sp, #12
 800cf1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf20:	f7fe b924 	b.w	800b16c <__malloc_unlock>
 800cf24:	42a3      	cmp	r3, r4
 800cf26:	d908      	bls.n	800cf3a <_free_r+0x46>
 800cf28:	6825      	ldr	r5, [r4, #0]
 800cf2a:	1961      	adds	r1, r4, r5
 800cf2c:	428b      	cmp	r3, r1
 800cf2e:	bf01      	itttt	eq
 800cf30:	6819      	ldreq	r1, [r3, #0]
 800cf32:	685b      	ldreq	r3, [r3, #4]
 800cf34:	1949      	addeq	r1, r1, r5
 800cf36:	6021      	streq	r1, [r4, #0]
 800cf38:	e7ed      	b.n	800cf16 <_free_r+0x22>
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	b10b      	cbz	r3, 800cf44 <_free_r+0x50>
 800cf40:	42a3      	cmp	r3, r4
 800cf42:	d9fa      	bls.n	800cf3a <_free_r+0x46>
 800cf44:	6811      	ldr	r1, [r2, #0]
 800cf46:	1855      	adds	r5, r2, r1
 800cf48:	42a5      	cmp	r5, r4
 800cf4a:	d10b      	bne.n	800cf64 <_free_r+0x70>
 800cf4c:	6824      	ldr	r4, [r4, #0]
 800cf4e:	4421      	add	r1, r4
 800cf50:	1854      	adds	r4, r2, r1
 800cf52:	42a3      	cmp	r3, r4
 800cf54:	6011      	str	r1, [r2, #0]
 800cf56:	d1e0      	bne.n	800cf1a <_free_r+0x26>
 800cf58:	681c      	ldr	r4, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	6053      	str	r3, [r2, #4]
 800cf5e:	440c      	add	r4, r1
 800cf60:	6014      	str	r4, [r2, #0]
 800cf62:	e7da      	b.n	800cf1a <_free_r+0x26>
 800cf64:	d902      	bls.n	800cf6c <_free_r+0x78>
 800cf66:	230c      	movs	r3, #12
 800cf68:	6003      	str	r3, [r0, #0]
 800cf6a:	e7d6      	b.n	800cf1a <_free_r+0x26>
 800cf6c:	6825      	ldr	r5, [r4, #0]
 800cf6e:	1961      	adds	r1, r4, r5
 800cf70:	428b      	cmp	r3, r1
 800cf72:	bf04      	itt	eq
 800cf74:	6819      	ldreq	r1, [r3, #0]
 800cf76:	685b      	ldreq	r3, [r3, #4]
 800cf78:	6063      	str	r3, [r4, #4]
 800cf7a:	bf04      	itt	eq
 800cf7c:	1949      	addeq	r1, r1, r5
 800cf7e:	6021      	streq	r1, [r4, #0]
 800cf80:	6054      	str	r4, [r2, #4]
 800cf82:	e7ca      	b.n	800cf1a <_free_r+0x26>
 800cf84:	b003      	add	sp, #12
 800cf86:	bd30      	pop	{r4, r5, pc}
 800cf88:	20002a74 	.word	0x20002a74

0800cf8c <_Balloc>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	69c6      	ldr	r6, [r0, #28]
 800cf90:	4604      	mov	r4, r0
 800cf92:	460d      	mov	r5, r1
 800cf94:	b976      	cbnz	r6, 800cfb4 <_Balloc+0x28>
 800cf96:	2010      	movs	r0, #16
 800cf98:	f7fe f832 	bl	800b000 <malloc>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	61e0      	str	r0, [r4, #28]
 800cfa0:	b920      	cbnz	r0, 800cfac <_Balloc+0x20>
 800cfa2:	4b18      	ldr	r3, [pc, #96]	; (800d004 <_Balloc+0x78>)
 800cfa4:	4818      	ldr	r0, [pc, #96]	; (800d008 <_Balloc+0x7c>)
 800cfa6:	216b      	movs	r1, #107	; 0x6b
 800cfa8:	f001 ff56 	bl	800ee58 <__assert_func>
 800cfac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfb0:	6006      	str	r6, [r0, #0]
 800cfb2:	60c6      	str	r6, [r0, #12]
 800cfb4:	69e6      	ldr	r6, [r4, #28]
 800cfb6:	68f3      	ldr	r3, [r6, #12]
 800cfb8:	b183      	cbz	r3, 800cfdc <_Balloc+0x50>
 800cfba:	69e3      	ldr	r3, [r4, #28]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfc2:	b9b8      	cbnz	r0, 800cff4 <_Balloc+0x68>
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	fa01 f605 	lsl.w	r6, r1, r5
 800cfca:	1d72      	adds	r2, r6, #5
 800cfcc:	0092      	lsls	r2, r2, #2
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f001 ff60 	bl	800ee94 <_calloc_r>
 800cfd4:	b160      	cbz	r0, 800cff0 <_Balloc+0x64>
 800cfd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfda:	e00e      	b.n	800cffa <_Balloc+0x6e>
 800cfdc:	2221      	movs	r2, #33	; 0x21
 800cfde:	2104      	movs	r1, #4
 800cfe0:	4620      	mov	r0, r4
 800cfe2:	f001 ff57 	bl	800ee94 <_calloc_r>
 800cfe6:	69e3      	ldr	r3, [r4, #28]
 800cfe8:	60f0      	str	r0, [r6, #12]
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e4      	bne.n	800cfba <_Balloc+0x2e>
 800cff0:	2000      	movs	r0, #0
 800cff2:	bd70      	pop	{r4, r5, r6, pc}
 800cff4:	6802      	ldr	r2, [r0, #0]
 800cff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cffa:	2300      	movs	r3, #0
 800cffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d000:	e7f7      	b.n	800cff2 <_Balloc+0x66>
 800d002:	bf00      	nop
 800d004:	08010086 	.word	0x08010086
 800d008:	08010106 	.word	0x08010106

0800d00c <_Bfree>:
 800d00c:	b570      	push	{r4, r5, r6, lr}
 800d00e:	69c6      	ldr	r6, [r0, #28]
 800d010:	4605      	mov	r5, r0
 800d012:	460c      	mov	r4, r1
 800d014:	b976      	cbnz	r6, 800d034 <_Bfree+0x28>
 800d016:	2010      	movs	r0, #16
 800d018:	f7fd fff2 	bl	800b000 <malloc>
 800d01c:	4602      	mov	r2, r0
 800d01e:	61e8      	str	r0, [r5, #28]
 800d020:	b920      	cbnz	r0, 800d02c <_Bfree+0x20>
 800d022:	4b09      	ldr	r3, [pc, #36]	; (800d048 <_Bfree+0x3c>)
 800d024:	4809      	ldr	r0, [pc, #36]	; (800d04c <_Bfree+0x40>)
 800d026:	218f      	movs	r1, #143	; 0x8f
 800d028:	f001 ff16 	bl	800ee58 <__assert_func>
 800d02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d030:	6006      	str	r6, [r0, #0]
 800d032:	60c6      	str	r6, [r0, #12]
 800d034:	b13c      	cbz	r4, 800d046 <_Bfree+0x3a>
 800d036:	69eb      	ldr	r3, [r5, #28]
 800d038:	6862      	ldr	r2, [r4, #4]
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d040:	6021      	str	r1, [r4, #0]
 800d042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d046:	bd70      	pop	{r4, r5, r6, pc}
 800d048:	08010086 	.word	0x08010086
 800d04c:	08010106 	.word	0x08010106

0800d050 <__multadd>:
 800d050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d054:	690d      	ldr	r5, [r1, #16]
 800d056:	4607      	mov	r7, r0
 800d058:	460c      	mov	r4, r1
 800d05a:	461e      	mov	r6, r3
 800d05c:	f101 0c14 	add.w	ip, r1, #20
 800d060:	2000      	movs	r0, #0
 800d062:	f8dc 3000 	ldr.w	r3, [ip]
 800d066:	b299      	uxth	r1, r3
 800d068:	fb02 6101 	mla	r1, r2, r1, r6
 800d06c:	0c1e      	lsrs	r6, r3, #16
 800d06e:	0c0b      	lsrs	r3, r1, #16
 800d070:	fb02 3306 	mla	r3, r2, r6, r3
 800d074:	b289      	uxth	r1, r1
 800d076:	3001      	adds	r0, #1
 800d078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d07c:	4285      	cmp	r5, r0
 800d07e:	f84c 1b04 	str.w	r1, [ip], #4
 800d082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d086:	dcec      	bgt.n	800d062 <__multadd+0x12>
 800d088:	b30e      	cbz	r6, 800d0ce <__multadd+0x7e>
 800d08a:	68a3      	ldr	r3, [r4, #8]
 800d08c:	42ab      	cmp	r3, r5
 800d08e:	dc19      	bgt.n	800d0c4 <__multadd+0x74>
 800d090:	6861      	ldr	r1, [r4, #4]
 800d092:	4638      	mov	r0, r7
 800d094:	3101      	adds	r1, #1
 800d096:	f7ff ff79 	bl	800cf8c <_Balloc>
 800d09a:	4680      	mov	r8, r0
 800d09c:	b928      	cbnz	r0, 800d0aa <__multadd+0x5a>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	4b0c      	ldr	r3, [pc, #48]	; (800d0d4 <__multadd+0x84>)
 800d0a2:	480d      	ldr	r0, [pc, #52]	; (800d0d8 <__multadd+0x88>)
 800d0a4:	21ba      	movs	r1, #186	; 0xba
 800d0a6:	f001 fed7 	bl	800ee58 <__assert_func>
 800d0aa:	6922      	ldr	r2, [r4, #16]
 800d0ac:	3202      	adds	r2, #2
 800d0ae:	f104 010c 	add.w	r1, r4, #12
 800d0b2:	0092      	lsls	r2, r2, #2
 800d0b4:	300c      	adds	r0, #12
 800d0b6:	f001 feb9 	bl	800ee2c <memcpy>
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	4638      	mov	r0, r7
 800d0be:	f7ff ffa5 	bl	800d00c <_Bfree>
 800d0c2:	4644      	mov	r4, r8
 800d0c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0c8:	3501      	adds	r5, #1
 800d0ca:	615e      	str	r6, [r3, #20]
 800d0cc:	6125      	str	r5, [r4, #16]
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d4:	080100f5 	.word	0x080100f5
 800d0d8:	08010106 	.word	0x08010106

0800d0dc <__s2b>:
 800d0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e0:	460c      	mov	r4, r1
 800d0e2:	4615      	mov	r5, r2
 800d0e4:	461f      	mov	r7, r3
 800d0e6:	2209      	movs	r2, #9
 800d0e8:	3308      	adds	r3, #8
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	db09      	blt.n	800d10c <__s2b+0x30>
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	f7ff ff47 	bl	800cf8c <_Balloc>
 800d0fe:	b940      	cbnz	r0, 800d112 <__s2b+0x36>
 800d100:	4602      	mov	r2, r0
 800d102:	4b19      	ldr	r3, [pc, #100]	; (800d168 <__s2b+0x8c>)
 800d104:	4819      	ldr	r0, [pc, #100]	; (800d16c <__s2b+0x90>)
 800d106:	21d3      	movs	r1, #211	; 0xd3
 800d108:	f001 fea6 	bl	800ee58 <__assert_func>
 800d10c:	0052      	lsls	r2, r2, #1
 800d10e:	3101      	adds	r1, #1
 800d110:	e7f0      	b.n	800d0f4 <__s2b+0x18>
 800d112:	9b08      	ldr	r3, [sp, #32]
 800d114:	6143      	str	r3, [r0, #20]
 800d116:	2d09      	cmp	r5, #9
 800d118:	f04f 0301 	mov.w	r3, #1
 800d11c:	6103      	str	r3, [r0, #16]
 800d11e:	dd16      	ble.n	800d14e <__s2b+0x72>
 800d120:	f104 0909 	add.w	r9, r4, #9
 800d124:	46c8      	mov	r8, r9
 800d126:	442c      	add	r4, r5
 800d128:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d12c:	4601      	mov	r1, r0
 800d12e:	3b30      	subs	r3, #48	; 0x30
 800d130:	220a      	movs	r2, #10
 800d132:	4630      	mov	r0, r6
 800d134:	f7ff ff8c 	bl	800d050 <__multadd>
 800d138:	45a0      	cmp	r8, r4
 800d13a:	d1f5      	bne.n	800d128 <__s2b+0x4c>
 800d13c:	f1a5 0408 	sub.w	r4, r5, #8
 800d140:	444c      	add	r4, r9
 800d142:	1b2d      	subs	r5, r5, r4
 800d144:	1963      	adds	r3, r4, r5
 800d146:	42bb      	cmp	r3, r7
 800d148:	db04      	blt.n	800d154 <__s2b+0x78>
 800d14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d14e:	340a      	adds	r4, #10
 800d150:	2509      	movs	r5, #9
 800d152:	e7f6      	b.n	800d142 <__s2b+0x66>
 800d154:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d158:	4601      	mov	r1, r0
 800d15a:	3b30      	subs	r3, #48	; 0x30
 800d15c:	220a      	movs	r2, #10
 800d15e:	4630      	mov	r0, r6
 800d160:	f7ff ff76 	bl	800d050 <__multadd>
 800d164:	e7ee      	b.n	800d144 <__s2b+0x68>
 800d166:	bf00      	nop
 800d168:	080100f5 	.word	0x080100f5
 800d16c:	08010106 	.word	0x08010106

0800d170 <__hi0bits>:
 800d170:	0c03      	lsrs	r3, r0, #16
 800d172:	041b      	lsls	r3, r3, #16
 800d174:	b9d3      	cbnz	r3, 800d1ac <__hi0bits+0x3c>
 800d176:	0400      	lsls	r0, r0, #16
 800d178:	2310      	movs	r3, #16
 800d17a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d17e:	bf04      	itt	eq
 800d180:	0200      	lsleq	r0, r0, #8
 800d182:	3308      	addeq	r3, #8
 800d184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d188:	bf04      	itt	eq
 800d18a:	0100      	lsleq	r0, r0, #4
 800d18c:	3304      	addeq	r3, #4
 800d18e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d192:	bf04      	itt	eq
 800d194:	0080      	lsleq	r0, r0, #2
 800d196:	3302      	addeq	r3, #2
 800d198:	2800      	cmp	r0, #0
 800d19a:	db05      	blt.n	800d1a8 <__hi0bits+0x38>
 800d19c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1a0:	f103 0301 	add.w	r3, r3, #1
 800d1a4:	bf08      	it	eq
 800d1a6:	2320      	moveq	r3, #32
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	4770      	bx	lr
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	e7e4      	b.n	800d17a <__hi0bits+0xa>

0800d1b0 <__lo0bits>:
 800d1b0:	6803      	ldr	r3, [r0, #0]
 800d1b2:	f013 0207 	ands.w	r2, r3, #7
 800d1b6:	d00c      	beq.n	800d1d2 <__lo0bits+0x22>
 800d1b8:	07d9      	lsls	r1, r3, #31
 800d1ba:	d422      	bmi.n	800d202 <__lo0bits+0x52>
 800d1bc:	079a      	lsls	r2, r3, #30
 800d1be:	bf49      	itett	mi
 800d1c0:	085b      	lsrmi	r3, r3, #1
 800d1c2:	089b      	lsrpl	r3, r3, #2
 800d1c4:	6003      	strmi	r3, [r0, #0]
 800d1c6:	2201      	movmi	r2, #1
 800d1c8:	bf5c      	itt	pl
 800d1ca:	6003      	strpl	r3, [r0, #0]
 800d1cc:	2202      	movpl	r2, #2
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	4770      	bx	lr
 800d1d2:	b299      	uxth	r1, r3
 800d1d4:	b909      	cbnz	r1, 800d1da <__lo0bits+0x2a>
 800d1d6:	0c1b      	lsrs	r3, r3, #16
 800d1d8:	2210      	movs	r2, #16
 800d1da:	b2d9      	uxtb	r1, r3
 800d1dc:	b909      	cbnz	r1, 800d1e2 <__lo0bits+0x32>
 800d1de:	3208      	adds	r2, #8
 800d1e0:	0a1b      	lsrs	r3, r3, #8
 800d1e2:	0719      	lsls	r1, r3, #28
 800d1e4:	bf04      	itt	eq
 800d1e6:	091b      	lsreq	r3, r3, #4
 800d1e8:	3204      	addeq	r2, #4
 800d1ea:	0799      	lsls	r1, r3, #30
 800d1ec:	bf04      	itt	eq
 800d1ee:	089b      	lsreq	r3, r3, #2
 800d1f0:	3202      	addeq	r2, #2
 800d1f2:	07d9      	lsls	r1, r3, #31
 800d1f4:	d403      	bmi.n	800d1fe <__lo0bits+0x4e>
 800d1f6:	085b      	lsrs	r3, r3, #1
 800d1f8:	f102 0201 	add.w	r2, r2, #1
 800d1fc:	d003      	beq.n	800d206 <__lo0bits+0x56>
 800d1fe:	6003      	str	r3, [r0, #0]
 800d200:	e7e5      	b.n	800d1ce <__lo0bits+0x1e>
 800d202:	2200      	movs	r2, #0
 800d204:	e7e3      	b.n	800d1ce <__lo0bits+0x1e>
 800d206:	2220      	movs	r2, #32
 800d208:	e7e1      	b.n	800d1ce <__lo0bits+0x1e>
	...

0800d20c <__i2b>:
 800d20c:	b510      	push	{r4, lr}
 800d20e:	460c      	mov	r4, r1
 800d210:	2101      	movs	r1, #1
 800d212:	f7ff febb 	bl	800cf8c <_Balloc>
 800d216:	4602      	mov	r2, r0
 800d218:	b928      	cbnz	r0, 800d226 <__i2b+0x1a>
 800d21a:	4b05      	ldr	r3, [pc, #20]	; (800d230 <__i2b+0x24>)
 800d21c:	4805      	ldr	r0, [pc, #20]	; (800d234 <__i2b+0x28>)
 800d21e:	f240 1145 	movw	r1, #325	; 0x145
 800d222:	f001 fe19 	bl	800ee58 <__assert_func>
 800d226:	2301      	movs	r3, #1
 800d228:	6144      	str	r4, [r0, #20]
 800d22a:	6103      	str	r3, [r0, #16]
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	bf00      	nop
 800d230:	080100f5 	.word	0x080100f5
 800d234:	08010106 	.word	0x08010106

0800d238 <__multiply>:
 800d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23c:	4691      	mov	r9, r2
 800d23e:	690a      	ldr	r2, [r1, #16]
 800d240:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d244:	429a      	cmp	r2, r3
 800d246:	bfb8      	it	lt
 800d248:	460b      	movlt	r3, r1
 800d24a:	460c      	mov	r4, r1
 800d24c:	bfbc      	itt	lt
 800d24e:	464c      	movlt	r4, r9
 800d250:	4699      	movlt	r9, r3
 800d252:	6927      	ldr	r7, [r4, #16]
 800d254:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d258:	68a3      	ldr	r3, [r4, #8]
 800d25a:	6861      	ldr	r1, [r4, #4]
 800d25c:	eb07 060a 	add.w	r6, r7, sl
 800d260:	42b3      	cmp	r3, r6
 800d262:	b085      	sub	sp, #20
 800d264:	bfb8      	it	lt
 800d266:	3101      	addlt	r1, #1
 800d268:	f7ff fe90 	bl	800cf8c <_Balloc>
 800d26c:	b930      	cbnz	r0, 800d27c <__multiply+0x44>
 800d26e:	4602      	mov	r2, r0
 800d270:	4b44      	ldr	r3, [pc, #272]	; (800d384 <__multiply+0x14c>)
 800d272:	4845      	ldr	r0, [pc, #276]	; (800d388 <__multiply+0x150>)
 800d274:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d278:	f001 fdee 	bl	800ee58 <__assert_func>
 800d27c:	f100 0514 	add.w	r5, r0, #20
 800d280:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d284:	462b      	mov	r3, r5
 800d286:	2200      	movs	r2, #0
 800d288:	4543      	cmp	r3, r8
 800d28a:	d321      	bcc.n	800d2d0 <__multiply+0x98>
 800d28c:	f104 0314 	add.w	r3, r4, #20
 800d290:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d294:	f109 0314 	add.w	r3, r9, #20
 800d298:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d29c:	9202      	str	r2, [sp, #8]
 800d29e:	1b3a      	subs	r2, r7, r4
 800d2a0:	3a15      	subs	r2, #21
 800d2a2:	f022 0203 	bic.w	r2, r2, #3
 800d2a6:	3204      	adds	r2, #4
 800d2a8:	f104 0115 	add.w	r1, r4, #21
 800d2ac:	428f      	cmp	r7, r1
 800d2ae:	bf38      	it	cc
 800d2b0:	2204      	movcc	r2, #4
 800d2b2:	9201      	str	r2, [sp, #4]
 800d2b4:	9a02      	ldr	r2, [sp, #8]
 800d2b6:	9303      	str	r3, [sp, #12]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d80c      	bhi.n	800d2d6 <__multiply+0x9e>
 800d2bc:	2e00      	cmp	r6, #0
 800d2be:	dd03      	ble.n	800d2c8 <__multiply+0x90>
 800d2c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d05b      	beq.n	800d380 <__multiply+0x148>
 800d2c8:	6106      	str	r6, [r0, #16]
 800d2ca:	b005      	add	sp, #20
 800d2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d0:	f843 2b04 	str.w	r2, [r3], #4
 800d2d4:	e7d8      	b.n	800d288 <__multiply+0x50>
 800d2d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2da:	f1ba 0f00 	cmp.w	sl, #0
 800d2de:	d024      	beq.n	800d32a <__multiply+0xf2>
 800d2e0:	f104 0e14 	add.w	lr, r4, #20
 800d2e4:	46a9      	mov	r9, r5
 800d2e6:	f04f 0c00 	mov.w	ip, #0
 800d2ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2ee:	f8d9 1000 	ldr.w	r1, [r9]
 800d2f2:	fa1f fb82 	uxth.w	fp, r2
 800d2f6:	b289      	uxth	r1, r1
 800d2f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d2fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d300:	f8d9 2000 	ldr.w	r2, [r9]
 800d304:	4461      	add	r1, ip
 800d306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d30a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d30e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d312:	b289      	uxth	r1, r1
 800d314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d318:	4577      	cmp	r7, lr
 800d31a:	f849 1b04 	str.w	r1, [r9], #4
 800d31e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d322:	d8e2      	bhi.n	800d2ea <__multiply+0xb2>
 800d324:	9a01      	ldr	r2, [sp, #4]
 800d326:	f845 c002 	str.w	ip, [r5, r2]
 800d32a:	9a03      	ldr	r2, [sp, #12]
 800d32c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d330:	3304      	adds	r3, #4
 800d332:	f1b9 0f00 	cmp.w	r9, #0
 800d336:	d021      	beq.n	800d37c <__multiply+0x144>
 800d338:	6829      	ldr	r1, [r5, #0]
 800d33a:	f104 0c14 	add.w	ip, r4, #20
 800d33e:	46ae      	mov	lr, r5
 800d340:	f04f 0a00 	mov.w	sl, #0
 800d344:	f8bc b000 	ldrh.w	fp, [ip]
 800d348:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d34c:	fb09 220b 	mla	r2, r9, fp, r2
 800d350:	4452      	add	r2, sl
 800d352:	b289      	uxth	r1, r1
 800d354:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d358:	f84e 1b04 	str.w	r1, [lr], #4
 800d35c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d360:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d364:	f8be 1000 	ldrh.w	r1, [lr]
 800d368:	fb09 110a 	mla	r1, r9, sl, r1
 800d36c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d370:	4567      	cmp	r7, ip
 800d372:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d376:	d8e5      	bhi.n	800d344 <__multiply+0x10c>
 800d378:	9a01      	ldr	r2, [sp, #4]
 800d37a:	50a9      	str	r1, [r5, r2]
 800d37c:	3504      	adds	r5, #4
 800d37e:	e799      	b.n	800d2b4 <__multiply+0x7c>
 800d380:	3e01      	subs	r6, #1
 800d382:	e79b      	b.n	800d2bc <__multiply+0x84>
 800d384:	080100f5 	.word	0x080100f5
 800d388:	08010106 	.word	0x08010106

0800d38c <__pow5mult>:
 800d38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d390:	4615      	mov	r5, r2
 800d392:	f012 0203 	ands.w	r2, r2, #3
 800d396:	4606      	mov	r6, r0
 800d398:	460f      	mov	r7, r1
 800d39a:	d007      	beq.n	800d3ac <__pow5mult+0x20>
 800d39c:	4c25      	ldr	r4, [pc, #148]	; (800d434 <__pow5mult+0xa8>)
 800d39e:	3a01      	subs	r2, #1
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3a6:	f7ff fe53 	bl	800d050 <__multadd>
 800d3aa:	4607      	mov	r7, r0
 800d3ac:	10ad      	asrs	r5, r5, #2
 800d3ae:	d03d      	beq.n	800d42c <__pow5mult+0xa0>
 800d3b0:	69f4      	ldr	r4, [r6, #28]
 800d3b2:	b97c      	cbnz	r4, 800d3d4 <__pow5mult+0x48>
 800d3b4:	2010      	movs	r0, #16
 800d3b6:	f7fd fe23 	bl	800b000 <malloc>
 800d3ba:	4602      	mov	r2, r0
 800d3bc:	61f0      	str	r0, [r6, #28]
 800d3be:	b928      	cbnz	r0, 800d3cc <__pow5mult+0x40>
 800d3c0:	4b1d      	ldr	r3, [pc, #116]	; (800d438 <__pow5mult+0xac>)
 800d3c2:	481e      	ldr	r0, [pc, #120]	; (800d43c <__pow5mult+0xb0>)
 800d3c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d3c8:	f001 fd46 	bl	800ee58 <__assert_func>
 800d3cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3d0:	6004      	str	r4, [r0, #0]
 800d3d2:	60c4      	str	r4, [r0, #12]
 800d3d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d3d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3dc:	b94c      	cbnz	r4, 800d3f2 <__pow5mult+0x66>
 800d3de:	f240 2171 	movw	r1, #625	; 0x271
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f7ff ff12 	bl	800d20c <__i2b>
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	6003      	str	r3, [r0, #0]
 800d3f2:	f04f 0900 	mov.w	r9, #0
 800d3f6:	07eb      	lsls	r3, r5, #31
 800d3f8:	d50a      	bpl.n	800d410 <__pow5mult+0x84>
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	4622      	mov	r2, r4
 800d3fe:	4630      	mov	r0, r6
 800d400:	f7ff ff1a 	bl	800d238 <__multiply>
 800d404:	4639      	mov	r1, r7
 800d406:	4680      	mov	r8, r0
 800d408:	4630      	mov	r0, r6
 800d40a:	f7ff fdff 	bl	800d00c <_Bfree>
 800d40e:	4647      	mov	r7, r8
 800d410:	106d      	asrs	r5, r5, #1
 800d412:	d00b      	beq.n	800d42c <__pow5mult+0xa0>
 800d414:	6820      	ldr	r0, [r4, #0]
 800d416:	b938      	cbnz	r0, 800d428 <__pow5mult+0x9c>
 800d418:	4622      	mov	r2, r4
 800d41a:	4621      	mov	r1, r4
 800d41c:	4630      	mov	r0, r6
 800d41e:	f7ff ff0b 	bl	800d238 <__multiply>
 800d422:	6020      	str	r0, [r4, #0]
 800d424:	f8c0 9000 	str.w	r9, [r0]
 800d428:	4604      	mov	r4, r0
 800d42a:	e7e4      	b.n	800d3f6 <__pow5mult+0x6a>
 800d42c:	4638      	mov	r0, r7
 800d42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d432:	bf00      	nop
 800d434:	08010250 	.word	0x08010250
 800d438:	08010086 	.word	0x08010086
 800d43c:	08010106 	.word	0x08010106

0800d440 <__lshift>:
 800d440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d444:	460c      	mov	r4, r1
 800d446:	6849      	ldr	r1, [r1, #4]
 800d448:	6923      	ldr	r3, [r4, #16]
 800d44a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d44e:	68a3      	ldr	r3, [r4, #8]
 800d450:	4607      	mov	r7, r0
 800d452:	4691      	mov	r9, r2
 800d454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d458:	f108 0601 	add.w	r6, r8, #1
 800d45c:	42b3      	cmp	r3, r6
 800d45e:	db0b      	blt.n	800d478 <__lshift+0x38>
 800d460:	4638      	mov	r0, r7
 800d462:	f7ff fd93 	bl	800cf8c <_Balloc>
 800d466:	4605      	mov	r5, r0
 800d468:	b948      	cbnz	r0, 800d47e <__lshift+0x3e>
 800d46a:	4602      	mov	r2, r0
 800d46c:	4b28      	ldr	r3, [pc, #160]	; (800d510 <__lshift+0xd0>)
 800d46e:	4829      	ldr	r0, [pc, #164]	; (800d514 <__lshift+0xd4>)
 800d470:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d474:	f001 fcf0 	bl	800ee58 <__assert_func>
 800d478:	3101      	adds	r1, #1
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	e7ee      	b.n	800d45c <__lshift+0x1c>
 800d47e:	2300      	movs	r3, #0
 800d480:	f100 0114 	add.w	r1, r0, #20
 800d484:	f100 0210 	add.w	r2, r0, #16
 800d488:	4618      	mov	r0, r3
 800d48a:	4553      	cmp	r3, sl
 800d48c:	db33      	blt.n	800d4f6 <__lshift+0xb6>
 800d48e:	6920      	ldr	r0, [r4, #16]
 800d490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d494:	f104 0314 	add.w	r3, r4, #20
 800d498:	f019 091f 	ands.w	r9, r9, #31
 800d49c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4a4:	d02b      	beq.n	800d4fe <__lshift+0xbe>
 800d4a6:	f1c9 0e20 	rsb	lr, r9, #32
 800d4aa:	468a      	mov	sl, r1
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	6818      	ldr	r0, [r3, #0]
 800d4b0:	fa00 f009 	lsl.w	r0, r0, r9
 800d4b4:	4310      	orrs	r0, r2
 800d4b6:	f84a 0b04 	str.w	r0, [sl], #4
 800d4ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4be:	459c      	cmp	ip, r3
 800d4c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4c4:	d8f3      	bhi.n	800d4ae <__lshift+0x6e>
 800d4c6:	ebac 0304 	sub.w	r3, ip, r4
 800d4ca:	3b15      	subs	r3, #21
 800d4cc:	f023 0303 	bic.w	r3, r3, #3
 800d4d0:	3304      	adds	r3, #4
 800d4d2:	f104 0015 	add.w	r0, r4, #21
 800d4d6:	4584      	cmp	ip, r0
 800d4d8:	bf38      	it	cc
 800d4da:	2304      	movcc	r3, #4
 800d4dc:	50ca      	str	r2, [r1, r3]
 800d4de:	b10a      	cbz	r2, 800d4e4 <__lshift+0xa4>
 800d4e0:	f108 0602 	add.w	r6, r8, #2
 800d4e4:	3e01      	subs	r6, #1
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	612e      	str	r6, [r5, #16]
 800d4ea:	4621      	mov	r1, r4
 800d4ec:	f7ff fd8e 	bl	800d00c <_Bfree>
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	e7c5      	b.n	800d48a <__lshift+0x4a>
 800d4fe:	3904      	subs	r1, #4
 800d500:	f853 2b04 	ldr.w	r2, [r3], #4
 800d504:	f841 2f04 	str.w	r2, [r1, #4]!
 800d508:	459c      	cmp	ip, r3
 800d50a:	d8f9      	bhi.n	800d500 <__lshift+0xc0>
 800d50c:	e7ea      	b.n	800d4e4 <__lshift+0xa4>
 800d50e:	bf00      	nop
 800d510:	080100f5 	.word	0x080100f5
 800d514:	08010106 	.word	0x08010106

0800d518 <__mcmp>:
 800d518:	b530      	push	{r4, r5, lr}
 800d51a:	6902      	ldr	r2, [r0, #16]
 800d51c:	690c      	ldr	r4, [r1, #16]
 800d51e:	1b12      	subs	r2, r2, r4
 800d520:	d10e      	bne.n	800d540 <__mcmp+0x28>
 800d522:	f100 0314 	add.w	r3, r0, #20
 800d526:	3114      	adds	r1, #20
 800d528:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d52c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d530:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d534:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d538:	42a5      	cmp	r5, r4
 800d53a:	d003      	beq.n	800d544 <__mcmp+0x2c>
 800d53c:	d305      	bcc.n	800d54a <__mcmp+0x32>
 800d53e:	2201      	movs	r2, #1
 800d540:	4610      	mov	r0, r2
 800d542:	bd30      	pop	{r4, r5, pc}
 800d544:	4283      	cmp	r3, r0
 800d546:	d3f3      	bcc.n	800d530 <__mcmp+0x18>
 800d548:	e7fa      	b.n	800d540 <__mcmp+0x28>
 800d54a:	f04f 32ff 	mov.w	r2, #4294967295
 800d54e:	e7f7      	b.n	800d540 <__mcmp+0x28>

0800d550 <__mdiff>:
 800d550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d554:	460c      	mov	r4, r1
 800d556:	4606      	mov	r6, r0
 800d558:	4611      	mov	r1, r2
 800d55a:	4620      	mov	r0, r4
 800d55c:	4690      	mov	r8, r2
 800d55e:	f7ff ffdb 	bl	800d518 <__mcmp>
 800d562:	1e05      	subs	r5, r0, #0
 800d564:	d110      	bne.n	800d588 <__mdiff+0x38>
 800d566:	4629      	mov	r1, r5
 800d568:	4630      	mov	r0, r6
 800d56a:	f7ff fd0f 	bl	800cf8c <_Balloc>
 800d56e:	b930      	cbnz	r0, 800d57e <__mdiff+0x2e>
 800d570:	4b3a      	ldr	r3, [pc, #232]	; (800d65c <__mdiff+0x10c>)
 800d572:	4602      	mov	r2, r0
 800d574:	f240 2137 	movw	r1, #567	; 0x237
 800d578:	4839      	ldr	r0, [pc, #228]	; (800d660 <__mdiff+0x110>)
 800d57a:	f001 fc6d 	bl	800ee58 <__assert_func>
 800d57e:	2301      	movs	r3, #1
 800d580:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d584:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d588:	bfa4      	itt	ge
 800d58a:	4643      	movge	r3, r8
 800d58c:	46a0      	movge	r8, r4
 800d58e:	4630      	mov	r0, r6
 800d590:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d594:	bfa6      	itte	ge
 800d596:	461c      	movge	r4, r3
 800d598:	2500      	movge	r5, #0
 800d59a:	2501      	movlt	r5, #1
 800d59c:	f7ff fcf6 	bl	800cf8c <_Balloc>
 800d5a0:	b920      	cbnz	r0, 800d5ac <__mdiff+0x5c>
 800d5a2:	4b2e      	ldr	r3, [pc, #184]	; (800d65c <__mdiff+0x10c>)
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	f240 2145 	movw	r1, #581	; 0x245
 800d5aa:	e7e5      	b.n	800d578 <__mdiff+0x28>
 800d5ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5b0:	6926      	ldr	r6, [r4, #16]
 800d5b2:	60c5      	str	r5, [r0, #12]
 800d5b4:	f104 0914 	add.w	r9, r4, #20
 800d5b8:	f108 0514 	add.w	r5, r8, #20
 800d5bc:	f100 0e14 	add.w	lr, r0, #20
 800d5c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5c8:	f108 0210 	add.w	r2, r8, #16
 800d5cc:	46f2      	mov	sl, lr
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5d8:	fa11 f88b 	uxtah	r8, r1, fp
 800d5dc:	b299      	uxth	r1, r3
 800d5de:	0c1b      	lsrs	r3, r3, #16
 800d5e0:	eba8 0801 	sub.w	r8, r8, r1
 800d5e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5ec:	fa1f f888 	uxth.w	r8, r8
 800d5f0:	1419      	asrs	r1, r3, #16
 800d5f2:	454e      	cmp	r6, r9
 800d5f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5f8:	f84a 3b04 	str.w	r3, [sl], #4
 800d5fc:	d8e8      	bhi.n	800d5d0 <__mdiff+0x80>
 800d5fe:	1b33      	subs	r3, r6, r4
 800d600:	3b15      	subs	r3, #21
 800d602:	f023 0303 	bic.w	r3, r3, #3
 800d606:	3304      	adds	r3, #4
 800d608:	3415      	adds	r4, #21
 800d60a:	42a6      	cmp	r6, r4
 800d60c:	bf38      	it	cc
 800d60e:	2304      	movcc	r3, #4
 800d610:	441d      	add	r5, r3
 800d612:	4473      	add	r3, lr
 800d614:	469e      	mov	lr, r3
 800d616:	462e      	mov	r6, r5
 800d618:	4566      	cmp	r6, ip
 800d61a:	d30e      	bcc.n	800d63a <__mdiff+0xea>
 800d61c:	f10c 0203 	add.w	r2, ip, #3
 800d620:	1b52      	subs	r2, r2, r5
 800d622:	f022 0203 	bic.w	r2, r2, #3
 800d626:	3d03      	subs	r5, #3
 800d628:	45ac      	cmp	ip, r5
 800d62a:	bf38      	it	cc
 800d62c:	2200      	movcc	r2, #0
 800d62e:	4413      	add	r3, r2
 800d630:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d634:	b17a      	cbz	r2, 800d656 <__mdiff+0x106>
 800d636:	6107      	str	r7, [r0, #16]
 800d638:	e7a4      	b.n	800d584 <__mdiff+0x34>
 800d63a:	f856 8b04 	ldr.w	r8, [r6], #4
 800d63e:	fa11 f288 	uxtah	r2, r1, r8
 800d642:	1414      	asrs	r4, r2, #16
 800d644:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d648:	b292      	uxth	r2, r2
 800d64a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d64e:	f84e 2b04 	str.w	r2, [lr], #4
 800d652:	1421      	asrs	r1, r4, #16
 800d654:	e7e0      	b.n	800d618 <__mdiff+0xc8>
 800d656:	3f01      	subs	r7, #1
 800d658:	e7ea      	b.n	800d630 <__mdiff+0xe0>
 800d65a:	bf00      	nop
 800d65c:	080100f5 	.word	0x080100f5
 800d660:	08010106 	.word	0x08010106

0800d664 <__ulp>:
 800d664:	b082      	sub	sp, #8
 800d666:	ed8d 0b00 	vstr	d0, [sp]
 800d66a:	9a01      	ldr	r2, [sp, #4]
 800d66c:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <__ulp+0x48>)
 800d66e:	4013      	ands	r3, r2
 800d670:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d674:	2b00      	cmp	r3, #0
 800d676:	dc08      	bgt.n	800d68a <__ulp+0x26>
 800d678:	425b      	negs	r3, r3
 800d67a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d67e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d682:	da04      	bge.n	800d68e <__ulp+0x2a>
 800d684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d688:	4113      	asrs	r3, r2
 800d68a:	2200      	movs	r2, #0
 800d68c:	e008      	b.n	800d6a0 <__ulp+0x3c>
 800d68e:	f1a2 0314 	sub.w	r3, r2, #20
 800d692:	2b1e      	cmp	r3, #30
 800d694:	bfda      	itte	le
 800d696:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d69a:	40da      	lsrle	r2, r3
 800d69c:	2201      	movgt	r2, #1
 800d69e:	2300      	movs	r3, #0
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	ec41 0b10 	vmov	d0, r0, r1
 800d6a8:	b002      	add	sp, #8
 800d6aa:	4770      	bx	lr
 800d6ac:	7ff00000 	.word	0x7ff00000

0800d6b0 <__b2d>:
 800d6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b4:	6906      	ldr	r6, [r0, #16]
 800d6b6:	f100 0814 	add.w	r8, r0, #20
 800d6ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d6be:	1f37      	subs	r7, r6, #4
 800d6c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	f7ff fd53 	bl	800d170 <__hi0bits>
 800d6ca:	f1c0 0320 	rsb	r3, r0, #32
 800d6ce:	280a      	cmp	r0, #10
 800d6d0:	600b      	str	r3, [r1, #0]
 800d6d2:	491b      	ldr	r1, [pc, #108]	; (800d740 <__b2d+0x90>)
 800d6d4:	dc15      	bgt.n	800d702 <__b2d+0x52>
 800d6d6:	f1c0 0c0b 	rsb	ip, r0, #11
 800d6da:	fa22 f30c 	lsr.w	r3, r2, ip
 800d6de:	45b8      	cmp	r8, r7
 800d6e0:	ea43 0501 	orr.w	r5, r3, r1
 800d6e4:	bf34      	ite	cc
 800d6e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d6ea:	2300      	movcs	r3, #0
 800d6ec:	3015      	adds	r0, #21
 800d6ee:	fa02 f000 	lsl.w	r0, r2, r0
 800d6f2:	fa23 f30c 	lsr.w	r3, r3, ip
 800d6f6:	4303      	orrs	r3, r0
 800d6f8:	461c      	mov	r4, r3
 800d6fa:	ec45 4b10 	vmov	d0, r4, r5
 800d6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d702:	45b8      	cmp	r8, r7
 800d704:	bf3a      	itte	cc
 800d706:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d70a:	f1a6 0708 	subcc.w	r7, r6, #8
 800d70e:	2300      	movcs	r3, #0
 800d710:	380b      	subs	r0, #11
 800d712:	d012      	beq.n	800d73a <__b2d+0x8a>
 800d714:	f1c0 0120 	rsb	r1, r0, #32
 800d718:	fa23 f401 	lsr.w	r4, r3, r1
 800d71c:	4082      	lsls	r2, r0
 800d71e:	4322      	orrs	r2, r4
 800d720:	4547      	cmp	r7, r8
 800d722:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d726:	bf8c      	ite	hi
 800d728:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d72c:	2200      	movls	r2, #0
 800d72e:	4083      	lsls	r3, r0
 800d730:	40ca      	lsrs	r2, r1
 800d732:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d736:	4313      	orrs	r3, r2
 800d738:	e7de      	b.n	800d6f8 <__b2d+0x48>
 800d73a:	ea42 0501 	orr.w	r5, r2, r1
 800d73e:	e7db      	b.n	800d6f8 <__b2d+0x48>
 800d740:	3ff00000 	.word	0x3ff00000

0800d744 <__d2b>:
 800d744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d748:	460f      	mov	r7, r1
 800d74a:	2101      	movs	r1, #1
 800d74c:	ec59 8b10 	vmov	r8, r9, d0
 800d750:	4616      	mov	r6, r2
 800d752:	f7ff fc1b 	bl	800cf8c <_Balloc>
 800d756:	4604      	mov	r4, r0
 800d758:	b930      	cbnz	r0, 800d768 <__d2b+0x24>
 800d75a:	4602      	mov	r2, r0
 800d75c:	4b24      	ldr	r3, [pc, #144]	; (800d7f0 <__d2b+0xac>)
 800d75e:	4825      	ldr	r0, [pc, #148]	; (800d7f4 <__d2b+0xb0>)
 800d760:	f240 310f 	movw	r1, #783	; 0x30f
 800d764:	f001 fb78 	bl	800ee58 <__assert_func>
 800d768:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d76c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d770:	bb2d      	cbnz	r5, 800d7be <__d2b+0x7a>
 800d772:	9301      	str	r3, [sp, #4]
 800d774:	f1b8 0300 	subs.w	r3, r8, #0
 800d778:	d026      	beq.n	800d7c8 <__d2b+0x84>
 800d77a:	4668      	mov	r0, sp
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	f7ff fd17 	bl	800d1b0 <__lo0bits>
 800d782:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d786:	b1e8      	cbz	r0, 800d7c4 <__d2b+0x80>
 800d788:	f1c0 0320 	rsb	r3, r0, #32
 800d78c:	fa02 f303 	lsl.w	r3, r2, r3
 800d790:	430b      	orrs	r3, r1
 800d792:	40c2      	lsrs	r2, r0
 800d794:	6163      	str	r3, [r4, #20]
 800d796:	9201      	str	r2, [sp, #4]
 800d798:	9b01      	ldr	r3, [sp, #4]
 800d79a:	61a3      	str	r3, [r4, #24]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	bf14      	ite	ne
 800d7a0:	2202      	movne	r2, #2
 800d7a2:	2201      	moveq	r2, #1
 800d7a4:	6122      	str	r2, [r4, #16]
 800d7a6:	b1bd      	cbz	r5, 800d7d8 <__d2b+0x94>
 800d7a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7ac:	4405      	add	r5, r0
 800d7ae:	603d      	str	r5, [r7, #0]
 800d7b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7b4:	6030      	str	r0, [r6, #0]
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	b003      	add	sp, #12
 800d7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7c2:	e7d6      	b.n	800d772 <__d2b+0x2e>
 800d7c4:	6161      	str	r1, [r4, #20]
 800d7c6:	e7e7      	b.n	800d798 <__d2b+0x54>
 800d7c8:	a801      	add	r0, sp, #4
 800d7ca:	f7ff fcf1 	bl	800d1b0 <__lo0bits>
 800d7ce:	9b01      	ldr	r3, [sp, #4]
 800d7d0:	6163      	str	r3, [r4, #20]
 800d7d2:	3020      	adds	r0, #32
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	e7e5      	b.n	800d7a4 <__d2b+0x60>
 800d7d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d7e0:	6038      	str	r0, [r7, #0]
 800d7e2:	6918      	ldr	r0, [r3, #16]
 800d7e4:	f7ff fcc4 	bl	800d170 <__hi0bits>
 800d7e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7ec:	e7e2      	b.n	800d7b4 <__d2b+0x70>
 800d7ee:	bf00      	nop
 800d7f0:	080100f5 	.word	0x080100f5
 800d7f4:	08010106 	.word	0x08010106

0800d7f8 <__ratio>:
 800d7f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fc:	4688      	mov	r8, r1
 800d7fe:	4669      	mov	r1, sp
 800d800:	4681      	mov	r9, r0
 800d802:	f7ff ff55 	bl	800d6b0 <__b2d>
 800d806:	a901      	add	r1, sp, #4
 800d808:	4640      	mov	r0, r8
 800d80a:	ec55 4b10 	vmov	r4, r5, d0
 800d80e:	f7ff ff4f 	bl	800d6b0 <__b2d>
 800d812:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d816:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d81a:	eba3 0c02 	sub.w	ip, r3, r2
 800d81e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d822:	1a9b      	subs	r3, r3, r2
 800d824:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d828:	ec51 0b10 	vmov	r0, r1, d0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	bfd6      	itet	le
 800d830:	460a      	movle	r2, r1
 800d832:	462a      	movgt	r2, r5
 800d834:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d838:	468b      	mov	fp, r1
 800d83a:	462f      	mov	r7, r5
 800d83c:	bfd4      	ite	le
 800d83e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d842:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d846:	4620      	mov	r0, r4
 800d848:	ee10 2a10 	vmov	r2, s0
 800d84c:	465b      	mov	r3, fp
 800d84e:	4639      	mov	r1, r7
 800d850:	f7f2 fffc 	bl	800084c <__aeabi_ddiv>
 800d854:	ec41 0b10 	vmov	d0, r0, r1
 800d858:	b003      	add	sp, #12
 800d85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d85e <__copybits>:
 800d85e:	3901      	subs	r1, #1
 800d860:	b570      	push	{r4, r5, r6, lr}
 800d862:	1149      	asrs	r1, r1, #5
 800d864:	6914      	ldr	r4, [r2, #16]
 800d866:	3101      	adds	r1, #1
 800d868:	f102 0314 	add.w	r3, r2, #20
 800d86c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d870:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d874:	1f05      	subs	r5, r0, #4
 800d876:	42a3      	cmp	r3, r4
 800d878:	d30c      	bcc.n	800d894 <__copybits+0x36>
 800d87a:	1aa3      	subs	r3, r4, r2
 800d87c:	3b11      	subs	r3, #17
 800d87e:	f023 0303 	bic.w	r3, r3, #3
 800d882:	3211      	adds	r2, #17
 800d884:	42a2      	cmp	r2, r4
 800d886:	bf88      	it	hi
 800d888:	2300      	movhi	r3, #0
 800d88a:	4418      	add	r0, r3
 800d88c:	2300      	movs	r3, #0
 800d88e:	4288      	cmp	r0, r1
 800d890:	d305      	bcc.n	800d89e <__copybits+0x40>
 800d892:	bd70      	pop	{r4, r5, r6, pc}
 800d894:	f853 6b04 	ldr.w	r6, [r3], #4
 800d898:	f845 6f04 	str.w	r6, [r5, #4]!
 800d89c:	e7eb      	b.n	800d876 <__copybits+0x18>
 800d89e:	f840 3b04 	str.w	r3, [r0], #4
 800d8a2:	e7f4      	b.n	800d88e <__copybits+0x30>

0800d8a4 <__any_on>:
 800d8a4:	f100 0214 	add.w	r2, r0, #20
 800d8a8:	6900      	ldr	r0, [r0, #16]
 800d8aa:	114b      	asrs	r3, r1, #5
 800d8ac:	4298      	cmp	r0, r3
 800d8ae:	b510      	push	{r4, lr}
 800d8b0:	db11      	blt.n	800d8d6 <__any_on+0x32>
 800d8b2:	dd0a      	ble.n	800d8ca <__any_on+0x26>
 800d8b4:	f011 011f 	ands.w	r1, r1, #31
 800d8b8:	d007      	beq.n	800d8ca <__any_on+0x26>
 800d8ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8be:	fa24 f001 	lsr.w	r0, r4, r1
 800d8c2:	fa00 f101 	lsl.w	r1, r0, r1
 800d8c6:	428c      	cmp	r4, r1
 800d8c8:	d10b      	bne.n	800d8e2 <__any_on+0x3e>
 800d8ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d803      	bhi.n	800d8da <__any_on+0x36>
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	bd10      	pop	{r4, pc}
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	e7f7      	b.n	800d8ca <__any_on+0x26>
 800d8da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8de:	2900      	cmp	r1, #0
 800d8e0:	d0f5      	beq.n	800d8ce <__any_on+0x2a>
 800d8e2:	2001      	movs	r0, #1
 800d8e4:	e7f6      	b.n	800d8d4 <__any_on+0x30>

0800d8e6 <sulp>:
 800d8e6:	b570      	push	{r4, r5, r6, lr}
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	460d      	mov	r5, r1
 800d8ec:	ec45 4b10 	vmov	d0, r4, r5
 800d8f0:	4616      	mov	r6, r2
 800d8f2:	f7ff feb7 	bl	800d664 <__ulp>
 800d8f6:	ec51 0b10 	vmov	r0, r1, d0
 800d8fa:	b17e      	cbz	r6, 800d91c <sulp+0x36>
 800d8fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d900:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d904:	2b00      	cmp	r3, #0
 800d906:	dd09      	ble.n	800d91c <sulp+0x36>
 800d908:	051b      	lsls	r3, r3, #20
 800d90a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d90e:	2400      	movs	r4, #0
 800d910:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d914:	4622      	mov	r2, r4
 800d916:	462b      	mov	r3, r5
 800d918:	f7f2 fe6e 	bl	80005f8 <__aeabi_dmul>
 800d91c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d920 <_strtod_l>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	ed2d 8b02 	vpush	{d8}
 800d928:	b09b      	sub	sp, #108	; 0x6c
 800d92a:	4604      	mov	r4, r0
 800d92c:	9213      	str	r2, [sp, #76]	; 0x4c
 800d92e:	2200      	movs	r2, #0
 800d930:	9216      	str	r2, [sp, #88]	; 0x58
 800d932:	460d      	mov	r5, r1
 800d934:	f04f 0800 	mov.w	r8, #0
 800d938:	f04f 0900 	mov.w	r9, #0
 800d93c:	460a      	mov	r2, r1
 800d93e:	9215      	str	r2, [sp, #84]	; 0x54
 800d940:	7811      	ldrb	r1, [r2, #0]
 800d942:	292b      	cmp	r1, #43	; 0x2b
 800d944:	d04c      	beq.n	800d9e0 <_strtod_l+0xc0>
 800d946:	d83a      	bhi.n	800d9be <_strtod_l+0x9e>
 800d948:	290d      	cmp	r1, #13
 800d94a:	d834      	bhi.n	800d9b6 <_strtod_l+0x96>
 800d94c:	2908      	cmp	r1, #8
 800d94e:	d834      	bhi.n	800d9ba <_strtod_l+0x9a>
 800d950:	2900      	cmp	r1, #0
 800d952:	d03d      	beq.n	800d9d0 <_strtod_l+0xb0>
 800d954:	2200      	movs	r2, #0
 800d956:	920a      	str	r2, [sp, #40]	; 0x28
 800d958:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800d95a:	7832      	ldrb	r2, [r6, #0]
 800d95c:	2a30      	cmp	r2, #48	; 0x30
 800d95e:	f040 80b4 	bne.w	800daca <_strtod_l+0x1aa>
 800d962:	7872      	ldrb	r2, [r6, #1]
 800d964:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d968:	2a58      	cmp	r2, #88	; 0x58
 800d96a:	d170      	bne.n	800da4e <_strtod_l+0x12e>
 800d96c:	9302      	str	r3, [sp, #8]
 800d96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	ab16      	add	r3, sp, #88	; 0x58
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	4a8e      	ldr	r2, [pc, #568]	; (800dbb0 <_strtod_l+0x290>)
 800d978:	ab17      	add	r3, sp, #92	; 0x5c
 800d97a:	a915      	add	r1, sp, #84	; 0x54
 800d97c:	4620      	mov	r0, r4
 800d97e:	f001 fb07 	bl	800ef90 <__gethex>
 800d982:	f010 070f 	ands.w	r7, r0, #15
 800d986:	4605      	mov	r5, r0
 800d988:	d005      	beq.n	800d996 <_strtod_l+0x76>
 800d98a:	2f06      	cmp	r7, #6
 800d98c:	d12a      	bne.n	800d9e4 <_strtod_l+0xc4>
 800d98e:	3601      	adds	r6, #1
 800d990:	2300      	movs	r3, #0
 800d992:	9615      	str	r6, [sp, #84]	; 0x54
 800d994:	930a      	str	r3, [sp, #40]	; 0x28
 800d996:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f040 857f 	bne.w	800e49c <_strtod_l+0xb7c>
 800d99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9a0:	b1db      	cbz	r3, 800d9da <_strtod_l+0xba>
 800d9a2:	4642      	mov	r2, r8
 800d9a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d9a8:	ec43 2b10 	vmov	d0, r2, r3
 800d9ac:	b01b      	add	sp, #108	; 0x6c
 800d9ae:	ecbd 8b02 	vpop	{d8}
 800d9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b6:	2920      	cmp	r1, #32
 800d9b8:	d1cc      	bne.n	800d954 <_strtod_l+0x34>
 800d9ba:	3201      	adds	r2, #1
 800d9bc:	e7bf      	b.n	800d93e <_strtod_l+0x1e>
 800d9be:	292d      	cmp	r1, #45	; 0x2d
 800d9c0:	d1c8      	bne.n	800d954 <_strtod_l+0x34>
 800d9c2:	2101      	movs	r1, #1
 800d9c4:	910a      	str	r1, [sp, #40]	; 0x28
 800d9c6:	1c51      	adds	r1, r2, #1
 800d9c8:	9115      	str	r1, [sp, #84]	; 0x54
 800d9ca:	7852      	ldrb	r2, [r2, #1]
 800d9cc:	2a00      	cmp	r2, #0
 800d9ce:	d1c3      	bne.n	800d958 <_strtod_l+0x38>
 800d9d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d9d2:	9515      	str	r5, [sp, #84]	; 0x54
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	f040 855f 	bne.w	800e498 <_strtod_l+0xb78>
 800d9da:	4642      	mov	r2, r8
 800d9dc:	464b      	mov	r3, r9
 800d9de:	e7e3      	b.n	800d9a8 <_strtod_l+0x88>
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	e7ef      	b.n	800d9c4 <_strtod_l+0xa4>
 800d9e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d9e6:	b13a      	cbz	r2, 800d9f8 <_strtod_l+0xd8>
 800d9e8:	2135      	movs	r1, #53	; 0x35
 800d9ea:	a818      	add	r0, sp, #96	; 0x60
 800d9ec:	f7ff ff37 	bl	800d85e <__copybits>
 800d9f0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f7ff fb0a 	bl	800d00c <_Bfree>
 800d9f8:	3f01      	subs	r7, #1
 800d9fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d9fc:	2f04      	cmp	r7, #4
 800d9fe:	d806      	bhi.n	800da0e <_strtod_l+0xee>
 800da00:	e8df f007 	tbb	[pc, r7]
 800da04:	201d0314 	.word	0x201d0314
 800da08:	14          	.byte	0x14
 800da09:	00          	.byte	0x00
 800da0a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800da0e:	05e9      	lsls	r1, r5, #23
 800da10:	bf48      	it	mi
 800da12:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800da16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da1a:	0d1b      	lsrs	r3, r3, #20
 800da1c:	051b      	lsls	r3, r3, #20
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1b9      	bne.n	800d996 <_strtod_l+0x76>
 800da22:	f7fe fbb9 	bl	800c198 <__errno>
 800da26:	2322      	movs	r3, #34	; 0x22
 800da28:	6003      	str	r3, [r0, #0]
 800da2a:	e7b4      	b.n	800d996 <_strtod_l+0x76>
 800da2c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800da30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800da34:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800da38:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800da3c:	e7e7      	b.n	800da0e <_strtod_l+0xee>
 800da3e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dbb8 <_strtod_l+0x298>
 800da42:	e7e4      	b.n	800da0e <_strtod_l+0xee>
 800da44:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800da48:	f04f 38ff 	mov.w	r8, #4294967295
 800da4c:	e7df      	b.n	800da0e <_strtod_l+0xee>
 800da4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da50:	1c5a      	adds	r2, r3, #1
 800da52:	9215      	str	r2, [sp, #84]	; 0x54
 800da54:	785b      	ldrb	r3, [r3, #1]
 800da56:	2b30      	cmp	r3, #48	; 0x30
 800da58:	d0f9      	beq.n	800da4e <_strtod_l+0x12e>
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d09b      	beq.n	800d996 <_strtod_l+0x76>
 800da5e:	2301      	movs	r3, #1
 800da60:	f04f 0a00 	mov.w	sl, #0
 800da64:	9304      	str	r3, [sp, #16]
 800da66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da68:	930b      	str	r3, [sp, #44]	; 0x2c
 800da6a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800da6e:	46d3      	mov	fp, sl
 800da70:	220a      	movs	r2, #10
 800da72:	9815      	ldr	r0, [sp, #84]	; 0x54
 800da74:	7806      	ldrb	r6, [r0, #0]
 800da76:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800da7a:	b2d9      	uxtb	r1, r3
 800da7c:	2909      	cmp	r1, #9
 800da7e:	d926      	bls.n	800dace <_strtod_l+0x1ae>
 800da80:	494c      	ldr	r1, [pc, #304]	; (800dbb4 <_strtod_l+0x294>)
 800da82:	2201      	movs	r2, #1
 800da84:	f001 f9c0 	bl	800ee08 <strncmp>
 800da88:	2800      	cmp	r0, #0
 800da8a:	d030      	beq.n	800daee <_strtod_l+0x1ce>
 800da8c:	2000      	movs	r0, #0
 800da8e:	4632      	mov	r2, r6
 800da90:	9005      	str	r0, [sp, #20]
 800da92:	465e      	mov	r6, fp
 800da94:	4603      	mov	r3, r0
 800da96:	2a65      	cmp	r2, #101	; 0x65
 800da98:	d001      	beq.n	800da9e <_strtod_l+0x17e>
 800da9a:	2a45      	cmp	r2, #69	; 0x45
 800da9c:	d113      	bne.n	800dac6 <_strtod_l+0x1a6>
 800da9e:	b91e      	cbnz	r6, 800daa8 <_strtod_l+0x188>
 800daa0:	9a04      	ldr	r2, [sp, #16]
 800daa2:	4302      	orrs	r2, r0
 800daa4:	d094      	beq.n	800d9d0 <_strtod_l+0xb0>
 800daa6:	2600      	movs	r6, #0
 800daa8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800daaa:	1c6a      	adds	r2, r5, #1
 800daac:	9215      	str	r2, [sp, #84]	; 0x54
 800daae:	786a      	ldrb	r2, [r5, #1]
 800dab0:	2a2b      	cmp	r2, #43	; 0x2b
 800dab2:	d074      	beq.n	800db9e <_strtod_l+0x27e>
 800dab4:	2a2d      	cmp	r2, #45	; 0x2d
 800dab6:	d078      	beq.n	800dbaa <_strtod_l+0x28a>
 800dab8:	f04f 0c00 	mov.w	ip, #0
 800dabc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800dac0:	2909      	cmp	r1, #9
 800dac2:	d97f      	bls.n	800dbc4 <_strtod_l+0x2a4>
 800dac4:	9515      	str	r5, [sp, #84]	; 0x54
 800dac6:	2700      	movs	r7, #0
 800dac8:	e09e      	b.n	800dc08 <_strtod_l+0x2e8>
 800daca:	2300      	movs	r3, #0
 800dacc:	e7c8      	b.n	800da60 <_strtod_l+0x140>
 800dace:	f1bb 0f08 	cmp.w	fp, #8
 800dad2:	bfd8      	it	le
 800dad4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dad6:	f100 0001 	add.w	r0, r0, #1
 800dada:	bfda      	itte	le
 800dadc:	fb02 3301 	mlale	r3, r2, r1, r3
 800dae0:	9309      	strle	r3, [sp, #36]	; 0x24
 800dae2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800dae6:	f10b 0b01 	add.w	fp, fp, #1
 800daea:	9015      	str	r0, [sp, #84]	; 0x54
 800daec:	e7c1      	b.n	800da72 <_strtod_l+0x152>
 800daee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800daf0:	1c5a      	adds	r2, r3, #1
 800daf2:	9215      	str	r2, [sp, #84]	; 0x54
 800daf4:	785a      	ldrb	r2, [r3, #1]
 800daf6:	f1bb 0f00 	cmp.w	fp, #0
 800dafa:	d037      	beq.n	800db6c <_strtod_l+0x24c>
 800dafc:	9005      	str	r0, [sp, #20]
 800dafe:	465e      	mov	r6, fp
 800db00:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800db04:	2b09      	cmp	r3, #9
 800db06:	d912      	bls.n	800db2e <_strtod_l+0x20e>
 800db08:	2301      	movs	r3, #1
 800db0a:	e7c4      	b.n	800da96 <_strtod_l+0x176>
 800db0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db0e:	1c5a      	adds	r2, r3, #1
 800db10:	9215      	str	r2, [sp, #84]	; 0x54
 800db12:	785a      	ldrb	r2, [r3, #1]
 800db14:	3001      	adds	r0, #1
 800db16:	2a30      	cmp	r2, #48	; 0x30
 800db18:	d0f8      	beq.n	800db0c <_strtod_l+0x1ec>
 800db1a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800db1e:	2b08      	cmp	r3, #8
 800db20:	f200 84c1 	bhi.w	800e4a6 <_strtod_l+0xb86>
 800db24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db26:	9005      	str	r0, [sp, #20]
 800db28:	2000      	movs	r0, #0
 800db2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800db2c:	4606      	mov	r6, r0
 800db2e:	3a30      	subs	r2, #48	; 0x30
 800db30:	f100 0301 	add.w	r3, r0, #1
 800db34:	d014      	beq.n	800db60 <_strtod_l+0x240>
 800db36:	9905      	ldr	r1, [sp, #20]
 800db38:	4419      	add	r1, r3
 800db3a:	9105      	str	r1, [sp, #20]
 800db3c:	4633      	mov	r3, r6
 800db3e:	eb00 0c06 	add.w	ip, r0, r6
 800db42:	210a      	movs	r1, #10
 800db44:	4563      	cmp	r3, ip
 800db46:	d113      	bne.n	800db70 <_strtod_l+0x250>
 800db48:	1833      	adds	r3, r6, r0
 800db4a:	2b08      	cmp	r3, #8
 800db4c:	f106 0601 	add.w	r6, r6, #1
 800db50:	4406      	add	r6, r0
 800db52:	dc1a      	bgt.n	800db8a <_strtod_l+0x26a>
 800db54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db56:	230a      	movs	r3, #10
 800db58:	fb03 2301 	mla	r3, r3, r1, r2
 800db5c:	9309      	str	r3, [sp, #36]	; 0x24
 800db5e:	2300      	movs	r3, #0
 800db60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800db62:	1c51      	adds	r1, r2, #1
 800db64:	9115      	str	r1, [sp, #84]	; 0x54
 800db66:	7852      	ldrb	r2, [r2, #1]
 800db68:	4618      	mov	r0, r3
 800db6a:	e7c9      	b.n	800db00 <_strtod_l+0x1e0>
 800db6c:	4658      	mov	r0, fp
 800db6e:	e7d2      	b.n	800db16 <_strtod_l+0x1f6>
 800db70:	2b08      	cmp	r3, #8
 800db72:	f103 0301 	add.w	r3, r3, #1
 800db76:	dc03      	bgt.n	800db80 <_strtod_l+0x260>
 800db78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800db7a:	434f      	muls	r7, r1
 800db7c:	9709      	str	r7, [sp, #36]	; 0x24
 800db7e:	e7e1      	b.n	800db44 <_strtod_l+0x224>
 800db80:	2b10      	cmp	r3, #16
 800db82:	bfd8      	it	le
 800db84:	fb01 fa0a 	mulle.w	sl, r1, sl
 800db88:	e7dc      	b.n	800db44 <_strtod_l+0x224>
 800db8a:	2e10      	cmp	r6, #16
 800db8c:	bfdc      	itt	le
 800db8e:	230a      	movle	r3, #10
 800db90:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800db94:	e7e3      	b.n	800db5e <_strtod_l+0x23e>
 800db96:	2300      	movs	r3, #0
 800db98:	9305      	str	r3, [sp, #20]
 800db9a:	2301      	movs	r3, #1
 800db9c:	e780      	b.n	800daa0 <_strtod_l+0x180>
 800db9e:	f04f 0c00 	mov.w	ip, #0
 800dba2:	1caa      	adds	r2, r5, #2
 800dba4:	9215      	str	r2, [sp, #84]	; 0x54
 800dba6:	78aa      	ldrb	r2, [r5, #2]
 800dba8:	e788      	b.n	800dabc <_strtod_l+0x19c>
 800dbaa:	f04f 0c01 	mov.w	ip, #1
 800dbae:	e7f8      	b.n	800dba2 <_strtod_l+0x282>
 800dbb0:	08010260 	.word	0x08010260
 800dbb4:	0801025c 	.word	0x0801025c
 800dbb8:	7ff00000 	.word	0x7ff00000
 800dbbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dbbe:	1c51      	adds	r1, r2, #1
 800dbc0:	9115      	str	r1, [sp, #84]	; 0x54
 800dbc2:	7852      	ldrb	r2, [r2, #1]
 800dbc4:	2a30      	cmp	r2, #48	; 0x30
 800dbc6:	d0f9      	beq.n	800dbbc <_strtod_l+0x29c>
 800dbc8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dbcc:	2908      	cmp	r1, #8
 800dbce:	f63f af7a 	bhi.w	800dac6 <_strtod_l+0x1a6>
 800dbd2:	3a30      	subs	r2, #48	; 0x30
 800dbd4:	9208      	str	r2, [sp, #32]
 800dbd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dbd8:	920c      	str	r2, [sp, #48]	; 0x30
 800dbda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dbdc:	1c57      	adds	r7, r2, #1
 800dbde:	9715      	str	r7, [sp, #84]	; 0x54
 800dbe0:	7852      	ldrb	r2, [r2, #1]
 800dbe2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dbe6:	f1be 0f09 	cmp.w	lr, #9
 800dbea:	d938      	bls.n	800dc5e <_strtod_l+0x33e>
 800dbec:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dbee:	1a7f      	subs	r7, r7, r1
 800dbf0:	2f08      	cmp	r7, #8
 800dbf2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dbf6:	dc03      	bgt.n	800dc00 <_strtod_l+0x2e0>
 800dbf8:	9908      	ldr	r1, [sp, #32]
 800dbfa:	428f      	cmp	r7, r1
 800dbfc:	bfa8      	it	ge
 800dbfe:	460f      	movge	r7, r1
 800dc00:	f1bc 0f00 	cmp.w	ip, #0
 800dc04:	d000      	beq.n	800dc08 <_strtod_l+0x2e8>
 800dc06:	427f      	negs	r7, r7
 800dc08:	2e00      	cmp	r6, #0
 800dc0a:	d14f      	bne.n	800dcac <_strtod_l+0x38c>
 800dc0c:	9904      	ldr	r1, [sp, #16]
 800dc0e:	4301      	orrs	r1, r0
 800dc10:	f47f aec1 	bne.w	800d996 <_strtod_l+0x76>
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f47f aedb 	bne.w	800d9d0 <_strtod_l+0xb0>
 800dc1a:	2a69      	cmp	r2, #105	; 0x69
 800dc1c:	d029      	beq.n	800dc72 <_strtod_l+0x352>
 800dc1e:	dc26      	bgt.n	800dc6e <_strtod_l+0x34e>
 800dc20:	2a49      	cmp	r2, #73	; 0x49
 800dc22:	d026      	beq.n	800dc72 <_strtod_l+0x352>
 800dc24:	2a4e      	cmp	r2, #78	; 0x4e
 800dc26:	f47f aed3 	bne.w	800d9d0 <_strtod_l+0xb0>
 800dc2a:	499b      	ldr	r1, [pc, #620]	; (800de98 <_strtod_l+0x578>)
 800dc2c:	a815      	add	r0, sp, #84	; 0x54
 800dc2e:	f001 fbef 	bl	800f410 <__match>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	f43f aecc 	beq.w	800d9d0 <_strtod_l+0xb0>
 800dc38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	2b28      	cmp	r3, #40	; 0x28
 800dc3e:	d12f      	bne.n	800dca0 <_strtod_l+0x380>
 800dc40:	4996      	ldr	r1, [pc, #600]	; (800de9c <_strtod_l+0x57c>)
 800dc42:	aa18      	add	r2, sp, #96	; 0x60
 800dc44:	a815      	add	r0, sp, #84	; 0x54
 800dc46:	f001 fbf7 	bl	800f438 <__hexnan>
 800dc4a:	2805      	cmp	r0, #5
 800dc4c:	d128      	bne.n	800dca0 <_strtod_l+0x380>
 800dc4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dc54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800dc58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800dc5c:	e69b      	b.n	800d996 <_strtod_l+0x76>
 800dc5e:	9f08      	ldr	r7, [sp, #32]
 800dc60:	210a      	movs	r1, #10
 800dc62:	fb01 2107 	mla	r1, r1, r7, r2
 800dc66:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800dc6a:	9208      	str	r2, [sp, #32]
 800dc6c:	e7b5      	b.n	800dbda <_strtod_l+0x2ba>
 800dc6e:	2a6e      	cmp	r2, #110	; 0x6e
 800dc70:	e7d9      	b.n	800dc26 <_strtod_l+0x306>
 800dc72:	498b      	ldr	r1, [pc, #556]	; (800dea0 <_strtod_l+0x580>)
 800dc74:	a815      	add	r0, sp, #84	; 0x54
 800dc76:	f001 fbcb 	bl	800f410 <__match>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f43f aea8 	beq.w	800d9d0 <_strtod_l+0xb0>
 800dc80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc82:	4988      	ldr	r1, [pc, #544]	; (800dea4 <_strtod_l+0x584>)
 800dc84:	3b01      	subs	r3, #1
 800dc86:	a815      	add	r0, sp, #84	; 0x54
 800dc88:	9315      	str	r3, [sp, #84]	; 0x54
 800dc8a:	f001 fbc1 	bl	800f410 <__match>
 800dc8e:	b910      	cbnz	r0, 800dc96 <_strtod_l+0x376>
 800dc90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc92:	3301      	adds	r3, #1
 800dc94:	9315      	str	r3, [sp, #84]	; 0x54
 800dc96:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800deb4 <_strtod_l+0x594>
 800dc9a:	f04f 0800 	mov.w	r8, #0
 800dc9e:	e67a      	b.n	800d996 <_strtod_l+0x76>
 800dca0:	4881      	ldr	r0, [pc, #516]	; (800dea8 <_strtod_l+0x588>)
 800dca2:	f001 f8d1 	bl	800ee48 <nan>
 800dca6:	ec59 8b10 	vmov	r8, r9, d0
 800dcaa:	e674      	b.n	800d996 <_strtod_l+0x76>
 800dcac:	9b05      	ldr	r3, [sp, #20]
 800dcae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcb0:	1afb      	subs	r3, r7, r3
 800dcb2:	f1bb 0f00 	cmp.w	fp, #0
 800dcb6:	bf08      	it	eq
 800dcb8:	46b3      	moveq	fp, r6
 800dcba:	2e10      	cmp	r6, #16
 800dcbc:	9308      	str	r3, [sp, #32]
 800dcbe:	4635      	mov	r5, r6
 800dcc0:	bfa8      	it	ge
 800dcc2:	2510      	movge	r5, #16
 800dcc4:	f7f2 fc1e 	bl	8000504 <__aeabi_ui2d>
 800dcc8:	2e09      	cmp	r6, #9
 800dcca:	4680      	mov	r8, r0
 800dccc:	4689      	mov	r9, r1
 800dcce:	dd13      	ble.n	800dcf8 <_strtod_l+0x3d8>
 800dcd0:	4b76      	ldr	r3, [pc, #472]	; (800deac <_strtod_l+0x58c>)
 800dcd2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dcd6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dcda:	f7f2 fc8d 	bl	80005f8 <__aeabi_dmul>
 800dcde:	4680      	mov	r8, r0
 800dce0:	4650      	mov	r0, sl
 800dce2:	4689      	mov	r9, r1
 800dce4:	f7f2 fc0e 	bl	8000504 <__aeabi_ui2d>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	4640      	mov	r0, r8
 800dcee:	4649      	mov	r1, r9
 800dcf0:	f7f2 facc 	bl	800028c <__adddf3>
 800dcf4:	4680      	mov	r8, r0
 800dcf6:	4689      	mov	r9, r1
 800dcf8:	2e0f      	cmp	r6, #15
 800dcfa:	dc38      	bgt.n	800dd6e <_strtod_l+0x44e>
 800dcfc:	9b08      	ldr	r3, [sp, #32]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f43f ae49 	beq.w	800d996 <_strtod_l+0x76>
 800dd04:	dd24      	ble.n	800dd50 <_strtod_l+0x430>
 800dd06:	2b16      	cmp	r3, #22
 800dd08:	dc0b      	bgt.n	800dd22 <_strtod_l+0x402>
 800dd0a:	4968      	ldr	r1, [pc, #416]	; (800deac <_strtod_l+0x58c>)
 800dd0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd14:	4642      	mov	r2, r8
 800dd16:	464b      	mov	r3, r9
 800dd18:	f7f2 fc6e 	bl	80005f8 <__aeabi_dmul>
 800dd1c:	4680      	mov	r8, r0
 800dd1e:	4689      	mov	r9, r1
 800dd20:	e639      	b.n	800d996 <_strtod_l+0x76>
 800dd22:	9a08      	ldr	r2, [sp, #32]
 800dd24:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	db20      	blt.n	800dd6e <_strtod_l+0x44e>
 800dd2c:	4c5f      	ldr	r4, [pc, #380]	; (800deac <_strtod_l+0x58c>)
 800dd2e:	f1c6 060f 	rsb	r6, r6, #15
 800dd32:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800dd36:	4642      	mov	r2, r8
 800dd38:	464b      	mov	r3, r9
 800dd3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd3e:	f7f2 fc5b 	bl	80005f8 <__aeabi_dmul>
 800dd42:	9b08      	ldr	r3, [sp, #32]
 800dd44:	1b9e      	subs	r6, r3, r6
 800dd46:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800dd4a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dd4e:	e7e3      	b.n	800dd18 <_strtod_l+0x3f8>
 800dd50:	9b08      	ldr	r3, [sp, #32]
 800dd52:	3316      	adds	r3, #22
 800dd54:	db0b      	blt.n	800dd6e <_strtod_l+0x44e>
 800dd56:	9b05      	ldr	r3, [sp, #20]
 800dd58:	1bdf      	subs	r7, r3, r7
 800dd5a:	4b54      	ldr	r3, [pc, #336]	; (800deac <_strtod_l+0x58c>)
 800dd5c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dd60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd64:	4640      	mov	r0, r8
 800dd66:	4649      	mov	r1, r9
 800dd68:	f7f2 fd70 	bl	800084c <__aeabi_ddiv>
 800dd6c:	e7d6      	b.n	800dd1c <_strtod_l+0x3fc>
 800dd6e:	9b08      	ldr	r3, [sp, #32]
 800dd70:	1b75      	subs	r5, r6, r5
 800dd72:	441d      	add	r5, r3
 800dd74:	2d00      	cmp	r5, #0
 800dd76:	dd70      	ble.n	800de5a <_strtod_l+0x53a>
 800dd78:	f015 030f 	ands.w	r3, r5, #15
 800dd7c:	d00a      	beq.n	800dd94 <_strtod_l+0x474>
 800dd7e:	494b      	ldr	r1, [pc, #300]	; (800deac <_strtod_l+0x58c>)
 800dd80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd84:	4642      	mov	r2, r8
 800dd86:	464b      	mov	r3, r9
 800dd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd8c:	f7f2 fc34 	bl	80005f8 <__aeabi_dmul>
 800dd90:	4680      	mov	r8, r0
 800dd92:	4689      	mov	r9, r1
 800dd94:	f035 050f 	bics.w	r5, r5, #15
 800dd98:	d04d      	beq.n	800de36 <_strtod_l+0x516>
 800dd9a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800dd9e:	dd22      	ble.n	800dde6 <_strtod_l+0x4c6>
 800dda0:	2500      	movs	r5, #0
 800dda2:	46ab      	mov	fp, r5
 800dda4:	9509      	str	r5, [sp, #36]	; 0x24
 800dda6:	9505      	str	r5, [sp, #20]
 800dda8:	2322      	movs	r3, #34	; 0x22
 800ddaa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800deb4 <_strtod_l+0x594>
 800ddae:	6023      	str	r3, [r4, #0]
 800ddb0:	f04f 0800 	mov.w	r8, #0
 800ddb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f43f aded 	beq.w	800d996 <_strtod_l+0x76>
 800ddbc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f7ff f924 	bl	800d00c <_Bfree>
 800ddc4:	9905      	ldr	r1, [sp, #20]
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f7ff f920 	bl	800d00c <_Bfree>
 800ddcc:	4659      	mov	r1, fp
 800ddce:	4620      	mov	r0, r4
 800ddd0:	f7ff f91c 	bl	800d00c <_Bfree>
 800ddd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddd6:	4620      	mov	r0, r4
 800ddd8:	f7ff f918 	bl	800d00c <_Bfree>
 800dddc:	4629      	mov	r1, r5
 800ddde:	4620      	mov	r0, r4
 800dde0:	f7ff f914 	bl	800d00c <_Bfree>
 800dde4:	e5d7      	b.n	800d996 <_strtod_l+0x76>
 800dde6:	4b32      	ldr	r3, [pc, #200]	; (800deb0 <_strtod_l+0x590>)
 800dde8:	9304      	str	r3, [sp, #16]
 800ddea:	2300      	movs	r3, #0
 800ddec:	112d      	asrs	r5, r5, #4
 800ddee:	4640      	mov	r0, r8
 800ddf0:	4649      	mov	r1, r9
 800ddf2:	469a      	mov	sl, r3
 800ddf4:	2d01      	cmp	r5, #1
 800ddf6:	dc21      	bgt.n	800de3c <_strtod_l+0x51c>
 800ddf8:	b10b      	cbz	r3, 800ddfe <_strtod_l+0x4de>
 800ddfa:	4680      	mov	r8, r0
 800ddfc:	4689      	mov	r9, r1
 800ddfe:	492c      	ldr	r1, [pc, #176]	; (800deb0 <_strtod_l+0x590>)
 800de00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800de04:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800de08:	4642      	mov	r2, r8
 800de0a:	464b      	mov	r3, r9
 800de0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de10:	f7f2 fbf2 	bl	80005f8 <__aeabi_dmul>
 800de14:	4b27      	ldr	r3, [pc, #156]	; (800deb4 <_strtod_l+0x594>)
 800de16:	460a      	mov	r2, r1
 800de18:	400b      	ands	r3, r1
 800de1a:	4927      	ldr	r1, [pc, #156]	; (800deb8 <_strtod_l+0x598>)
 800de1c:	428b      	cmp	r3, r1
 800de1e:	4680      	mov	r8, r0
 800de20:	d8be      	bhi.n	800dda0 <_strtod_l+0x480>
 800de22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800de26:	428b      	cmp	r3, r1
 800de28:	bf86      	itte	hi
 800de2a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800debc <_strtod_l+0x59c>
 800de2e:	f04f 38ff 	movhi.w	r8, #4294967295
 800de32:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800de36:	2300      	movs	r3, #0
 800de38:	9304      	str	r3, [sp, #16]
 800de3a:	e07b      	b.n	800df34 <_strtod_l+0x614>
 800de3c:	07ea      	lsls	r2, r5, #31
 800de3e:	d505      	bpl.n	800de4c <_strtod_l+0x52c>
 800de40:	9b04      	ldr	r3, [sp, #16]
 800de42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de46:	f7f2 fbd7 	bl	80005f8 <__aeabi_dmul>
 800de4a:	2301      	movs	r3, #1
 800de4c:	9a04      	ldr	r2, [sp, #16]
 800de4e:	3208      	adds	r2, #8
 800de50:	f10a 0a01 	add.w	sl, sl, #1
 800de54:	106d      	asrs	r5, r5, #1
 800de56:	9204      	str	r2, [sp, #16]
 800de58:	e7cc      	b.n	800ddf4 <_strtod_l+0x4d4>
 800de5a:	d0ec      	beq.n	800de36 <_strtod_l+0x516>
 800de5c:	426d      	negs	r5, r5
 800de5e:	f015 020f 	ands.w	r2, r5, #15
 800de62:	d00a      	beq.n	800de7a <_strtod_l+0x55a>
 800de64:	4b11      	ldr	r3, [pc, #68]	; (800deac <_strtod_l+0x58c>)
 800de66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de6a:	4640      	mov	r0, r8
 800de6c:	4649      	mov	r1, r9
 800de6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de72:	f7f2 fceb 	bl	800084c <__aeabi_ddiv>
 800de76:	4680      	mov	r8, r0
 800de78:	4689      	mov	r9, r1
 800de7a:	112d      	asrs	r5, r5, #4
 800de7c:	d0db      	beq.n	800de36 <_strtod_l+0x516>
 800de7e:	2d1f      	cmp	r5, #31
 800de80:	dd1e      	ble.n	800dec0 <_strtod_l+0x5a0>
 800de82:	2500      	movs	r5, #0
 800de84:	46ab      	mov	fp, r5
 800de86:	9509      	str	r5, [sp, #36]	; 0x24
 800de88:	9505      	str	r5, [sp, #20]
 800de8a:	2322      	movs	r3, #34	; 0x22
 800de8c:	f04f 0800 	mov.w	r8, #0
 800de90:	f04f 0900 	mov.w	r9, #0
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	e78d      	b.n	800ddb4 <_strtod_l+0x494>
 800de98:	0801004d 	.word	0x0801004d
 800de9c:	08010274 	.word	0x08010274
 800dea0:	08010045 	.word	0x08010045
 800dea4:	0801007c 	.word	0x0801007c
 800dea8:	08010405 	.word	0x08010405
 800deac:	08010188 	.word	0x08010188
 800deb0:	08010160 	.word	0x08010160
 800deb4:	7ff00000 	.word	0x7ff00000
 800deb8:	7ca00000 	.word	0x7ca00000
 800debc:	7fefffff 	.word	0x7fefffff
 800dec0:	f015 0310 	ands.w	r3, r5, #16
 800dec4:	bf18      	it	ne
 800dec6:	236a      	movne	r3, #106	; 0x6a
 800dec8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e26c <_strtod_l+0x94c>
 800decc:	9304      	str	r3, [sp, #16]
 800dece:	4640      	mov	r0, r8
 800ded0:	4649      	mov	r1, r9
 800ded2:	2300      	movs	r3, #0
 800ded4:	07ea      	lsls	r2, r5, #31
 800ded6:	d504      	bpl.n	800dee2 <_strtod_l+0x5c2>
 800ded8:	e9da 2300 	ldrd	r2, r3, [sl]
 800dedc:	f7f2 fb8c 	bl	80005f8 <__aeabi_dmul>
 800dee0:	2301      	movs	r3, #1
 800dee2:	106d      	asrs	r5, r5, #1
 800dee4:	f10a 0a08 	add.w	sl, sl, #8
 800dee8:	d1f4      	bne.n	800ded4 <_strtod_l+0x5b4>
 800deea:	b10b      	cbz	r3, 800def0 <_strtod_l+0x5d0>
 800deec:	4680      	mov	r8, r0
 800deee:	4689      	mov	r9, r1
 800def0:	9b04      	ldr	r3, [sp, #16]
 800def2:	b1bb      	cbz	r3, 800df24 <_strtod_l+0x604>
 800def4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800def8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800defc:	2b00      	cmp	r3, #0
 800defe:	4649      	mov	r1, r9
 800df00:	dd10      	ble.n	800df24 <_strtod_l+0x604>
 800df02:	2b1f      	cmp	r3, #31
 800df04:	f340 811e 	ble.w	800e144 <_strtod_l+0x824>
 800df08:	2b34      	cmp	r3, #52	; 0x34
 800df0a:	bfde      	ittt	le
 800df0c:	f04f 33ff 	movle.w	r3, #4294967295
 800df10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800df14:	4093      	lslle	r3, r2
 800df16:	f04f 0800 	mov.w	r8, #0
 800df1a:	bfcc      	ite	gt
 800df1c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800df20:	ea03 0901 	andle.w	r9, r3, r1
 800df24:	2200      	movs	r2, #0
 800df26:	2300      	movs	r3, #0
 800df28:	4640      	mov	r0, r8
 800df2a:	4649      	mov	r1, r9
 800df2c:	f7f2 fdcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800df30:	2800      	cmp	r0, #0
 800df32:	d1a6      	bne.n	800de82 <_strtod_l+0x562>
 800df34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df36:	9300      	str	r3, [sp, #0]
 800df38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df3a:	4633      	mov	r3, r6
 800df3c:	465a      	mov	r2, fp
 800df3e:	4620      	mov	r0, r4
 800df40:	f7ff f8cc 	bl	800d0dc <__s2b>
 800df44:	9009      	str	r0, [sp, #36]	; 0x24
 800df46:	2800      	cmp	r0, #0
 800df48:	f43f af2a 	beq.w	800dda0 <_strtod_l+0x480>
 800df4c:	9a08      	ldr	r2, [sp, #32]
 800df4e:	9b05      	ldr	r3, [sp, #20]
 800df50:	2a00      	cmp	r2, #0
 800df52:	eba3 0307 	sub.w	r3, r3, r7
 800df56:	bfa8      	it	ge
 800df58:	2300      	movge	r3, #0
 800df5a:	930c      	str	r3, [sp, #48]	; 0x30
 800df5c:	2500      	movs	r5, #0
 800df5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800df62:	9312      	str	r3, [sp, #72]	; 0x48
 800df64:	46ab      	mov	fp, r5
 800df66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df68:	4620      	mov	r0, r4
 800df6a:	6859      	ldr	r1, [r3, #4]
 800df6c:	f7ff f80e 	bl	800cf8c <_Balloc>
 800df70:	9005      	str	r0, [sp, #20]
 800df72:	2800      	cmp	r0, #0
 800df74:	f43f af18 	beq.w	800dda8 <_strtod_l+0x488>
 800df78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df7a:	691a      	ldr	r2, [r3, #16]
 800df7c:	3202      	adds	r2, #2
 800df7e:	f103 010c 	add.w	r1, r3, #12
 800df82:	0092      	lsls	r2, r2, #2
 800df84:	300c      	adds	r0, #12
 800df86:	f000 ff51 	bl	800ee2c <memcpy>
 800df8a:	ec49 8b10 	vmov	d0, r8, r9
 800df8e:	aa18      	add	r2, sp, #96	; 0x60
 800df90:	a917      	add	r1, sp, #92	; 0x5c
 800df92:	4620      	mov	r0, r4
 800df94:	f7ff fbd6 	bl	800d744 <__d2b>
 800df98:	ec49 8b18 	vmov	d8, r8, r9
 800df9c:	9016      	str	r0, [sp, #88]	; 0x58
 800df9e:	2800      	cmp	r0, #0
 800dfa0:	f43f af02 	beq.w	800dda8 <_strtod_l+0x488>
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f7ff f930 	bl	800d20c <__i2b>
 800dfac:	4683      	mov	fp, r0
 800dfae:	2800      	cmp	r0, #0
 800dfb0:	f43f aefa 	beq.w	800dda8 <_strtod_l+0x488>
 800dfb4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800dfb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dfb8:	2e00      	cmp	r6, #0
 800dfba:	bfab      	itete	ge
 800dfbc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800dfbe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800dfc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800dfc2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800dfc6:	bfac      	ite	ge
 800dfc8:	eb06 0a03 	addge.w	sl, r6, r3
 800dfcc:	1b9f      	sublt	r7, r3, r6
 800dfce:	9b04      	ldr	r3, [sp, #16]
 800dfd0:	1af6      	subs	r6, r6, r3
 800dfd2:	4416      	add	r6, r2
 800dfd4:	4ba0      	ldr	r3, [pc, #640]	; (800e258 <_strtod_l+0x938>)
 800dfd6:	3e01      	subs	r6, #1
 800dfd8:	429e      	cmp	r6, r3
 800dfda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dfde:	f280 80c4 	bge.w	800e16a <_strtod_l+0x84a>
 800dfe2:	1b9b      	subs	r3, r3, r6
 800dfe4:	2b1f      	cmp	r3, #31
 800dfe6:	eba2 0203 	sub.w	r2, r2, r3
 800dfea:	f04f 0101 	mov.w	r1, #1
 800dfee:	f300 80b0 	bgt.w	800e152 <_strtod_l+0x832>
 800dff2:	fa01 f303 	lsl.w	r3, r1, r3
 800dff6:	930e      	str	r3, [sp, #56]	; 0x38
 800dff8:	2300      	movs	r3, #0
 800dffa:	930d      	str	r3, [sp, #52]	; 0x34
 800dffc:	eb0a 0602 	add.w	r6, sl, r2
 800e000:	9b04      	ldr	r3, [sp, #16]
 800e002:	45b2      	cmp	sl, r6
 800e004:	4417      	add	r7, r2
 800e006:	441f      	add	r7, r3
 800e008:	4653      	mov	r3, sl
 800e00a:	bfa8      	it	ge
 800e00c:	4633      	movge	r3, r6
 800e00e:	42bb      	cmp	r3, r7
 800e010:	bfa8      	it	ge
 800e012:	463b      	movge	r3, r7
 800e014:	2b00      	cmp	r3, #0
 800e016:	bfc2      	ittt	gt
 800e018:	1af6      	subgt	r6, r6, r3
 800e01a:	1aff      	subgt	r7, r7, r3
 800e01c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e022:	2b00      	cmp	r3, #0
 800e024:	dd17      	ble.n	800e056 <_strtod_l+0x736>
 800e026:	4659      	mov	r1, fp
 800e028:	461a      	mov	r2, r3
 800e02a:	4620      	mov	r0, r4
 800e02c:	f7ff f9ae 	bl	800d38c <__pow5mult>
 800e030:	4683      	mov	fp, r0
 800e032:	2800      	cmp	r0, #0
 800e034:	f43f aeb8 	beq.w	800dda8 <_strtod_l+0x488>
 800e038:	4601      	mov	r1, r0
 800e03a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e03c:	4620      	mov	r0, r4
 800e03e:	f7ff f8fb 	bl	800d238 <__multiply>
 800e042:	900b      	str	r0, [sp, #44]	; 0x2c
 800e044:	2800      	cmp	r0, #0
 800e046:	f43f aeaf 	beq.w	800dda8 <_strtod_l+0x488>
 800e04a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e04c:	4620      	mov	r0, r4
 800e04e:	f7fe ffdd 	bl	800d00c <_Bfree>
 800e052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e054:	9316      	str	r3, [sp, #88]	; 0x58
 800e056:	2e00      	cmp	r6, #0
 800e058:	f300 808c 	bgt.w	800e174 <_strtod_l+0x854>
 800e05c:	9b08      	ldr	r3, [sp, #32]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	dd08      	ble.n	800e074 <_strtod_l+0x754>
 800e062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e064:	9905      	ldr	r1, [sp, #20]
 800e066:	4620      	mov	r0, r4
 800e068:	f7ff f990 	bl	800d38c <__pow5mult>
 800e06c:	9005      	str	r0, [sp, #20]
 800e06e:	2800      	cmp	r0, #0
 800e070:	f43f ae9a 	beq.w	800dda8 <_strtod_l+0x488>
 800e074:	2f00      	cmp	r7, #0
 800e076:	dd08      	ble.n	800e08a <_strtod_l+0x76a>
 800e078:	9905      	ldr	r1, [sp, #20]
 800e07a:	463a      	mov	r2, r7
 800e07c:	4620      	mov	r0, r4
 800e07e:	f7ff f9df 	bl	800d440 <__lshift>
 800e082:	9005      	str	r0, [sp, #20]
 800e084:	2800      	cmp	r0, #0
 800e086:	f43f ae8f 	beq.w	800dda8 <_strtod_l+0x488>
 800e08a:	f1ba 0f00 	cmp.w	sl, #0
 800e08e:	dd08      	ble.n	800e0a2 <_strtod_l+0x782>
 800e090:	4659      	mov	r1, fp
 800e092:	4652      	mov	r2, sl
 800e094:	4620      	mov	r0, r4
 800e096:	f7ff f9d3 	bl	800d440 <__lshift>
 800e09a:	4683      	mov	fp, r0
 800e09c:	2800      	cmp	r0, #0
 800e09e:	f43f ae83 	beq.w	800dda8 <_strtod_l+0x488>
 800e0a2:	9a05      	ldr	r2, [sp, #20]
 800e0a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f7ff fa52 	bl	800d550 <__mdiff>
 800e0ac:	4605      	mov	r5, r0
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f ae7a 	beq.w	800dda8 <_strtod_l+0x488>
 800e0b4:	68c3      	ldr	r3, [r0, #12]
 800e0b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60c3      	str	r3, [r0, #12]
 800e0bc:	4659      	mov	r1, fp
 800e0be:	f7ff fa2b 	bl	800d518 <__mcmp>
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	da60      	bge.n	800e188 <_strtod_l+0x868>
 800e0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0c8:	ea53 0308 	orrs.w	r3, r3, r8
 800e0cc:	f040 8084 	bne.w	800e1d8 <_strtod_l+0x8b8>
 800e0d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d17f      	bne.n	800e1d8 <_strtod_l+0x8b8>
 800e0d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e0dc:	0d1b      	lsrs	r3, r3, #20
 800e0de:	051b      	lsls	r3, r3, #20
 800e0e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e0e4:	d978      	bls.n	800e1d8 <_strtod_l+0x8b8>
 800e0e6:	696b      	ldr	r3, [r5, #20]
 800e0e8:	b913      	cbnz	r3, 800e0f0 <_strtod_l+0x7d0>
 800e0ea:	692b      	ldr	r3, [r5, #16]
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	dd73      	ble.n	800e1d8 <_strtod_l+0x8b8>
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	f7ff f9a3 	bl	800d440 <__lshift>
 800e0fa:	4659      	mov	r1, fp
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	f7ff fa0b 	bl	800d518 <__mcmp>
 800e102:	2800      	cmp	r0, #0
 800e104:	dd68      	ble.n	800e1d8 <_strtod_l+0x8b8>
 800e106:	9904      	ldr	r1, [sp, #16]
 800e108:	4a54      	ldr	r2, [pc, #336]	; (800e25c <_strtod_l+0x93c>)
 800e10a:	464b      	mov	r3, r9
 800e10c:	2900      	cmp	r1, #0
 800e10e:	f000 8084 	beq.w	800e21a <_strtod_l+0x8fa>
 800e112:	ea02 0109 	and.w	r1, r2, r9
 800e116:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e11a:	dc7e      	bgt.n	800e21a <_strtod_l+0x8fa>
 800e11c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e120:	f77f aeb3 	ble.w	800de8a <_strtod_l+0x56a>
 800e124:	4b4e      	ldr	r3, [pc, #312]	; (800e260 <_strtod_l+0x940>)
 800e126:	4640      	mov	r0, r8
 800e128:	4649      	mov	r1, r9
 800e12a:	2200      	movs	r2, #0
 800e12c:	f7f2 fa64 	bl	80005f8 <__aeabi_dmul>
 800e130:	4b4a      	ldr	r3, [pc, #296]	; (800e25c <_strtod_l+0x93c>)
 800e132:	400b      	ands	r3, r1
 800e134:	4680      	mov	r8, r0
 800e136:	4689      	mov	r9, r1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	f47f ae3f 	bne.w	800ddbc <_strtod_l+0x49c>
 800e13e:	2322      	movs	r3, #34	; 0x22
 800e140:	6023      	str	r3, [r4, #0]
 800e142:	e63b      	b.n	800ddbc <_strtod_l+0x49c>
 800e144:	f04f 32ff 	mov.w	r2, #4294967295
 800e148:	fa02 f303 	lsl.w	r3, r2, r3
 800e14c:	ea03 0808 	and.w	r8, r3, r8
 800e150:	e6e8      	b.n	800df24 <_strtod_l+0x604>
 800e152:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e156:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e15a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e15e:	36e2      	adds	r6, #226	; 0xe2
 800e160:	fa01 f306 	lsl.w	r3, r1, r6
 800e164:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e168:	e748      	b.n	800dffc <_strtod_l+0x6dc>
 800e16a:	2100      	movs	r1, #0
 800e16c:	2301      	movs	r3, #1
 800e16e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e172:	e743      	b.n	800dffc <_strtod_l+0x6dc>
 800e174:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e176:	4632      	mov	r2, r6
 800e178:	4620      	mov	r0, r4
 800e17a:	f7ff f961 	bl	800d440 <__lshift>
 800e17e:	9016      	str	r0, [sp, #88]	; 0x58
 800e180:	2800      	cmp	r0, #0
 800e182:	f47f af6b 	bne.w	800e05c <_strtod_l+0x73c>
 800e186:	e60f      	b.n	800dda8 <_strtod_l+0x488>
 800e188:	46ca      	mov	sl, r9
 800e18a:	d171      	bne.n	800e270 <_strtod_l+0x950>
 800e18c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e18e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e192:	b352      	cbz	r2, 800e1ea <_strtod_l+0x8ca>
 800e194:	4a33      	ldr	r2, [pc, #204]	; (800e264 <_strtod_l+0x944>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d12a      	bne.n	800e1f0 <_strtod_l+0x8d0>
 800e19a:	9b04      	ldr	r3, [sp, #16]
 800e19c:	4641      	mov	r1, r8
 800e19e:	b1fb      	cbz	r3, 800e1e0 <_strtod_l+0x8c0>
 800e1a0:	4b2e      	ldr	r3, [pc, #184]	; (800e25c <_strtod_l+0x93c>)
 800e1a2:	ea09 0303 	and.w	r3, r9, r3
 800e1a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ae:	d81a      	bhi.n	800e1e6 <_strtod_l+0x8c6>
 800e1b0:	0d1b      	lsrs	r3, r3, #20
 800e1b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e1ba:	4299      	cmp	r1, r3
 800e1bc:	d118      	bne.n	800e1f0 <_strtod_l+0x8d0>
 800e1be:	4b2a      	ldr	r3, [pc, #168]	; (800e268 <_strtod_l+0x948>)
 800e1c0:	459a      	cmp	sl, r3
 800e1c2:	d102      	bne.n	800e1ca <_strtod_l+0x8aa>
 800e1c4:	3101      	adds	r1, #1
 800e1c6:	f43f adef 	beq.w	800dda8 <_strtod_l+0x488>
 800e1ca:	4b24      	ldr	r3, [pc, #144]	; (800e25c <_strtod_l+0x93c>)
 800e1cc:	ea0a 0303 	and.w	r3, sl, r3
 800e1d0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e1d4:	f04f 0800 	mov.w	r8, #0
 800e1d8:	9b04      	ldr	r3, [sp, #16]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1a2      	bne.n	800e124 <_strtod_l+0x804>
 800e1de:	e5ed      	b.n	800ddbc <_strtod_l+0x49c>
 800e1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1e4:	e7e9      	b.n	800e1ba <_strtod_l+0x89a>
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	e7e7      	b.n	800e1ba <_strtod_l+0x89a>
 800e1ea:	ea53 0308 	orrs.w	r3, r3, r8
 800e1ee:	d08a      	beq.n	800e106 <_strtod_l+0x7e6>
 800e1f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1f2:	b1e3      	cbz	r3, 800e22e <_strtod_l+0x90e>
 800e1f4:	ea13 0f0a 	tst.w	r3, sl
 800e1f8:	d0ee      	beq.n	800e1d8 <_strtod_l+0x8b8>
 800e1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1fc:	9a04      	ldr	r2, [sp, #16]
 800e1fe:	4640      	mov	r0, r8
 800e200:	4649      	mov	r1, r9
 800e202:	b1c3      	cbz	r3, 800e236 <_strtod_l+0x916>
 800e204:	f7ff fb6f 	bl	800d8e6 <sulp>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	ec51 0b18 	vmov	r0, r1, d8
 800e210:	f7f2 f83c 	bl	800028c <__adddf3>
 800e214:	4680      	mov	r8, r0
 800e216:	4689      	mov	r9, r1
 800e218:	e7de      	b.n	800e1d8 <_strtod_l+0x8b8>
 800e21a:	4013      	ands	r3, r2
 800e21c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e220:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e224:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e228:	f04f 38ff 	mov.w	r8, #4294967295
 800e22c:	e7d4      	b.n	800e1d8 <_strtod_l+0x8b8>
 800e22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e230:	ea13 0f08 	tst.w	r3, r8
 800e234:	e7e0      	b.n	800e1f8 <_strtod_l+0x8d8>
 800e236:	f7ff fb56 	bl	800d8e6 <sulp>
 800e23a:	4602      	mov	r2, r0
 800e23c:	460b      	mov	r3, r1
 800e23e:	ec51 0b18 	vmov	r0, r1, d8
 800e242:	f7f2 f821 	bl	8000288 <__aeabi_dsub>
 800e246:	2200      	movs	r2, #0
 800e248:	2300      	movs	r3, #0
 800e24a:	4680      	mov	r8, r0
 800e24c:	4689      	mov	r9, r1
 800e24e:	f7f2 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e252:	2800      	cmp	r0, #0
 800e254:	d0c0      	beq.n	800e1d8 <_strtod_l+0x8b8>
 800e256:	e618      	b.n	800de8a <_strtod_l+0x56a>
 800e258:	fffffc02 	.word	0xfffffc02
 800e25c:	7ff00000 	.word	0x7ff00000
 800e260:	39500000 	.word	0x39500000
 800e264:	000fffff 	.word	0x000fffff
 800e268:	7fefffff 	.word	0x7fefffff
 800e26c:	08010288 	.word	0x08010288
 800e270:	4659      	mov	r1, fp
 800e272:	4628      	mov	r0, r5
 800e274:	f7ff fac0 	bl	800d7f8 <__ratio>
 800e278:	ec57 6b10 	vmov	r6, r7, d0
 800e27c:	ee10 0a10 	vmov	r0, s0
 800e280:	2200      	movs	r2, #0
 800e282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e286:	4639      	mov	r1, r7
 800e288:	f7f2 fc32 	bl	8000af0 <__aeabi_dcmple>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d071      	beq.n	800e374 <_strtod_l+0xa54>
 800e290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e292:	2b00      	cmp	r3, #0
 800e294:	d17c      	bne.n	800e390 <_strtod_l+0xa70>
 800e296:	f1b8 0f00 	cmp.w	r8, #0
 800e29a:	d15a      	bne.n	800e352 <_strtod_l+0xa32>
 800e29c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d15d      	bne.n	800e360 <_strtod_l+0xa40>
 800e2a4:	4b90      	ldr	r3, [pc, #576]	; (800e4e8 <_strtod_l+0xbc8>)
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	f7f2 fc16 	bl	8000adc <__aeabi_dcmplt>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d15c      	bne.n	800e36e <_strtod_l+0xa4e>
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	4639      	mov	r1, r7
 800e2b8:	4b8c      	ldr	r3, [pc, #560]	; (800e4ec <_strtod_l+0xbcc>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f7f2 f99c 	bl	80005f8 <__aeabi_dmul>
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	460f      	mov	r7, r1
 800e2c4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e2c8:	9606      	str	r6, [sp, #24]
 800e2ca:	9307      	str	r3, [sp, #28]
 800e2cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e2d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e2d4:	4b86      	ldr	r3, [pc, #536]	; (800e4f0 <_strtod_l+0xbd0>)
 800e2d6:	ea0a 0303 	and.w	r3, sl, r3
 800e2da:	930d      	str	r3, [sp, #52]	; 0x34
 800e2dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2de:	4b85      	ldr	r3, [pc, #532]	; (800e4f4 <_strtod_l+0xbd4>)
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	f040 8090 	bne.w	800e406 <_strtod_l+0xae6>
 800e2e6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e2ea:	ec49 8b10 	vmov	d0, r8, r9
 800e2ee:	f7ff f9b9 	bl	800d664 <__ulp>
 800e2f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e2f6:	ec51 0b10 	vmov	r0, r1, d0
 800e2fa:	f7f2 f97d 	bl	80005f8 <__aeabi_dmul>
 800e2fe:	4642      	mov	r2, r8
 800e300:	464b      	mov	r3, r9
 800e302:	f7f1 ffc3 	bl	800028c <__adddf3>
 800e306:	460b      	mov	r3, r1
 800e308:	4979      	ldr	r1, [pc, #484]	; (800e4f0 <_strtod_l+0xbd0>)
 800e30a:	4a7b      	ldr	r2, [pc, #492]	; (800e4f8 <_strtod_l+0xbd8>)
 800e30c:	4019      	ands	r1, r3
 800e30e:	4291      	cmp	r1, r2
 800e310:	4680      	mov	r8, r0
 800e312:	d944      	bls.n	800e39e <_strtod_l+0xa7e>
 800e314:	ee18 2a90 	vmov	r2, s17
 800e318:	4b78      	ldr	r3, [pc, #480]	; (800e4fc <_strtod_l+0xbdc>)
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d104      	bne.n	800e328 <_strtod_l+0xa08>
 800e31e:	ee18 3a10 	vmov	r3, s16
 800e322:	3301      	adds	r3, #1
 800e324:	f43f ad40 	beq.w	800dda8 <_strtod_l+0x488>
 800e328:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e4fc <_strtod_l+0xbdc>
 800e32c:	f04f 38ff 	mov.w	r8, #4294967295
 800e330:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e332:	4620      	mov	r0, r4
 800e334:	f7fe fe6a 	bl	800d00c <_Bfree>
 800e338:	9905      	ldr	r1, [sp, #20]
 800e33a:	4620      	mov	r0, r4
 800e33c:	f7fe fe66 	bl	800d00c <_Bfree>
 800e340:	4659      	mov	r1, fp
 800e342:	4620      	mov	r0, r4
 800e344:	f7fe fe62 	bl	800d00c <_Bfree>
 800e348:	4629      	mov	r1, r5
 800e34a:	4620      	mov	r0, r4
 800e34c:	f7fe fe5e 	bl	800d00c <_Bfree>
 800e350:	e609      	b.n	800df66 <_strtod_l+0x646>
 800e352:	f1b8 0f01 	cmp.w	r8, #1
 800e356:	d103      	bne.n	800e360 <_strtod_l+0xa40>
 800e358:	f1b9 0f00 	cmp.w	r9, #0
 800e35c:	f43f ad95 	beq.w	800de8a <_strtod_l+0x56a>
 800e360:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e4b8 <_strtod_l+0xb98>
 800e364:	4f60      	ldr	r7, [pc, #384]	; (800e4e8 <_strtod_l+0xbc8>)
 800e366:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e36a:	2600      	movs	r6, #0
 800e36c:	e7ae      	b.n	800e2cc <_strtod_l+0x9ac>
 800e36e:	4f5f      	ldr	r7, [pc, #380]	; (800e4ec <_strtod_l+0xbcc>)
 800e370:	2600      	movs	r6, #0
 800e372:	e7a7      	b.n	800e2c4 <_strtod_l+0x9a4>
 800e374:	4b5d      	ldr	r3, [pc, #372]	; (800e4ec <_strtod_l+0xbcc>)
 800e376:	4630      	mov	r0, r6
 800e378:	4639      	mov	r1, r7
 800e37a:	2200      	movs	r2, #0
 800e37c:	f7f2 f93c 	bl	80005f8 <__aeabi_dmul>
 800e380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e382:	4606      	mov	r6, r0
 800e384:	460f      	mov	r7, r1
 800e386:	2b00      	cmp	r3, #0
 800e388:	d09c      	beq.n	800e2c4 <_strtod_l+0x9a4>
 800e38a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e38e:	e79d      	b.n	800e2cc <_strtod_l+0x9ac>
 800e390:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e4c0 <_strtod_l+0xba0>
 800e394:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e398:	ec57 6b17 	vmov	r6, r7, d7
 800e39c:	e796      	b.n	800e2cc <_strtod_l+0x9ac>
 800e39e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e3a2:	9b04      	ldr	r3, [sp, #16]
 800e3a4:	46ca      	mov	sl, r9
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1c2      	bne.n	800e330 <_strtod_l+0xa10>
 800e3aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3b0:	0d1b      	lsrs	r3, r3, #20
 800e3b2:	051b      	lsls	r3, r3, #20
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d1bb      	bne.n	800e330 <_strtod_l+0xa10>
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	f7f2 fc7c 	bl	8000cb8 <__aeabi_d2lz>
 800e3c0:	f7f2 f8ec 	bl	800059c <__aeabi_l2d>
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	4639      	mov	r1, r7
 800e3cc:	f7f1 ff5c 	bl	8000288 <__aeabi_dsub>
 800e3d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e3d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3d6:	ea43 0308 	orr.w	r3, r3, r8
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	4606      	mov	r6, r0
 800e3de:	460f      	mov	r7, r1
 800e3e0:	d054      	beq.n	800e48c <_strtod_l+0xb6c>
 800e3e2:	a339      	add	r3, pc, #228	; (adr r3, 800e4c8 <_strtod_l+0xba8>)
 800e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e8:	f7f2 fb78 	bl	8000adc <__aeabi_dcmplt>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	f47f ace5 	bne.w	800ddbc <_strtod_l+0x49c>
 800e3f2:	a337      	add	r3, pc, #220	; (adr r3, 800e4d0 <_strtod_l+0xbb0>)
 800e3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	f7f2 fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 800e400:	2800      	cmp	r0, #0
 800e402:	d095      	beq.n	800e330 <_strtod_l+0xa10>
 800e404:	e4da      	b.n	800ddbc <_strtod_l+0x49c>
 800e406:	9b04      	ldr	r3, [sp, #16]
 800e408:	b333      	cbz	r3, 800e458 <_strtod_l+0xb38>
 800e40a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e40c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e410:	d822      	bhi.n	800e458 <_strtod_l+0xb38>
 800e412:	a331      	add	r3, pc, #196	; (adr r3, 800e4d8 <_strtod_l+0xbb8>)
 800e414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e418:	4630      	mov	r0, r6
 800e41a:	4639      	mov	r1, r7
 800e41c:	f7f2 fb68 	bl	8000af0 <__aeabi_dcmple>
 800e420:	b1a0      	cbz	r0, 800e44c <_strtod_l+0xb2c>
 800e422:	4639      	mov	r1, r7
 800e424:	4630      	mov	r0, r6
 800e426:	f7f2 fbbf 	bl	8000ba8 <__aeabi_d2uiz>
 800e42a:	2801      	cmp	r0, #1
 800e42c:	bf38      	it	cc
 800e42e:	2001      	movcc	r0, #1
 800e430:	f7f2 f868 	bl	8000504 <__aeabi_ui2d>
 800e434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e436:	4606      	mov	r6, r0
 800e438:	460f      	mov	r7, r1
 800e43a:	bb23      	cbnz	r3, 800e486 <_strtod_l+0xb66>
 800e43c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e440:	9010      	str	r0, [sp, #64]	; 0x40
 800e442:	9311      	str	r3, [sp, #68]	; 0x44
 800e444:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e448:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e44c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e44e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e450:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e454:	1a9b      	subs	r3, r3, r2
 800e456:	930f      	str	r3, [sp, #60]	; 0x3c
 800e458:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e45c:	eeb0 0a48 	vmov.f32	s0, s16
 800e460:	eef0 0a68 	vmov.f32	s1, s17
 800e464:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e468:	f7ff f8fc 	bl	800d664 <__ulp>
 800e46c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e470:	ec53 2b10 	vmov	r2, r3, d0
 800e474:	f7f2 f8c0 	bl	80005f8 <__aeabi_dmul>
 800e478:	ec53 2b18 	vmov	r2, r3, d8
 800e47c:	f7f1 ff06 	bl	800028c <__adddf3>
 800e480:	4680      	mov	r8, r0
 800e482:	4689      	mov	r9, r1
 800e484:	e78d      	b.n	800e3a2 <_strtod_l+0xa82>
 800e486:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e48a:	e7db      	b.n	800e444 <_strtod_l+0xb24>
 800e48c:	a314      	add	r3, pc, #80	; (adr r3, 800e4e0 <_strtod_l+0xbc0>)
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	f7f2 fb23 	bl	8000adc <__aeabi_dcmplt>
 800e496:	e7b3      	b.n	800e400 <_strtod_l+0xae0>
 800e498:	2300      	movs	r3, #0
 800e49a:	930a      	str	r3, [sp, #40]	; 0x28
 800e49c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4a0:	6013      	str	r3, [r2, #0]
 800e4a2:	f7ff ba7c 	b.w	800d99e <_strtod_l+0x7e>
 800e4a6:	2a65      	cmp	r2, #101	; 0x65
 800e4a8:	f43f ab75 	beq.w	800db96 <_strtod_l+0x276>
 800e4ac:	2a45      	cmp	r2, #69	; 0x45
 800e4ae:	f43f ab72 	beq.w	800db96 <_strtod_l+0x276>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	f7ff bbaa 	b.w	800dc0c <_strtod_l+0x2ec>
 800e4b8:	00000000 	.word	0x00000000
 800e4bc:	bff00000 	.word	0xbff00000
 800e4c0:	00000000 	.word	0x00000000
 800e4c4:	3ff00000 	.word	0x3ff00000
 800e4c8:	94a03595 	.word	0x94a03595
 800e4cc:	3fdfffff 	.word	0x3fdfffff
 800e4d0:	35afe535 	.word	0x35afe535
 800e4d4:	3fe00000 	.word	0x3fe00000
 800e4d8:	ffc00000 	.word	0xffc00000
 800e4dc:	41dfffff 	.word	0x41dfffff
 800e4e0:	94a03595 	.word	0x94a03595
 800e4e4:	3fcfffff 	.word	0x3fcfffff
 800e4e8:	3ff00000 	.word	0x3ff00000
 800e4ec:	3fe00000 	.word	0x3fe00000
 800e4f0:	7ff00000 	.word	0x7ff00000
 800e4f4:	7fe00000 	.word	0x7fe00000
 800e4f8:	7c9fffff 	.word	0x7c9fffff
 800e4fc:	7fefffff 	.word	0x7fefffff

0800e500 <_strtod_r>:
 800e500:	4b01      	ldr	r3, [pc, #4]	; (800e508 <_strtod_r+0x8>)
 800e502:	f7ff ba0d 	b.w	800d920 <_strtod_l>
 800e506:	bf00      	nop
 800e508:	20000084 	.word	0x20000084

0800e50c <_strtol_l.constprop.0>:
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e512:	d001      	beq.n	800e518 <_strtol_l.constprop.0+0xc>
 800e514:	2b24      	cmp	r3, #36	; 0x24
 800e516:	d906      	bls.n	800e526 <_strtol_l.constprop.0+0x1a>
 800e518:	f7fd fe3e 	bl	800c198 <__errno>
 800e51c:	2316      	movs	r3, #22
 800e51e:	6003      	str	r3, [r0, #0]
 800e520:	2000      	movs	r0, #0
 800e522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e526:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e60c <_strtol_l.constprop.0+0x100>
 800e52a:	460d      	mov	r5, r1
 800e52c:	462e      	mov	r6, r5
 800e52e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e532:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e536:	f017 0708 	ands.w	r7, r7, #8
 800e53a:	d1f7      	bne.n	800e52c <_strtol_l.constprop.0+0x20>
 800e53c:	2c2d      	cmp	r4, #45	; 0x2d
 800e53e:	d132      	bne.n	800e5a6 <_strtol_l.constprop.0+0x9a>
 800e540:	782c      	ldrb	r4, [r5, #0]
 800e542:	2701      	movs	r7, #1
 800e544:	1cb5      	adds	r5, r6, #2
 800e546:	2b00      	cmp	r3, #0
 800e548:	d05b      	beq.n	800e602 <_strtol_l.constprop.0+0xf6>
 800e54a:	2b10      	cmp	r3, #16
 800e54c:	d109      	bne.n	800e562 <_strtol_l.constprop.0+0x56>
 800e54e:	2c30      	cmp	r4, #48	; 0x30
 800e550:	d107      	bne.n	800e562 <_strtol_l.constprop.0+0x56>
 800e552:	782c      	ldrb	r4, [r5, #0]
 800e554:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e558:	2c58      	cmp	r4, #88	; 0x58
 800e55a:	d14d      	bne.n	800e5f8 <_strtol_l.constprop.0+0xec>
 800e55c:	786c      	ldrb	r4, [r5, #1]
 800e55e:	2310      	movs	r3, #16
 800e560:	3502      	adds	r5, #2
 800e562:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e566:	f108 38ff 	add.w	r8, r8, #4294967295
 800e56a:	f04f 0e00 	mov.w	lr, #0
 800e56e:	fbb8 f9f3 	udiv	r9, r8, r3
 800e572:	4676      	mov	r6, lr
 800e574:	fb03 8a19 	mls	sl, r3, r9, r8
 800e578:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e57c:	f1bc 0f09 	cmp.w	ip, #9
 800e580:	d816      	bhi.n	800e5b0 <_strtol_l.constprop.0+0xa4>
 800e582:	4664      	mov	r4, ip
 800e584:	42a3      	cmp	r3, r4
 800e586:	dd24      	ble.n	800e5d2 <_strtol_l.constprop.0+0xc6>
 800e588:	f1be 3fff 	cmp.w	lr, #4294967295
 800e58c:	d008      	beq.n	800e5a0 <_strtol_l.constprop.0+0x94>
 800e58e:	45b1      	cmp	r9, r6
 800e590:	d31c      	bcc.n	800e5cc <_strtol_l.constprop.0+0xc0>
 800e592:	d101      	bne.n	800e598 <_strtol_l.constprop.0+0x8c>
 800e594:	45a2      	cmp	sl, r4
 800e596:	db19      	blt.n	800e5cc <_strtol_l.constprop.0+0xc0>
 800e598:	fb06 4603 	mla	r6, r6, r3, r4
 800e59c:	f04f 0e01 	mov.w	lr, #1
 800e5a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5a4:	e7e8      	b.n	800e578 <_strtol_l.constprop.0+0x6c>
 800e5a6:	2c2b      	cmp	r4, #43	; 0x2b
 800e5a8:	bf04      	itt	eq
 800e5aa:	782c      	ldrbeq	r4, [r5, #0]
 800e5ac:	1cb5      	addeq	r5, r6, #2
 800e5ae:	e7ca      	b.n	800e546 <_strtol_l.constprop.0+0x3a>
 800e5b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e5b4:	f1bc 0f19 	cmp.w	ip, #25
 800e5b8:	d801      	bhi.n	800e5be <_strtol_l.constprop.0+0xb2>
 800e5ba:	3c37      	subs	r4, #55	; 0x37
 800e5bc:	e7e2      	b.n	800e584 <_strtol_l.constprop.0+0x78>
 800e5be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e5c2:	f1bc 0f19 	cmp.w	ip, #25
 800e5c6:	d804      	bhi.n	800e5d2 <_strtol_l.constprop.0+0xc6>
 800e5c8:	3c57      	subs	r4, #87	; 0x57
 800e5ca:	e7db      	b.n	800e584 <_strtol_l.constprop.0+0x78>
 800e5cc:	f04f 3eff 	mov.w	lr, #4294967295
 800e5d0:	e7e6      	b.n	800e5a0 <_strtol_l.constprop.0+0x94>
 800e5d2:	f1be 3fff 	cmp.w	lr, #4294967295
 800e5d6:	d105      	bne.n	800e5e4 <_strtol_l.constprop.0+0xd8>
 800e5d8:	2322      	movs	r3, #34	; 0x22
 800e5da:	6003      	str	r3, [r0, #0]
 800e5dc:	4646      	mov	r6, r8
 800e5de:	b942      	cbnz	r2, 800e5f2 <_strtol_l.constprop.0+0xe6>
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	e79e      	b.n	800e522 <_strtol_l.constprop.0+0x16>
 800e5e4:	b107      	cbz	r7, 800e5e8 <_strtol_l.constprop.0+0xdc>
 800e5e6:	4276      	negs	r6, r6
 800e5e8:	2a00      	cmp	r2, #0
 800e5ea:	d0f9      	beq.n	800e5e0 <_strtol_l.constprop.0+0xd4>
 800e5ec:	f1be 0f00 	cmp.w	lr, #0
 800e5f0:	d000      	beq.n	800e5f4 <_strtol_l.constprop.0+0xe8>
 800e5f2:	1e69      	subs	r1, r5, #1
 800e5f4:	6011      	str	r1, [r2, #0]
 800e5f6:	e7f3      	b.n	800e5e0 <_strtol_l.constprop.0+0xd4>
 800e5f8:	2430      	movs	r4, #48	; 0x30
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d1b1      	bne.n	800e562 <_strtol_l.constprop.0+0x56>
 800e5fe:	2308      	movs	r3, #8
 800e600:	e7af      	b.n	800e562 <_strtol_l.constprop.0+0x56>
 800e602:	2c30      	cmp	r4, #48	; 0x30
 800e604:	d0a5      	beq.n	800e552 <_strtol_l.constprop.0+0x46>
 800e606:	230a      	movs	r3, #10
 800e608:	e7ab      	b.n	800e562 <_strtol_l.constprop.0+0x56>
 800e60a:	bf00      	nop
 800e60c:	080102b1 	.word	0x080102b1

0800e610 <_strtol_r>:
 800e610:	f7ff bf7c 	b.w	800e50c <_strtol_l.constprop.0>

0800e614 <__ssputs_r>:
 800e614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e618:	688e      	ldr	r6, [r1, #8]
 800e61a:	461f      	mov	r7, r3
 800e61c:	42be      	cmp	r6, r7
 800e61e:	680b      	ldr	r3, [r1, #0]
 800e620:	4682      	mov	sl, r0
 800e622:	460c      	mov	r4, r1
 800e624:	4690      	mov	r8, r2
 800e626:	d82c      	bhi.n	800e682 <__ssputs_r+0x6e>
 800e628:	898a      	ldrh	r2, [r1, #12]
 800e62a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e62e:	d026      	beq.n	800e67e <__ssputs_r+0x6a>
 800e630:	6965      	ldr	r5, [r4, #20]
 800e632:	6909      	ldr	r1, [r1, #16]
 800e634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e638:	eba3 0901 	sub.w	r9, r3, r1
 800e63c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e640:	1c7b      	adds	r3, r7, #1
 800e642:	444b      	add	r3, r9
 800e644:	106d      	asrs	r5, r5, #1
 800e646:	429d      	cmp	r5, r3
 800e648:	bf38      	it	cc
 800e64a:	461d      	movcc	r5, r3
 800e64c:	0553      	lsls	r3, r2, #21
 800e64e:	d527      	bpl.n	800e6a0 <__ssputs_r+0x8c>
 800e650:	4629      	mov	r1, r5
 800e652:	f7fc fd05 	bl	800b060 <_malloc_r>
 800e656:	4606      	mov	r6, r0
 800e658:	b360      	cbz	r0, 800e6b4 <__ssputs_r+0xa0>
 800e65a:	6921      	ldr	r1, [r4, #16]
 800e65c:	464a      	mov	r2, r9
 800e65e:	f000 fbe5 	bl	800ee2c <memcpy>
 800e662:	89a3      	ldrh	r3, [r4, #12]
 800e664:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e66c:	81a3      	strh	r3, [r4, #12]
 800e66e:	6126      	str	r6, [r4, #16]
 800e670:	6165      	str	r5, [r4, #20]
 800e672:	444e      	add	r6, r9
 800e674:	eba5 0509 	sub.w	r5, r5, r9
 800e678:	6026      	str	r6, [r4, #0]
 800e67a:	60a5      	str	r5, [r4, #8]
 800e67c:	463e      	mov	r6, r7
 800e67e:	42be      	cmp	r6, r7
 800e680:	d900      	bls.n	800e684 <__ssputs_r+0x70>
 800e682:	463e      	mov	r6, r7
 800e684:	6820      	ldr	r0, [r4, #0]
 800e686:	4632      	mov	r2, r6
 800e688:	4641      	mov	r1, r8
 800e68a:	f000 fba3 	bl	800edd4 <memmove>
 800e68e:	68a3      	ldr	r3, [r4, #8]
 800e690:	1b9b      	subs	r3, r3, r6
 800e692:	60a3      	str	r3, [r4, #8]
 800e694:	6823      	ldr	r3, [r4, #0]
 800e696:	4433      	add	r3, r6
 800e698:	6023      	str	r3, [r4, #0]
 800e69a:	2000      	movs	r0, #0
 800e69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6a0:	462a      	mov	r2, r5
 800e6a2:	f000 ff76 	bl	800f592 <_realloc_r>
 800e6a6:	4606      	mov	r6, r0
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d1e0      	bne.n	800e66e <__ssputs_r+0x5a>
 800e6ac:	6921      	ldr	r1, [r4, #16]
 800e6ae:	4650      	mov	r0, sl
 800e6b0:	f7fe fc20 	bl	800cef4 <_free_r>
 800e6b4:	230c      	movs	r3, #12
 800e6b6:	f8ca 3000 	str.w	r3, [sl]
 800e6ba:	89a3      	ldrh	r3, [r4, #12]
 800e6bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c0:	81a3      	strh	r3, [r4, #12]
 800e6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c6:	e7e9      	b.n	800e69c <__ssputs_r+0x88>

0800e6c8 <_svfiprintf_r>:
 800e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6cc:	4698      	mov	r8, r3
 800e6ce:	898b      	ldrh	r3, [r1, #12]
 800e6d0:	061b      	lsls	r3, r3, #24
 800e6d2:	b09d      	sub	sp, #116	; 0x74
 800e6d4:	4607      	mov	r7, r0
 800e6d6:	460d      	mov	r5, r1
 800e6d8:	4614      	mov	r4, r2
 800e6da:	d50e      	bpl.n	800e6fa <_svfiprintf_r+0x32>
 800e6dc:	690b      	ldr	r3, [r1, #16]
 800e6de:	b963      	cbnz	r3, 800e6fa <_svfiprintf_r+0x32>
 800e6e0:	2140      	movs	r1, #64	; 0x40
 800e6e2:	f7fc fcbd 	bl	800b060 <_malloc_r>
 800e6e6:	6028      	str	r0, [r5, #0]
 800e6e8:	6128      	str	r0, [r5, #16]
 800e6ea:	b920      	cbnz	r0, 800e6f6 <_svfiprintf_r+0x2e>
 800e6ec:	230c      	movs	r3, #12
 800e6ee:	603b      	str	r3, [r7, #0]
 800e6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f4:	e0d0      	b.n	800e898 <_svfiprintf_r+0x1d0>
 800e6f6:	2340      	movs	r3, #64	; 0x40
 800e6f8:	616b      	str	r3, [r5, #20]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800e6fe:	2320      	movs	r3, #32
 800e700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e704:	f8cd 800c 	str.w	r8, [sp, #12]
 800e708:	2330      	movs	r3, #48	; 0x30
 800e70a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e8b0 <_svfiprintf_r+0x1e8>
 800e70e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e712:	f04f 0901 	mov.w	r9, #1
 800e716:	4623      	mov	r3, r4
 800e718:	469a      	mov	sl, r3
 800e71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e71e:	b10a      	cbz	r2, 800e724 <_svfiprintf_r+0x5c>
 800e720:	2a25      	cmp	r2, #37	; 0x25
 800e722:	d1f9      	bne.n	800e718 <_svfiprintf_r+0x50>
 800e724:	ebba 0b04 	subs.w	fp, sl, r4
 800e728:	d00b      	beq.n	800e742 <_svfiprintf_r+0x7a>
 800e72a:	465b      	mov	r3, fp
 800e72c:	4622      	mov	r2, r4
 800e72e:	4629      	mov	r1, r5
 800e730:	4638      	mov	r0, r7
 800e732:	f7ff ff6f 	bl	800e614 <__ssputs_r>
 800e736:	3001      	adds	r0, #1
 800e738:	f000 80a9 	beq.w	800e88e <_svfiprintf_r+0x1c6>
 800e73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e73e:	445a      	add	r2, fp
 800e740:	9209      	str	r2, [sp, #36]	; 0x24
 800e742:	f89a 3000 	ldrb.w	r3, [sl]
 800e746:	2b00      	cmp	r3, #0
 800e748:	f000 80a1 	beq.w	800e88e <_svfiprintf_r+0x1c6>
 800e74c:	2300      	movs	r3, #0
 800e74e:	f04f 32ff 	mov.w	r2, #4294967295
 800e752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e756:	f10a 0a01 	add.w	sl, sl, #1
 800e75a:	9304      	str	r3, [sp, #16]
 800e75c:	9307      	str	r3, [sp, #28]
 800e75e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e762:	931a      	str	r3, [sp, #104]	; 0x68
 800e764:	4654      	mov	r4, sl
 800e766:	2205      	movs	r2, #5
 800e768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e76c:	4850      	ldr	r0, [pc, #320]	; (800e8b0 <_svfiprintf_r+0x1e8>)
 800e76e:	f7f1 fd2f 	bl	80001d0 <memchr>
 800e772:	9a04      	ldr	r2, [sp, #16]
 800e774:	b9d8      	cbnz	r0, 800e7ae <_svfiprintf_r+0xe6>
 800e776:	06d0      	lsls	r0, r2, #27
 800e778:	bf44      	itt	mi
 800e77a:	2320      	movmi	r3, #32
 800e77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e780:	0711      	lsls	r1, r2, #28
 800e782:	bf44      	itt	mi
 800e784:	232b      	movmi	r3, #43	; 0x2b
 800e786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e78a:	f89a 3000 	ldrb.w	r3, [sl]
 800e78e:	2b2a      	cmp	r3, #42	; 0x2a
 800e790:	d015      	beq.n	800e7be <_svfiprintf_r+0xf6>
 800e792:	9a07      	ldr	r2, [sp, #28]
 800e794:	4654      	mov	r4, sl
 800e796:	2000      	movs	r0, #0
 800e798:	f04f 0c0a 	mov.w	ip, #10
 800e79c:	4621      	mov	r1, r4
 800e79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7a2:	3b30      	subs	r3, #48	; 0x30
 800e7a4:	2b09      	cmp	r3, #9
 800e7a6:	d94d      	bls.n	800e844 <_svfiprintf_r+0x17c>
 800e7a8:	b1b0      	cbz	r0, 800e7d8 <_svfiprintf_r+0x110>
 800e7aa:	9207      	str	r2, [sp, #28]
 800e7ac:	e014      	b.n	800e7d8 <_svfiprintf_r+0x110>
 800e7ae:	eba0 0308 	sub.w	r3, r0, r8
 800e7b2:	fa09 f303 	lsl.w	r3, r9, r3
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	9304      	str	r3, [sp, #16]
 800e7ba:	46a2      	mov	sl, r4
 800e7bc:	e7d2      	b.n	800e764 <_svfiprintf_r+0x9c>
 800e7be:	9b03      	ldr	r3, [sp, #12]
 800e7c0:	1d19      	adds	r1, r3, #4
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	9103      	str	r1, [sp, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	bfbb      	ittet	lt
 800e7ca:	425b      	neglt	r3, r3
 800e7cc:	f042 0202 	orrlt.w	r2, r2, #2
 800e7d0:	9307      	strge	r3, [sp, #28]
 800e7d2:	9307      	strlt	r3, [sp, #28]
 800e7d4:	bfb8      	it	lt
 800e7d6:	9204      	strlt	r2, [sp, #16]
 800e7d8:	7823      	ldrb	r3, [r4, #0]
 800e7da:	2b2e      	cmp	r3, #46	; 0x2e
 800e7dc:	d10c      	bne.n	800e7f8 <_svfiprintf_r+0x130>
 800e7de:	7863      	ldrb	r3, [r4, #1]
 800e7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e7e2:	d134      	bne.n	800e84e <_svfiprintf_r+0x186>
 800e7e4:	9b03      	ldr	r3, [sp, #12]
 800e7e6:	1d1a      	adds	r2, r3, #4
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	9203      	str	r2, [sp, #12]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	bfb8      	it	lt
 800e7f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7f4:	3402      	adds	r4, #2
 800e7f6:	9305      	str	r3, [sp, #20]
 800e7f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e8c0 <_svfiprintf_r+0x1f8>
 800e7fc:	7821      	ldrb	r1, [r4, #0]
 800e7fe:	2203      	movs	r2, #3
 800e800:	4650      	mov	r0, sl
 800e802:	f7f1 fce5 	bl	80001d0 <memchr>
 800e806:	b138      	cbz	r0, 800e818 <_svfiprintf_r+0x150>
 800e808:	9b04      	ldr	r3, [sp, #16]
 800e80a:	eba0 000a 	sub.w	r0, r0, sl
 800e80e:	2240      	movs	r2, #64	; 0x40
 800e810:	4082      	lsls	r2, r0
 800e812:	4313      	orrs	r3, r2
 800e814:	3401      	adds	r4, #1
 800e816:	9304      	str	r3, [sp, #16]
 800e818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e81c:	4825      	ldr	r0, [pc, #148]	; (800e8b4 <_svfiprintf_r+0x1ec>)
 800e81e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e822:	2206      	movs	r2, #6
 800e824:	f7f1 fcd4 	bl	80001d0 <memchr>
 800e828:	2800      	cmp	r0, #0
 800e82a:	d038      	beq.n	800e89e <_svfiprintf_r+0x1d6>
 800e82c:	4b22      	ldr	r3, [pc, #136]	; (800e8b8 <_svfiprintf_r+0x1f0>)
 800e82e:	bb1b      	cbnz	r3, 800e878 <_svfiprintf_r+0x1b0>
 800e830:	9b03      	ldr	r3, [sp, #12]
 800e832:	3307      	adds	r3, #7
 800e834:	f023 0307 	bic.w	r3, r3, #7
 800e838:	3308      	adds	r3, #8
 800e83a:	9303      	str	r3, [sp, #12]
 800e83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e83e:	4433      	add	r3, r6
 800e840:	9309      	str	r3, [sp, #36]	; 0x24
 800e842:	e768      	b.n	800e716 <_svfiprintf_r+0x4e>
 800e844:	fb0c 3202 	mla	r2, ip, r2, r3
 800e848:	460c      	mov	r4, r1
 800e84a:	2001      	movs	r0, #1
 800e84c:	e7a6      	b.n	800e79c <_svfiprintf_r+0xd4>
 800e84e:	2300      	movs	r3, #0
 800e850:	3401      	adds	r4, #1
 800e852:	9305      	str	r3, [sp, #20]
 800e854:	4619      	mov	r1, r3
 800e856:	f04f 0c0a 	mov.w	ip, #10
 800e85a:	4620      	mov	r0, r4
 800e85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e860:	3a30      	subs	r2, #48	; 0x30
 800e862:	2a09      	cmp	r2, #9
 800e864:	d903      	bls.n	800e86e <_svfiprintf_r+0x1a6>
 800e866:	2b00      	cmp	r3, #0
 800e868:	d0c6      	beq.n	800e7f8 <_svfiprintf_r+0x130>
 800e86a:	9105      	str	r1, [sp, #20]
 800e86c:	e7c4      	b.n	800e7f8 <_svfiprintf_r+0x130>
 800e86e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e872:	4604      	mov	r4, r0
 800e874:	2301      	movs	r3, #1
 800e876:	e7f0      	b.n	800e85a <_svfiprintf_r+0x192>
 800e878:	ab03      	add	r3, sp, #12
 800e87a:	9300      	str	r3, [sp, #0]
 800e87c:	462a      	mov	r2, r5
 800e87e:	4b0f      	ldr	r3, [pc, #60]	; (800e8bc <_svfiprintf_r+0x1f4>)
 800e880:	a904      	add	r1, sp, #16
 800e882:	4638      	mov	r0, r7
 800e884:	f7fc fd18 	bl	800b2b8 <_printf_float>
 800e888:	1c42      	adds	r2, r0, #1
 800e88a:	4606      	mov	r6, r0
 800e88c:	d1d6      	bne.n	800e83c <_svfiprintf_r+0x174>
 800e88e:	89ab      	ldrh	r3, [r5, #12]
 800e890:	065b      	lsls	r3, r3, #25
 800e892:	f53f af2d 	bmi.w	800e6f0 <_svfiprintf_r+0x28>
 800e896:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e898:	b01d      	add	sp, #116	; 0x74
 800e89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89e:	ab03      	add	r3, sp, #12
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	462a      	mov	r2, r5
 800e8a4:	4b05      	ldr	r3, [pc, #20]	; (800e8bc <_svfiprintf_r+0x1f4>)
 800e8a6:	a904      	add	r1, sp, #16
 800e8a8:	4638      	mov	r0, r7
 800e8aa:	f7fc ffa9 	bl	800b800 <_printf_i>
 800e8ae:	e7eb      	b.n	800e888 <_svfiprintf_r+0x1c0>
 800e8b0:	080103b1 	.word	0x080103b1
 800e8b4:	080103bb 	.word	0x080103bb
 800e8b8:	0800b2b9 	.word	0x0800b2b9
 800e8bc:	0800e615 	.word	0x0800e615
 800e8c0:	080103b7 	.word	0x080103b7

0800e8c4 <__sfputc_r>:
 800e8c4:	6893      	ldr	r3, [r2, #8]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	b410      	push	{r4}
 800e8cc:	6093      	str	r3, [r2, #8]
 800e8ce:	da08      	bge.n	800e8e2 <__sfputc_r+0x1e>
 800e8d0:	6994      	ldr	r4, [r2, #24]
 800e8d2:	42a3      	cmp	r3, r4
 800e8d4:	db01      	blt.n	800e8da <__sfputc_r+0x16>
 800e8d6:	290a      	cmp	r1, #10
 800e8d8:	d103      	bne.n	800e8e2 <__sfputc_r+0x1e>
 800e8da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8de:	f000 b9e3 	b.w	800eca8 <__swbuf_r>
 800e8e2:	6813      	ldr	r3, [r2, #0]
 800e8e4:	1c58      	adds	r0, r3, #1
 800e8e6:	6010      	str	r0, [r2, #0]
 800e8e8:	7019      	strb	r1, [r3, #0]
 800e8ea:	4608      	mov	r0, r1
 800e8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8f0:	4770      	bx	lr

0800e8f2 <__sfputs_r>:
 800e8f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8f4:	4606      	mov	r6, r0
 800e8f6:	460f      	mov	r7, r1
 800e8f8:	4614      	mov	r4, r2
 800e8fa:	18d5      	adds	r5, r2, r3
 800e8fc:	42ac      	cmp	r4, r5
 800e8fe:	d101      	bne.n	800e904 <__sfputs_r+0x12>
 800e900:	2000      	movs	r0, #0
 800e902:	e007      	b.n	800e914 <__sfputs_r+0x22>
 800e904:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e908:	463a      	mov	r2, r7
 800e90a:	4630      	mov	r0, r6
 800e90c:	f7ff ffda 	bl	800e8c4 <__sfputc_r>
 800e910:	1c43      	adds	r3, r0, #1
 800e912:	d1f3      	bne.n	800e8fc <__sfputs_r+0xa>
 800e914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e918 <_vfiprintf_r>:
 800e918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e91c:	460d      	mov	r5, r1
 800e91e:	b09d      	sub	sp, #116	; 0x74
 800e920:	4614      	mov	r4, r2
 800e922:	4698      	mov	r8, r3
 800e924:	4606      	mov	r6, r0
 800e926:	b118      	cbz	r0, 800e930 <_vfiprintf_r+0x18>
 800e928:	6a03      	ldr	r3, [r0, #32]
 800e92a:	b90b      	cbnz	r3, 800e930 <_vfiprintf_r+0x18>
 800e92c:	f7fd fb26 	bl	800bf7c <__sinit>
 800e930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e932:	07d9      	lsls	r1, r3, #31
 800e934:	d405      	bmi.n	800e942 <_vfiprintf_r+0x2a>
 800e936:	89ab      	ldrh	r3, [r5, #12]
 800e938:	059a      	lsls	r2, r3, #22
 800e93a:	d402      	bmi.n	800e942 <_vfiprintf_r+0x2a>
 800e93c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e93e:	f7fd fc56 	bl	800c1ee <__retarget_lock_acquire_recursive>
 800e942:	89ab      	ldrh	r3, [r5, #12]
 800e944:	071b      	lsls	r3, r3, #28
 800e946:	d501      	bpl.n	800e94c <_vfiprintf_r+0x34>
 800e948:	692b      	ldr	r3, [r5, #16]
 800e94a:	b99b      	cbnz	r3, 800e974 <_vfiprintf_r+0x5c>
 800e94c:	4629      	mov	r1, r5
 800e94e:	4630      	mov	r0, r6
 800e950:	f000 f9e8 	bl	800ed24 <__swsetup_r>
 800e954:	b170      	cbz	r0, 800e974 <_vfiprintf_r+0x5c>
 800e956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e958:	07dc      	lsls	r4, r3, #31
 800e95a:	d504      	bpl.n	800e966 <_vfiprintf_r+0x4e>
 800e95c:	f04f 30ff 	mov.w	r0, #4294967295
 800e960:	b01d      	add	sp, #116	; 0x74
 800e962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e966:	89ab      	ldrh	r3, [r5, #12]
 800e968:	0598      	lsls	r0, r3, #22
 800e96a:	d4f7      	bmi.n	800e95c <_vfiprintf_r+0x44>
 800e96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e96e:	f7fd fc3f 	bl	800c1f0 <__retarget_lock_release_recursive>
 800e972:	e7f3      	b.n	800e95c <_vfiprintf_r+0x44>
 800e974:	2300      	movs	r3, #0
 800e976:	9309      	str	r3, [sp, #36]	; 0x24
 800e978:	2320      	movs	r3, #32
 800e97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e982:	2330      	movs	r3, #48	; 0x30
 800e984:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800eb38 <_vfiprintf_r+0x220>
 800e988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e98c:	f04f 0901 	mov.w	r9, #1
 800e990:	4623      	mov	r3, r4
 800e992:	469a      	mov	sl, r3
 800e994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e998:	b10a      	cbz	r2, 800e99e <_vfiprintf_r+0x86>
 800e99a:	2a25      	cmp	r2, #37	; 0x25
 800e99c:	d1f9      	bne.n	800e992 <_vfiprintf_r+0x7a>
 800e99e:	ebba 0b04 	subs.w	fp, sl, r4
 800e9a2:	d00b      	beq.n	800e9bc <_vfiprintf_r+0xa4>
 800e9a4:	465b      	mov	r3, fp
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	4629      	mov	r1, r5
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f7ff ffa1 	bl	800e8f2 <__sfputs_r>
 800e9b0:	3001      	adds	r0, #1
 800e9b2:	f000 80a9 	beq.w	800eb08 <_vfiprintf_r+0x1f0>
 800e9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9b8:	445a      	add	r2, fp
 800e9ba:	9209      	str	r2, [sp, #36]	; 0x24
 800e9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f000 80a1 	beq.w	800eb08 <_vfiprintf_r+0x1f0>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9d0:	f10a 0a01 	add.w	sl, sl, #1
 800e9d4:	9304      	str	r3, [sp, #16]
 800e9d6:	9307      	str	r3, [sp, #28]
 800e9d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9dc:	931a      	str	r3, [sp, #104]	; 0x68
 800e9de:	4654      	mov	r4, sl
 800e9e0:	2205      	movs	r2, #5
 800e9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e6:	4854      	ldr	r0, [pc, #336]	; (800eb38 <_vfiprintf_r+0x220>)
 800e9e8:	f7f1 fbf2 	bl	80001d0 <memchr>
 800e9ec:	9a04      	ldr	r2, [sp, #16]
 800e9ee:	b9d8      	cbnz	r0, 800ea28 <_vfiprintf_r+0x110>
 800e9f0:	06d1      	lsls	r1, r2, #27
 800e9f2:	bf44      	itt	mi
 800e9f4:	2320      	movmi	r3, #32
 800e9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9fa:	0713      	lsls	r3, r2, #28
 800e9fc:	bf44      	itt	mi
 800e9fe:	232b      	movmi	r3, #43	; 0x2b
 800ea00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea04:	f89a 3000 	ldrb.w	r3, [sl]
 800ea08:	2b2a      	cmp	r3, #42	; 0x2a
 800ea0a:	d015      	beq.n	800ea38 <_vfiprintf_r+0x120>
 800ea0c:	9a07      	ldr	r2, [sp, #28]
 800ea0e:	4654      	mov	r4, sl
 800ea10:	2000      	movs	r0, #0
 800ea12:	f04f 0c0a 	mov.w	ip, #10
 800ea16:	4621      	mov	r1, r4
 800ea18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea1c:	3b30      	subs	r3, #48	; 0x30
 800ea1e:	2b09      	cmp	r3, #9
 800ea20:	d94d      	bls.n	800eabe <_vfiprintf_r+0x1a6>
 800ea22:	b1b0      	cbz	r0, 800ea52 <_vfiprintf_r+0x13a>
 800ea24:	9207      	str	r2, [sp, #28]
 800ea26:	e014      	b.n	800ea52 <_vfiprintf_r+0x13a>
 800ea28:	eba0 0308 	sub.w	r3, r0, r8
 800ea2c:	fa09 f303 	lsl.w	r3, r9, r3
 800ea30:	4313      	orrs	r3, r2
 800ea32:	9304      	str	r3, [sp, #16]
 800ea34:	46a2      	mov	sl, r4
 800ea36:	e7d2      	b.n	800e9de <_vfiprintf_r+0xc6>
 800ea38:	9b03      	ldr	r3, [sp, #12]
 800ea3a:	1d19      	adds	r1, r3, #4
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	9103      	str	r1, [sp, #12]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	bfbb      	ittet	lt
 800ea44:	425b      	neglt	r3, r3
 800ea46:	f042 0202 	orrlt.w	r2, r2, #2
 800ea4a:	9307      	strge	r3, [sp, #28]
 800ea4c:	9307      	strlt	r3, [sp, #28]
 800ea4e:	bfb8      	it	lt
 800ea50:	9204      	strlt	r2, [sp, #16]
 800ea52:	7823      	ldrb	r3, [r4, #0]
 800ea54:	2b2e      	cmp	r3, #46	; 0x2e
 800ea56:	d10c      	bne.n	800ea72 <_vfiprintf_r+0x15a>
 800ea58:	7863      	ldrb	r3, [r4, #1]
 800ea5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea5c:	d134      	bne.n	800eac8 <_vfiprintf_r+0x1b0>
 800ea5e:	9b03      	ldr	r3, [sp, #12]
 800ea60:	1d1a      	adds	r2, r3, #4
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	9203      	str	r2, [sp, #12]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	bfb8      	it	lt
 800ea6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea6e:	3402      	adds	r4, #2
 800ea70:	9305      	str	r3, [sp, #20]
 800ea72:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800eb48 <_vfiprintf_r+0x230>
 800ea76:	7821      	ldrb	r1, [r4, #0]
 800ea78:	2203      	movs	r2, #3
 800ea7a:	4650      	mov	r0, sl
 800ea7c:	f7f1 fba8 	bl	80001d0 <memchr>
 800ea80:	b138      	cbz	r0, 800ea92 <_vfiprintf_r+0x17a>
 800ea82:	9b04      	ldr	r3, [sp, #16]
 800ea84:	eba0 000a 	sub.w	r0, r0, sl
 800ea88:	2240      	movs	r2, #64	; 0x40
 800ea8a:	4082      	lsls	r2, r0
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	3401      	adds	r4, #1
 800ea90:	9304      	str	r3, [sp, #16]
 800ea92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea96:	4829      	ldr	r0, [pc, #164]	; (800eb3c <_vfiprintf_r+0x224>)
 800ea98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea9c:	2206      	movs	r2, #6
 800ea9e:	f7f1 fb97 	bl	80001d0 <memchr>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	d03f      	beq.n	800eb26 <_vfiprintf_r+0x20e>
 800eaa6:	4b26      	ldr	r3, [pc, #152]	; (800eb40 <_vfiprintf_r+0x228>)
 800eaa8:	bb1b      	cbnz	r3, 800eaf2 <_vfiprintf_r+0x1da>
 800eaaa:	9b03      	ldr	r3, [sp, #12]
 800eaac:	3307      	adds	r3, #7
 800eaae:	f023 0307 	bic.w	r3, r3, #7
 800eab2:	3308      	adds	r3, #8
 800eab4:	9303      	str	r3, [sp, #12]
 800eab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab8:	443b      	add	r3, r7
 800eaba:	9309      	str	r3, [sp, #36]	; 0x24
 800eabc:	e768      	b.n	800e990 <_vfiprintf_r+0x78>
 800eabe:	fb0c 3202 	mla	r2, ip, r2, r3
 800eac2:	460c      	mov	r4, r1
 800eac4:	2001      	movs	r0, #1
 800eac6:	e7a6      	b.n	800ea16 <_vfiprintf_r+0xfe>
 800eac8:	2300      	movs	r3, #0
 800eaca:	3401      	adds	r4, #1
 800eacc:	9305      	str	r3, [sp, #20]
 800eace:	4619      	mov	r1, r3
 800ead0:	f04f 0c0a 	mov.w	ip, #10
 800ead4:	4620      	mov	r0, r4
 800ead6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eada:	3a30      	subs	r2, #48	; 0x30
 800eadc:	2a09      	cmp	r2, #9
 800eade:	d903      	bls.n	800eae8 <_vfiprintf_r+0x1d0>
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d0c6      	beq.n	800ea72 <_vfiprintf_r+0x15a>
 800eae4:	9105      	str	r1, [sp, #20]
 800eae6:	e7c4      	b.n	800ea72 <_vfiprintf_r+0x15a>
 800eae8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaec:	4604      	mov	r4, r0
 800eaee:	2301      	movs	r3, #1
 800eaf0:	e7f0      	b.n	800ead4 <_vfiprintf_r+0x1bc>
 800eaf2:	ab03      	add	r3, sp, #12
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	462a      	mov	r2, r5
 800eaf8:	4b12      	ldr	r3, [pc, #72]	; (800eb44 <_vfiprintf_r+0x22c>)
 800eafa:	a904      	add	r1, sp, #16
 800eafc:	4630      	mov	r0, r6
 800eafe:	f7fc fbdb 	bl	800b2b8 <_printf_float>
 800eb02:	4607      	mov	r7, r0
 800eb04:	1c78      	adds	r0, r7, #1
 800eb06:	d1d6      	bne.n	800eab6 <_vfiprintf_r+0x19e>
 800eb08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb0a:	07d9      	lsls	r1, r3, #31
 800eb0c:	d405      	bmi.n	800eb1a <_vfiprintf_r+0x202>
 800eb0e:	89ab      	ldrh	r3, [r5, #12]
 800eb10:	059a      	lsls	r2, r3, #22
 800eb12:	d402      	bmi.n	800eb1a <_vfiprintf_r+0x202>
 800eb14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb16:	f7fd fb6b 	bl	800c1f0 <__retarget_lock_release_recursive>
 800eb1a:	89ab      	ldrh	r3, [r5, #12]
 800eb1c:	065b      	lsls	r3, r3, #25
 800eb1e:	f53f af1d 	bmi.w	800e95c <_vfiprintf_r+0x44>
 800eb22:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb24:	e71c      	b.n	800e960 <_vfiprintf_r+0x48>
 800eb26:	ab03      	add	r3, sp, #12
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	462a      	mov	r2, r5
 800eb2c:	4b05      	ldr	r3, [pc, #20]	; (800eb44 <_vfiprintf_r+0x22c>)
 800eb2e:	a904      	add	r1, sp, #16
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7fc fe65 	bl	800b800 <_printf_i>
 800eb36:	e7e4      	b.n	800eb02 <_vfiprintf_r+0x1ea>
 800eb38:	080103b1 	.word	0x080103b1
 800eb3c:	080103bb 	.word	0x080103bb
 800eb40:	0800b2b9 	.word	0x0800b2b9
 800eb44:	0800e8f3 	.word	0x0800e8f3
 800eb48:	080103b7 	.word	0x080103b7

0800eb4c <__sflush_r>:
 800eb4c:	898a      	ldrh	r2, [r1, #12]
 800eb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb52:	4605      	mov	r5, r0
 800eb54:	0710      	lsls	r0, r2, #28
 800eb56:	460c      	mov	r4, r1
 800eb58:	d458      	bmi.n	800ec0c <__sflush_r+0xc0>
 800eb5a:	684b      	ldr	r3, [r1, #4]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	dc05      	bgt.n	800eb6c <__sflush_r+0x20>
 800eb60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	dc02      	bgt.n	800eb6c <__sflush_r+0x20>
 800eb66:	2000      	movs	r0, #0
 800eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb6e:	2e00      	cmp	r6, #0
 800eb70:	d0f9      	beq.n	800eb66 <__sflush_r+0x1a>
 800eb72:	2300      	movs	r3, #0
 800eb74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb78:	682f      	ldr	r7, [r5, #0]
 800eb7a:	6a21      	ldr	r1, [r4, #32]
 800eb7c:	602b      	str	r3, [r5, #0]
 800eb7e:	d032      	beq.n	800ebe6 <__sflush_r+0x9a>
 800eb80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	075a      	lsls	r2, r3, #29
 800eb86:	d505      	bpl.n	800eb94 <__sflush_r+0x48>
 800eb88:	6863      	ldr	r3, [r4, #4]
 800eb8a:	1ac0      	subs	r0, r0, r3
 800eb8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb8e:	b10b      	cbz	r3, 800eb94 <__sflush_r+0x48>
 800eb90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb92:	1ac0      	subs	r0, r0, r3
 800eb94:	2300      	movs	r3, #0
 800eb96:	4602      	mov	r2, r0
 800eb98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb9a:	6a21      	ldr	r1, [r4, #32]
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	47b0      	blx	r6
 800eba0:	1c43      	adds	r3, r0, #1
 800eba2:	89a3      	ldrh	r3, [r4, #12]
 800eba4:	d106      	bne.n	800ebb4 <__sflush_r+0x68>
 800eba6:	6829      	ldr	r1, [r5, #0]
 800eba8:	291d      	cmp	r1, #29
 800ebaa:	d82b      	bhi.n	800ec04 <__sflush_r+0xb8>
 800ebac:	4a29      	ldr	r2, [pc, #164]	; (800ec54 <__sflush_r+0x108>)
 800ebae:	410a      	asrs	r2, r1
 800ebb0:	07d6      	lsls	r6, r2, #31
 800ebb2:	d427      	bmi.n	800ec04 <__sflush_r+0xb8>
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	6062      	str	r2, [r4, #4]
 800ebb8:	04d9      	lsls	r1, r3, #19
 800ebba:	6922      	ldr	r2, [r4, #16]
 800ebbc:	6022      	str	r2, [r4, #0]
 800ebbe:	d504      	bpl.n	800ebca <__sflush_r+0x7e>
 800ebc0:	1c42      	adds	r2, r0, #1
 800ebc2:	d101      	bne.n	800ebc8 <__sflush_r+0x7c>
 800ebc4:	682b      	ldr	r3, [r5, #0]
 800ebc6:	b903      	cbnz	r3, 800ebca <__sflush_r+0x7e>
 800ebc8:	6560      	str	r0, [r4, #84]	; 0x54
 800ebca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebcc:	602f      	str	r7, [r5, #0]
 800ebce:	2900      	cmp	r1, #0
 800ebd0:	d0c9      	beq.n	800eb66 <__sflush_r+0x1a>
 800ebd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebd6:	4299      	cmp	r1, r3
 800ebd8:	d002      	beq.n	800ebe0 <__sflush_r+0x94>
 800ebda:	4628      	mov	r0, r5
 800ebdc:	f7fe f98a 	bl	800cef4 <_free_r>
 800ebe0:	2000      	movs	r0, #0
 800ebe2:	6360      	str	r0, [r4, #52]	; 0x34
 800ebe4:	e7c0      	b.n	800eb68 <__sflush_r+0x1c>
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	4628      	mov	r0, r5
 800ebea:	47b0      	blx	r6
 800ebec:	1c41      	adds	r1, r0, #1
 800ebee:	d1c8      	bne.n	800eb82 <__sflush_r+0x36>
 800ebf0:	682b      	ldr	r3, [r5, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d0c5      	beq.n	800eb82 <__sflush_r+0x36>
 800ebf6:	2b1d      	cmp	r3, #29
 800ebf8:	d001      	beq.n	800ebfe <__sflush_r+0xb2>
 800ebfa:	2b16      	cmp	r3, #22
 800ebfc:	d101      	bne.n	800ec02 <__sflush_r+0xb6>
 800ebfe:	602f      	str	r7, [r5, #0]
 800ec00:	e7b1      	b.n	800eb66 <__sflush_r+0x1a>
 800ec02:	89a3      	ldrh	r3, [r4, #12]
 800ec04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec08:	81a3      	strh	r3, [r4, #12]
 800ec0a:	e7ad      	b.n	800eb68 <__sflush_r+0x1c>
 800ec0c:	690f      	ldr	r7, [r1, #16]
 800ec0e:	2f00      	cmp	r7, #0
 800ec10:	d0a9      	beq.n	800eb66 <__sflush_r+0x1a>
 800ec12:	0793      	lsls	r3, r2, #30
 800ec14:	680e      	ldr	r6, [r1, #0]
 800ec16:	bf08      	it	eq
 800ec18:	694b      	ldreq	r3, [r1, #20]
 800ec1a:	600f      	str	r7, [r1, #0]
 800ec1c:	bf18      	it	ne
 800ec1e:	2300      	movne	r3, #0
 800ec20:	eba6 0807 	sub.w	r8, r6, r7
 800ec24:	608b      	str	r3, [r1, #8]
 800ec26:	f1b8 0f00 	cmp.w	r8, #0
 800ec2a:	dd9c      	ble.n	800eb66 <__sflush_r+0x1a>
 800ec2c:	6a21      	ldr	r1, [r4, #32]
 800ec2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec30:	4643      	mov	r3, r8
 800ec32:	463a      	mov	r2, r7
 800ec34:	4628      	mov	r0, r5
 800ec36:	47b0      	blx	r6
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	dc06      	bgt.n	800ec4a <__sflush_r+0xfe>
 800ec3c:	89a3      	ldrh	r3, [r4, #12]
 800ec3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec42:	81a3      	strh	r3, [r4, #12]
 800ec44:	f04f 30ff 	mov.w	r0, #4294967295
 800ec48:	e78e      	b.n	800eb68 <__sflush_r+0x1c>
 800ec4a:	4407      	add	r7, r0
 800ec4c:	eba8 0800 	sub.w	r8, r8, r0
 800ec50:	e7e9      	b.n	800ec26 <__sflush_r+0xda>
 800ec52:	bf00      	nop
 800ec54:	dfbffffe 	.word	0xdfbffffe

0800ec58 <_fflush_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	690b      	ldr	r3, [r1, #16]
 800ec5c:	4605      	mov	r5, r0
 800ec5e:	460c      	mov	r4, r1
 800ec60:	b913      	cbnz	r3, 800ec68 <_fflush_r+0x10>
 800ec62:	2500      	movs	r5, #0
 800ec64:	4628      	mov	r0, r5
 800ec66:	bd38      	pop	{r3, r4, r5, pc}
 800ec68:	b118      	cbz	r0, 800ec72 <_fflush_r+0x1a>
 800ec6a:	6a03      	ldr	r3, [r0, #32]
 800ec6c:	b90b      	cbnz	r3, 800ec72 <_fflush_r+0x1a>
 800ec6e:	f7fd f985 	bl	800bf7c <__sinit>
 800ec72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d0f3      	beq.n	800ec62 <_fflush_r+0xa>
 800ec7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec7c:	07d0      	lsls	r0, r2, #31
 800ec7e:	d404      	bmi.n	800ec8a <_fflush_r+0x32>
 800ec80:	0599      	lsls	r1, r3, #22
 800ec82:	d402      	bmi.n	800ec8a <_fflush_r+0x32>
 800ec84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec86:	f7fd fab2 	bl	800c1ee <__retarget_lock_acquire_recursive>
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	4621      	mov	r1, r4
 800ec8e:	f7ff ff5d 	bl	800eb4c <__sflush_r>
 800ec92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec94:	07da      	lsls	r2, r3, #31
 800ec96:	4605      	mov	r5, r0
 800ec98:	d4e4      	bmi.n	800ec64 <_fflush_r+0xc>
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	059b      	lsls	r3, r3, #22
 800ec9e:	d4e1      	bmi.n	800ec64 <_fflush_r+0xc>
 800eca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eca2:	f7fd faa5 	bl	800c1f0 <__retarget_lock_release_recursive>
 800eca6:	e7dd      	b.n	800ec64 <_fflush_r+0xc>

0800eca8 <__swbuf_r>:
 800eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecaa:	460e      	mov	r6, r1
 800ecac:	4614      	mov	r4, r2
 800ecae:	4605      	mov	r5, r0
 800ecb0:	b118      	cbz	r0, 800ecba <__swbuf_r+0x12>
 800ecb2:	6a03      	ldr	r3, [r0, #32]
 800ecb4:	b90b      	cbnz	r3, 800ecba <__swbuf_r+0x12>
 800ecb6:	f7fd f961 	bl	800bf7c <__sinit>
 800ecba:	69a3      	ldr	r3, [r4, #24]
 800ecbc:	60a3      	str	r3, [r4, #8]
 800ecbe:	89a3      	ldrh	r3, [r4, #12]
 800ecc0:	071a      	lsls	r2, r3, #28
 800ecc2:	d525      	bpl.n	800ed10 <__swbuf_r+0x68>
 800ecc4:	6923      	ldr	r3, [r4, #16]
 800ecc6:	b31b      	cbz	r3, 800ed10 <__swbuf_r+0x68>
 800ecc8:	6823      	ldr	r3, [r4, #0]
 800ecca:	6922      	ldr	r2, [r4, #16]
 800eccc:	1a98      	subs	r0, r3, r2
 800ecce:	6963      	ldr	r3, [r4, #20]
 800ecd0:	b2f6      	uxtb	r6, r6
 800ecd2:	4283      	cmp	r3, r0
 800ecd4:	4637      	mov	r7, r6
 800ecd6:	dc04      	bgt.n	800ece2 <__swbuf_r+0x3a>
 800ecd8:	4621      	mov	r1, r4
 800ecda:	4628      	mov	r0, r5
 800ecdc:	f7ff ffbc 	bl	800ec58 <_fflush_r>
 800ece0:	b9e0      	cbnz	r0, 800ed1c <__swbuf_r+0x74>
 800ece2:	68a3      	ldr	r3, [r4, #8]
 800ece4:	3b01      	subs	r3, #1
 800ece6:	60a3      	str	r3, [r4, #8]
 800ece8:	6823      	ldr	r3, [r4, #0]
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	6022      	str	r2, [r4, #0]
 800ecee:	701e      	strb	r6, [r3, #0]
 800ecf0:	6962      	ldr	r2, [r4, #20]
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d004      	beq.n	800ed02 <__swbuf_r+0x5a>
 800ecf8:	89a3      	ldrh	r3, [r4, #12]
 800ecfa:	07db      	lsls	r3, r3, #31
 800ecfc:	d506      	bpl.n	800ed0c <__swbuf_r+0x64>
 800ecfe:	2e0a      	cmp	r6, #10
 800ed00:	d104      	bne.n	800ed0c <__swbuf_r+0x64>
 800ed02:	4621      	mov	r1, r4
 800ed04:	4628      	mov	r0, r5
 800ed06:	f7ff ffa7 	bl	800ec58 <_fflush_r>
 800ed0a:	b938      	cbnz	r0, 800ed1c <__swbuf_r+0x74>
 800ed0c:	4638      	mov	r0, r7
 800ed0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed10:	4621      	mov	r1, r4
 800ed12:	4628      	mov	r0, r5
 800ed14:	f000 f806 	bl	800ed24 <__swsetup_r>
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	d0d5      	beq.n	800ecc8 <__swbuf_r+0x20>
 800ed1c:	f04f 37ff 	mov.w	r7, #4294967295
 800ed20:	e7f4      	b.n	800ed0c <__swbuf_r+0x64>
	...

0800ed24 <__swsetup_r>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	4b2a      	ldr	r3, [pc, #168]	; (800edd0 <__swsetup_r+0xac>)
 800ed28:	4605      	mov	r5, r0
 800ed2a:	6818      	ldr	r0, [r3, #0]
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	b118      	cbz	r0, 800ed38 <__swsetup_r+0x14>
 800ed30:	6a03      	ldr	r3, [r0, #32]
 800ed32:	b90b      	cbnz	r3, 800ed38 <__swsetup_r+0x14>
 800ed34:	f7fd f922 	bl	800bf7c <__sinit>
 800ed38:	89a3      	ldrh	r3, [r4, #12]
 800ed3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed3e:	0718      	lsls	r0, r3, #28
 800ed40:	d422      	bmi.n	800ed88 <__swsetup_r+0x64>
 800ed42:	06d9      	lsls	r1, r3, #27
 800ed44:	d407      	bmi.n	800ed56 <__swsetup_r+0x32>
 800ed46:	2309      	movs	r3, #9
 800ed48:	602b      	str	r3, [r5, #0]
 800ed4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed4e:	81a3      	strh	r3, [r4, #12]
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	e034      	b.n	800edc0 <__swsetup_r+0x9c>
 800ed56:	0758      	lsls	r0, r3, #29
 800ed58:	d512      	bpl.n	800ed80 <__swsetup_r+0x5c>
 800ed5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed5c:	b141      	cbz	r1, 800ed70 <__swsetup_r+0x4c>
 800ed5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed62:	4299      	cmp	r1, r3
 800ed64:	d002      	beq.n	800ed6c <__swsetup_r+0x48>
 800ed66:	4628      	mov	r0, r5
 800ed68:	f7fe f8c4 	bl	800cef4 <_free_r>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6363      	str	r3, [r4, #52]	; 0x34
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed76:	81a3      	strh	r3, [r4, #12]
 800ed78:	2300      	movs	r3, #0
 800ed7a:	6063      	str	r3, [r4, #4]
 800ed7c:	6923      	ldr	r3, [r4, #16]
 800ed7e:	6023      	str	r3, [r4, #0]
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	f043 0308 	orr.w	r3, r3, #8
 800ed86:	81a3      	strh	r3, [r4, #12]
 800ed88:	6923      	ldr	r3, [r4, #16]
 800ed8a:	b94b      	cbnz	r3, 800eda0 <__swsetup_r+0x7c>
 800ed8c:	89a3      	ldrh	r3, [r4, #12]
 800ed8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed96:	d003      	beq.n	800eda0 <__swsetup_r+0x7c>
 800ed98:	4621      	mov	r1, r4
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f000 fc6e 	bl	800f67c <__smakebuf_r>
 800eda0:	89a0      	ldrh	r0, [r4, #12]
 800eda2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eda6:	f010 0301 	ands.w	r3, r0, #1
 800edaa:	d00a      	beq.n	800edc2 <__swsetup_r+0x9e>
 800edac:	2300      	movs	r3, #0
 800edae:	60a3      	str	r3, [r4, #8]
 800edb0:	6963      	ldr	r3, [r4, #20]
 800edb2:	425b      	negs	r3, r3
 800edb4:	61a3      	str	r3, [r4, #24]
 800edb6:	6923      	ldr	r3, [r4, #16]
 800edb8:	b943      	cbnz	r3, 800edcc <__swsetup_r+0xa8>
 800edba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800edbe:	d1c4      	bne.n	800ed4a <__swsetup_r+0x26>
 800edc0:	bd38      	pop	{r3, r4, r5, pc}
 800edc2:	0781      	lsls	r1, r0, #30
 800edc4:	bf58      	it	pl
 800edc6:	6963      	ldrpl	r3, [r4, #20]
 800edc8:	60a3      	str	r3, [r4, #8]
 800edca:	e7f4      	b.n	800edb6 <__swsetup_r+0x92>
 800edcc:	2000      	movs	r0, #0
 800edce:	e7f7      	b.n	800edc0 <__swsetup_r+0x9c>
 800edd0:	20000080 	.word	0x20000080

0800edd4 <memmove>:
 800edd4:	4288      	cmp	r0, r1
 800edd6:	b510      	push	{r4, lr}
 800edd8:	eb01 0402 	add.w	r4, r1, r2
 800eddc:	d902      	bls.n	800ede4 <memmove+0x10>
 800edde:	4284      	cmp	r4, r0
 800ede0:	4623      	mov	r3, r4
 800ede2:	d807      	bhi.n	800edf4 <memmove+0x20>
 800ede4:	1e43      	subs	r3, r0, #1
 800ede6:	42a1      	cmp	r1, r4
 800ede8:	d008      	beq.n	800edfc <memmove+0x28>
 800edea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800edee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800edf2:	e7f8      	b.n	800ede6 <memmove+0x12>
 800edf4:	4402      	add	r2, r0
 800edf6:	4601      	mov	r1, r0
 800edf8:	428a      	cmp	r2, r1
 800edfa:	d100      	bne.n	800edfe <memmove+0x2a>
 800edfc:	bd10      	pop	{r4, pc}
 800edfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee06:	e7f7      	b.n	800edf8 <memmove+0x24>

0800ee08 <strncmp>:
 800ee08:	b510      	push	{r4, lr}
 800ee0a:	b16a      	cbz	r2, 800ee28 <strncmp+0x20>
 800ee0c:	3901      	subs	r1, #1
 800ee0e:	1884      	adds	r4, r0, r2
 800ee10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d103      	bne.n	800ee24 <strncmp+0x1c>
 800ee1c:	42a0      	cmp	r0, r4
 800ee1e:	d001      	beq.n	800ee24 <strncmp+0x1c>
 800ee20:	2a00      	cmp	r2, #0
 800ee22:	d1f5      	bne.n	800ee10 <strncmp+0x8>
 800ee24:	1ad0      	subs	r0, r2, r3
 800ee26:	bd10      	pop	{r4, pc}
 800ee28:	4610      	mov	r0, r2
 800ee2a:	e7fc      	b.n	800ee26 <strncmp+0x1e>

0800ee2c <memcpy>:
 800ee2c:	440a      	add	r2, r1
 800ee2e:	4291      	cmp	r1, r2
 800ee30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee34:	d100      	bne.n	800ee38 <memcpy+0xc>
 800ee36:	4770      	bx	lr
 800ee38:	b510      	push	{r4, lr}
 800ee3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee42:	4291      	cmp	r1, r2
 800ee44:	d1f9      	bne.n	800ee3a <memcpy+0xe>
 800ee46:	bd10      	pop	{r4, pc}

0800ee48 <nan>:
 800ee48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ee50 <nan+0x8>
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	00000000 	.word	0x00000000
 800ee54:	7ff80000 	.word	0x7ff80000

0800ee58 <__assert_func>:
 800ee58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee5a:	4614      	mov	r4, r2
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	4b09      	ldr	r3, [pc, #36]	; (800ee84 <__assert_func+0x2c>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4605      	mov	r5, r0
 800ee64:	68d8      	ldr	r0, [r3, #12]
 800ee66:	b14c      	cbz	r4, 800ee7c <__assert_func+0x24>
 800ee68:	4b07      	ldr	r3, [pc, #28]	; (800ee88 <__assert_func+0x30>)
 800ee6a:	9100      	str	r1, [sp, #0]
 800ee6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee70:	4906      	ldr	r1, [pc, #24]	; (800ee8c <__assert_func+0x34>)
 800ee72:	462b      	mov	r3, r5
 800ee74:	f000 fbca 	bl	800f60c <fiprintf>
 800ee78:	f000 fc5e 	bl	800f738 <abort>
 800ee7c:	4b04      	ldr	r3, [pc, #16]	; (800ee90 <__assert_func+0x38>)
 800ee7e:	461c      	mov	r4, r3
 800ee80:	e7f3      	b.n	800ee6a <__assert_func+0x12>
 800ee82:	bf00      	nop
 800ee84:	20000080 	.word	0x20000080
 800ee88:	080103ca 	.word	0x080103ca
 800ee8c:	080103d7 	.word	0x080103d7
 800ee90:	08010405 	.word	0x08010405

0800ee94 <_calloc_r>:
 800ee94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee96:	fba1 2402 	umull	r2, r4, r1, r2
 800ee9a:	b94c      	cbnz	r4, 800eeb0 <_calloc_r+0x1c>
 800ee9c:	4611      	mov	r1, r2
 800ee9e:	9201      	str	r2, [sp, #4]
 800eea0:	f7fc f8de 	bl	800b060 <_malloc_r>
 800eea4:	9a01      	ldr	r2, [sp, #4]
 800eea6:	4605      	mov	r5, r0
 800eea8:	b930      	cbnz	r0, 800eeb8 <_calloc_r+0x24>
 800eeaa:	4628      	mov	r0, r5
 800eeac:	b003      	add	sp, #12
 800eeae:	bd30      	pop	{r4, r5, pc}
 800eeb0:	220c      	movs	r2, #12
 800eeb2:	6002      	str	r2, [r0, #0]
 800eeb4:	2500      	movs	r5, #0
 800eeb6:	e7f8      	b.n	800eeaa <_calloc_r+0x16>
 800eeb8:	4621      	mov	r1, r4
 800eeba:	f7fd f90a 	bl	800c0d2 <memset>
 800eebe:	e7f4      	b.n	800eeaa <_calloc_r+0x16>

0800eec0 <rshift>:
 800eec0:	6903      	ldr	r3, [r0, #16]
 800eec2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800eec6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eeca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800eece:	f100 0414 	add.w	r4, r0, #20
 800eed2:	dd45      	ble.n	800ef60 <rshift+0xa0>
 800eed4:	f011 011f 	ands.w	r1, r1, #31
 800eed8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eedc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eee0:	d10c      	bne.n	800eefc <rshift+0x3c>
 800eee2:	f100 0710 	add.w	r7, r0, #16
 800eee6:	4629      	mov	r1, r5
 800eee8:	42b1      	cmp	r1, r6
 800eeea:	d334      	bcc.n	800ef56 <rshift+0x96>
 800eeec:	1a9b      	subs	r3, r3, r2
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	1eea      	subs	r2, r5, #3
 800eef2:	4296      	cmp	r6, r2
 800eef4:	bf38      	it	cc
 800eef6:	2300      	movcc	r3, #0
 800eef8:	4423      	add	r3, r4
 800eefa:	e015      	b.n	800ef28 <rshift+0x68>
 800eefc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef00:	f1c1 0820 	rsb	r8, r1, #32
 800ef04:	40cf      	lsrs	r7, r1
 800ef06:	f105 0e04 	add.w	lr, r5, #4
 800ef0a:	46a1      	mov	r9, r4
 800ef0c:	4576      	cmp	r6, lr
 800ef0e:	46f4      	mov	ip, lr
 800ef10:	d815      	bhi.n	800ef3e <rshift+0x7e>
 800ef12:	1a9a      	subs	r2, r3, r2
 800ef14:	0092      	lsls	r2, r2, #2
 800ef16:	3a04      	subs	r2, #4
 800ef18:	3501      	adds	r5, #1
 800ef1a:	42ae      	cmp	r6, r5
 800ef1c:	bf38      	it	cc
 800ef1e:	2200      	movcc	r2, #0
 800ef20:	18a3      	adds	r3, r4, r2
 800ef22:	50a7      	str	r7, [r4, r2]
 800ef24:	b107      	cbz	r7, 800ef28 <rshift+0x68>
 800ef26:	3304      	adds	r3, #4
 800ef28:	1b1a      	subs	r2, r3, r4
 800ef2a:	42a3      	cmp	r3, r4
 800ef2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef30:	bf08      	it	eq
 800ef32:	2300      	moveq	r3, #0
 800ef34:	6102      	str	r2, [r0, #16]
 800ef36:	bf08      	it	eq
 800ef38:	6143      	streq	r3, [r0, #20]
 800ef3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef3e:	f8dc c000 	ldr.w	ip, [ip]
 800ef42:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef46:	ea4c 0707 	orr.w	r7, ip, r7
 800ef4a:	f849 7b04 	str.w	r7, [r9], #4
 800ef4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef52:	40cf      	lsrs	r7, r1
 800ef54:	e7da      	b.n	800ef0c <rshift+0x4c>
 800ef56:	f851 cb04 	ldr.w	ip, [r1], #4
 800ef5a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ef5e:	e7c3      	b.n	800eee8 <rshift+0x28>
 800ef60:	4623      	mov	r3, r4
 800ef62:	e7e1      	b.n	800ef28 <rshift+0x68>

0800ef64 <__hexdig_fun>:
 800ef64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ef68:	2b09      	cmp	r3, #9
 800ef6a:	d802      	bhi.n	800ef72 <__hexdig_fun+0xe>
 800ef6c:	3820      	subs	r0, #32
 800ef6e:	b2c0      	uxtb	r0, r0
 800ef70:	4770      	bx	lr
 800ef72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ef76:	2b05      	cmp	r3, #5
 800ef78:	d801      	bhi.n	800ef7e <__hexdig_fun+0x1a>
 800ef7a:	3847      	subs	r0, #71	; 0x47
 800ef7c:	e7f7      	b.n	800ef6e <__hexdig_fun+0xa>
 800ef7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef82:	2b05      	cmp	r3, #5
 800ef84:	d801      	bhi.n	800ef8a <__hexdig_fun+0x26>
 800ef86:	3827      	subs	r0, #39	; 0x27
 800ef88:	e7f1      	b.n	800ef6e <__hexdig_fun+0xa>
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	4770      	bx	lr
	...

0800ef90 <__gethex>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	4617      	mov	r7, r2
 800ef96:	680a      	ldr	r2, [r1, #0]
 800ef98:	b085      	sub	sp, #20
 800ef9a:	f102 0b02 	add.w	fp, r2, #2
 800ef9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800efa2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800efa6:	4681      	mov	r9, r0
 800efa8:	468a      	mov	sl, r1
 800efaa:	9302      	str	r3, [sp, #8]
 800efac:	32fe      	adds	r2, #254	; 0xfe
 800efae:	eb02 030b 	add.w	r3, r2, fp
 800efb2:	46d8      	mov	r8, fp
 800efb4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800efb8:	9301      	str	r3, [sp, #4]
 800efba:	2830      	cmp	r0, #48	; 0x30
 800efbc:	d0f7      	beq.n	800efae <__gethex+0x1e>
 800efbe:	f7ff ffd1 	bl	800ef64 <__hexdig_fun>
 800efc2:	4604      	mov	r4, r0
 800efc4:	2800      	cmp	r0, #0
 800efc6:	d138      	bne.n	800f03a <__gethex+0xaa>
 800efc8:	49a7      	ldr	r1, [pc, #668]	; (800f268 <__gethex+0x2d8>)
 800efca:	2201      	movs	r2, #1
 800efcc:	4640      	mov	r0, r8
 800efce:	f7ff ff1b 	bl	800ee08 <strncmp>
 800efd2:	4606      	mov	r6, r0
 800efd4:	2800      	cmp	r0, #0
 800efd6:	d169      	bne.n	800f0ac <__gethex+0x11c>
 800efd8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800efdc:	465d      	mov	r5, fp
 800efde:	f7ff ffc1 	bl	800ef64 <__hexdig_fun>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d064      	beq.n	800f0b0 <__gethex+0x120>
 800efe6:	465a      	mov	r2, fp
 800efe8:	7810      	ldrb	r0, [r2, #0]
 800efea:	2830      	cmp	r0, #48	; 0x30
 800efec:	4690      	mov	r8, r2
 800efee:	f102 0201 	add.w	r2, r2, #1
 800eff2:	d0f9      	beq.n	800efe8 <__gethex+0x58>
 800eff4:	f7ff ffb6 	bl	800ef64 <__hexdig_fun>
 800eff8:	2301      	movs	r3, #1
 800effa:	fab0 f480 	clz	r4, r0
 800effe:	0964      	lsrs	r4, r4, #5
 800f000:	465e      	mov	r6, fp
 800f002:	9301      	str	r3, [sp, #4]
 800f004:	4642      	mov	r2, r8
 800f006:	4615      	mov	r5, r2
 800f008:	3201      	adds	r2, #1
 800f00a:	7828      	ldrb	r0, [r5, #0]
 800f00c:	f7ff ffaa 	bl	800ef64 <__hexdig_fun>
 800f010:	2800      	cmp	r0, #0
 800f012:	d1f8      	bne.n	800f006 <__gethex+0x76>
 800f014:	4994      	ldr	r1, [pc, #592]	; (800f268 <__gethex+0x2d8>)
 800f016:	2201      	movs	r2, #1
 800f018:	4628      	mov	r0, r5
 800f01a:	f7ff fef5 	bl	800ee08 <strncmp>
 800f01e:	b978      	cbnz	r0, 800f040 <__gethex+0xb0>
 800f020:	b946      	cbnz	r6, 800f034 <__gethex+0xa4>
 800f022:	1c6e      	adds	r6, r5, #1
 800f024:	4632      	mov	r2, r6
 800f026:	4615      	mov	r5, r2
 800f028:	3201      	adds	r2, #1
 800f02a:	7828      	ldrb	r0, [r5, #0]
 800f02c:	f7ff ff9a 	bl	800ef64 <__hexdig_fun>
 800f030:	2800      	cmp	r0, #0
 800f032:	d1f8      	bne.n	800f026 <__gethex+0x96>
 800f034:	1b73      	subs	r3, r6, r5
 800f036:	009e      	lsls	r6, r3, #2
 800f038:	e004      	b.n	800f044 <__gethex+0xb4>
 800f03a:	2400      	movs	r4, #0
 800f03c:	4626      	mov	r6, r4
 800f03e:	e7e1      	b.n	800f004 <__gethex+0x74>
 800f040:	2e00      	cmp	r6, #0
 800f042:	d1f7      	bne.n	800f034 <__gethex+0xa4>
 800f044:	782b      	ldrb	r3, [r5, #0]
 800f046:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f04a:	2b50      	cmp	r3, #80	; 0x50
 800f04c:	d13d      	bne.n	800f0ca <__gethex+0x13a>
 800f04e:	786b      	ldrb	r3, [r5, #1]
 800f050:	2b2b      	cmp	r3, #43	; 0x2b
 800f052:	d02f      	beq.n	800f0b4 <__gethex+0x124>
 800f054:	2b2d      	cmp	r3, #45	; 0x2d
 800f056:	d031      	beq.n	800f0bc <__gethex+0x12c>
 800f058:	1c69      	adds	r1, r5, #1
 800f05a:	f04f 0b00 	mov.w	fp, #0
 800f05e:	7808      	ldrb	r0, [r1, #0]
 800f060:	f7ff ff80 	bl	800ef64 <__hexdig_fun>
 800f064:	1e42      	subs	r2, r0, #1
 800f066:	b2d2      	uxtb	r2, r2
 800f068:	2a18      	cmp	r2, #24
 800f06a:	d82e      	bhi.n	800f0ca <__gethex+0x13a>
 800f06c:	f1a0 0210 	sub.w	r2, r0, #16
 800f070:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f074:	f7ff ff76 	bl	800ef64 <__hexdig_fun>
 800f078:	f100 3cff 	add.w	ip, r0, #4294967295
 800f07c:	fa5f fc8c 	uxtb.w	ip, ip
 800f080:	f1bc 0f18 	cmp.w	ip, #24
 800f084:	d91d      	bls.n	800f0c2 <__gethex+0x132>
 800f086:	f1bb 0f00 	cmp.w	fp, #0
 800f08a:	d000      	beq.n	800f08e <__gethex+0xfe>
 800f08c:	4252      	negs	r2, r2
 800f08e:	4416      	add	r6, r2
 800f090:	f8ca 1000 	str.w	r1, [sl]
 800f094:	b1dc      	cbz	r4, 800f0ce <__gethex+0x13e>
 800f096:	9b01      	ldr	r3, [sp, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	bf14      	ite	ne
 800f09c:	f04f 0800 	movne.w	r8, #0
 800f0a0:	f04f 0806 	moveq.w	r8, #6
 800f0a4:	4640      	mov	r0, r8
 800f0a6:	b005      	add	sp, #20
 800f0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ac:	4645      	mov	r5, r8
 800f0ae:	4626      	mov	r6, r4
 800f0b0:	2401      	movs	r4, #1
 800f0b2:	e7c7      	b.n	800f044 <__gethex+0xb4>
 800f0b4:	f04f 0b00 	mov.w	fp, #0
 800f0b8:	1ca9      	adds	r1, r5, #2
 800f0ba:	e7d0      	b.n	800f05e <__gethex+0xce>
 800f0bc:	f04f 0b01 	mov.w	fp, #1
 800f0c0:	e7fa      	b.n	800f0b8 <__gethex+0x128>
 800f0c2:	230a      	movs	r3, #10
 800f0c4:	fb03 0002 	mla	r0, r3, r2, r0
 800f0c8:	e7d0      	b.n	800f06c <__gethex+0xdc>
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	e7e0      	b.n	800f090 <__gethex+0x100>
 800f0ce:	eba5 0308 	sub.w	r3, r5, r8
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	4621      	mov	r1, r4
 800f0d6:	2b07      	cmp	r3, #7
 800f0d8:	dc0a      	bgt.n	800f0f0 <__gethex+0x160>
 800f0da:	4648      	mov	r0, r9
 800f0dc:	f7fd ff56 	bl	800cf8c <_Balloc>
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	b940      	cbnz	r0, 800f0f6 <__gethex+0x166>
 800f0e4:	4b61      	ldr	r3, [pc, #388]	; (800f26c <__gethex+0x2dc>)
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	21e4      	movs	r1, #228	; 0xe4
 800f0ea:	4861      	ldr	r0, [pc, #388]	; (800f270 <__gethex+0x2e0>)
 800f0ec:	f7ff feb4 	bl	800ee58 <__assert_func>
 800f0f0:	3101      	adds	r1, #1
 800f0f2:	105b      	asrs	r3, r3, #1
 800f0f4:	e7ef      	b.n	800f0d6 <__gethex+0x146>
 800f0f6:	f100 0a14 	add.w	sl, r0, #20
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	495a      	ldr	r1, [pc, #360]	; (800f268 <__gethex+0x2d8>)
 800f0fe:	f8cd a004 	str.w	sl, [sp, #4]
 800f102:	469b      	mov	fp, r3
 800f104:	45a8      	cmp	r8, r5
 800f106:	d342      	bcc.n	800f18e <__gethex+0x1fe>
 800f108:	9801      	ldr	r0, [sp, #4]
 800f10a:	f840 bb04 	str.w	fp, [r0], #4
 800f10e:	eba0 000a 	sub.w	r0, r0, sl
 800f112:	1080      	asrs	r0, r0, #2
 800f114:	6120      	str	r0, [r4, #16]
 800f116:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f11a:	4658      	mov	r0, fp
 800f11c:	f7fe f828 	bl	800d170 <__hi0bits>
 800f120:	683d      	ldr	r5, [r7, #0]
 800f122:	eba8 0000 	sub.w	r0, r8, r0
 800f126:	42a8      	cmp	r0, r5
 800f128:	dd59      	ble.n	800f1de <__gethex+0x24e>
 800f12a:	eba0 0805 	sub.w	r8, r0, r5
 800f12e:	4641      	mov	r1, r8
 800f130:	4620      	mov	r0, r4
 800f132:	f7fe fbb7 	bl	800d8a4 <__any_on>
 800f136:	4683      	mov	fp, r0
 800f138:	b1b8      	cbz	r0, 800f16a <__gethex+0x1da>
 800f13a:	f108 33ff 	add.w	r3, r8, #4294967295
 800f13e:	1159      	asrs	r1, r3, #5
 800f140:	f003 021f 	and.w	r2, r3, #31
 800f144:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f148:	f04f 0b01 	mov.w	fp, #1
 800f14c:	fa0b f202 	lsl.w	r2, fp, r2
 800f150:	420a      	tst	r2, r1
 800f152:	d00a      	beq.n	800f16a <__gethex+0x1da>
 800f154:	455b      	cmp	r3, fp
 800f156:	dd06      	ble.n	800f166 <__gethex+0x1d6>
 800f158:	f1a8 0102 	sub.w	r1, r8, #2
 800f15c:	4620      	mov	r0, r4
 800f15e:	f7fe fba1 	bl	800d8a4 <__any_on>
 800f162:	2800      	cmp	r0, #0
 800f164:	d138      	bne.n	800f1d8 <__gethex+0x248>
 800f166:	f04f 0b02 	mov.w	fp, #2
 800f16a:	4641      	mov	r1, r8
 800f16c:	4620      	mov	r0, r4
 800f16e:	f7ff fea7 	bl	800eec0 <rshift>
 800f172:	4446      	add	r6, r8
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	42b3      	cmp	r3, r6
 800f178:	da41      	bge.n	800f1fe <__gethex+0x26e>
 800f17a:	4621      	mov	r1, r4
 800f17c:	4648      	mov	r0, r9
 800f17e:	f7fd ff45 	bl	800d00c <_Bfree>
 800f182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f184:	2300      	movs	r3, #0
 800f186:	6013      	str	r3, [r2, #0]
 800f188:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f18c:	e78a      	b.n	800f0a4 <__gethex+0x114>
 800f18e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f192:	2a2e      	cmp	r2, #46	; 0x2e
 800f194:	d014      	beq.n	800f1c0 <__gethex+0x230>
 800f196:	2b20      	cmp	r3, #32
 800f198:	d106      	bne.n	800f1a8 <__gethex+0x218>
 800f19a:	9b01      	ldr	r3, [sp, #4]
 800f19c:	f843 bb04 	str.w	fp, [r3], #4
 800f1a0:	f04f 0b00 	mov.w	fp, #0
 800f1a4:	9301      	str	r3, [sp, #4]
 800f1a6:	465b      	mov	r3, fp
 800f1a8:	7828      	ldrb	r0, [r5, #0]
 800f1aa:	9303      	str	r3, [sp, #12]
 800f1ac:	f7ff feda 	bl	800ef64 <__hexdig_fun>
 800f1b0:	9b03      	ldr	r3, [sp, #12]
 800f1b2:	f000 000f 	and.w	r0, r0, #15
 800f1b6:	4098      	lsls	r0, r3
 800f1b8:	ea4b 0b00 	orr.w	fp, fp, r0
 800f1bc:	3304      	adds	r3, #4
 800f1be:	e7a1      	b.n	800f104 <__gethex+0x174>
 800f1c0:	45a8      	cmp	r8, r5
 800f1c2:	d8e8      	bhi.n	800f196 <__gethex+0x206>
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	9303      	str	r3, [sp, #12]
 800f1ca:	f7ff fe1d 	bl	800ee08 <strncmp>
 800f1ce:	4926      	ldr	r1, [pc, #152]	; (800f268 <__gethex+0x2d8>)
 800f1d0:	9b03      	ldr	r3, [sp, #12]
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d1df      	bne.n	800f196 <__gethex+0x206>
 800f1d6:	e795      	b.n	800f104 <__gethex+0x174>
 800f1d8:	f04f 0b03 	mov.w	fp, #3
 800f1dc:	e7c5      	b.n	800f16a <__gethex+0x1da>
 800f1de:	da0b      	bge.n	800f1f8 <__gethex+0x268>
 800f1e0:	eba5 0800 	sub.w	r8, r5, r0
 800f1e4:	4621      	mov	r1, r4
 800f1e6:	4642      	mov	r2, r8
 800f1e8:	4648      	mov	r0, r9
 800f1ea:	f7fe f929 	bl	800d440 <__lshift>
 800f1ee:	eba6 0608 	sub.w	r6, r6, r8
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	f100 0a14 	add.w	sl, r0, #20
 800f1f8:	f04f 0b00 	mov.w	fp, #0
 800f1fc:	e7ba      	b.n	800f174 <__gethex+0x1e4>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	42b3      	cmp	r3, r6
 800f202:	dd73      	ble.n	800f2ec <__gethex+0x35c>
 800f204:	1b9e      	subs	r6, r3, r6
 800f206:	42b5      	cmp	r5, r6
 800f208:	dc34      	bgt.n	800f274 <__gethex+0x2e4>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	d023      	beq.n	800f258 <__gethex+0x2c8>
 800f210:	2b03      	cmp	r3, #3
 800f212:	d025      	beq.n	800f260 <__gethex+0x2d0>
 800f214:	2b01      	cmp	r3, #1
 800f216:	d115      	bne.n	800f244 <__gethex+0x2b4>
 800f218:	42b5      	cmp	r5, r6
 800f21a:	d113      	bne.n	800f244 <__gethex+0x2b4>
 800f21c:	2d01      	cmp	r5, #1
 800f21e:	d10b      	bne.n	800f238 <__gethex+0x2a8>
 800f220:	9a02      	ldr	r2, [sp, #8]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6013      	str	r3, [r2, #0]
 800f226:	2301      	movs	r3, #1
 800f228:	6123      	str	r3, [r4, #16]
 800f22a:	f8ca 3000 	str.w	r3, [sl]
 800f22e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f230:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f234:	601c      	str	r4, [r3, #0]
 800f236:	e735      	b.n	800f0a4 <__gethex+0x114>
 800f238:	1e69      	subs	r1, r5, #1
 800f23a:	4620      	mov	r0, r4
 800f23c:	f7fe fb32 	bl	800d8a4 <__any_on>
 800f240:	2800      	cmp	r0, #0
 800f242:	d1ed      	bne.n	800f220 <__gethex+0x290>
 800f244:	4621      	mov	r1, r4
 800f246:	4648      	mov	r0, r9
 800f248:	f7fd fee0 	bl	800d00c <_Bfree>
 800f24c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f24e:	2300      	movs	r3, #0
 800f250:	6013      	str	r3, [r2, #0]
 800f252:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f256:	e725      	b.n	800f0a4 <__gethex+0x114>
 800f258:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d1f2      	bne.n	800f244 <__gethex+0x2b4>
 800f25e:	e7df      	b.n	800f220 <__gethex+0x290>
 800f260:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1dc      	bne.n	800f220 <__gethex+0x290>
 800f266:	e7ed      	b.n	800f244 <__gethex+0x2b4>
 800f268:	0801025c 	.word	0x0801025c
 800f26c:	080100f5 	.word	0x080100f5
 800f270:	08010406 	.word	0x08010406
 800f274:	f106 38ff 	add.w	r8, r6, #4294967295
 800f278:	f1bb 0f00 	cmp.w	fp, #0
 800f27c:	d133      	bne.n	800f2e6 <__gethex+0x356>
 800f27e:	f1b8 0f00 	cmp.w	r8, #0
 800f282:	d004      	beq.n	800f28e <__gethex+0x2fe>
 800f284:	4641      	mov	r1, r8
 800f286:	4620      	mov	r0, r4
 800f288:	f7fe fb0c 	bl	800d8a4 <__any_on>
 800f28c:	4683      	mov	fp, r0
 800f28e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f292:	2301      	movs	r3, #1
 800f294:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f298:	f008 081f 	and.w	r8, r8, #31
 800f29c:	fa03 f308 	lsl.w	r3, r3, r8
 800f2a0:	4213      	tst	r3, r2
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	bf18      	it	ne
 800f2a8:	f04b 0b02 	orrne.w	fp, fp, #2
 800f2ac:	1bad      	subs	r5, r5, r6
 800f2ae:	f7ff fe07 	bl	800eec0 <rshift>
 800f2b2:	687e      	ldr	r6, [r7, #4]
 800f2b4:	f04f 0802 	mov.w	r8, #2
 800f2b8:	f1bb 0f00 	cmp.w	fp, #0
 800f2bc:	d04a      	beq.n	800f354 <__gethex+0x3c4>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d016      	beq.n	800f2f2 <__gethex+0x362>
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	d018      	beq.n	800f2fa <__gethex+0x36a>
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d109      	bne.n	800f2e0 <__gethex+0x350>
 800f2cc:	f01b 0f02 	tst.w	fp, #2
 800f2d0:	d006      	beq.n	800f2e0 <__gethex+0x350>
 800f2d2:	f8da 3000 	ldr.w	r3, [sl]
 800f2d6:	ea4b 0b03 	orr.w	fp, fp, r3
 800f2da:	f01b 0f01 	tst.w	fp, #1
 800f2de:	d10f      	bne.n	800f300 <__gethex+0x370>
 800f2e0:	f048 0810 	orr.w	r8, r8, #16
 800f2e4:	e036      	b.n	800f354 <__gethex+0x3c4>
 800f2e6:	f04f 0b01 	mov.w	fp, #1
 800f2ea:	e7d0      	b.n	800f28e <__gethex+0x2fe>
 800f2ec:	f04f 0801 	mov.w	r8, #1
 800f2f0:	e7e2      	b.n	800f2b8 <__gethex+0x328>
 800f2f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2f4:	f1c3 0301 	rsb	r3, r3, #1
 800f2f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d0ef      	beq.n	800f2e0 <__gethex+0x350>
 800f300:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f304:	f104 0214 	add.w	r2, r4, #20
 800f308:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f30c:	9301      	str	r3, [sp, #4]
 800f30e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f312:	2300      	movs	r3, #0
 800f314:	4694      	mov	ip, r2
 800f316:	f852 1b04 	ldr.w	r1, [r2], #4
 800f31a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f31e:	d01e      	beq.n	800f35e <__gethex+0x3ce>
 800f320:	3101      	adds	r1, #1
 800f322:	f8cc 1000 	str.w	r1, [ip]
 800f326:	f1b8 0f02 	cmp.w	r8, #2
 800f32a:	f104 0214 	add.w	r2, r4, #20
 800f32e:	d13d      	bne.n	800f3ac <__gethex+0x41c>
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	3b01      	subs	r3, #1
 800f334:	42ab      	cmp	r3, r5
 800f336:	d10b      	bne.n	800f350 <__gethex+0x3c0>
 800f338:	1169      	asrs	r1, r5, #5
 800f33a:	2301      	movs	r3, #1
 800f33c:	f005 051f 	and.w	r5, r5, #31
 800f340:	fa03 f505 	lsl.w	r5, r3, r5
 800f344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f348:	421d      	tst	r5, r3
 800f34a:	bf18      	it	ne
 800f34c:	f04f 0801 	movne.w	r8, #1
 800f350:	f048 0820 	orr.w	r8, r8, #32
 800f354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f356:	601c      	str	r4, [r3, #0]
 800f358:	9b02      	ldr	r3, [sp, #8]
 800f35a:	601e      	str	r6, [r3, #0]
 800f35c:	e6a2      	b.n	800f0a4 <__gethex+0x114>
 800f35e:	4290      	cmp	r0, r2
 800f360:	f842 3c04 	str.w	r3, [r2, #-4]
 800f364:	d8d6      	bhi.n	800f314 <__gethex+0x384>
 800f366:	68a2      	ldr	r2, [r4, #8]
 800f368:	4593      	cmp	fp, r2
 800f36a:	db17      	blt.n	800f39c <__gethex+0x40c>
 800f36c:	6861      	ldr	r1, [r4, #4]
 800f36e:	4648      	mov	r0, r9
 800f370:	3101      	adds	r1, #1
 800f372:	f7fd fe0b 	bl	800cf8c <_Balloc>
 800f376:	4682      	mov	sl, r0
 800f378:	b918      	cbnz	r0, 800f382 <__gethex+0x3f2>
 800f37a:	4b1b      	ldr	r3, [pc, #108]	; (800f3e8 <__gethex+0x458>)
 800f37c:	4602      	mov	r2, r0
 800f37e:	2184      	movs	r1, #132	; 0x84
 800f380:	e6b3      	b.n	800f0ea <__gethex+0x15a>
 800f382:	6922      	ldr	r2, [r4, #16]
 800f384:	3202      	adds	r2, #2
 800f386:	f104 010c 	add.w	r1, r4, #12
 800f38a:	0092      	lsls	r2, r2, #2
 800f38c:	300c      	adds	r0, #12
 800f38e:	f7ff fd4d 	bl	800ee2c <memcpy>
 800f392:	4621      	mov	r1, r4
 800f394:	4648      	mov	r0, r9
 800f396:	f7fd fe39 	bl	800d00c <_Bfree>
 800f39a:	4654      	mov	r4, sl
 800f39c:	6922      	ldr	r2, [r4, #16]
 800f39e:	1c51      	adds	r1, r2, #1
 800f3a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f3a4:	6121      	str	r1, [r4, #16]
 800f3a6:	2101      	movs	r1, #1
 800f3a8:	6151      	str	r1, [r2, #20]
 800f3aa:	e7bc      	b.n	800f326 <__gethex+0x396>
 800f3ac:	6921      	ldr	r1, [r4, #16]
 800f3ae:	4559      	cmp	r1, fp
 800f3b0:	dd0b      	ble.n	800f3ca <__gethex+0x43a>
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7ff fd83 	bl	800eec0 <rshift>
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	3601      	adds	r6, #1
 800f3be:	42b3      	cmp	r3, r6
 800f3c0:	f6ff aedb 	blt.w	800f17a <__gethex+0x1ea>
 800f3c4:	f04f 0801 	mov.w	r8, #1
 800f3c8:	e7c2      	b.n	800f350 <__gethex+0x3c0>
 800f3ca:	f015 051f 	ands.w	r5, r5, #31
 800f3ce:	d0f9      	beq.n	800f3c4 <__gethex+0x434>
 800f3d0:	9b01      	ldr	r3, [sp, #4]
 800f3d2:	441a      	add	r2, r3
 800f3d4:	f1c5 0520 	rsb	r5, r5, #32
 800f3d8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f3dc:	f7fd fec8 	bl	800d170 <__hi0bits>
 800f3e0:	42a8      	cmp	r0, r5
 800f3e2:	dbe6      	blt.n	800f3b2 <__gethex+0x422>
 800f3e4:	e7ee      	b.n	800f3c4 <__gethex+0x434>
 800f3e6:	bf00      	nop
 800f3e8:	080100f5 	.word	0x080100f5

0800f3ec <L_shift>:
 800f3ec:	f1c2 0208 	rsb	r2, r2, #8
 800f3f0:	0092      	lsls	r2, r2, #2
 800f3f2:	b570      	push	{r4, r5, r6, lr}
 800f3f4:	f1c2 0620 	rsb	r6, r2, #32
 800f3f8:	6843      	ldr	r3, [r0, #4]
 800f3fa:	6804      	ldr	r4, [r0, #0]
 800f3fc:	fa03 f506 	lsl.w	r5, r3, r6
 800f400:	432c      	orrs	r4, r5
 800f402:	40d3      	lsrs	r3, r2
 800f404:	6004      	str	r4, [r0, #0]
 800f406:	f840 3f04 	str.w	r3, [r0, #4]!
 800f40a:	4288      	cmp	r0, r1
 800f40c:	d3f4      	bcc.n	800f3f8 <L_shift+0xc>
 800f40e:	bd70      	pop	{r4, r5, r6, pc}

0800f410 <__match>:
 800f410:	b530      	push	{r4, r5, lr}
 800f412:	6803      	ldr	r3, [r0, #0]
 800f414:	3301      	adds	r3, #1
 800f416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f41a:	b914      	cbnz	r4, 800f422 <__match+0x12>
 800f41c:	6003      	str	r3, [r0, #0]
 800f41e:	2001      	movs	r0, #1
 800f420:	bd30      	pop	{r4, r5, pc}
 800f422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f426:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f42a:	2d19      	cmp	r5, #25
 800f42c:	bf98      	it	ls
 800f42e:	3220      	addls	r2, #32
 800f430:	42a2      	cmp	r2, r4
 800f432:	d0f0      	beq.n	800f416 <__match+0x6>
 800f434:	2000      	movs	r0, #0
 800f436:	e7f3      	b.n	800f420 <__match+0x10>

0800f438 <__hexnan>:
 800f438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f43c:	680b      	ldr	r3, [r1, #0]
 800f43e:	6801      	ldr	r1, [r0, #0]
 800f440:	115e      	asrs	r6, r3, #5
 800f442:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f446:	f013 031f 	ands.w	r3, r3, #31
 800f44a:	b087      	sub	sp, #28
 800f44c:	bf18      	it	ne
 800f44e:	3604      	addne	r6, #4
 800f450:	2500      	movs	r5, #0
 800f452:	1f37      	subs	r7, r6, #4
 800f454:	4682      	mov	sl, r0
 800f456:	4690      	mov	r8, r2
 800f458:	9301      	str	r3, [sp, #4]
 800f45a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f45e:	46b9      	mov	r9, r7
 800f460:	463c      	mov	r4, r7
 800f462:	9502      	str	r5, [sp, #8]
 800f464:	46ab      	mov	fp, r5
 800f466:	784a      	ldrb	r2, [r1, #1]
 800f468:	1c4b      	adds	r3, r1, #1
 800f46a:	9303      	str	r3, [sp, #12]
 800f46c:	b342      	cbz	r2, 800f4c0 <__hexnan+0x88>
 800f46e:	4610      	mov	r0, r2
 800f470:	9105      	str	r1, [sp, #20]
 800f472:	9204      	str	r2, [sp, #16]
 800f474:	f7ff fd76 	bl	800ef64 <__hexdig_fun>
 800f478:	2800      	cmp	r0, #0
 800f47a:	d14f      	bne.n	800f51c <__hexnan+0xe4>
 800f47c:	9a04      	ldr	r2, [sp, #16]
 800f47e:	9905      	ldr	r1, [sp, #20]
 800f480:	2a20      	cmp	r2, #32
 800f482:	d818      	bhi.n	800f4b6 <__hexnan+0x7e>
 800f484:	9b02      	ldr	r3, [sp, #8]
 800f486:	459b      	cmp	fp, r3
 800f488:	dd13      	ble.n	800f4b2 <__hexnan+0x7a>
 800f48a:	454c      	cmp	r4, r9
 800f48c:	d206      	bcs.n	800f49c <__hexnan+0x64>
 800f48e:	2d07      	cmp	r5, #7
 800f490:	dc04      	bgt.n	800f49c <__hexnan+0x64>
 800f492:	462a      	mov	r2, r5
 800f494:	4649      	mov	r1, r9
 800f496:	4620      	mov	r0, r4
 800f498:	f7ff ffa8 	bl	800f3ec <L_shift>
 800f49c:	4544      	cmp	r4, r8
 800f49e:	d950      	bls.n	800f542 <__hexnan+0x10a>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	f1a4 0904 	sub.w	r9, r4, #4
 800f4a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4aa:	f8cd b008 	str.w	fp, [sp, #8]
 800f4ae:	464c      	mov	r4, r9
 800f4b0:	461d      	mov	r5, r3
 800f4b2:	9903      	ldr	r1, [sp, #12]
 800f4b4:	e7d7      	b.n	800f466 <__hexnan+0x2e>
 800f4b6:	2a29      	cmp	r2, #41	; 0x29
 800f4b8:	d155      	bne.n	800f566 <__hexnan+0x12e>
 800f4ba:	3102      	adds	r1, #2
 800f4bc:	f8ca 1000 	str.w	r1, [sl]
 800f4c0:	f1bb 0f00 	cmp.w	fp, #0
 800f4c4:	d04f      	beq.n	800f566 <__hexnan+0x12e>
 800f4c6:	454c      	cmp	r4, r9
 800f4c8:	d206      	bcs.n	800f4d8 <__hexnan+0xa0>
 800f4ca:	2d07      	cmp	r5, #7
 800f4cc:	dc04      	bgt.n	800f4d8 <__hexnan+0xa0>
 800f4ce:	462a      	mov	r2, r5
 800f4d0:	4649      	mov	r1, r9
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	f7ff ff8a 	bl	800f3ec <L_shift>
 800f4d8:	4544      	cmp	r4, r8
 800f4da:	d934      	bls.n	800f546 <__hexnan+0x10e>
 800f4dc:	f1a8 0204 	sub.w	r2, r8, #4
 800f4e0:	4623      	mov	r3, r4
 800f4e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f4e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f4ea:	429f      	cmp	r7, r3
 800f4ec:	d2f9      	bcs.n	800f4e2 <__hexnan+0xaa>
 800f4ee:	1b3b      	subs	r3, r7, r4
 800f4f0:	f023 0303 	bic.w	r3, r3, #3
 800f4f4:	3304      	adds	r3, #4
 800f4f6:	3e03      	subs	r6, #3
 800f4f8:	3401      	adds	r4, #1
 800f4fa:	42a6      	cmp	r6, r4
 800f4fc:	bf38      	it	cc
 800f4fe:	2304      	movcc	r3, #4
 800f500:	4443      	add	r3, r8
 800f502:	2200      	movs	r2, #0
 800f504:	f843 2b04 	str.w	r2, [r3], #4
 800f508:	429f      	cmp	r7, r3
 800f50a:	d2fb      	bcs.n	800f504 <__hexnan+0xcc>
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	b91b      	cbnz	r3, 800f518 <__hexnan+0xe0>
 800f510:	4547      	cmp	r7, r8
 800f512:	d126      	bne.n	800f562 <__hexnan+0x12a>
 800f514:	2301      	movs	r3, #1
 800f516:	603b      	str	r3, [r7, #0]
 800f518:	2005      	movs	r0, #5
 800f51a:	e025      	b.n	800f568 <__hexnan+0x130>
 800f51c:	3501      	adds	r5, #1
 800f51e:	2d08      	cmp	r5, #8
 800f520:	f10b 0b01 	add.w	fp, fp, #1
 800f524:	dd06      	ble.n	800f534 <__hexnan+0xfc>
 800f526:	4544      	cmp	r4, r8
 800f528:	d9c3      	bls.n	800f4b2 <__hexnan+0x7a>
 800f52a:	2300      	movs	r3, #0
 800f52c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f530:	2501      	movs	r5, #1
 800f532:	3c04      	subs	r4, #4
 800f534:	6822      	ldr	r2, [r4, #0]
 800f536:	f000 000f 	and.w	r0, r0, #15
 800f53a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f53e:	6020      	str	r0, [r4, #0]
 800f540:	e7b7      	b.n	800f4b2 <__hexnan+0x7a>
 800f542:	2508      	movs	r5, #8
 800f544:	e7b5      	b.n	800f4b2 <__hexnan+0x7a>
 800f546:	9b01      	ldr	r3, [sp, #4]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d0df      	beq.n	800f50c <__hexnan+0xd4>
 800f54c:	f1c3 0320 	rsb	r3, r3, #32
 800f550:	f04f 32ff 	mov.w	r2, #4294967295
 800f554:	40da      	lsrs	r2, r3
 800f556:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f55a:	4013      	ands	r3, r2
 800f55c:	f846 3c04 	str.w	r3, [r6, #-4]
 800f560:	e7d4      	b.n	800f50c <__hexnan+0xd4>
 800f562:	3f04      	subs	r7, #4
 800f564:	e7d2      	b.n	800f50c <__hexnan+0xd4>
 800f566:	2004      	movs	r0, #4
 800f568:	b007      	add	sp, #28
 800f56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f56e <__ascii_mbtowc>:
 800f56e:	b082      	sub	sp, #8
 800f570:	b901      	cbnz	r1, 800f574 <__ascii_mbtowc+0x6>
 800f572:	a901      	add	r1, sp, #4
 800f574:	b142      	cbz	r2, 800f588 <__ascii_mbtowc+0x1a>
 800f576:	b14b      	cbz	r3, 800f58c <__ascii_mbtowc+0x1e>
 800f578:	7813      	ldrb	r3, [r2, #0]
 800f57a:	600b      	str	r3, [r1, #0]
 800f57c:	7812      	ldrb	r2, [r2, #0]
 800f57e:	1e10      	subs	r0, r2, #0
 800f580:	bf18      	it	ne
 800f582:	2001      	movne	r0, #1
 800f584:	b002      	add	sp, #8
 800f586:	4770      	bx	lr
 800f588:	4610      	mov	r0, r2
 800f58a:	e7fb      	b.n	800f584 <__ascii_mbtowc+0x16>
 800f58c:	f06f 0001 	mvn.w	r0, #1
 800f590:	e7f8      	b.n	800f584 <__ascii_mbtowc+0x16>

0800f592 <_realloc_r>:
 800f592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f596:	4680      	mov	r8, r0
 800f598:	4614      	mov	r4, r2
 800f59a:	460e      	mov	r6, r1
 800f59c:	b921      	cbnz	r1, 800f5a8 <_realloc_r+0x16>
 800f59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a2:	4611      	mov	r1, r2
 800f5a4:	f7fb bd5c 	b.w	800b060 <_malloc_r>
 800f5a8:	b92a      	cbnz	r2, 800f5b6 <_realloc_r+0x24>
 800f5aa:	f7fd fca3 	bl	800cef4 <_free_r>
 800f5ae:	4625      	mov	r5, r4
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5b6:	f000 f8c6 	bl	800f746 <_malloc_usable_size_r>
 800f5ba:	4284      	cmp	r4, r0
 800f5bc:	4607      	mov	r7, r0
 800f5be:	d802      	bhi.n	800f5c6 <_realloc_r+0x34>
 800f5c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5c4:	d812      	bhi.n	800f5ec <_realloc_r+0x5a>
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	4640      	mov	r0, r8
 800f5ca:	f7fb fd49 	bl	800b060 <_malloc_r>
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d0ed      	beq.n	800f5b0 <_realloc_r+0x1e>
 800f5d4:	42bc      	cmp	r4, r7
 800f5d6:	4622      	mov	r2, r4
 800f5d8:	4631      	mov	r1, r6
 800f5da:	bf28      	it	cs
 800f5dc:	463a      	movcs	r2, r7
 800f5de:	f7ff fc25 	bl	800ee2c <memcpy>
 800f5e2:	4631      	mov	r1, r6
 800f5e4:	4640      	mov	r0, r8
 800f5e6:	f7fd fc85 	bl	800cef4 <_free_r>
 800f5ea:	e7e1      	b.n	800f5b0 <_realloc_r+0x1e>
 800f5ec:	4635      	mov	r5, r6
 800f5ee:	e7df      	b.n	800f5b0 <_realloc_r+0x1e>

0800f5f0 <__ascii_wctomb>:
 800f5f0:	b149      	cbz	r1, 800f606 <__ascii_wctomb+0x16>
 800f5f2:	2aff      	cmp	r2, #255	; 0xff
 800f5f4:	bf85      	ittet	hi
 800f5f6:	238a      	movhi	r3, #138	; 0x8a
 800f5f8:	6003      	strhi	r3, [r0, #0]
 800f5fa:	700a      	strbls	r2, [r1, #0]
 800f5fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800f600:	bf98      	it	ls
 800f602:	2001      	movls	r0, #1
 800f604:	4770      	bx	lr
 800f606:	4608      	mov	r0, r1
 800f608:	4770      	bx	lr
	...

0800f60c <fiprintf>:
 800f60c:	b40e      	push	{r1, r2, r3}
 800f60e:	b503      	push	{r0, r1, lr}
 800f610:	4601      	mov	r1, r0
 800f612:	ab03      	add	r3, sp, #12
 800f614:	4805      	ldr	r0, [pc, #20]	; (800f62c <fiprintf+0x20>)
 800f616:	f853 2b04 	ldr.w	r2, [r3], #4
 800f61a:	6800      	ldr	r0, [r0, #0]
 800f61c:	9301      	str	r3, [sp, #4]
 800f61e:	f7ff f97b 	bl	800e918 <_vfiprintf_r>
 800f622:	b002      	add	sp, #8
 800f624:	f85d eb04 	ldr.w	lr, [sp], #4
 800f628:	b003      	add	sp, #12
 800f62a:	4770      	bx	lr
 800f62c:	20000080 	.word	0x20000080

0800f630 <__swhatbuf_r>:
 800f630:	b570      	push	{r4, r5, r6, lr}
 800f632:	460c      	mov	r4, r1
 800f634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f638:	2900      	cmp	r1, #0
 800f63a:	b096      	sub	sp, #88	; 0x58
 800f63c:	4615      	mov	r5, r2
 800f63e:	461e      	mov	r6, r3
 800f640:	da0d      	bge.n	800f65e <__swhatbuf_r+0x2e>
 800f642:	89a3      	ldrh	r3, [r4, #12]
 800f644:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f648:	f04f 0100 	mov.w	r1, #0
 800f64c:	bf0c      	ite	eq
 800f64e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f652:	2340      	movne	r3, #64	; 0x40
 800f654:	2000      	movs	r0, #0
 800f656:	6031      	str	r1, [r6, #0]
 800f658:	602b      	str	r3, [r5, #0]
 800f65a:	b016      	add	sp, #88	; 0x58
 800f65c:	bd70      	pop	{r4, r5, r6, pc}
 800f65e:	466a      	mov	r2, sp
 800f660:	f000 f848 	bl	800f6f4 <_fstat_r>
 800f664:	2800      	cmp	r0, #0
 800f666:	dbec      	blt.n	800f642 <__swhatbuf_r+0x12>
 800f668:	9901      	ldr	r1, [sp, #4]
 800f66a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f66e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f672:	4259      	negs	r1, r3
 800f674:	4159      	adcs	r1, r3
 800f676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f67a:	e7eb      	b.n	800f654 <__swhatbuf_r+0x24>

0800f67c <__smakebuf_r>:
 800f67c:	898b      	ldrh	r3, [r1, #12]
 800f67e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f680:	079d      	lsls	r5, r3, #30
 800f682:	4606      	mov	r6, r0
 800f684:	460c      	mov	r4, r1
 800f686:	d507      	bpl.n	800f698 <__smakebuf_r+0x1c>
 800f688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f68c:	6023      	str	r3, [r4, #0]
 800f68e:	6123      	str	r3, [r4, #16]
 800f690:	2301      	movs	r3, #1
 800f692:	6163      	str	r3, [r4, #20]
 800f694:	b002      	add	sp, #8
 800f696:	bd70      	pop	{r4, r5, r6, pc}
 800f698:	ab01      	add	r3, sp, #4
 800f69a:	466a      	mov	r2, sp
 800f69c:	f7ff ffc8 	bl	800f630 <__swhatbuf_r>
 800f6a0:	9900      	ldr	r1, [sp, #0]
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	f7fb fcdb 	bl	800b060 <_malloc_r>
 800f6aa:	b948      	cbnz	r0, 800f6c0 <__smakebuf_r+0x44>
 800f6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6b0:	059a      	lsls	r2, r3, #22
 800f6b2:	d4ef      	bmi.n	800f694 <__smakebuf_r+0x18>
 800f6b4:	f023 0303 	bic.w	r3, r3, #3
 800f6b8:	f043 0302 	orr.w	r3, r3, #2
 800f6bc:	81a3      	strh	r3, [r4, #12]
 800f6be:	e7e3      	b.n	800f688 <__smakebuf_r+0xc>
 800f6c0:	89a3      	ldrh	r3, [r4, #12]
 800f6c2:	6020      	str	r0, [r4, #0]
 800f6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c8:	81a3      	strh	r3, [r4, #12]
 800f6ca:	9b00      	ldr	r3, [sp, #0]
 800f6cc:	6163      	str	r3, [r4, #20]
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	6120      	str	r0, [r4, #16]
 800f6d2:	b15b      	cbz	r3, 800f6ec <__smakebuf_r+0x70>
 800f6d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6d8:	4630      	mov	r0, r6
 800f6da:	f000 f81d 	bl	800f718 <_isatty_r>
 800f6de:	b128      	cbz	r0, 800f6ec <__smakebuf_r+0x70>
 800f6e0:	89a3      	ldrh	r3, [r4, #12]
 800f6e2:	f023 0303 	bic.w	r3, r3, #3
 800f6e6:	f043 0301 	orr.w	r3, r3, #1
 800f6ea:	81a3      	strh	r3, [r4, #12]
 800f6ec:	89a3      	ldrh	r3, [r4, #12]
 800f6ee:	431d      	orrs	r5, r3
 800f6f0:	81a5      	strh	r5, [r4, #12]
 800f6f2:	e7cf      	b.n	800f694 <__smakebuf_r+0x18>

0800f6f4 <_fstat_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	4d07      	ldr	r5, [pc, #28]	; (800f714 <_fstat_r+0x20>)
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	4608      	mov	r0, r1
 800f6fe:	4611      	mov	r1, r2
 800f700:	602b      	str	r3, [r5, #0]
 800f702:	f7f4 f960 	bl	80039c6 <_fstat>
 800f706:	1c43      	adds	r3, r0, #1
 800f708:	d102      	bne.n	800f710 <_fstat_r+0x1c>
 800f70a:	682b      	ldr	r3, [r5, #0]
 800f70c:	b103      	cbz	r3, 800f710 <_fstat_r+0x1c>
 800f70e:	6023      	str	r3, [r4, #0]
 800f710:	bd38      	pop	{r3, r4, r5, pc}
 800f712:	bf00      	nop
 800f714:	20002bb8 	.word	0x20002bb8

0800f718 <_isatty_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4d06      	ldr	r5, [pc, #24]	; (800f734 <_isatty_r+0x1c>)
 800f71c:	2300      	movs	r3, #0
 800f71e:	4604      	mov	r4, r0
 800f720:	4608      	mov	r0, r1
 800f722:	602b      	str	r3, [r5, #0]
 800f724:	f7f4 f95f 	bl	80039e6 <_isatty>
 800f728:	1c43      	adds	r3, r0, #1
 800f72a:	d102      	bne.n	800f732 <_isatty_r+0x1a>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	b103      	cbz	r3, 800f732 <_isatty_r+0x1a>
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	bd38      	pop	{r3, r4, r5, pc}
 800f734:	20002bb8 	.word	0x20002bb8

0800f738 <abort>:
 800f738:	b508      	push	{r3, lr}
 800f73a:	2006      	movs	r0, #6
 800f73c:	f000 f834 	bl	800f7a8 <raise>
 800f740:	2001      	movs	r0, #1
 800f742:	f7f4 f8f1 	bl	8003928 <_exit>

0800f746 <_malloc_usable_size_r>:
 800f746:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f74a:	1f18      	subs	r0, r3, #4
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	bfbc      	itt	lt
 800f750:	580b      	ldrlt	r3, [r1, r0]
 800f752:	18c0      	addlt	r0, r0, r3
 800f754:	4770      	bx	lr

0800f756 <_raise_r>:
 800f756:	291f      	cmp	r1, #31
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4604      	mov	r4, r0
 800f75c:	460d      	mov	r5, r1
 800f75e:	d904      	bls.n	800f76a <_raise_r+0x14>
 800f760:	2316      	movs	r3, #22
 800f762:	6003      	str	r3, [r0, #0]
 800f764:	f04f 30ff 	mov.w	r0, #4294967295
 800f768:	bd38      	pop	{r3, r4, r5, pc}
 800f76a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f76c:	b112      	cbz	r2, 800f774 <_raise_r+0x1e>
 800f76e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f772:	b94b      	cbnz	r3, 800f788 <_raise_r+0x32>
 800f774:	4620      	mov	r0, r4
 800f776:	f000 f831 	bl	800f7dc <_getpid_r>
 800f77a:	462a      	mov	r2, r5
 800f77c:	4601      	mov	r1, r0
 800f77e:	4620      	mov	r0, r4
 800f780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f784:	f000 b818 	b.w	800f7b8 <_kill_r>
 800f788:	2b01      	cmp	r3, #1
 800f78a:	d00a      	beq.n	800f7a2 <_raise_r+0x4c>
 800f78c:	1c59      	adds	r1, r3, #1
 800f78e:	d103      	bne.n	800f798 <_raise_r+0x42>
 800f790:	2316      	movs	r3, #22
 800f792:	6003      	str	r3, [r0, #0]
 800f794:	2001      	movs	r0, #1
 800f796:	e7e7      	b.n	800f768 <_raise_r+0x12>
 800f798:	2400      	movs	r4, #0
 800f79a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f79e:	4628      	mov	r0, r5
 800f7a0:	4798      	blx	r3
 800f7a2:	2000      	movs	r0, #0
 800f7a4:	e7e0      	b.n	800f768 <_raise_r+0x12>
	...

0800f7a8 <raise>:
 800f7a8:	4b02      	ldr	r3, [pc, #8]	; (800f7b4 <raise+0xc>)
 800f7aa:	4601      	mov	r1, r0
 800f7ac:	6818      	ldr	r0, [r3, #0]
 800f7ae:	f7ff bfd2 	b.w	800f756 <_raise_r>
 800f7b2:	bf00      	nop
 800f7b4:	20000080 	.word	0x20000080

0800f7b8 <_kill_r>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	4d07      	ldr	r5, [pc, #28]	; (800f7d8 <_kill_r+0x20>)
 800f7bc:	2300      	movs	r3, #0
 800f7be:	4604      	mov	r4, r0
 800f7c0:	4608      	mov	r0, r1
 800f7c2:	4611      	mov	r1, r2
 800f7c4:	602b      	str	r3, [r5, #0]
 800f7c6:	f7f4 f89f 	bl	8003908 <_kill>
 800f7ca:	1c43      	adds	r3, r0, #1
 800f7cc:	d102      	bne.n	800f7d4 <_kill_r+0x1c>
 800f7ce:	682b      	ldr	r3, [r5, #0]
 800f7d0:	b103      	cbz	r3, 800f7d4 <_kill_r+0x1c>
 800f7d2:	6023      	str	r3, [r4, #0]
 800f7d4:	bd38      	pop	{r3, r4, r5, pc}
 800f7d6:	bf00      	nop
 800f7d8:	20002bb8 	.word	0x20002bb8

0800f7dc <_getpid_r>:
 800f7dc:	f7f4 b88c 	b.w	80038f8 <_getpid>

0800f7e0 <sqrt>:
 800f7e0:	b538      	push	{r3, r4, r5, lr}
 800f7e2:	ed2d 8b02 	vpush	{d8}
 800f7e6:	ec55 4b10 	vmov	r4, r5, d0
 800f7ea:	f000 f825 	bl	800f838 <__ieee754_sqrt>
 800f7ee:	4622      	mov	r2, r4
 800f7f0:	462b      	mov	r3, r5
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	4629      	mov	r1, r5
 800f7f6:	eeb0 8a40 	vmov.f32	s16, s0
 800f7fa:	eef0 8a60 	vmov.f32	s17, s1
 800f7fe:	f7f1 f995 	bl	8000b2c <__aeabi_dcmpun>
 800f802:	b990      	cbnz	r0, 800f82a <sqrt+0x4a>
 800f804:	2200      	movs	r2, #0
 800f806:	2300      	movs	r3, #0
 800f808:	4620      	mov	r0, r4
 800f80a:	4629      	mov	r1, r5
 800f80c:	f7f1 f966 	bl	8000adc <__aeabi_dcmplt>
 800f810:	b158      	cbz	r0, 800f82a <sqrt+0x4a>
 800f812:	f7fc fcc1 	bl	800c198 <__errno>
 800f816:	2321      	movs	r3, #33	; 0x21
 800f818:	6003      	str	r3, [r0, #0]
 800f81a:	2200      	movs	r2, #0
 800f81c:	2300      	movs	r3, #0
 800f81e:	4610      	mov	r0, r2
 800f820:	4619      	mov	r1, r3
 800f822:	f7f1 f813 	bl	800084c <__aeabi_ddiv>
 800f826:	ec41 0b18 	vmov	d8, r0, r1
 800f82a:	eeb0 0a48 	vmov.f32	s0, s16
 800f82e:	eef0 0a68 	vmov.f32	s1, s17
 800f832:	ecbd 8b02 	vpop	{d8}
 800f836:	bd38      	pop	{r3, r4, r5, pc}

0800f838 <__ieee754_sqrt>:
 800f838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83c:	ec55 4b10 	vmov	r4, r5, d0
 800f840:	4e67      	ldr	r6, [pc, #412]	; (800f9e0 <__ieee754_sqrt+0x1a8>)
 800f842:	43ae      	bics	r6, r5
 800f844:	ee10 0a10 	vmov	r0, s0
 800f848:	ee10 2a10 	vmov	r2, s0
 800f84c:	4629      	mov	r1, r5
 800f84e:	462b      	mov	r3, r5
 800f850:	d10d      	bne.n	800f86e <__ieee754_sqrt+0x36>
 800f852:	f7f0 fed1 	bl	80005f8 <__aeabi_dmul>
 800f856:	4602      	mov	r2, r0
 800f858:	460b      	mov	r3, r1
 800f85a:	4620      	mov	r0, r4
 800f85c:	4629      	mov	r1, r5
 800f85e:	f7f0 fd15 	bl	800028c <__adddf3>
 800f862:	4604      	mov	r4, r0
 800f864:	460d      	mov	r5, r1
 800f866:	ec45 4b10 	vmov	d0, r4, r5
 800f86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f86e:	2d00      	cmp	r5, #0
 800f870:	dc0b      	bgt.n	800f88a <__ieee754_sqrt+0x52>
 800f872:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f876:	4326      	orrs	r6, r4
 800f878:	d0f5      	beq.n	800f866 <__ieee754_sqrt+0x2e>
 800f87a:	b135      	cbz	r5, 800f88a <__ieee754_sqrt+0x52>
 800f87c:	f7f0 fd04 	bl	8000288 <__aeabi_dsub>
 800f880:	4602      	mov	r2, r0
 800f882:	460b      	mov	r3, r1
 800f884:	f7f0 ffe2 	bl	800084c <__aeabi_ddiv>
 800f888:	e7eb      	b.n	800f862 <__ieee754_sqrt+0x2a>
 800f88a:	1509      	asrs	r1, r1, #20
 800f88c:	f000 808d 	beq.w	800f9aa <__ieee754_sqrt+0x172>
 800f890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f894:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f89c:	07c9      	lsls	r1, r1, #31
 800f89e:	bf5c      	itt	pl
 800f8a0:	005b      	lslpl	r3, r3, #1
 800f8a2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f8a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f8aa:	bf58      	it	pl
 800f8ac:	0052      	lslpl	r2, r2, #1
 800f8ae:	2500      	movs	r5, #0
 800f8b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f8b4:	1076      	asrs	r6, r6, #1
 800f8b6:	0052      	lsls	r2, r2, #1
 800f8b8:	f04f 0e16 	mov.w	lr, #22
 800f8bc:	46ac      	mov	ip, r5
 800f8be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f8c2:	eb0c 0001 	add.w	r0, ip, r1
 800f8c6:	4298      	cmp	r0, r3
 800f8c8:	bfde      	ittt	le
 800f8ca:	1a1b      	suble	r3, r3, r0
 800f8cc:	eb00 0c01 	addle.w	ip, r0, r1
 800f8d0:	186d      	addle	r5, r5, r1
 800f8d2:	005b      	lsls	r3, r3, #1
 800f8d4:	f1be 0e01 	subs.w	lr, lr, #1
 800f8d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f8dc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f8e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f8e4:	d1ed      	bne.n	800f8c2 <__ieee754_sqrt+0x8a>
 800f8e6:	4674      	mov	r4, lr
 800f8e8:	2720      	movs	r7, #32
 800f8ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f8ee:	4563      	cmp	r3, ip
 800f8f0:	eb01 000e 	add.w	r0, r1, lr
 800f8f4:	dc02      	bgt.n	800f8fc <__ieee754_sqrt+0xc4>
 800f8f6:	d113      	bne.n	800f920 <__ieee754_sqrt+0xe8>
 800f8f8:	4290      	cmp	r0, r2
 800f8fa:	d811      	bhi.n	800f920 <__ieee754_sqrt+0xe8>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	eb00 0e01 	add.w	lr, r0, r1
 800f902:	da57      	bge.n	800f9b4 <__ieee754_sqrt+0x17c>
 800f904:	f1be 0f00 	cmp.w	lr, #0
 800f908:	db54      	blt.n	800f9b4 <__ieee754_sqrt+0x17c>
 800f90a:	f10c 0801 	add.w	r8, ip, #1
 800f90e:	eba3 030c 	sub.w	r3, r3, ip
 800f912:	4290      	cmp	r0, r2
 800f914:	bf88      	it	hi
 800f916:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f91a:	1a12      	subs	r2, r2, r0
 800f91c:	440c      	add	r4, r1
 800f91e:	46c4      	mov	ip, r8
 800f920:	005b      	lsls	r3, r3, #1
 800f922:	3f01      	subs	r7, #1
 800f924:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f928:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f92c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f930:	d1dd      	bne.n	800f8ee <__ieee754_sqrt+0xb6>
 800f932:	4313      	orrs	r3, r2
 800f934:	d01b      	beq.n	800f96e <__ieee754_sqrt+0x136>
 800f936:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f9e4 <__ieee754_sqrt+0x1ac>
 800f93a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f9e8 <__ieee754_sqrt+0x1b0>
 800f93e:	e9da 0100 	ldrd	r0, r1, [sl]
 800f942:	e9db 2300 	ldrd	r2, r3, [fp]
 800f946:	f7f0 fc9f 	bl	8000288 <__aeabi_dsub>
 800f94a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	4640      	mov	r0, r8
 800f954:	4649      	mov	r1, r9
 800f956:	f7f1 f8cb 	bl	8000af0 <__aeabi_dcmple>
 800f95a:	b140      	cbz	r0, 800f96e <__ieee754_sqrt+0x136>
 800f95c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f960:	e9da 0100 	ldrd	r0, r1, [sl]
 800f964:	e9db 2300 	ldrd	r2, r3, [fp]
 800f968:	d126      	bne.n	800f9b8 <__ieee754_sqrt+0x180>
 800f96a:	3501      	adds	r5, #1
 800f96c:	463c      	mov	r4, r7
 800f96e:	106a      	asrs	r2, r5, #1
 800f970:	0863      	lsrs	r3, r4, #1
 800f972:	07e9      	lsls	r1, r5, #31
 800f974:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f978:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f97c:	bf48      	it	mi
 800f97e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f982:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f986:	461c      	mov	r4, r3
 800f988:	e76d      	b.n	800f866 <__ieee754_sqrt+0x2e>
 800f98a:	0ad3      	lsrs	r3, r2, #11
 800f98c:	3815      	subs	r0, #21
 800f98e:	0552      	lsls	r2, r2, #21
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0fa      	beq.n	800f98a <__ieee754_sqrt+0x152>
 800f994:	02dc      	lsls	r4, r3, #11
 800f996:	d50a      	bpl.n	800f9ae <__ieee754_sqrt+0x176>
 800f998:	f1c1 0420 	rsb	r4, r1, #32
 800f99c:	fa22 f404 	lsr.w	r4, r2, r4
 800f9a0:	1e4d      	subs	r5, r1, #1
 800f9a2:	408a      	lsls	r2, r1
 800f9a4:	4323      	orrs	r3, r4
 800f9a6:	1b41      	subs	r1, r0, r5
 800f9a8:	e772      	b.n	800f890 <__ieee754_sqrt+0x58>
 800f9aa:	4608      	mov	r0, r1
 800f9ac:	e7f0      	b.n	800f990 <__ieee754_sqrt+0x158>
 800f9ae:	005b      	lsls	r3, r3, #1
 800f9b0:	3101      	adds	r1, #1
 800f9b2:	e7ef      	b.n	800f994 <__ieee754_sqrt+0x15c>
 800f9b4:	46e0      	mov	r8, ip
 800f9b6:	e7aa      	b.n	800f90e <__ieee754_sqrt+0xd6>
 800f9b8:	f7f0 fc68 	bl	800028c <__adddf3>
 800f9bc:	e9da 8900 	ldrd	r8, r9, [sl]
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	4649      	mov	r1, r9
 800f9c8:	f7f1 f888 	bl	8000adc <__aeabi_dcmplt>
 800f9cc:	b120      	cbz	r0, 800f9d8 <__ieee754_sqrt+0x1a0>
 800f9ce:	1ca0      	adds	r0, r4, #2
 800f9d0:	bf08      	it	eq
 800f9d2:	3501      	addeq	r5, #1
 800f9d4:	3402      	adds	r4, #2
 800f9d6:	e7ca      	b.n	800f96e <__ieee754_sqrt+0x136>
 800f9d8:	3401      	adds	r4, #1
 800f9da:	f024 0401 	bic.w	r4, r4, #1
 800f9de:	e7c6      	b.n	800f96e <__ieee754_sqrt+0x136>
 800f9e0:	7ff00000 	.word	0x7ff00000
 800f9e4:	200001f0 	.word	0x200001f0
 800f9e8:	200001f8 	.word	0x200001f8

0800f9ec <_init>:
 800f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ee:	bf00      	nop
 800f9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9f2:	bc08      	pop	{r3}
 800f9f4:	469e      	mov	lr, r3
 800f9f6:	4770      	bx	lr

0800f9f8 <_fini>:
 800f9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fa:	bf00      	nop
 800f9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9fe:	bc08      	pop	{r3}
 800fa00:	469e      	mov	lr, r3
 800fa02:	4770      	bx	lr
