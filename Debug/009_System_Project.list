
009_System_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08011cd0  08011cd0  00012cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012748  08012748  00014200  2**0
                  CONTENTS
  4 .ARM          00000008  08012748  08012748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012750  08012750  00014200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012750  08012750  00013750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012754  08012754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012758  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014200  2**0
                  CONTENTS
 10 .bss          00002a98  20000200  20000200  00014200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002c98  20002c98  00014200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001acb9  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bb2  00000000  00000000  0002eee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  00032aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000135a  00000000  00000000  00034398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002752c  00000000  00000000  000356f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000207d3  00000000  00000000  0005cc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5081  00000000  00000000  0007d3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162472  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f14  00000000  00000000  001624b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0016a3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011cb8 	.word	0x08011cb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08011cb8 	.word	0x08011cb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2140      	movs	r1, #64	@ 0x40
 8000fec:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <SELECT+0x18>)
 8000fee:	f004 fae5 	bl	80055bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f002 fefe 	bl	8003df4 <HAL_Delay>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020400 	.word	0x40020400

08001000 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001004:	2201      	movs	r2, #1
 8001006:	2140      	movs	r1, #64	@ 0x40
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <DESELECT+0x18>)
 800100a:	f004 fad7 	bl	80055bc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f002 fef0 	bl	8003df4 <HAL_Delay>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020400 	.word	0x40020400

0800101c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001026:	bf00      	nop
 8001028:	4b08      	ldr	r3, [pc, #32]	@ (800104c <SPI_TxByte+0x30>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b02      	cmp	r3, #2
 8001034:	d1f8      	bne.n	8001028 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001036:	1df9      	adds	r1, r7, #7
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	2201      	movs	r2, #1
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <SPI_TxByte+0x30>)
 800103e:	f006 f99a 	bl	8007376 <HAL_SPI_Transmit>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000224 	.word	0x20000224

08001050 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800105c:	bf00      	nop
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <SPI_TxBuffer+0x30>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b02      	cmp	r3, #2
 800106a:	d1f8      	bne.n	800105e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800106c:	887a      	ldrh	r2, [r7, #2]
 800106e:	2364      	movs	r3, #100	@ 0x64
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	4803      	ldr	r0, [pc, #12]	@ (8001080 <SPI_TxBuffer+0x30>)
 8001074:	f006 f97f 	bl	8007376 <HAL_SPI_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000224 	.word	0x20000224

08001084 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800108a:	23ff      	movs	r3, #255	@ 0xff
 800108c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800108e:	bf00      	nop
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <SPI_RxByte+0x34>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b02      	cmp	r3, #2
 800109c:	d1f8      	bne.n	8001090 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800109e:	1dba      	adds	r2, r7, #6
 80010a0:	1df9      	adds	r1, r7, #7
 80010a2:	2364      	movs	r3, #100	@ 0x64
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	4803      	ldr	r0, [pc, #12]	@ (80010b8 <SPI_RxByte+0x34>)
 80010aa:	f006 faa7 	bl	80075fc <HAL_SPI_TransmitReceive>

	return data;
 80010ae:	79bb      	ldrb	r3, [r7, #6]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000224 	.word	0x20000224

080010bc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80010c4:	f7ff ffde 	bl	8001084 <SPI_RxByte>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	701a      	strb	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <SD_ReadyWait+0x30>)
 80010e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010e4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80010e6:	f7ff ffcd 	bl	8001084 <SPI_RxByte>
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2bff      	cmp	r3, #255	@ 0xff
 80010f2:	d003      	beq.n	80010fc <SD_ReadyWait+0x24>
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SD_ReadyWait+0x30>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1f4      	bne.n	80010e6 <SD_ReadyWait+0xe>

	return res;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000021e 	.word	0x2000021e

0800110c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001112:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001116:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001118:	f7ff ff72 	bl	8001000 <DESELECT>
	for(int i = 0; i < 10; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	e005      	b.n	800112e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001122:	20ff      	movs	r0, #255	@ 0xff
 8001124:	f7ff ff7a 	bl	800101c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b09      	cmp	r3, #9
 8001132:	ddf6      	ble.n	8001122 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001134:	f7ff ff56 	bl	8000fe4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001138:	2340      	movs	r3, #64	@ 0x40
 800113a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800114c:	2395      	movs	r3, #149	@ 0x95
 800114e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001150:	463b      	mov	r3, r7
 8001152:	2106      	movs	r1, #6
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff7b 	bl	8001050 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800115a:	e002      	b.n	8001162 <SD_PowerOn+0x56>
	{
		cnt--;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3b01      	subs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001162:	f7ff ff8f 	bl	8001084 <SPI_RxByte>
 8001166:	4603      	mov	r3, r0
 8001168:	2b01      	cmp	r3, #1
 800116a:	d002      	beq.n	8001172 <SD_PowerOn+0x66>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f4      	bne.n	800115c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001172:	f7ff ff45 	bl	8001000 <DESELECT>
	SPI_TxByte(0XFF);
 8001176:	20ff      	movs	r0, #255	@ 0xff
 8001178:	f7ff ff50 	bl	800101c <SPI_TxByte>

	PowerFlag = 1;
 800117c:	4b03      	ldr	r3, [pc, #12]	@ (800118c <SD_PowerOn+0x80>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000221 	.word	0x20000221

08001190 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001194:	4b03      	ldr	r3, [pc, #12]	@ (80011a4 <SD_PowerOff+0x14>)
 8001196:	2200      	movs	r2, #0
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	20000221 	.word	0x20000221

080011a8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	return PowerFlag;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <SD_CheckPower+0x14>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000221 	.word	0x20000221

080011c0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80011ca:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <SD_RxDataBlock+0x58>)
 80011cc:	22c8      	movs	r2, #200	@ 0xc8
 80011ce:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80011d0:	f7ff ff58 	bl	8001084 <SPI_RxByte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2bff      	cmp	r3, #255	@ 0xff
 80011dc:	d103      	bne.n	80011e6 <SD_RxDataBlock+0x26>
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <SD_RxDataBlock+0x58>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f4      	bne.n	80011d0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	2bfe      	cmp	r3, #254	@ 0xfe
 80011ea:	d001      	beq.n	80011f0 <SD_RxDataBlock+0x30>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e00f      	b.n	8001210 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff60 	bl	80010bc <SPI_RxBytePtr>
	} while(len--);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	1e5a      	subs	r2, r3, #1
 8001200:	603a      	str	r2, [r7, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f4      	bne.n	80011f0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8001206:	f7ff ff3d 	bl	8001084 <SPI_RxByte>
	SPI_RxByte();
 800120a:	f7ff ff3b 	bl	8001084 <SPI_RxByte>

	return TRUE;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000021c 	.word	0x2000021c

0800121c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800122c:	f7ff ff54 	bl	80010d8 <SD_ReadyWait>
 8001230:	4603      	mov	r3, r0
 8001232:	2bff      	cmp	r3, #255	@ 0xff
 8001234:	d001      	beq.n	800123a <SD_TxDataBlock+0x1e>
 8001236:	2300      	movs	r3, #0
 8001238:	e02f      	b.n	800129a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff feed 	bl	800101c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	2bfd      	cmp	r3, #253	@ 0xfd
 8001246:	d020      	beq.n	800128a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001248:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff feff 	bl	8001050 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001252:	f7ff ff17 	bl	8001084 <SPI_RxByte>
		SPI_RxByte();
 8001256:	f7ff ff15 	bl	8001084 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800125a:	e00b      	b.n	8001274 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800125c:	f7ff ff12 	bl	8001084 <SPI_RxByte>
 8001260:	4603      	mov	r3, r0
 8001262:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	2b05      	cmp	r3, #5
 800126c:	d006      	beq.n	800127c <SD_TxDataBlock+0x60>
			i++;
 800126e:	7bbb      	ldrb	r3, [r7, #14]
 8001270:	3301      	adds	r3, #1
 8001272:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	2b40      	cmp	r3, #64	@ 0x40
 8001278:	d9f0      	bls.n	800125c <SD_TxDataBlock+0x40>
 800127a:	e000      	b.n	800127e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800127c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800127e:	bf00      	nop
 8001280:	f7ff ff00 	bl	8001084 <SPI_RxByte>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0fa      	beq.n	8001280 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	2b05      	cmp	r3, #5
 8001292:	d101      	bne.n	8001298 <SD_TxDataBlock+0x7c>
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	6039      	str	r1, [r7, #0]
 80012ac:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80012ae:	f7ff ff13 	bl	80010d8 <SD_ReadyWait>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2bff      	cmp	r3, #255	@ 0xff
 80012b6:	d001      	beq.n	80012bc <SD_SendCmd+0x1a>
 80012b8:	23ff      	movs	r3, #255	@ 0xff
 80012ba:	e042      	b.n	8001342 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff feac 	bl	800101c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	0e1b      	lsrs	r3, r3, #24
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fea6 	bl	800101c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	0c1b      	lsrs	r3, r3, #16
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fea0 	bl	800101c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fe9a 	bl	800101c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe95 	bl	800101c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b40      	cmp	r3, #64	@ 0x40
 80012f6:	d102      	bne.n	80012fe <SD_SendCmd+0x5c>
 80012f8:	2395      	movs	r3, #149	@ 0x95
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e007      	b.n	800130e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2b48      	cmp	r3, #72	@ 0x48
 8001302:	d102      	bne.n	800130a <SD_SendCmd+0x68>
 8001304:	2387      	movs	r3, #135	@ 0x87
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e001      	b.n	800130e <SD_SendCmd+0x6c>
	else crc = 1;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fe83 	bl	800101c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	2b4c      	cmp	r3, #76	@ 0x4c
 800131a:	d101      	bne.n	8001320 <SD_SendCmd+0x7e>
 800131c:	f7ff feb2 	bl	8001084 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001320:	230a      	movs	r3, #10
 8001322:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001324:	f7ff feae 	bl	8001084 <SPI_RxByte>
 8001328:	4603      	mov	r3, r0
 800132a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800132c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da05      	bge.n	8001340 <SD_SendCmd+0x9e>
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	3b01      	subs	r3, #1
 8001338:	73bb      	strb	r3, [r7, #14]
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f1      	bne.n	8001324 <SD_SendCmd+0x82>

	return res;
 8001340:	7b7b      	ldrb	r3, [r7, #13]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SD_disk_initialize+0x14>
 800135c:	2301      	movs	r3, #1
 800135e:	e0d1      	b.n	8001504 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001360:	4b6a      	ldr	r3, [pc, #424]	@ (800150c <SD_disk_initialize+0x1c0>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <SD_disk_initialize+0x2a>
 800136e:	4b67      	ldr	r3, [pc, #412]	@ (800150c <SD_disk_initialize+0x1c0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	e0c6      	b.n	8001504 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001376:	f7ff fec9 	bl	800110c <SD_PowerOn>

	/* slave select */
	SELECT();
 800137a:	f7ff fe33 	bl	8000fe4 <SELECT>

	/* check disk type */
	type = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001382:	2100      	movs	r1, #0
 8001384:	2040      	movs	r0, #64	@ 0x40
 8001386:	f7ff ff8c 	bl	80012a2 <SD_SendCmd>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	f040 80a1 	bne.w	80014d4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001392:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <SD_disk_initialize+0x1c4>)
 8001394:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001398:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800139a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800139e:	2048      	movs	r0, #72	@ 0x48
 80013a0:	f7ff ff7f 	bl	80012a2 <SD_SendCmd>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d155      	bne.n	8001456 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e00c      	b.n	80013ca <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80013b0:	7bfc      	ldrb	r4, [r7, #15]
 80013b2:	f7ff fe67 	bl	8001084 <SPI_RxByte>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	f104 0310 	add.w	r3, r4, #16
 80013be:	443b      	add	r3, r7
 80013c0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3301      	adds	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d9ef      	bls.n	80013b0 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80013d0:	7abb      	ldrb	r3, [r7, #10]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d17e      	bne.n	80014d4 <SD_disk_initialize+0x188>
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	2baa      	cmp	r3, #170	@ 0xaa
 80013da:	d17b      	bne.n	80014d4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80013dc:	2100      	movs	r1, #0
 80013de:	2077      	movs	r0, #119	@ 0x77
 80013e0:	f7ff ff5f 	bl	80012a2 <SD_SendCmd>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d807      	bhi.n	80013fa <SD_disk_initialize+0xae>
 80013ea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013ee:	2069      	movs	r0, #105	@ 0x69
 80013f0:	f7ff ff57 	bl	80012a2 <SD_SendCmd>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80013fa:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <SD_disk_initialize+0x1c4>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ec      	bne.n	80013dc <SD_disk_initialize+0x90>
 8001402:	e000      	b.n	8001406 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001404:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001406:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <SD_disk_initialize+0x1c4>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d062      	beq.n	80014d4 <SD_disk_initialize+0x188>
 800140e:	2100      	movs	r1, #0
 8001410:	207a      	movs	r0, #122	@ 0x7a
 8001412:	f7ff ff46 	bl	80012a2 <SD_SendCmd>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d15b      	bne.n	80014d4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e00c      	b.n	800143c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001422:	7bfc      	ldrb	r4, [r7, #15]
 8001424:	f7ff fe2e 	bl	8001084 <SPI_RxByte>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	f104 0310 	add.w	r3, r4, #16
 8001430:	443b      	add	r3, r7
 8001432:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3301      	adds	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d9ef      	bls.n	8001422 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001442:	7a3b      	ldrb	r3, [r7, #8]
 8001444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SD_disk_initialize+0x104>
 800144c:	230c      	movs	r3, #12
 800144e:	e000      	b.n	8001452 <SD_disk_initialize+0x106>
 8001450:	2304      	movs	r3, #4
 8001452:	73bb      	strb	r3, [r7, #14]
 8001454:	e03e      	b.n	80014d4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001456:	2100      	movs	r1, #0
 8001458:	2077      	movs	r0, #119	@ 0x77
 800145a:	f7ff ff22 	bl	80012a2 <SD_SendCmd>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	d808      	bhi.n	8001476 <SD_disk_initialize+0x12a>
 8001464:	2100      	movs	r1, #0
 8001466:	2069      	movs	r0, #105	@ 0x69
 8001468:	f7ff ff1b 	bl	80012a2 <SD_SendCmd>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d801      	bhi.n	8001476 <SD_disk_initialize+0x12a>
 8001472:	2302      	movs	r3, #2
 8001474:	e000      	b.n	8001478 <SD_disk_initialize+0x12c>
 8001476:	2301      	movs	r3, #1
 8001478:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d10e      	bne.n	800149e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001480:	2100      	movs	r1, #0
 8001482:	2077      	movs	r0, #119	@ 0x77
 8001484:	f7ff ff0d 	bl	80012a2 <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d80e      	bhi.n	80014ac <SD_disk_initialize+0x160>
 800148e:	2100      	movs	r1, #0
 8001490:	2069      	movs	r0, #105	@ 0x69
 8001492:	f7ff ff06 	bl	80012a2 <SD_SendCmd>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d107      	bne.n	80014ac <SD_disk_initialize+0x160>
 800149c:	e00c      	b.n	80014b8 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800149e:	2100      	movs	r1, #0
 80014a0:	2041      	movs	r0, #65	@ 0x41
 80014a2:	f7ff fefe 	bl	80012a2 <SD_SendCmd>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <SD_disk_initialize+0x1c4>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1e2      	bne.n	800147a <SD_disk_initialize+0x12e>
 80014b4:	e000      	b.n	80014b8 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80014b6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <SD_disk_initialize+0x1c4>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <SD_disk_initialize+0x184>
 80014c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014c4:	2050      	movs	r0, #80	@ 0x50
 80014c6:	f7ff feec 	bl	80012a2 <SD_SendCmd>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SD_disk_initialize+0x188>
 80014d0:	2300      	movs	r3, #0
 80014d2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80014d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001514 <SD_disk_initialize+0x1c8>)
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80014da:	f7ff fd91 	bl	8001000 <DESELECT>
	SPI_RxByte();
 80014de:	f7ff fdd1 	bl	8001084 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80014e2:	7bbb      	ldrb	r3, [r7, #14]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <SD_disk_initialize+0x1c0>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <SD_disk_initialize+0x1c0>)
 80014f6:	701a      	strb	r2, [r3, #0]
 80014f8:	e001      	b.n	80014fe <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80014fa:	f7ff fe49 	bl	8001190 <SD_PowerOff>
	}

	return Stat;
 80014fe:	4b03      	ldr	r3, [pc, #12]	@ (800150c <SD_disk_initialize+0x1c0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	2000021c 	.word	0x2000021c
 8001514:	20000220 	.word	0x20000220

08001518 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SD_disk_status+0x14>
 8001528:	2301      	movs	r3, #1
 800152a:	e002      	b.n	8001532 <SD_disk_status+0x1a>
	return Stat;
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <SD_disk_status+0x28>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000000 	.word	0x20000000

08001544 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <SD_disk_read+0x1c>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <SD_disk_read+0x20>
 8001560:	2304      	movs	r3, #4
 8001562:	e051      	b.n	8001608 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001564:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <SD_disk_read+0xcc>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <SD_disk_read+0x32>
 8001572:	2303      	movs	r3, #3
 8001574:	e048      	b.n	8001608 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001576:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <SD_disk_read+0xd0>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <SD_disk_read+0x44>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	025b      	lsls	r3, r3, #9
 8001586:	607b      	str	r3, [r7, #4]

	SELECT();
 8001588:	f7ff fd2c 	bl	8000fe4 <SELECT>

	if (count == 1)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d111      	bne.n	80015b6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	2051      	movs	r0, #81	@ 0x51
 8001596:	f7ff fe84 	bl	80012a2 <SD_SendCmd>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d129      	bne.n	80015f4 <SD_disk_read+0xb0>
 80015a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015a4:	68b8      	ldr	r0, [r7, #8]
 80015a6:	f7ff fe0b 	bl	80011c0 <SD_RxDataBlock>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d021      	beq.n	80015f4 <SD_disk_read+0xb0>
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
 80015b4:	e01e      	b.n	80015f4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	2052      	movs	r0, #82	@ 0x52
 80015ba:	f7ff fe72 	bl	80012a2 <SD_SendCmd>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d117      	bne.n	80015f4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80015c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015c8:	68b8      	ldr	r0, [r7, #8]
 80015ca:	f7ff fdf9 	bl	80011c0 <SD_RxDataBlock>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00a      	beq.n	80015ea <SD_disk_read+0xa6>
				buff += 512;
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80015da:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3b01      	subs	r3, #1
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ed      	bne.n	80015c4 <SD_disk_read+0x80>
 80015e8:	e000      	b.n	80015ec <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80015ea:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	204c      	movs	r0, #76	@ 0x4c
 80015f0:	f7ff fe57 	bl	80012a2 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80015f4:	f7ff fd04 	bl	8001000 <DESELECT>
	SPI_RxByte();
 80015f8:	f7ff fd44 	bl	8001084 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf14      	ite	ne
 8001602:	2301      	movne	r3, #1
 8001604:	2300      	moveq	r3, #0
 8001606:	b2db      	uxtb	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000000 	.word	0x20000000
 8001614:	20000220 	.word	0x20000220

08001618 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <SD_disk_write+0x1c>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <SD_disk_write+0x20>
 8001634:	2304      	movs	r3, #4
 8001636:	e06b      	b.n	8001710 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001638:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <SD_disk_write+0x100>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SD_disk_write+0x32>
 8001646:	2303      	movs	r3, #3
 8001648:	e062      	b.n	8001710 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800164a:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <SD_disk_write+0x100>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <SD_disk_write+0x44>
 8001658:	2302      	movs	r3, #2
 800165a:	e059      	b.n	8001710 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800165c:	4b2f      	ldr	r3, [pc, #188]	@ (800171c <SD_disk_write+0x104>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <SD_disk_write+0x56>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	025b      	lsls	r3, r3, #9
 800166c:	607b      	str	r3, [r7, #4]

	SELECT();
 800166e:	f7ff fcb9 	bl	8000fe4 <SELECT>

	if (count == 1)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d110      	bne.n	800169a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	2058      	movs	r0, #88	@ 0x58
 800167c:	f7ff fe11 	bl	80012a2 <SD_SendCmd>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d13a      	bne.n	80016fc <SD_disk_write+0xe4>
 8001686:	21fe      	movs	r1, #254	@ 0xfe
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7ff fdc7 	bl	800121c <SD_TxDataBlock>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d033      	beq.n	80016fc <SD_disk_write+0xe4>
			count = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	e030      	b.n	80016fc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800169a:	4b20      	ldr	r3, [pc, #128]	@ (800171c <SD_disk_write+0x104>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80016a6:	2100      	movs	r1, #0
 80016a8:	2077      	movs	r0, #119	@ 0x77
 80016aa:	f7ff fdfa 	bl	80012a2 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	2057      	movs	r0, #87	@ 0x57
 80016b2:	f7ff fdf6 	bl	80012a2 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	2059      	movs	r0, #89	@ 0x59
 80016ba:	f7ff fdf2 	bl	80012a2 <SD_SendCmd>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d11b      	bne.n	80016fc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016c4:	21fc      	movs	r1, #252	@ 0xfc
 80016c6:	68b8      	ldr	r0, [r7, #8]
 80016c8:	f7ff fda8 	bl	800121c <SD_TxDataBlock>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00a      	beq.n	80016e8 <SD_disk_write+0xd0>
				buff += 512;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016d8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3b01      	subs	r3, #1
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ee      	bne.n	80016c4 <SD_disk_write+0xac>
 80016e6:	e000      	b.n	80016ea <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80016e8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80016ea:	21fd      	movs	r1, #253	@ 0xfd
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fd95 	bl	800121c <SD_TxDataBlock>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <SD_disk_write+0xe4>
			{
				count = 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80016fc:	f7ff fc80 	bl	8001000 <DESELECT>
	SPI_RxByte();
 8001700:	f7ff fcc0 	bl	8001084 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf14      	ite	ne
 800170a:	2301      	movne	r3, #1
 800170c:	2300      	moveq	r3, #0
 800170e:	b2db      	uxtb	r3, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000000 	.word	0x20000000
 800171c:	20000220 	.word	0x20000220

08001720 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b08b      	sub	sp, #44	@ 0x2c
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	603a      	str	r2, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	460b      	mov	r3, r1
 800172e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SD_disk_ioctl+0x1e>
 800173a:	2304      	movs	r3, #4
 800173c:	e113      	b.n	8001966 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d124      	bne.n	8001794 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d012      	beq.n	8001778 <SD_disk_ioctl+0x58>
 8001752:	2b02      	cmp	r3, #2
 8001754:	dc1a      	bgt.n	800178c <SD_disk_ioctl+0x6c>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <SD_disk_ioctl+0x40>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d006      	beq.n	800176c <SD_disk_ioctl+0x4c>
 800175e:	e015      	b.n	800178c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001760:	f7ff fd16 	bl	8001190 <SD_PowerOff>
			res = RES_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800176a:	e0fa      	b.n	8001962 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800176c:	f7ff fcce 	bl	800110c <SD_PowerOn>
			res = RES_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001776:	e0f4      	b.n	8001962 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	1c5c      	adds	r4, r3, #1
 800177c:	f7ff fd14 	bl	80011a8 <SD_CheckPower>
 8001780:	4603      	mov	r3, r0
 8001782:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800178a:	e0ea      	b.n	8001962 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 800178c:	2304      	movs	r3, #4
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001792:	e0e6      	b.n	8001962 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001794:	4b76      	ldr	r3, [pc, #472]	@ (8001970 <SD_disk_ioctl+0x250>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SD_disk_ioctl+0x86>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0df      	b.n	8001966 <SD_disk_ioctl+0x246>

		SELECT();
 80017a6:	f7ff fc1d 	bl	8000fe4 <SELECT>

		switch (ctrl)
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	2b0d      	cmp	r3, #13
 80017ae:	f200 80c9 	bhi.w	8001944 <SD_disk_ioctl+0x224>
 80017b2:	a201      	add	r2, pc, #4	@ (adr r2, 80017b8 <SD_disk_ioctl+0x98>)
 80017b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b8:	080018af 	.word	0x080018af
 80017bc:	080017f1 	.word	0x080017f1
 80017c0:	0800189f 	.word	0x0800189f
 80017c4:	08001945 	.word	0x08001945
 80017c8:	08001945 	.word	0x08001945
 80017cc:	08001945 	.word	0x08001945
 80017d0:	08001945 	.word	0x08001945
 80017d4:	08001945 	.word	0x08001945
 80017d8:	08001945 	.word	0x08001945
 80017dc:	08001945 	.word	0x08001945
 80017e0:	08001945 	.word	0x08001945
 80017e4:	080018c1 	.word	0x080018c1
 80017e8:	080018e5 	.word	0x080018e5
 80017ec:	08001909 	.word	0x08001909
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80017f0:	2100      	movs	r1, #0
 80017f2:	2049      	movs	r0, #73	@ 0x49
 80017f4:	f7ff fd55 	bl	80012a2 <SD_SendCmd>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80a6 	bne.w	800194c <SD_disk_ioctl+0x22c>
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2110      	movs	r1, #16
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fcda 	bl	80011c0 <SD_RxDataBlock>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 809c 	beq.w	800194c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001814:	7b3b      	ldrb	r3, [r7, #12]
 8001816:	099b      	lsrs	r3, r3, #6
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d10d      	bne.n	800183a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800181e:	7d7b      	ldrb	r3, [r7, #21]
 8001820:	461a      	mov	r2, r3
 8001822:	7d3b      	ldrb	r3, [r7, #20]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	b29b      	uxth	r3, r3
 8001828:	4413      	add	r3, r2
 800182a:	b29b      	uxth	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001830:	8bfb      	ldrh	r3, [r7, #30]
 8001832:	029a      	lsls	r2, r3, #10
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e02d      	b.n	8001896 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800183a:	7c7b      	ldrb	r3, [r7, #17]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	b2da      	uxtb	r2, r3
 8001842:	7dbb      	ldrb	r3, [r7, #22]
 8001844:	09db      	lsrs	r3, r3, #7
 8001846:	b2db      	uxtb	r3, r3
 8001848:	4413      	add	r3, r2
 800184a:	b2da      	uxtb	r2, r3
 800184c:	7d7b      	ldrb	r3, [r7, #21]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 0306 	and.w	r3, r3, #6
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4413      	add	r3, r2
 800185a:	b2db      	uxtb	r3, r3
 800185c:	3302      	adds	r3, #2
 800185e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001862:	7d3b      	ldrb	r3, [r7, #20]
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	b29b      	uxth	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b29a      	uxth	r2, r3
 8001874:	7cbb      	ldrb	r3, [r7, #18]
 8001876:	029b      	lsls	r3, r3, #10
 8001878:	b29b      	uxth	r3, r3
 800187a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800187e:	b29b      	uxth	r3, r3
 8001880:	4413      	add	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	3301      	adds	r3, #1
 8001886:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001888:	8bfa      	ldrh	r2, [r7, #30]
 800188a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800188e:	3b09      	subs	r3, #9
 8001890:	409a      	lsls	r2, r3
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 800189c:	e056      	b.n	800194c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018a4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018ac:	e055      	b.n	800195a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80018ae:	f7ff fc13 	bl	80010d8 <SD_ReadyWait>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2bff      	cmp	r3, #255	@ 0xff
 80018b6:	d14b      	bne.n	8001950 <SD_disk_ioctl+0x230>
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018be:	e047      	b.n	8001950 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018c0:	2100      	movs	r1, #0
 80018c2:	2049      	movs	r0, #73	@ 0x49
 80018c4:	f7ff fced 	bl	80012a2 <SD_SendCmd>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d142      	bne.n	8001954 <SD_disk_ioctl+0x234>
 80018ce:	2110      	movs	r1, #16
 80018d0:	6a38      	ldr	r0, [r7, #32]
 80018d2:	f7ff fc75 	bl	80011c0 <SD_RxDataBlock>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03b      	beq.n	8001954 <SD_disk_ioctl+0x234>
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018e2:	e037      	b.n	8001954 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80018e4:	2100      	movs	r1, #0
 80018e6:	204a      	movs	r0, #74	@ 0x4a
 80018e8:	f7ff fcdb 	bl	80012a2 <SD_SendCmd>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d132      	bne.n	8001958 <SD_disk_ioctl+0x238>
 80018f2:	2110      	movs	r1, #16
 80018f4:	6a38      	ldr	r0, [r7, #32]
 80018f6:	f7ff fc63 	bl	80011c0 <SD_RxDataBlock>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d02b      	beq.n	8001958 <SD_disk_ioctl+0x238>
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001906:	e027      	b.n	8001958 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001908:	2100      	movs	r1, #0
 800190a:	207a      	movs	r0, #122	@ 0x7a
 800190c:	f7ff fcc9 	bl	80012a2 <SD_SendCmd>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d116      	bne.n	8001944 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001916:	2300      	movs	r3, #0
 8001918:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800191c:	e00b      	b.n	8001936 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800191e:	6a3c      	ldr	r4, [r7, #32]
 8001920:	1c63      	adds	r3, r4, #1
 8001922:	623b      	str	r3, [r7, #32]
 8001924:	f7ff fbae 	bl	8001084 <SPI_RxByte>
 8001928:	4603      	mov	r3, r0
 800192a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800192c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001930:	3301      	adds	r3, #1
 8001932:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001936:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800193a:	2b03      	cmp	r3, #3
 800193c:	d9ef      	bls.n	800191e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001944:	2304      	movs	r3, #4
 8001946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800194a:	e006      	b.n	800195a <SD_disk_ioctl+0x23a>
			break;
 800194c:	bf00      	nop
 800194e:	e004      	b.n	800195a <SD_disk_ioctl+0x23a>
			break;
 8001950:	bf00      	nop
 8001952:	e002      	b.n	800195a <SD_disk_ioctl+0x23a>
			break;
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <SD_disk_ioctl+0x23a>
			break;
 8001958:	bf00      	nop
		}

		DESELECT();
 800195a:	f7ff fb51 	bl	8001000 <DESELECT>
		SPI_RxByte();
 800195e:	f7ff fb91 	bl	8001084 <SPI_RxByte>
	}

	return res;
 8001962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001966:	4618      	mov	r0, r3
 8001968:	372c      	adds	r7, #44	@ 0x2c
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}
 800196e:	bf00      	nop
 8001970:	20000000 	.word	0x20000000

08001974 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
	{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 1000);
 800197c:	1d39      	adds	r1, r7, #4
 800197e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001982:	2201      	movs	r2, #1
 8001984:	4803      	ldr	r0, [pc, #12]	@ (8001994 <__io_putchar+0x20>)
 8001986:	f006 fd8b 	bl	80084a0 <HAL_UART_Transmit>
    return ch;
 800198a:	687b      	ldr	r3, [r7, #4]
	}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200024b8 	.word	0x200024b8

08001998 <transmit_uart>:
char buffer[100];


//SD karta yazmada kullanılan transmit_uart'ın fonskiyonu.
void transmit_uart(char *string)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
     uint8_t len = strlen(string);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fc65 	bl	8000270 <strlen>
 80019a6:	4603      	mov	r3, r0
 80019a8:	73fb      	strb	r3, [r7, #15]
     HAL_UART_Transmit_IT(&huart3, (uint8_t*) string , len);
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4803      	ldr	r0, [pc, #12]	@ (80019c0 <transmit_uart+0x28>)
 80019b4:	f006 fdff 	bl	80085b6 <HAL_UART_Transmit_IT>
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20002548 	.word	0x20002548

080019c4 <nextion_Send>:



//Nextion'a değer göndermede kullanılan fonksiyon.
void nextion_Send(char *obj, uint32_t num ) //obj parametresine num değeri gönderilir.
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]


	uint8_t *nextion_Buffer = malloc(30*sizeof(char)); //buffer için bellek tahsis edilir.
 80019ce:	201e      	movs	r0, #30
 80019d0:	f00b fce6 	bl	800d3a0 <malloc>
 80019d4:	4603      	mov	r3, r0
 80019d6:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *)nextion_Buffer, "%s.val=%ld", obj, num); //nextion ekranına gönderilecek komut
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	490b      	ldr	r1, [pc, #44]	@ (8001a0c <nextion_Send+0x48>)
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f00c fcdc 	bl	800e39c <siprintf>
 80019e4:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit_IT(&huart2, nextion_Buffer, len);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	4808      	ldr	r0, [pc, #32]	@ (8001a10 <nextion_Send+0x4c>)
 80019f0:	f006 fde1 	bl	80085b6 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart2, end_Command, 3);
 80019f4:	2203      	movs	r2, #3
 80019f6:	4907      	ldr	r1, [pc, #28]	@ (8001a14 <nextion_Send+0x50>)
 80019f8:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <nextion_Send+0x4c>)
 80019fa:	f006 fddc 	bl	80085b6 <HAL_UART_Transmit_IT>
	free(nextion_Buffer); //bellek serbest bırakılır.
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f00b fcd6 	bl	800d3b0 <free>


}
 8001a04:	bf00      	nop
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	08011cd0 	.word	0x08011cd0
 8001a10:	20002500 	.word	0x20002500
 8001a14:	20000004 	.word	0x20000004

08001a18 <map>:

//Bu fonksiyon belirli bir değer aralığını başka bir değer aralığına dönüştürür.
uint32_t map(uint32_t min1, uint32_t max1, uint32_t min2, uint32_t max2, uint32_t width)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
	return (min1*width)/min2;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	fb03 f202 	mul.w	r2, r3, r2
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_UART_RxCpltCallback>:

//DAC ile alınan verinin gönderimi
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	6078      	str	r0, [r7, #4]
	 if (huart == &huart2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b78 <HAL_UART_RxCpltCallback+0x138>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f040 8197 	bne.w	8001d80 <HAL_UART_RxCpltCallback+0x340>
	 {

		 if(RX_Data[1] == 0x31)
 8001a52:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <HAL_UART_RxCpltCallback+0x13c>)
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	2b31      	cmp	r3, #49	@ 0x31
 8001a58:	d116      	bne.n	8001a88 <HAL_UART_RxCpltCallback+0x48>
		 {
		 nextion_Send("n2", iVin);
 8001a5a:	4b49      	ldr	r3, [pc, #292]	@ (8001b80 <HAL_UART_RxCpltCallback+0x140>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4848      	ldr	r0, [pc, #288]	@ (8001b84 <HAL_UART_RxCpltCallback+0x144>)
 8001a62:	f7ff ffaf 	bl	80019c4 <nextion_Send>
		 nextion_Send("n3", iIin);
 8001a66:	4b48      	ldr	r3, [pc, #288]	@ (8001b88 <HAL_UART_RxCpltCallback+0x148>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4847      	ldr	r0, [pc, #284]	@ (8001b8c <HAL_UART_RxCpltCallback+0x14c>)
 8001a6e:	f7ff ffa9 	bl	80019c4 <nextion_Send>
		 nextion_Send("n4", 666);
 8001a72:	f240 219a 	movw	r1, #666	@ 0x29a
 8001a76:	4846      	ldr	r0, [pc, #280]	@ (8001b90 <HAL_UART_RxCpltCallback+0x150>)
 8001a78:	f7ff ffa4 	bl	80019c4 <nextion_Send>
		 nextion_Send("n5", 777);
 8001a7c:	f240 3109 	movw	r1, #777	@ 0x309
 8001a80:	4844      	ldr	r0, [pc, #272]	@ (8001b94 <HAL_UART_RxCpltCallback+0x154>)
 8001a82:	f7ff ff9f 	bl	80019c4 <nextion_Send>
 8001a86:	e0d3      	b.n	8001c30 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x32)
 8001a88:	4b3c      	ldr	r3, [pc, #240]	@ (8001b7c <HAL_UART_RxCpltCallback+0x13c>)
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	2b32      	cmp	r3, #50	@ 0x32
 8001a8e:	d116      	bne.n	8001abe <HAL_UART_RxCpltCallback+0x7e>
		 {
		 nextion_Send("n6", iVout);
 8001a90:	4b41      	ldr	r3, [pc, #260]	@ (8001b98 <HAL_UART_RxCpltCallback+0x158>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4841      	ldr	r0, [pc, #260]	@ (8001b9c <HAL_UART_RxCpltCallback+0x15c>)
 8001a98:	f7ff ff94 	bl	80019c4 <nextion_Send>
		 nextion_Send("n7", iIout);
 8001a9c:	4b40      	ldr	r3, [pc, #256]	@ (8001ba0 <HAL_UART_RxCpltCallback+0x160>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4840      	ldr	r0, [pc, #256]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x164>)
 8001aa4:	f7ff ff8e 	bl	80019c4 <nextion_Send>
		 nextion_Send("n8", 666);
 8001aa8:	f240 219a 	movw	r1, #666	@ 0x29a
 8001aac:	483e      	ldr	r0, [pc, #248]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x168>)
 8001aae:	f7ff ff89 	bl	80019c4 <nextion_Send>
		 nextion_Send("n9", 777);
 8001ab2:	f240 3109 	movw	r1, #777	@ 0x309
 8001ab6:	483d      	ldr	r0, [pc, #244]	@ (8001bac <HAL_UART_RxCpltCallback+0x16c>)
 8001ab8:	f7ff ff84 	bl	80019c4 <nextion_Send>
 8001abc:	e0b8      	b.n	8001c30 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x33)
 8001abe:	4b2f      	ldr	r3, [pc, #188]	@ (8001b7c <HAL_UART_RxCpltCallback+0x13c>)
 8001ac0:	785b      	ldrb	r3, [r3, #1]
 8001ac2:	2b33      	cmp	r3, #51	@ 0x33
 8001ac4:	d124      	bne.n	8001b10 <HAL_UART_RxCpltCallback+0xd0>
		 {
		 nextion_Send("n10", iV1L);
 8001ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb0 <HAL_UART_RxCpltCallback+0x170>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4619      	mov	r1, r3
 8001acc:	4839      	ldr	r0, [pc, #228]	@ (8001bb4 <HAL_UART_RxCpltCallback+0x174>)
 8001ace:	f7ff ff79 	bl	80019c4 <nextion_Send>
		 nextion_Send("n11", iI1L);
 8001ad2:	4b39      	ldr	r3, [pc, #228]	@ (8001bb8 <HAL_UART_RxCpltCallback+0x178>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4838      	ldr	r0, [pc, #224]	@ (8001bbc <HAL_UART_RxCpltCallback+0x17c>)
 8001ada:	f7ff ff73 	bl	80019c4 <nextion_Send>
		 nextion_Send("n12", iV2L);
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <HAL_UART_RxCpltCallback+0x180>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4837      	ldr	r0, [pc, #220]	@ (8001bc4 <HAL_UART_RxCpltCallback+0x184>)
 8001ae6:	f7ff ff6d 	bl	80019c4 <nextion_Send>
		 nextion_Send("n13", iI2L);
 8001aea:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <HAL_UART_RxCpltCallback+0x188>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4836      	ldr	r0, [pc, #216]	@ (8001bcc <HAL_UART_RxCpltCallback+0x18c>)
 8001af2:	f7ff ff67 	bl	80019c4 <nextion_Send>
		 nextion_Send("n14", iV3L);
 8001af6:	4b36      	ldr	r3, [pc, #216]	@ (8001bd0 <HAL_UART_RxCpltCallback+0x190>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4835      	ldr	r0, [pc, #212]	@ (8001bd4 <HAL_UART_RxCpltCallback+0x194>)
 8001afe:	f7ff ff61 	bl	80019c4 <nextion_Send>
		 nextion_Send("n15", iI3L);
 8001b02:	4b35      	ldr	r3, [pc, #212]	@ (8001bd8 <HAL_UART_RxCpltCallback+0x198>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4834      	ldr	r0, [pc, #208]	@ (8001bdc <HAL_UART_RxCpltCallback+0x19c>)
 8001b0a:	f7ff ff5b 	bl	80019c4 <nextion_Send>
 8001b0e:	e08f      	b.n	8001c30 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x34)
 8001b10:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <HAL_UART_RxCpltCallback+0x13c>)
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	2b34      	cmp	r3, #52	@ 0x34
 8001b16:	d124      	bne.n	8001b62 <HAL_UART_RxCpltCallback+0x122>
		 {
		 nextion_Send("n16", iV12L);
 8001b18:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4831      	ldr	r0, [pc, #196]	@ (8001be4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001b20:	f7ff ff50 	bl	80019c4 <nextion_Send>
		 nextion_Send("n17", iI12L);
 8001b24:	4b30      	ldr	r3, [pc, #192]	@ (8001be8 <HAL_UART_RxCpltCallback+0x1a8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4830      	ldr	r0, [pc, #192]	@ (8001bec <HAL_UART_RxCpltCallback+0x1ac>)
 8001b2c:	f7ff ff4a 	bl	80019c4 <nextion_Send>
		 nextion_Send("n18", iV23L);
 8001b30:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <HAL_UART_RxCpltCallback+0x1b0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4619      	mov	r1, r3
 8001b36:	482f      	ldr	r0, [pc, #188]	@ (8001bf4 <HAL_UART_RxCpltCallback+0x1b4>)
 8001b38:	f7ff ff44 	bl	80019c4 <nextion_Send>
		 nextion_Send("n19", iI23L);
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x1b8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	482e      	ldr	r0, [pc, #184]	@ (8001bfc <HAL_UART_RxCpltCallback+0x1bc>)
 8001b44:	f7ff ff3e 	bl	80019c4 <nextion_Send>
		 nextion_Send("n20", iV13L);
 8001b48:	4b2d      	ldr	r3, [pc, #180]	@ (8001c00 <HAL_UART_RxCpltCallback+0x1c0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	482d      	ldr	r0, [pc, #180]	@ (8001c04 <HAL_UART_RxCpltCallback+0x1c4>)
 8001b50:	f7ff ff38 	bl	80019c4 <nextion_Send>
		 nextion_Send("n21", iI13L);
 8001b54:	4b2c      	ldr	r3, [pc, #176]	@ (8001c08 <HAL_UART_RxCpltCallback+0x1c8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	482c      	ldr	r0, [pc, #176]	@ (8001c0c <HAL_UART_RxCpltCallback+0x1cc>)
 8001b5c:	f7ff ff32 	bl	80019c4 <nextion_Send>
 8001b60:	e066      	b.n	8001c30 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x35)
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_UART_RxCpltCallback+0x13c>)
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	2b35      	cmp	r3, #53	@ 0x35
 8001b68:	d156      	bne.n	8001c18 <HAL_UART_RxCpltCallback+0x1d8>
		 {
		 nextion_Send("n22", itemp);
 8001b6a:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <HAL_UART_RxCpltCallback+0x1d0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4828      	ldr	r0, [pc, #160]	@ (8001c14 <HAL_UART_RxCpltCallback+0x1d4>)
 8001b72:	f7ff ff27 	bl	80019c4 <nextion_Send>
 8001b76:	e05b      	b.n	8001c30 <HAL_UART_RxCpltCallback+0x1f0>
 8001b78:	20002500 	.word	0x20002500
 8001b7c:	20002804 	.word	0x20002804
 8001b80:	200027dc 	.word	0x200027dc
 8001b84:	08011cdc 	.word	0x08011cdc
 8001b88:	200027e0 	.word	0x200027e0
 8001b8c:	08011ce0 	.word	0x08011ce0
 8001b90:	08011ce4 	.word	0x08011ce4
 8001b94:	08011ce8 	.word	0x08011ce8
 8001b98:	200027d0 	.word	0x200027d0
 8001b9c:	08011cec 	.word	0x08011cec
 8001ba0:	200027d8 	.word	0x200027d8
 8001ba4:	08011cf0 	.word	0x08011cf0
 8001ba8:	08011cf4 	.word	0x08011cf4
 8001bac:	08011cf8 	.word	0x08011cf8
 8001bb0:	200027b8 	.word	0x200027b8
 8001bb4:	08011cfc 	.word	0x08011cfc
 8001bb8:	200027c4 	.word	0x200027c4
 8001bbc:	08011d00 	.word	0x08011d00
 8001bc0:	200027bc 	.word	0x200027bc
 8001bc4:	08011d04 	.word	0x08011d04
 8001bc8:	200027c8 	.word	0x200027c8
 8001bcc:	08011d08 	.word	0x08011d08
 8001bd0:	200027c0 	.word	0x200027c0
 8001bd4:	08011d0c 	.word	0x08011d0c
 8001bd8:	200027cc 	.word	0x200027cc
 8001bdc:	08011d10 	.word	0x08011d10
 8001be0:	200027e4 	.word	0x200027e4
 8001be4:	08011d14 	.word	0x08011d14
 8001be8:	200027f0 	.word	0x200027f0
 8001bec:	08011d18 	.word	0x08011d18
 8001bf0:	200027e8 	.word	0x200027e8
 8001bf4:	08011d1c 	.word	0x08011d1c
 8001bf8:	200027f4 	.word	0x200027f4
 8001bfc:	08011d20 	.word	0x08011d20
 8001c00:	200027ec 	.word	0x200027ec
 8001c04:	08011d24 	.word	0x08011d24
 8001c08:	200027f8 	.word	0x200027f8
 8001c0c:	08011d28 	.word	0x08011d28
 8001c10:	200027d4 	.word	0x200027d4
 8001c14:	08011d2c 	.word	0x08011d2c
		 }

		 else
		 {
		 nextion_Send("n0", send_V);
 8001c18:	4b5b      	ldr	r3, [pc, #364]	@ (8001d88 <HAL_UART_RxCpltCallback+0x348>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	485b      	ldr	r0, [pc, #364]	@ (8001d8c <HAL_UART_RxCpltCallback+0x34c>)
 8001c20:	f7ff fed0 	bl	80019c4 <nextion_Send>
		 nextion_Send("n1", send_I);
 8001c24:	4b5a      	ldr	r3, [pc, #360]	@ (8001d90 <HAL_UART_RxCpltCallback+0x350>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	485a      	ldr	r0, [pc, #360]	@ (8001d94 <HAL_UART_RxCpltCallback+0x354>)
 8001c2c:	f7ff feca 	bl	80019c4 <nextion_Send>
		 }



		if(RX_Data[2] == 0x03)
 8001c30:	4b59      	ldr	r3, [pc, #356]	@ (8001d98 <HAL_UART_RxCpltCallback+0x358>)
 8001c32:	789b      	ldrb	r3, [r3, #2]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d126      	bne.n	8001c86 <HAL_UART_RxCpltCallback+0x246>
		{
			dac_V -= 0.5;
 8001c38:	4b58      	ldr	r3, [pc, #352]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc61 	bl	8000504 <__aeabi_ui2d>
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b56      	ldr	r3, [pc, #344]	@ (8001da0 <HAL_UART_RxCpltCallback+0x360>)
 8001c48:	f7fe fb1e 	bl	8000288 <__aeabi_dsub>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ffa8 	bl	8000ba8 <__aeabi_d2uiz>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a50      	ldr	r2, [pc, #320]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001c5c:	6013      	str	r3, [r2, #0]
			if(dac_V == 20) dac_V = 20;
 8001c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b14      	cmp	r3, #20
 8001c64:	d102      	bne.n	8001c6c <HAL_UART_RxCpltCallback+0x22c>
 8001c66:	4b4d      	ldr	r3, [pc, #308]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001c68:	2214      	movs	r2, #20
 8001c6a:	601a      	str	r2, [r3, #0]
			send_V = map(dac_V,0,20,0,1275);
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	f240 43fb 	movw	r3, #1275	@ 0x4fb
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2214      	movs	r2, #20
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f7ff fecc 	bl	8001a18 <map>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a41      	ldr	r2, [pc, #260]	@ (8001d88 <HAL_UART_RxCpltCallback+0x348>)
 8001c84:	6013      	str	r3, [r2, #0]
		}

		if(RX_Data[2] == 0x04)
 8001c86:	4b44      	ldr	r3, [pc, #272]	@ (8001d98 <HAL_UART_RxCpltCallback+0x358>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d126      	bne.n	8001cdc <HAL_UART_RxCpltCallback+0x29c>
		{
			dac_V += 0.5;
 8001c8e:	4b43      	ldr	r3, [pc, #268]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc36 	bl	8000504 <__aeabi_ui2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b40      	ldr	r3, [pc, #256]	@ (8001da0 <HAL_UART_RxCpltCallback+0x360>)
 8001c9e:	f7fe faf5 	bl	800028c <__adddf3>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7fe ff7d 	bl	8000ba8 <__aeabi_d2uiz>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001cb2:	6013      	str	r3, [r2, #0]
			if(dac_V == 0) dac_V = 0;
 8001cb4:	4b39      	ldr	r3, [pc, #228]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <HAL_UART_RxCpltCallback+0x282>
 8001cbc:	4b37      	ldr	r3, [pc, #220]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
			send_V = map(dac_V,0,20,0,1275);
 8001cc2:	4b36      	ldr	r3, [pc, #216]	@ (8001d9c <HAL_UART_RxCpltCallback+0x35c>)
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	f240 43fb 	movw	r3, #1275	@ 0x4fb
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2214      	movs	r2, #20
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	f7ff fea1 	bl	8001a18 <map>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8001d88 <HAL_UART_RxCpltCallback+0x348>)
 8001cda:	6013      	str	r3, [r2, #0]
		}

		if(RX_Data[2] == 0x05)
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <HAL_UART_RxCpltCallback+0x358>)
 8001cde:	789b      	ldrb	r3, [r3, #2]
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d11c      	bne.n	8001d1e <HAL_UART_RxCpltCallback+0x2de>
		{
			dac_I -= 50;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3b32      	subs	r3, #50	@ 0x32
 8001cea:	4a2e      	ldr	r2, [pc, #184]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001cec:	6013      	str	r3, [r2, #0]
			if(dac_I == 3000) dac_I = 3000;
 8001cee:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d103      	bne.n	8001d02 <HAL_UART_RxCpltCallback+0x2c2>
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001cfc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d00:	601a      	str	r2, [r3, #0]
			send_I = map(dac_I,0,3000,0,1275);
 8001d02:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	f240 43fb 	movw	r3, #1275	@ 0x4fb
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d12:	2100      	movs	r1, #0
 8001d14:	f7ff fe80 	bl	8001a18 <map>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <HAL_UART_RxCpltCallback+0x350>)
 8001d1c:	6013      	str	r3, [r2, #0]
		}
		if(RX_Data[2] == 0x06)
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <HAL_UART_RxCpltCallback+0x358>)
 8001d20:	789b      	ldrb	r3, [r3, #2]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d119      	bne.n	8001d5a <HAL_UART_RxCpltCallback+0x31a>
		{
			dac_I += 50;
 8001d26:	4b1f      	ldr	r3, [pc, #124]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3332      	adds	r3, #50	@ 0x32
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001d2e:	6013      	str	r3, [r2, #0]
			if(dac_I == 0) dac_I = 0;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <HAL_UART_RxCpltCallback+0x2fe>
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
			send_I = map(dac_I,0,3000,0,1275);
 8001d3e:	4b19      	ldr	r3, [pc, #100]	@ (8001da4 <HAL_UART_RxCpltCallback+0x364>)
 8001d40:	6818      	ldr	r0, [r3, #0]
 8001d42:	f240 43fb 	movw	r3, #1275	@ 0x4fb
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d4e:	2100      	movs	r1, #0
 8001d50:	f7ff fe62 	bl	8001a18 <map>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a0e      	ldr	r2, [pc, #56]	@ (8001d90 <HAL_UART_RxCpltCallback+0x350>)
 8001d58:	6013      	str	r3, [r2, #0]
		}


		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,send_V);
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_UART_RxCpltCallback+0x348>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	4811      	ldr	r0, [pc, #68]	@ (8001da8 <HAL_UART_RxCpltCallback+0x368>)
 8001d64:	f002 fe09 	bl	800497a <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,send_I);
 8001d68:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_UART_RxCpltCallback+0x350>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2110      	movs	r1, #16
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <HAL_UART_RxCpltCallback+0x368>)
 8001d72:	f002 fe02 	bl	800497a <HAL_DAC_SetValue>

	   HAL_UART_Receive_IT(&huart2, RX_Data, 4);
 8001d76:	2204      	movs	r2, #4
 8001d78:	4907      	ldr	r1, [pc, #28]	@ (8001d98 <HAL_UART_RxCpltCallback+0x358>)
 8001d7a:	480c      	ldr	r0, [pc, #48]	@ (8001dac <HAL_UART_RxCpltCallback+0x36c>)
 8001d7c:	f006 fc51 	bl	8008622 <HAL_UART_Receive_IT>
	 }



}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20002810 	.word	0x20002810
 8001d8c:	08011d30 	.word	0x08011d30
 8001d90:	20002814 	.word	0x20002814
 8001d94:	08011d34 	.word	0x08011d34
 8001d98:	20002804 	.word	0x20002804
 8001d9c:	20002808 	.word	0x20002808
 8001da0:	3fe00000 	.word	0x3fe00000
 8001da4:	2000280c 	.word	0x2000280c
 8001da8:	20002390 	.word	0x20002390
 8001dac:	20002500 	.word	0x20002500

08001db0 <HAL_ADC_ConvCpltCallback>:


//Timer1 50us'de bir kesmeye girdi ve ADC1 bu kısımda örnek almaya başladı.

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af02      	add	r7, sp, #8
 8001db6:	6078      	str	r0, [r7, #4]


while(count<1600)
 8001db8:	f000 bcd4 	b.w	8002764 <HAL_ADC_ConvCpltCallback+0x9b4>
	{

	switch(k)
 8001dbc:	4b9d      	ldr	r3, [pc, #628]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b0b      	cmp	r3, #11
 8001dc2:	f200 8126 	bhi.w	8002012 <HAL_ADC_ConvCpltCallback+0x262>
 8001dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dcc <HAL_ADC_ConvCpltCallback+0x1c>)
 8001dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dcc:	08001dfd 	.word	0x08001dfd
 8001dd0:	08001e29 	.word	0x08001e29
 8001dd4:	08001e55 	.word	0x08001e55
 8001dd8:	08001e81 	.word	0x08001e81
 8001ddc:	08001ead 	.word	0x08001ead
 8001de0:	08001ed9 	.word	0x08001ed9
 8001de4:	08001f05 	.word	0x08001f05
 8001de8:	08001f31 	.word	0x08001f31
 8001dec:	08001f5d 	.word	0x08001f5d
 8001df0:	08001f89 	.word	0x08001f89
 8001df4:	08001fb5 	.word	0x08001fb5
 8001df8:	08001fe1 	.word	0x08001fe1
		{

			case 0: //REF
				adc1_Value[k] += adc_Buffer[k];
 8001dfc:	4b8d      	ldr	r3, [pc, #564]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a8d      	ldr	r2, [pc, #564]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e02:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e06:	4b8b      	ldr	r3, [pc, #556]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a8c      	ldr	r2, [pc, #560]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e10:	4b88      	ldr	r3, [pc, #544]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	440a      	add	r2, r1
 8001e16:	4988      	ldr	r1, [pc, #544]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e1c:	4b85      	ldr	r3, [pc, #532]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a84      	ldr	r2, [pc, #528]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e24:	6013      	str	r3, [r2, #0]
				break;
 8001e26:	e0f4      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>


			case 1: //VL1
				adc1_Value[k] += adc_Buffer[k];
 8001e28:	4b82      	ldr	r3, [pc, #520]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a82      	ldr	r2, [pc, #520]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e32:	4b80      	ldr	r3, [pc, #512]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a81      	ldr	r2, [pc, #516]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e3c:	4b7d      	ldr	r3, [pc, #500]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	440a      	add	r2, r1
 8001e42:	497d      	ldr	r1, [pc, #500]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e48:	4b7a      	ldr	r3, [pc, #488]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a79      	ldr	r2, [pc, #484]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e50:	6013      	str	r3, [r2, #0]
				break;
 8001e52:	e0de      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 2: //VL2
				adc1_Value[k] += adc_Buffer[k];
 8001e54:	4b77      	ldr	r3, [pc, #476]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a77      	ldr	r2, [pc, #476]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e5e:	4b75      	ldr	r3, [pc, #468]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a76      	ldr	r2, [pc, #472]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e68:	4b72      	ldr	r3, [pc, #456]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	440a      	add	r2, r1
 8001e6e:	4972      	ldr	r1, [pc, #456]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e74:	4b6f      	ldr	r3, [pc, #444]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e7c:	6013      	str	r3, [r2, #0]
				break;
 8001e7e:	e0c8      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 3: //VL3
				adc1_Value[k] += adc_Buffer[k];
 8001e80:	4b6c      	ldr	r3, [pc, #432]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a6c      	ldr	r2, [pc, #432]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a6b      	ldr	r2, [pc, #428]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001e90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e94:	4b67      	ldr	r3, [pc, #412]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	440a      	add	r2, r1
 8001e9a:	4967      	ldr	r1, [pc, #412]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001ea0:	4b64      	ldr	r3, [pc, #400]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	4a63      	ldr	r2, [pc, #396]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001ea8:	6013      	str	r3, [r2, #0]
				break;
 8001eaa:	e0b2      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 4: //IL1
				adc1_Value[k] += adc_Buffer[k];
 8001eac:	4b61      	ldr	r3, [pc, #388]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a61      	ldr	r2, [pc, #388]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001eb2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a60      	ldr	r2, [pc, #384]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001ebc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ec0:	4b5c      	ldr	r3, [pc, #368]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	440a      	add	r2, r1
 8001ec6:	495c      	ldr	r1, [pc, #368]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001ecc:	4b59      	ldr	r3, [pc, #356]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a58      	ldr	r2, [pc, #352]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001ed4:	6013      	str	r3, [r2, #0]
				break;
 8001ed6:	e09c      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 5: //IL2
				adc1_Value[k] += adc_Buffer[k];
 8001ed8:	4b56      	ldr	r3, [pc, #344]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a56      	ldr	r2, [pc, #344]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001ede:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ee2:	4b54      	ldr	r3, [pc, #336]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a55      	ldr	r2, [pc, #340]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eec:	4b51      	ldr	r3, [pc, #324]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	440a      	add	r2, r1
 8001ef2:	4951      	ldr	r1, [pc, #324]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a4d      	ldr	r2, [pc, #308]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f00:	6013      	str	r3, [r2, #0]
				break;
 8001f02:	e086      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 6: //IL3
				adc1_Value[k] += adc_Buffer[k];
 8001f04:	4b4b      	ldr	r3, [pc, #300]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4b      	ldr	r2, [pc, #300]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f0e:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a4a      	ldr	r2, [pc, #296]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001f14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f18:	4b46      	ldr	r3, [pc, #280]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	440a      	add	r2, r1
 8001f1e:	4946      	ldr	r1, [pc, #280]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001f24:	4b43      	ldr	r3, [pc, #268]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	4a42      	ldr	r2, [pc, #264]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f2c:	6013      	str	r3, [r2, #0]
				break;
 8001f2e:	e070      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 7: //BARA+
				adc1_Value[k] += adc_Buffer[k];
 8001f30:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a40      	ldr	r2, [pc, #256]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f36:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a3f      	ldr	r2, [pc, #252]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001f40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f44:	4b3b      	ldr	r3, [pc, #236]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	440a      	add	r2, r1
 8001f4a:	493b      	ldr	r1, [pc, #236]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001f50:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	3301      	adds	r3, #1
 8001f56:	4a37      	ldr	r2, [pc, #220]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f58:	6013      	str	r3, [r2, #0]
				break;
 8001f5a:	e05a      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 8: //BARA-
				adc1_Value[k] += adc_Buffer[k];
 8001f5c:	4b35      	ldr	r3, [pc, #212]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a35      	ldr	r2, [pc, #212]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f66:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a34      	ldr	r2, [pc, #208]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001f6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f70:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	440a      	add	r2, r1
 8001f76:	4930      	ldr	r1, [pc, #192]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a2c      	ldr	r2, [pc, #176]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f84:	6013      	str	r3, [r2, #0]
				break;
 8001f86:	e044      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 9: //FB VOLTAGE
				adc1_Value[k] += adc_Buffer[k];
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001f8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f92:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a29      	ldr	r2, [pc, #164]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001f98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f9c:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	440a      	add	r2, r1
 8001fa2:	4925      	ldr	r1, [pc, #148]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001fa8:	4b22      	ldr	r3, [pc, #136]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001fb0:	6013      	str	r3, [r2, #0]
				break;
 8001fb2:	e02e      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 10: //T_SAMPLE
				adc1_Value[k] += adc_Buffer[k];
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001fba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001fc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	440a      	add	r2, r1
 8001fce:	491a      	ldr	r1, [pc, #104]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a16      	ldr	r2, [pc, #88]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001fdc:	6013      	str	r3, [r2, #0]
				break;
 8001fde:	e018      	b.n	8002012 <HAL_ADC_ConvCpltCallback+0x262>

			case 11: //AKIM
				adc1_Value[k] += adc_Buffer[k];
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a14      	ldr	r2, [pc, #80]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001fe6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a13      	ldr	r2, [pc, #76]	@ (800203c <HAL_ADC_ConvCpltCallback+0x28c>)
 8001ff0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	440a      	add	r2, r1
 8001ffa:	490f      	ldr	r1, [pc, #60]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				count++;
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <HAL_ADC_ConvCpltCallback+0x290>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	4a0e      	ldr	r2, [pc, #56]	@ (8002040 <HAL_ADC_ConvCpltCallback+0x290>)
 8002008:	6013      	str	r3, [r2, #0]
				k=0;
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_ADC_ConvCpltCallback+0x284>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
				break;
 8002010:	bf00      	nop
		}




		if(count==1600)
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_ADC_ConvCpltCallback+0x290>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800201a:	f040 83a3 	bne.w	8002764 <HAL_ADC_ConvCpltCallback+0x9b4>
		{

				adc1_Mean[0] = adc1_Value[0] / 1600;
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_ADC_ConvCpltCallback+0x288>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a08      	ldr	r2, [pc, #32]	@ (8002044 <HAL_ADC_ConvCpltCallback+0x294>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	0a5b      	lsrs	r3, r3, #9
 800202a:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <HAL_ADC_ConvCpltCallback+0x298>)
 800202c:	6013      	str	r3, [r2, #0]

			for(uint8_t t=1;t<7;t++)
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e05f      	b.n	80020f4 <HAL_ADC_ConvCpltCallback+0x344>
 8002034:	20002750 	.word	0x20002750
 8002038:	20002690 	.word	0x20002690
 800203c:	20002660 	.word	0x20002660
 8002040:	20002754 	.word	0x20002754
 8002044:	51eb851f 	.word	0x51eb851f
 8002048:	20002720 	.word	0x20002720
				{
				//RMS Değer Hesabı
				adc1_Mean[t] = adc1_Value[t] / 1600; //Alınan değerler toplamı toplam sayıya bölündü ve ort değer elde edildi.
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	4a7e      	ldr	r2, [pc, #504]	@ (8002248 <HAL_ADC_ConvCpltCallback+0x498>)
 8002050:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002054:	7bfb      	ldrb	r3, [r7, #15]
 8002056:	497d      	ldr	r1, [pc, #500]	@ (800224c <HAL_ADC_ConvCpltCallback+0x49c>)
 8002058:	fba1 1202 	umull	r1, r2, r1, r2
 800205c:	0a52      	lsrs	r2, r2, #9
 800205e:	497c      	ldr	r1, [pc, #496]	@ (8002250 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8002060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				adc1_Square[t] = (adc1_Mean[t]-adc1_Mean[0]) * (adc1_Mean[t]-adc1_Mean[0]); //Ortalama değerin karesi alındı.
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	4a7a      	ldr	r2, [pc, #488]	@ (8002250 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8002068:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800206c:	4b78      	ldr	r3, [pc, #480]	@ (8002250 <HAL_ADC_ConvCpltCallback+0x4a0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	1ad2      	subs	r2, r2, r3
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	4976      	ldr	r1, [pc, #472]	@ (8002250 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8002076:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800207a:	4b75      	ldr	r3, [pc, #468]	@ (8002250 <HAL_ADC_ConvCpltCallback+0x4a0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	1ac9      	subs	r1, r1, r3
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	fb01 f202 	mul.w	r2, r1, r2
 8002086:	4973      	ldr	r1, [pc, #460]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x4a4>)
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				adc1_Square_Root[t] = 331 * sqrt(adc1_Square[t]  * 0.707 / 868.8); //Karesi alınan değerlerin karekökü alındı. 331:Gerilim Bölücü  0.707:RMS Hesabı(sqrt(2)/2)  868.8:Kalibrasyon Çarpanı
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	4a71      	ldr	r2, [pc, #452]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x4a4>)
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa35 	bl	8000504 <__aeabi_ui2d>
 800209a:	a363      	add	r3, pc, #396	@ (adr r3, 8002228 <HAL_ADC_ConvCpltCallback+0x478>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe faaa 	bl	80005f8 <__aeabi_dmul>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	a360      	add	r3, pc, #384	@ (adr r3, 8002230 <HAL_ADC_ConvCpltCallback+0x480>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f7fe fbcb 	bl	800084c <__aeabi_ddiv>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	ec43 2b17 	vmov	d7, r2, r3
 80020be:	eeb0 0a47 	vmov.f32	s0, s14
 80020c2:	eef0 0a67 	vmov.f32	s1, s15
 80020c6:	f00f fcf1 	bl	8011aac <sqrt>
 80020ca:	ec51 0b10 	vmov	r0, r1, d0
 80020ce:	a35a      	add	r3, pc, #360	@ (adr r3, 8002238 <HAL_ADC_ConvCpltCallback+0x488>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fa90 	bl	80005f8 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	7bfc      	ldrb	r4, [r7, #15]
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe fd61 	bl	8000ba8 <__aeabi_d2uiz>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4a5b      	ldr	r2, [pc, #364]	@ (8002258 <HAL_ADC_ConvCpltCallback+0x4a8>)
 80020ea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t t=1;t<7;t++)
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	3301      	adds	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d9a8      	bls.n	800204c <HAL_ADC_ConvCpltCallback+0x29c>
				}


				V1L=adc1_Square_Root[1];  //V1L
 80020fa:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <HAL_ADC_ConvCpltCallback+0x4a8>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4a57      	ldr	r2, [pc, #348]	@ (800225c <HAL_ADC_ConvCpltCallback+0x4ac>)
 8002100:	6013      	str	r3, [r2, #0]
				V2L=adc1_Square_Root[2];  //V2L
 8002102:	4b55      	ldr	r3, [pc, #340]	@ (8002258 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4a56      	ldr	r2, [pc, #344]	@ (8002260 <HAL_ADC_ConvCpltCallback+0x4b0>)
 8002108:	6013      	str	r3, [r2, #0]
				V3L=adc1_Square_Root[3];  //V3L
 800210a:	4b53      	ldr	r3, [pc, #332]	@ (8002258 <HAL_ADC_ConvCpltCallback+0x4a8>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	4a55      	ldr	r2, [pc, #340]	@ (8002264 <HAL_ADC_ConvCpltCallback+0x4b4>)
 8002110:	6013      	str	r3, [r2, #0]

				I1L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[4])); // IL1  330,55:Direnç ve kalibrasyon çarpanı
 8002112:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x4a4>)
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe f9f4 	bl	8000504 <__aeabi_ui2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	ec43 2b10 	vmov	d0, r2, r3
 8002124:	f00f fcc2 	bl	8011aac <sqrt>
 8002128:	ec51 0b10 	vmov	r0, r1, d0
 800212c:	a344      	add	r3, pc, #272	@ (adr r3, 8002240 <HAL_ADC_ConvCpltCallback+0x490>)
 800212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002132:	f7fe fa61 	bl	80005f8 <__aeabi_dmul>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	4b49      	ldr	r3, [pc, #292]	@ (8002268 <HAL_ADC_ConvCpltCallback+0x4b8>)
 8002144:	f7fe fa58 	bl	80005f8 <__aeabi_dmul>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	f7fe fd2a 	bl	8000ba8 <__aeabi_d2uiz>
 8002154:	4603      	mov	r3, r0
 8002156:	4a45      	ldr	r2, [pc, #276]	@ (800226c <HAL_ADC_ConvCpltCallback+0x4bc>)
 8002158:	6013      	str	r3, [r2, #0]
				I2L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[5])); // IL2
 800215a:	4b3e      	ldr	r3, [pc, #248]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x4a4>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9d0 	bl	8000504 <__aeabi_ui2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	ec43 2b10 	vmov	d0, r2, r3
 800216c:	f00f fc9e 	bl	8011aac <sqrt>
 8002170:	ec51 0b10 	vmov	r0, r1, d0
 8002174:	a332      	add	r3, pc, #200	@ (adr r3, 8002240 <HAL_ADC_ConvCpltCallback+0x490>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe fa3d 	bl	80005f8 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b37      	ldr	r3, [pc, #220]	@ (8002268 <HAL_ADC_ConvCpltCallback+0x4b8>)
 800218c:	f7fe fa34 	bl	80005f8 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe fd06 	bl	8000ba8 <__aeabi_d2uiz>
 800219c:	4603      	mov	r3, r0
 800219e:	4a34      	ldr	r2, [pc, #208]	@ (8002270 <HAL_ADC_ConvCpltCallback+0x4c0>)
 80021a0:	6013      	str	r3, [r2, #0]
				I3L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[6])); //IL3
 80021a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002254 <HAL_ADC_ConvCpltCallback+0x4a4>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9ac 	bl	8000504 <__aeabi_ui2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	ec43 2b10 	vmov	d0, r2, r3
 80021b4:	f00f fc7a 	bl	8011aac <sqrt>
 80021b8:	ec51 0b10 	vmov	r0, r1, d0
 80021bc:	a320      	add	r3, pc, #128	@ (adr r3, 8002240 <HAL_ADC_ConvCpltCallback+0x490>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe fa19 	bl	80005f8 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <HAL_ADC_ConvCpltCallback+0x4b8>)
 80021d4:	f7fe fa10 	bl	80005f8 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fce2 	bl	8000ba8 <__aeabi_d2uiz>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a23      	ldr	r2, [pc, #140]	@ (8002274 <HAL_ADC_ConvCpltCallback+0x4c4>)
 80021e8:	6013      	str	r3, [r2, #0]

				Vin = (V1L+V2L+V3L) / 3;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <HAL_ADC_ConvCpltCallback+0x4ac>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <HAL_ADC_ConvCpltCallback+0x4b0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	441a      	add	r2, r3
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_ADC_ConvCpltCallback+0x4b4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002278 <HAL_ADC_ConvCpltCallback+0x4c8>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	4a1e      	ldr	r2, [pc, #120]	@ (800227c <HAL_ADC_ConvCpltCallback+0x4cc>)
 8002204:	6013      	str	r3, [r2, #0]
				Iin = (I1L+I2L+I3L) / 3;
 8002206:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_ADC_ConvCpltCallback+0x4bc>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_ADC_ConvCpltCallback+0x4c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	441a      	add	r2, r3
 8002210:	4b18      	ldr	r3, [pc, #96]	@ (8002274 <HAL_ADC_ConvCpltCallback+0x4c4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4413      	add	r3, r2
 8002216:	4a18      	ldr	r2, [pc, #96]	@ (8002278 <HAL_ADC_ConvCpltCallback+0x4c8>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	4a18      	ldr	r2, [pc, #96]	@ (8002280 <HAL_ADC_ConvCpltCallback+0x4d0>)
 8002220:	6013      	str	r3, [r2, #0]

				for(uint8_t j=7;j<12;j++) adc1_Mean[j] = adc1_Value[j] / 1600;
 8002222:	2307      	movs	r3, #7
 8002224:	73bb      	strb	r3, [r7, #14]
 8002226:	e03c      	b.n	80022a2 <HAL_ADC_ConvCpltCallback+0x4f2>
 8002228:	76c8b439 	.word	0x76c8b439
 800222c:	3fe69fbe 	.word	0x3fe69fbe
 8002230:	66666666 	.word	0x66666666
 8002234:	408b2666 	.word	0x408b2666
 8002238:	00000000 	.word	0x00000000
 800223c:	4074b000 	.word	0x4074b000
 8002240:	ad67a347 	.word	0xad67a347
 8002244:	3f73ce09 	.word	0x3f73ce09
 8002248:	20002690 	.word	0x20002690
 800224c:	51eb851f 	.word	0x51eb851f
 8002250:	20002720 	.word	0x20002720
 8002254:	200026c0 	.word	0x200026c0
 8002258:	200026f0 	.word	0x200026f0
 800225c:	20002768 	.word	0x20002768
 8002260:	2000276c 	.word	0x2000276c
 8002264:	20002770 	.word	0x20002770
 8002268:	40490000 	.word	0x40490000
 800226c:	2000275c 	.word	0x2000275c
 8002270:	20002760 	.word	0x20002760
 8002274:	20002764 	.word	0x20002764
 8002278:	aaaaaaab 	.word	0xaaaaaaab
 800227c:	200027a4 	.word	0x200027a4
 8002280:	200027a8 	.word	0x200027a8
 8002284:	7bbb      	ldrb	r3, [r7, #14]
 8002286:	4ac8      	ldr	r2, [pc, #800]	@ (80025a8 <HAL_ADC_ConvCpltCallback+0x7f8>)
 8002288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	49c7      	ldr	r1, [pc, #796]	@ (80025ac <HAL_ADC_ConvCpltCallback+0x7fc>)
 8002290:	fba1 1202 	umull	r1, r2, r1, r2
 8002294:	0a52      	lsrs	r2, r2, #9
 8002296:	49c6      	ldr	r1, [pc, #792]	@ (80025b0 <HAL_ADC_ConvCpltCallback+0x800>)
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800229c:	7bbb      	ldrb	r3, [r7, #14]
 800229e:	3301      	adds	r3, #1
 80022a0:	73bb      	strb	r3, [r7, #14]
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	2b0b      	cmp	r3, #11
 80022a6:	d9ed      	bls.n	8002284 <HAL_ADC_ConvCpltCallback+0x4d4>

				bara_Arti=adc1_Mean[7] * 3.3 / 4096; //bara+
 80022a8:	4bc1      	ldr	r3, [pc, #772]	@ (80025b0 <HAL_ADC_ConvCpltCallback+0x800>)
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f929 	bl	8000504 <__aeabi_ui2d>
 80022b2:	a3b1      	add	r3, pc, #708	@ (adr r3, 8002578 <HAL_ADC_ConvCpltCallback+0x7c8>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	f7fe f99e 	bl	80005f8 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4bba      	ldr	r3, [pc, #744]	@ (80025b4 <HAL_ADC_ConvCpltCallback+0x804>)
 80022ca:	f7fe fabf 	bl	800084c <__aeabi_ddiv>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fc67 	bl	8000ba8 <__aeabi_d2uiz>
 80022da:	4603      	mov	r3, r0
 80022dc:	4ab6      	ldr	r2, [pc, #728]	@ (80025b8 <HAL_ADC_ConvCpltCallback+0x808>)
 80022de:	6013      	str	r3, [r2, #0]
				bara_Eksi=adc1_Mean[8] * 3.3 / 4096; //bara-
 80022e0:	4bb3      	ldr	r3, [pc, #716]	@ (80025b0 <HAL_ADC_ConvCpltCallback+0x800>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f90d 	bl	8000504 <__aeabi_ui2d>
 80022ea:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002578 <HAL_ADC_ConvCpltCallback+0x7c8>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe f982 	bl	80005f8 <__aeabi_dmul>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	4bac      	ldr	r3, [pc, #688]	@ (80025b4 <HAL_ADC_ConvCpltCallback+0x804>)
 8002302:	f7fe faa3 	bl	800084c <__aeabi_ddiv>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f7fe fc4b 	bl	8000ba8 <__aeabi_d2uiz>
 8002312:	4603      	mov	r3, r0
 8002314:	4aa9      	ldr	r2, [pc, #676]	@ (80025bc <HAL_ADC_ConvCpltCallback+0x80c>)
 8002316:	6013      	str	r3, [r2, #0]
				Vout=adc1_Mean[9] * 3.3 / 4096 * 0.9615; // Vout
 8002318:	4ba5      	ldr	r3, [pc, #660]	@ (80025b0 <HAL_ADC_ConvCpltCallback+0x800>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f8f1 	bl	8000504 <__aeabi_ui2d>
 8002322:	a395      	add	r3, pc, #596	@ (adr r3, 8002578 <HAL_ADC_ConvCpltCallback+0x7c8>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe f966 	bl	80005f8 <__aeabi_dmul>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	4b9e      	ldr	r3, [pc, #632]	@ (80025b4 <HAL_ADC_ConvCpltCallback+0x804>)
 800233a:	f7fe fa87 	bl	800084c <__aeabi_ddiv>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	a38e      	add	r3, pc, #568	@ (adr r3, 8002580 <HAL_ADC_ConvCpltCallback+0x7d0>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe f954 	bl	80005f8 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fc26 	bl	8000ba8 <__aeabi_d2uiz>
 800235c:	4603      	mov	r3, r0
 800235e:	4a98      	ldr	r2, [pc, #608]	@ (80025c0 <HAL_ADC_ConvCpltCallback+0x810>)
 8002360:	6013      	str	r3, [r2, #0]
				t_sample=adc1_Mean[10] * 3.3 / 4096; //s_sample sıcaklık
 8002362:	4b93      	ldr	r3, [pc, #588]	@ (80025b0 <HAL_ADC_ConvCpltCallback+0x800>)
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f8cc 	bl	8000504 <__aeabi_ui2d>
 800236c:	a382      	add	r3, pc, #520	@ (adr r3, 8002578 <HAL_ADC_ConvCpltCallback+0x7c8>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fe f941 	bl	80005f8 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	4b8c      	ldr	r3, [pc, #560]	@ (80025b4 <HAL_ADC_ConvCpltCallback+0x804>)
 8002384:	f7fe fa62 	bl	800084c <__aeabi_ddiv>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fc0a 	bl	8000ba8 <__aeabi_d2uiz>
 8002394:	4603      	mov	r3, r0
 8002396:	4a8b      	ldr	r2, [pc, #556]	@ (80025c4 <HAL_ADC_ConvCpltCallback+0x814>)
 8002398:	6013      	str	r3, [r2, #0]
				akim=adc1_Mean[11] * 3.3 / 4096; //akım
 800239a:	4b85      	ldr	r3, [pc, #532]	@ (80025b0 <HAL_ADC_ConvCpltCallback+0x800>)
 800239c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f8b0 	bl	8000504 <__aeabi_ui2d>
 80023a4:	a374      	add	r3, pc, #464	@ (adr r3, 8002578 <HAL_ADC_ConvCpltCallback+0x7c8>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f925 	bl	80005f8 <__aeabi_dmul>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	4b7e      	ldr	r3, [pc, #504]	@ (80025b4 <HAL_ADC_ConvCpltCallback+0x804>)
 80023bc:	f7fe fa46 	bl	800084c <__aeabi_ddiv>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fbee 	bl	8000ba8 <__aeabi_d2uiz>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a7e      	ldr	r2, [pc, #504]	@ (80025c8 <HAL_ADC_ConvCpltCallback+0x818>)
 80023d0:	6013      	str	r3, [r2, #0]
				Iout=map(adc1_Mean[11],180,995,0,3680)-697; // Iout
 80023d2:	4b77      	ldr	r3, [pc, #476]	@ (80025b0 <HAL_ADC_ConvCpltCallback+0x800>)
 80023d4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80023d6:	f44f 6366 	mov.w	r3, #3680	@ 0xe60
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	f240 32e3 	movw	r2, #995	@ 0x3e3
 80023e2:	21b4      	movs	r1, #180	@ 0xb4
 80023e4:	f7ff fb18 	bl	8001a18 <map>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f2a3 23b9 	subw	r3, r3, #697	@ 0x2b9
 80023ee:	4a77      	ldr	r2, [pc, #476]	@ (80025cc <HAL_ADC_ConvCpltCallback+0x81c>)
 80023f0:	6013      	str	r3, [r2, #0]
				if(Iout<0) Iout=0;
				bara_Toplam=bara_Arti-bara_Eksi;
 80023f2:	4b71      	ldr	r3, [pc, #452]	@ (80025b8 <HAL_ADC_ConvCpltCallback+0x808>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b71      	ldr	r3, [pc, #452]	@ (80025bc <HAL_ADC_ConvCpltCallback+0x80c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	4a74      	ldr	r2, [pc, #464]	@ (80025d0 <HAL_ADC_ConvCpltCallback+0x820>)
 80023fe:	6013      	str	r3, [r2, #0]

				//Sıcaklık hesabı
				temp = 16.628 * t_sample * t_sample + 535.2484 * t_sample -16.129 ;
 8002400:	4b70      	ldr	r3, [pc, #448]	@ (80025c4 <HAL_ADC_ConvCpltCallback+0x814>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f87d 	bl	8000504 <__aeabi_ui2d>
 800240a:	a35f      	add	r3, pc, #380	@ (adr r3, 8002588 <HAL_ADC_ConvCpltCallback+0x7d8>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe f8f2 	bl	80005f8 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4614      	mov	r4, r2
 800241a:	461d      	mov	r5, r3
 800241c:	4b69      	ldr	r3, [pc, #420]	@ (80025c4 <HAL_ADC_ConvCpltCallback+0x814>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f86f 	bl	8000504 <__aeabi_ui2d>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	4620      	mov	r0, r4
 800242c:	4629      	mov	r1, r5
 800242e:	f7fe f8e3 	bl	80005f8 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4614      	mov	r4, r2
 8002438:	461d      	mov	r5, r3
 800243a:	4b62      	ldr	r3, [pc, #392]	@ (80025c4 <HAL_ADC_ConvCpltCallback+0x814>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f860 	bl	8000504 <__aeabi_ui2d>
 8002444:	a352      	add	r3, pc, #328	@ (adr r3, 8002590 <HAL_ADC_ConvCpltCallback+0x7e0>)
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f7fe f8d5 	bl	80005f8 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4620      	mov	r0, r4
 8002454:	4629      	mov	r1, r5
 8002456:	f7fd ff19 	bl	800028c <__adddf3>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	a34d      	add	r3, pc, #308	@ (adr r3, 8002598 <HAL_ADC_ConvCpltCallback+0x7e8>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fd ff0e 	bl	8000288 <__aeabi_dsub>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb98 	bl	8000ba8 <__aeabi_d2uiz>
 8002478:	4603      	mov	r3, r0
 800247a:	4a56      	ldr	r2, [pc, #344]	@ (80025d4 <HAL_ADC_ConvCpltCallback+0x824>)
 800247c:	6013      	str	r3, [r2, #0]


				//Faz-Faz arası gerilim ve akımlar
				V12L=sqrt(3)*(adc1_Square_Root[1] + adc1_Square_Root[2] / 2);
 800247e:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	085b      	lsrs	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe f83a 	bl	8000504 <__aeabi_ui2d>
 8002490:	a343      	add	r3, pc, #268	@ (adr r3, 80025a0 <HAL_ADC_ConvCpltCallback+0x7f0>)
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f7fe f8af 	bl	80005f8 <__aeabi_dmul>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe fb81 	bl	8000ba8 <__aeabi_d2uiz>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4a4c      	ldr	r2, [pc, #304]	@ (80025dc <HAL_ADC_ConvCpltCallback+0x82c>)
 80024aa:	6013      	str	r3, [r2, #0]
				V23L=sqrt(3)*(adc1_Square_Root[2] + adc1_Square_Root[3] / 2);
 80024ac:	4b4a      	ldr	r3, [pc, #296]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f823 	bl	8000504 <__aeabi_ui2d>
 80024be:	a338      	add	r3, pc, #224	@ (adr r3, 80025a0 <HAL_ADC_ConvCpltCallback+0x7f0>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe f898 	bl	80005f8 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fb6a 	bl	8000ba8 <__aeabi_d2uiz>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a42      	ldr	r2, [pc, #264]	@ (80025e0 <HAL_ADC_ConvCpltCallback+0x830>)
 80024d8:	6013      	str	r3, [r2, #0]
				V13L=sqrt(3)*(adc1_Square_Root[1] + adc1_Square_Root[3] / 2);
 80024da:	4b3f      	ldr	r3, [pc, #252]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4b3e      	ldr	r3, [pc, #248]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	085b      	lsrs	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f80c 	bl	8000504 <__aeabi_ui2d>
 80024ec:	a32c      	add	r3, pc, #176	@ (adr r3, 80025a0 <HAL_ADC_ConvCpltCallback+0x7f0>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fe f881 	bl	80005f8 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7fe fb53 	bl	8000ba8 <__aeabi_d2uiz>
 8002502:	4603      	mov	r3, r0
 8002504:	4a37      	ldr	r2, [pc, #220]	@ (80025e4 <HAL_ADC_ConvCpltCallback+0x834>)
 8002506:	6013      	str	r3, [r2, #0]
				I12L=sqrt(3)*(adc1_Square_Root[4] + adc1_Square_Root[5] / 2);
 8002508:	4b33      	ldr	r3, [pc, #204]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	4b32      	ldr	r3, [pc, #200]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	4618      	mov	r0, r3
 8002516:	f7fd fff5 	bl	8000504 <__aeabi_ui2d>
 800251a:	a321      	add	r3, pc, #132	@ (adr r3, 80025a0 <HAL_ADC_ConvCpltCallback+0x7f0>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fe f86a 	bl	80005f8 <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	f7fe fb3c 	bl	8000ba8 <__aeabi_d2uiz>
 8002530:	4603      	mov	r3, r0
 8002532:	4a2d      	ldr	r2, [pc, #180]	@ (80025e8 <HAL_ADC_ConvCpltCallback+0x838>)
 8002534:	6013      	str	r3, [r2, #0]
				I23L=sqrt(3)*(adc1_Square_Root[5] + adc1_Square_Root[6] / 2);
 8002536:	4b28      	ldr	r3, [pc, #160]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	085b      	lsrs	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffde 	bl	8000504 <__aeabi_ui2d>
 8002548:	a315      	add	r3, pc, #84	@ (adr r3, 80025a0 <HAL_ADC_ConvCpltCallback+0x7f0>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f7fe f853 	bl	80005f8 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4610      	mov	r0, r2
 8002558:	4619      	mov	r1, r3
 800255a:	f7fe fb25 	bl	8000ba8 <__aeabi_d2uiz>
 800255e:	4603      	mov	r3, r0
 8002560:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <HAL_ADC_ConvCpltCallback+0x83c>)
 8002562:	6013      	str	r3, [r2, #0]
				I13L=sqrt(3)*(adc1_Square_Root[4] + adc1_Square_Root[6] / 2);
 8002564:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_ADC_ConvCpltCallback+0x828>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ffc7 	bl	8000504 <__aeabi_ui2d>
 8002576:	e03b      	b.n	80025f0 <HAL_ADC_ConvCpltCallback+0x840>
 8002578:	66666666 	.word	0x66666666
 800257c:	400a6666 	.word	0x400a6666
 8002580:	a5e353f8 	.word	0xa5e353f8
 8002584:	3feec49b 	.word	0x3feec49b
 8002588:	9ba5e354 	.word	0x9ba5e354
 800258c:	4030a0c4 	.word	0x4030a0c4
 8002590:	b923a29c 	.word	0xb923a29c
 8002594:	4080b9fc 	.word	0x4080b9fc
 8002598:	24dd2f1b 	.word	0x24dd2f1b
 800259c:	40302106 	.word	0x40302106
 80025a0:	e8584caa 	.word	0xe8584caa
 80025a4:	3ffbb67a 	.word	0x3ffbb67a
 80025a8:	20002690 	.word	0x20002690
 80025ac:	51eb851f 	.word	0x51eb851f
 80025b0:	20002720 	.word	0x20002720
 80025b4:	40b00000 	.word	0x40b00000
 80025b8:	2000278c 	.word	0x2000278c
 80025bc:	20002790 	.word	0x20002790
 80025c0:	20002794 	.word	0x20002794
 80025c4:	20002798 	.word	0x20002798
 80025c8:	2000279c 	.word	0x2000279c
 80025cc:	200027a0 	.word	0x200027a0
 80025d0:	200027b0 	.word	0x200027b0
 80025d4:	200027ac 	.word	0x200027ac
 80025d8:	200026f0 	.word	0x200026f0
 80025dc:	20002774 	.word	0x20002774
 80025e0:	20002778 	.word	0x20002778
 80025e4:	2000277c 	.word	0x2000277c
 80025e8:	20002780 	.word	0x20002780
 80025ec:	20002784 	.word	0x20002784
 80025f0:	a398      	add	r3, pc, #608	@ (adr r3, 8002854 <HAL_ADC_ConvCpltCallback+0xaa4>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fd ffff 	bl	80005f8 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4610      	mov	r0, r2
 8002600:	4619      	mov	r1, r3
 8002602:	f7fe fad1 	bl	8000ba8 <__aeabi_d2uiz>
 8002606:	4603      	mov	r3, r0
 8002608:	4a5d      	ldr	r2, [pc, #372]	@ (8002780 <HAL_ADC_ConvCpltCallback+0x9d0>)
 800260a:	6013      	str	r3, [r2, #0]


				//Değerler int'e çevriliyor.
				iMean=(int)adc1_Mean[0];
 800260c:	4b5d      	ldr	r3, [pc, #372]	@ (8002784 <HAL_ADC_ConvCpltCallback+0x9d4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	4b5d      	ldr	r3, [pc, #372]	@ (8002788 <HAL_ADC_ConvCpltCallback+0x9d8>)
 8002614:	601a      	str	r2, [r3, #0]
				iV1L = (int)V1L;
 8002616:	4b5d      	ldr	r3, [pc, #372]	@ (800278c <HAL_ADC_ConvCpltCallback+0x9dc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	4b5c      	ldr	r3, [pc, #368]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x9e0>)
 800261e:	601a      	str	r2, [r3, #0]
				iV2L = (int)V2L;
 8002620:	4b5c      	ldr	r3, [pc, #368]	@ (8002794 <HAL_ADC_ConvCpltCallback+0x9e4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b5c      	ldr	r3, [pc, #368]	@ (8002798 <HAL_ADC_ConvCpltCallback+0x9e8>)
 8002628:	601a      	str	r2, [r3, #0]
				iV3L = (int)V3L;
 800262a:	4b5c      	ldr	r3, [pc, #368]	@ (800279c <HAL_ADC_ConvCpltCallback+0x9ec>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	4b5b      	ldr	r3, [pc, #364]	@ (80027a0 <HAL_ADC_ConvCpltCallback+0x9f0>)
 8002632:	601a      	str	r2, [r3, #0]
				iI1L = (int)I1L;
 8002634:	4b5b      	ldr	r3, [pc, #364]	@ (80027a4 <HAL_ADC_ConvCpltCallback+0x9f4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b5b      	ldr	r3, [pc, #364]	@ (80027a8 <HAL_ADC_ConvCpltCallback+0x9f8>)
 800263c:	601a      	str	r2, [r3, #0]
				iI2L = (int)I2L;
 800263e:	4b5b      	ldr	r3, [pc, #364]	@ (80027ac <HAL_ADC_ConvCpltCallback+0x9fc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	4b5a      	ldr	r3, [pc, #360]	@ (80027b0 <HAL_ADC_ConvCpltCallback+0xa00>)
 8002646:	601a      	str	r2, [r3, #0]
				iI3L = (int)I3L;
 8002648:	4b5a      	ldr	r3, [pc, #360]	@ (80027b4 <HAL_ADC_ConvCpltCallback+0xa04>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b5a      	ldr	r3, [pc, #360]	@ (80027b8 <HAL_ADC_ConvCpltCallback+0xa08>)
 8002650:	601a      	str	r2, [r3, #0]
				iVout = (int)Vout;
 8002652:	4b5a      	ldr	r3, [pc, #360]	@ (80027bc <HAL_ADC_ConvCpltCallback+0xa0c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	4b59      	ldr	r3, [pc, #356]	@ (80027c0 <HAL_ADC_ConvCpltCallback+0xa10>)
 800265a:	601a      	str	r2, [r3, #0]
				itemp = (int)temp;
 800265c:	4b59      	ldr	r3, [pc, #356]	@ (80027c4 <HAL_ADC_ConvCpltCallback+0xa14>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_ADC_ConvCpltCallback+0xa18>)
 8002664:	601a      	str	r2, [r3, #0]
				iIout = (int)Iout;
 8002666:	4b59      	ldr	r3, [pc, #356]	@ (80027cc <HAL_ADC_ConvCpltCallback+0xa1c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b58      	ldr	r3, [pc, #352]	@ (80027d0 <HAL_ADC_ConvCpltCallback+0xa20>)
 800266e:	601a      	str	r2, [r3, #0]
				iVin = (int)Vin;
 8002670:	4b58      	ldr	r3, [pc, #352]	@ (80027d4 <HAL_ADC_ConvCpltCallback+0xa24>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b58      	ldr	r3, [pc, #352]	@ (80027d8 <HAL_ADC_ConvCpltCallback+0xa28>)
 8002678:	601a      	str	r2, [r3, #0]
				iIin = (int)Iin;
 800267a:	4b58      	ldr	r3, [pc, #352]	@ (80027dc <HAL_ADC_ConvCpltCallback+0xa2c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	4b57      	ldr	r3, [pc, #348]	@ (80027e0 <HAL_ADC_ConvCpltCallback+0xa30>)
 8002682:	601a      	str	r2, [r3, #0]
				iV12L = (int)V12L;
 8002684:	4b57      	ldr	r3, [pc, #348]	@ (80027e4 <HAL_ADC_ConvCpltCallback+0xa34>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b57      	ldr	r3, [pc, #348]	@ (80027e8 <HAL_ADC_ConvCpltCallback+0xa38>)
 800268c:	601a      	str	r2, [r3, #0]
				iV23L = (int)V23L;
 800268e:	4b57      	ldr	r3, [pc, #348]	@ (80027ec <HAL_ADC_ConvCpltCallback+0xa3c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <HAL_ADC_ConvCpltCallback+0xa40>)
 8002696:	601a      	str	r2, [r3, #0]
				iV13L = (int)V13L;
 8002698:	4b56      	ldr	r3, [pc, #344]	@ (80027f4 <HAL_ADC_ConvCpltCallback+0xa44>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b56      	ldr	r3, [pc, #344]	@ (80027f8 <HAL_ADC_ConvCpltCallback+0xa48>)
 80026a0:	601a      	str	r2, [r3, #0]
				iI12L = (int)I12L;
 80026a2:	4b56      	ldr	r3, [pc, #344]	@ (80027fc <HAL_ADC_ConvCpltCallback+0xa4c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	4b55      	ldr	r3, [pc, #340]	@ (8002800 <HAL_ADC_ConvCpltCallback+0xa50>)
 80026aa:	601a      	str	r2, [r3, #0]
				iI23L = (int)I23L;
 80026ac:	4b55      	ldr	r3, [pc, #340]	@ (8002804 <HAL_ADC_ConvCpltCallback+0xa54>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b55      	ldr	r3, [pc, #340]	@ (8002808 <HAL_ADC_ConvCpltCallback+0xa58>)
 80026b4:	601a      	str	r2, [r3, #0]
				iI13L = (int)I13L;
 80026b6:	4b32      	ldr	r3, [pc, #200]	@ (8002780 <HAL_ADC_ConvCpltCallback+0x9d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b53      	ldr	r3, [pc, #332]	@ (800280c <HAL_ADC_ConvCpltCallback+0xa5c>)
 80026be:	601a      	str	r2, [r3, #0]
				ibara_Toplam = (int)bara_Toplam;
 80026c0:	4b53      	ldr	r3, [pc, #332]	@ (8002810 <HAL_ADC_ConvCpltCallback+0xa60>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <HAL_ADC_ConvCpltCallback+0xa64>)
 80026c8:	601a      	str	r2, [r3, #0]




				//int değerler char'a çevriliyor
				sprintf(adc1_Last0, "%d", sec); //geçen süre timer 8 aracılığıyla yazılıyor.
 80026ca:	4b53      	ldr	r3, [pc, #332]	@ (8002818 <HAL_ADC_ConvCpltCallback+0xa68>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4952      	ldr	r1, [pc, #328]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 80026d2:	4853      	ldr	r0, [pc, #332]	@ (8002820 <HAL_ADC_ConvCpltCallback+0xa70>)
 80026d4:	f00b fe62 	bl	800e39c <siprintf>
				sprintf(adc1_Last1, "%d", iV1L);
 80026d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002790 <HAL_ADC_ConvCpltCallback+0x9e0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	461a      	mov	r2, r3
 80026de:	494f      	ldr	r1, [pc, #316]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 80026e0:	4850      	ldr	r0, [pc, #320]	@ (8002824 <HAL_ADC_ConvCpltCallback+0xa74>)
 80026e2:	f00b fe5b 	bl	800e39c <siprintf>
				sprintf(adc1_Last2, "%d", iV2L);
 80026e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002798 <HAL_ADC_ConvCpltCallback+0x9e8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	494b      	ldr	r1, [pc, #300]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 80026ee:	484e      	ldr	r0, [pc, #312]	@ (8002828 <HAL_ADC_ConvCpltCallback+0xa78>)
 80026f0:	f00b fe54 	bl	800e39c <siprintf>
				sprintf(adc1_Last3, "%d", iV3L);
 80026f4:	4b2a      	ldr	r3, [pc, #168]	@ (80027a0 <HAL_ADC_ConvCpltCallback+0x9f0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4948      	ldr	r1, [pc, #288]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 80026fc:	484b      	ldr	r0, [pc, #300]	@ (800282c <HAL_ADC_ConvCpltCallback+0xa7c>)
 80026fe:	f00b fe4d 	bl	800e39c <siprintf>
				sprintf(adc1_Last4, "%d", iI1L);
 8002702:	4b29      	ldr	r3, [pc, #164]	@ (80027a8 <HAL_ADC_ConvCpltCallback+0x9f8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	4944      	ldr	r1, [pc, #272]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 800270a:	4849      	ldr	r0, [pc, #292]	@ (8002830 <HAL_ADC_ConvCpltCallback+0xa80>)
 800270c:	f00b fe46 	bl	800e39c <siprintf>
				sprintf(adc1_Last5, "%d", iI2L);
 8002710:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <HAL_ADC_ConvCpltCallback+0xa00>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	4941      	ldr	r1, [pc, #260]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 8002718:	4846      	ldr	r0, [pc, #280]	@ (8002834 <HAL_ADC_ConvCpltCallback+0xa84>)
 800271a:	f00b fe3f 	bl	800e39c <siprintf>
				sprintf(adc1_Last6, "%d", iI3L);
 800271e:	4b26      	ldr	r3, [pc, #152]	@ (80027b8 <HAL_ADC_ConvCpltCallback+0xa08>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	493d      	ldr	r1, [pc, #244]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 8002726:	4844      	ldr	r0, [pc, #272]	@ (8002838 <HAL_ADC_ConvCpltCallback+0xa88>)
 8002728:	f00b fe38 	bl	800e39c <siprintf>
				sprintf(adc1_Last7, "%d", ibara_Toplam);
 800272c:	4b39      	ldr	r3, [pc, #228]	@ (8002814 <HAL_ADC_ConvCpltCallback+0xa64>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	493a      	ldr	r1, [pc, #232]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 8002734:	4841      	ldr	r0, [pc, #260]	@ (800283c <HAL_ADC_ConvCpltCallback+0xa8c>)
 8002736:	f00b fe31 	bl	800e39c <siprintf>
				sprintf(adc1_Last8, "%d", iVout);
 800273a:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <HAL_ADC_ConvCpltCallback+0xa10>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	4936      	ldr	r1, [pc, #216]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 8002742:	483f      	ldr	r0, [pc, #252]	@ (8002840 <HAL_ADC_ConvCpltCallback+0xa90>)
 8002744:	f00b fe2a 	bl	800e39c <siprintf>
				sprintf(adc1_Last9, "%d", iIout);
 8002748:	4b21      	ldr	r3, [pc, #132]	@ (80027d0 <HAL_ADC_ConvCpltCallback+0xa20>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	4933      	ldr	r1, [pc, #204]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 8002750:	483c      	ldr	r0, [pc, #240]	@ (8002844 <HAL_ADC_ConvCpltCallback+0xa94>)
 8002752:	f00b fe23 	bl	800e39c <siprintf>
				sprintf(adc1_Last10, "%d", itemp);
 8002756:	4b1c      	ldr	r3, [pc, #112]	@ (80027c8 <HAL_ADC_ConvCpltCallback+0xa18>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	492f      	ldr	r1, [pc, #188]	@ (800281c <HAL_ADC_ConvCpltCallback+0xa6c>)
 800275e:	483a      	ldr	r0, [pc, #232]	@ (8002848 <HAL_ADC_ConvCpltCallback+0xa98>)
 8002760:	f00b fe1c 	bl	800e39c <siprintf>
while(count<1600)
 8002764:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_ADC_ConvCpltCallback+0xa9c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800276c:	f4ff ab26 	bcc.w	8001dbc <HAL_ADC_ConvCpltCallback+0xc>


		}

	}
	sd_Flag=1;
 8002770:	4b37      	ldr	r3, [pc, #220]	@ (8002850 <HAL_ADC_ConvCpltCallback+0xaa0>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bdb0      	pop	{r4, r5, r7, pc}
 800277e:	bf00      	nop
 8002780:	20002788 	.word	0x20002788
 8002784:	20002720 	.word	0x20002720
 8002788:	200027b4 	.word	0x200027b4
 800278c:	20002768 	.word	0x20002768
 8002790:	200027b8 	.word	0x200027b8
 8002794:	2000276c 	.word	0x2000276c
 8002798:	200027bc 	.word	0x200027bc
 800279c:	20002770 	.word	0x20002770
 80027a0:	200027c0 	.word	0x200027c0
 80027a4:	2000275c 	.word	0x2000275c
 80027a8:	200027c4 	.word	0x200027c4
 80027ac:	20002760 	.word	0x20002760
 80027b0:	200027c8 	.word	0x200027c8
 80027b4:	20002764 	.word	0x20002764
 80027b8:	200027cc 	.word	0x200027cc
 80027bc:	20002794 	.word	0x20002794
 80027c0:	200027d0 	.word	0x200027d0
 80027c4:	200027ac 	.word	0x200027ac
 80027c8:	200027d4 	.word	0x200027d4
 80027cc:	200027a0 	.word	0x200027a0
 80027d0:	200027d8 	.word	0x200027d8
 80027d4:	200027a4 	.word	0x200027a4
 80027d8:	200027dc 	.word	0x200027dc
 80027dc:	200027a8 	.word	0x200027a8
 80027e0:	200027e0 	.word	0x200027e0
 80027e4:	20002774 	.word	0x20002774
 80027e8:	200027e4 	.word	0x200027e4
 80027ec:	20002778 	.word	0x20002778
 80027f0:	200027e8 	.word	0x200027e8
 80027f4:	2000277c 	.word	0x2000277c
 80027f8:	200027ec 	.word	0x200027ec
 80027fc:	20002780 	.word	0x20002780
 8002800:	200027f0 	.word	0x200027f0
 8002804:	20002784 	.word	0x20002784
 8002808:	200027f4 	.word	0x200027f4
 800280c:	200027f8 	.word	0x200027f8
 8002810:	200027b0 	.word	0x200027b0
 8002814:	200027fc 	.word	0x200027fc
 8002818:	20002800 	.word	0x20002800
 800281c:	08011d38 	.word	0x08011d38
 8002820:	20002818 	.word	0x20002818
 8002824:	2000282c 	.word	0x2000282c
 8002828:	20002840 	.word	0x20002840
 800282c:	20002854 	.word	0x20002854
 8002830:	20002868 	.word	0x20002868
 8002834:	2000287c 	.word	0x2000287c
 8002838:	20002890 	.word	0x20002890
 800283c:	200028a4 	.word	0x200028a4
 8002840:	200028b8 	.word	0x200028b8
 8002844:	200028cc 	.word	0x200028cc
 8002848:	200028e0 	.word	0x200028e0
 800284c:	20002754 	.word	0x20002754
 8002850:	20002758 	.word	0x20002758
 8002854:	e8584caa 	.word	0xe8584caa
 8002858:	3ffbb67a 	.word	0x3ffbb67a
 800285c:	00000000 	.word	0x00000000

08002860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002866:	f001 fa53 	bl	8003d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800286a:	f000 f99d 	bl	8002ba8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Zaman ölçümü kod kısmı
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800286e:	4ba4      	ldr	r3, [pc, #656]	@ (8002b00 <main+0x2a0>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	4aa3      	ldr	r2, [pc, #652]	@ (8002b00 <main+0x2a0>)
 8002874:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002878:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 800287a:	4ba2      	ldr	r3, [pc, #648]	@ (8002b04 <main+0x2a4>)
 800287c:	2200      	movs	r2, #0
 800287e:	605a      	str	r2, [r3, #4]
  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
 8002880:	4ba0      	ldr	r3, [pc, #640]	@ (8002b04 <main+0x2a4>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002886:	f000 fcdb 	bl	8003240 <MX_GPIO_Init>
  MX_DMA_Init();
 800288a:	f000 fcb9 	bl	8003200 <MX_DMA_Init>
  MX_ADC1_Init();
 800288e:	f000 f9f5 	bl	8002c7c <MX_ADC1_Init>
  MX_TIM1_Init();
 8002892:	f000 fb6b 	bl	8002f6c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002896:	f000 fc35 	bl	8003104 <MX_USART2_UART_Init>
  MX_DAC_Init();
 800289a:	f000 fadb 	bl	8002e54 <MX_DAC_Init>
  MX_SPI1_Init();
 800289e:	f000 fb2f 	bl	8002f00 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80028a2:	f000 fc59 	bl	8003158 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80028a6:	f007 fbab 	bl	800a000 <MX_FATFS_Init>
  MX_TIM8_Init();
 80028aa:	f000 fbaf 	bl	800300c <MX_TIM8_Init>
  MX_SDIO_SD_Init();
 80028ae:	f000 fb05 	bl	8002ebc <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80028b2:	f000 fbfd 	bl	80030b0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80028b6:	f000 fc79 	bl	80031ac <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); // Örnekleme için timer kesmesi başlangıcı USER CODE 4'e git.
 80028ba:	4893      	ldr	r0, [pc, #588]	@ (8002b08 <main+0x2a8>)
 80028bc:	f005 f97a 	bl	8007bb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);  // HMI Ekrana her 1s'de yazması için timer kesmesi başlangıcı
 80028c0:	4892      	ldr	r0, [pc, #584]	@ (8002b0c <main+0x2ac>)
 80028c2:	f005 f977 	bl	8007bb4 <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80028c6:	2100      	movs	r1, #0
 80028c8:	4891      	ldr	r0, [pc, #580]	@ (8002b10 <main+0x2b0>)
 80028ca:	f001 ffff 	bl	80048cc <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80028ce:	2110      	movs	r1, #16
 80028d0:	488f      	ldr	r0, [pc, #572]	@ (8002b10 <main+0x2b0>)
 80028d2:	f001 fffb 	bl	80048cc <HAL_DAC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(sd_Flag==1)
 80028d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002b14 <main+0x2b4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	f040 80cd 	bne.w	8002a7a <main+0x21a>
	  {

start_tick = DWT->CYCCNT;
 80028e0:	4b88      	ldr	r3, [pc, #544]	@ (8002b04 <main+0x2a4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a8c      	ldr	r2, [pc, #560]	@ (8002b18 <main+0x2b8>)
 80028e6:	6013      	str	r3, [r2, #0]

		  	//SD karta yazdırma kısmı, sd_Flag 1 olduğunda SD Karta yazdırıyor.
		    fres = f_mount(&fs, "", 0);
 80028e8:	2200      	movs	r2, #0
 80028ea:	498c      	ldr	r1, [pc, #560]	@ (8002b1c <main+0x2bc>)
 80028ec:	488c      	ldr	r0, [pc, #560]	@ (8002b20 <main+0x2c0>)
 80028ee:	f009 ff4f 	bl	800c790 <f_mount>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b8b      	ldr	r3, [pc, #556]	@ (8002b24 <main+0x2c4>)
 80028f8:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 80028fa:	4b8a      	ldr	r3, [pc, #552]	@ (8002b24 <main+0x2c4>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <main+0xaa>
				transmit_uart("Micro SD card is mounted successfully!\n");
 8002902:	4889      	ldr	r0, [pc, #548]	@ (8002b28 <main+0x2c8>)
 8002904:	f7ff f848 	bl	8001998 <transmit_uart>
 8002908:	e006      	b.n	8002918 <main+0xb8>
			} else if (fres != FR_OK) {
 800290a:	4b86      	ldr	r3, [pc, #536]	@ (8002b24 <main+0x2c4>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <main+0xb8>
				transmit_uart("Micro SD card's mount error!\n");
 8002912:	4886      	ldr	r0, [pc, #536]	@ (8002b2c <main+0x2cc>)
 8002914:	f7ff f840 	bl	8001998 <transmit_uart>
			}

			// FA_OPEN_APPEND opens file if it exists and if not then creates it,
			// the pointer is set at the end of the file for appending
			fres = f_open(&fil, "log-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 8002918:	2233      	movs	r2, #51	@ 0x33
 800291a:	4985      	ldr	r1, [pc, #532]	@ (8002b30 <main+0x2d0>)
 800291c:	4885      	ldr	r0, [pc, #532]	@ (8002b34 <main+0x2d4>)
 800291e:	f009 ff7d 	bl	800c81c <f_open>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b7f      	ldr	r3, [pc, #508]	@ (8002b24 <main+0x2c4>)
 8002928:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 800292a:	4b7e      	ldr	r3, [pc, #504]	@ (8002b24 <main+0x2c4>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <main+0xda>
				transmit_uart("File opened for reading and checking the free space.\n");
 8002932:	4881      	ldr	r0, [pc, #516]	@ (8002b38 <main+0x2d8>)
 8002934:	f7ff f830 	bl	8001998 <transmit_uart>
 8002938:	e006      	b.n	8002948 <main+0xe8>
			} else if (fres != FR_OK) {
 800293a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b24 <main+0x2c4>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <main+0xe8>
				transmit_uart("File was not opened for reading and checking the free space!\n");
 8002942:	487e      	ldr	r0, [pc, #504]	@ (8002b3c <main+0x2dc>)
 8002944:	f7ff f828 	bl	8001998 <transmit_uart>


			 //ADC değerlerinin char'a dönüştürülüp sd karta yazdırıldığı bölüm

//				 f_puts("(s) VL1 VL2 VL3 IL1 IL2 IL3 VBARA VOUT IOUT TBARA \n", &fil);
				 f_puts(adc1_Last0, &fil);   // ADC değerleri metin dosyasına yazdırıldı.
 8002948:	497a      	ldr	r1, [pc, #488]	@ (8002b34 <main+0x2d4>)
 800294a:	487d      	ldr	r0, [pc, #500]	@ (8002b40 <main+0x2e0>)
 800294c:	f00a fbe1 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 8002950:	4978      	ldr	r1, [pc, #480]	@ (8002b34 <main+0x2d4>)
 8002952:	487c      	ldr	r0, [pc, #496]	@ (8002b44 <main+0x2e4>)
 8002954:	f00a fbdd 	bl	800d112 <f_puts>
				 f_puts(adc1_Last1, &fil);
 8002958:	4976      	ldr	r1, [pc, #472]	@ (8002b34 <main+0x2d4>)
 800295a:	487b      	ldr	r0, [pc, #492]	@ (8002b48 <main+0x2e8>)
 800295c:	f00a fbd9 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 8002960:	4974      	ldr	r1, [pc, #464]	@ (8002b34 <main+0x2d4>)
 8002962:	4878      	ldr	r0, [pc, #480]	@ (8002b44 <main+0x2e4>)
 8002964:	f00a fbd5 	bl	800d112 <f_puts>
				 f_puts(adc1_Last2, &fil);
 8002968:	4972      	ldr	r1, [pc, #456]	@ (8002b34 <main+0x2d4>)
 800296a:	4878      	ldr	r0, [pc, #480]	@ (8002b4c <main+0x2ec>)
 800296c:	f00a fbd1 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 8002970:	4970      	ldr	r1, [pc, #448]	@ (8002b34 <main+0x2d4>)
 8002972:	4874      	ldr	r0, [pc, #464]	@ (8002b44 <main+0x2e4>)
 8002974:	f00a fbcd 	bl	800d112 <f_puts>
				 f_puts(adc1_Last3, &fil);
 8002978:	496e      	ldr	r1, [pc, #440]	@ (8002b34 <main+0x2d4>)
 800297a:	4875      	ldr	r0, [pc, #468]	@ (8002b50 <main+0x2f0>)
 800297c:	f00a fbc9 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 8002980:	496c      	ldr	r1, [pc, #432]	@ (8002b34 <main+0x2d4>)
 8002982:	4870      	ldr	r0, [pc, #448]	@ (8002b44 <main+0x2e4>)
 8002984:	f00a fbc5 	bl	800d112 <f_puts>
				 f_puts(adc1_Last4, &fil);
 8002988:	496a      	ldr	r1, [pc, #424]	@ (8002b34 <main+0x2d4>)
 800298a:	4872      	ldr	r0, [pc, #456]	@ (8002b54 <main+0x2f4>)
 800298c:	f00a fbc1 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 8002990:	4968      	ldr	r1, [pc, #416]	@ (8002b34 <main+0x2d4>)
 8002992:	486c      	ldr	r0, [pc, #432]	@ (8002b44 <main+0x2e4>)
 8002994:	f00a fbbd 	bl	800d112 <f_puts>
				 f_puts(adc1_Last5, &fil);
 8002998:	4966      	ldr	r1, [pc, #408]	@ (8002b34 <main+0x2d4>)
 800299a:	486f      	ldr	r0, [pc, #444]	@ (8002b58 <main+0x2f8>)
 800299c:	f00a fbb9 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 80029a0:	4964      	ldr	r1, [pc, #400]	@ (8002b34 <main+0x2d4>)
 80029a2:	4868      	ldr	r0, [pc, #416]	@ (8002b44 <main+0x2e4>)
 80029a4:	f00a fbb5 	bl	800d112 <f_puts>
				 f_puts(adc1_Last6, &fil);
 80029a8:	4962      	ldr	r1, [pc, #392]	@ (8002b34 <main+0x2d4>)
 80029aa:	486c      	ldr	r0, [pc, #432]	@ (8002b5c <main+0x2fc>)
 80029ac:	f00a fbb1 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 80029b0:	4960      	ldr	r1, [pc, #384]	@ (8002b34 <main+0x2d4>)
 80029b2:	4864      	ldr	r0, [pc, #400]	@ (8002b44 <main+0x2e4>)
 80029b4:	f00a fbad 	bl	800d112 <f_puts>
				 f_puts(adc1_Last7, &fil);
 80029b8:	495e      	ldr	r1, [pc, #376]	@ (8002b34 <main+0x2d4>)
 80029ba:	4869      	ldr	r0, [pc, #420]	@ (8002b60 <main+0x300>)
 80029bc:	f00a fba9 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 80029c0:	495c      	ldr	r1, [pc, #368]	@ (8002b34 <main+0x2d4>)
 80029c2:	4860      	ldr	r0, [pc, #384]	@ (8002b44 <main+0x2e4>)
 80029c4:	f00a fba5 	bl	800d112 <f_puts>
				 f_puts(adc1_Last8, &fil);
 80029c8:	495a      	ldr	r1, [pc, #360]	@ (8002b34 <main+0x2d4>)
 80029ca:	4866      	ldr	r0, [pc, #408]	@ (8002b64 <main+0x304>)
 80029cc:	f00a fba1 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 80029d0:	4958      	ldr	r1, [pc, #352]	@ (8002b34 <main+0x2d4>)
 80029d2:	485c      	ldr	r0, [pc, #368]	@ (8002b44 <main+0x2e4>)
 80029d4:	f00a fb9d 	bl	800d112 <f_puts>
				 f_puts(adc1_Last9, &fil);
 80029d8:	4956      	ldr	r1, [pc, #344]	@ (8002b34 <main+0x2d4>)
 80029da:	4863      	ldr	r0, [pc, #396]	@ (8002b68 <main+0x308>)
 80029dc:	f00a fb99 	bl	800d112 <f_puts>
				 f_puts(" ", &fil);
 80029e0:	4954      	ldr	r1, [pc, #336]	@ (8002b34 <main+0x2d4>)
 80029e2:	4858      	ldr	r0, [pc, #352]	@ (8002b44 <main+0x2e4>)
 80029e4:	f00a fb95 	bl	800d112 <f_puts>
				 f_puts(adc1_Last10, &fil);
 80029e8:	4952      	ldr	r1, [pc, #328]	@ (8002b34 <main+0x2d4>)
 80029ea:	4860      	ldr	r0, [pc, #384]	@ (8002b6c <main+0x30c>)
 80029ec:	f00a fb91 	bl	800d112 <f_puts>
				 f_puts("\n", &fil);
 80029f0:	4950      	ldr	r1, [pc, #320]	@ (8002b34 <main+0x2d4>)
 80029f2:	485f      	ldr	r0, [pc, #380]	@ (8002b70 <main+0x310>)
 80029f4:	f00a fb8d 	bl	800d112 <f_puts>




			fres = f_close(&fil);
 80029f8:	484e      	ldr	r0, [pc, #312]	@ (8002b34 <main+0x2d4>)
 80029fa:	f00a fae9 	bl	800cfd0 <f_close>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b48      	ldr	r3, [pc, #288]	@ (8002b24 <main+0x2c4>)
 8002a04:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002a06:	4b47      	ldr	r3, [pc, #284]	@ (8002b24 <main+0x2c4>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <main+0x1b6>
				transmit_uart("The file is closed.\n");
 8002a0e:	4859      	ldr	r0, [pc, #356]	@ (8002b74 <main+0x314>)
 8002a10:	f7fe ffc2 	bl	8001998 <transmit_uart>
 8002a14:	e006      	b.n	8002a24 <main+0x1c4>
			} else if (fres != FR_OK) {
 8002a16:	4b43      	ldr	r3, [pc, #268]	@ (8002b24 <main+0x2c4>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <main+0x1c4>
				transmit_uart("The file was not closed.\n");}
 8002a1e:	4856      	ldr	r0, [pc, #344]	@ (8002b78 <main+0x318>)
 8002a20:	f7fe ffba 	bl	8001998 <transmit_uart>





			    sd_Flag=0;
 8002a24:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <main+0x2b4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
			count=0;
 8002a2a:	4b54      	ldr	r3, [pc, #336]	@ (8002b7c <main+0x31c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
			k=0;
 8002a30:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <main+0x320>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]

			// Alınan veriler sıfırlanıyor.
			for(uint8_t y=0;y<12;y++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	71fb      	strb	r3, [r7, #7]
 8002a3a:	e01b      	b.n	8002a74 <main+0x214>
			{
				adc_Buffer[y]=0;
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	4a51      	ldr	r2, [pc, #324]	@ (8002b84 <main+0x324>)
 8002a40:	2100      	movs	r1, #0
 8002a42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Value[y]=0;
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	4a4f      	ldr	r2, [pc, #316]	@ (8002b88 <main+0x328>)
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Mean[y]=0;
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	4a4e      	ldr	r2, [pc, #312]	@ (8002b8c <main+0x32c>)
 8002a54:	2100      	movs	r1, #0
 8002a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Square[y]=0;
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002b90 <main+0x330>)
 8002a5e:	2100      	movs	r1, #0
 8002a60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Square_Root[y]=0;
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	4a4b      	ldr	r2, [pc, #300]	@ (8002b94 <main+0x334>)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint8_t y=0;y<12;y++)
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	3301      	adds	r3, #1
 8002a72:	71fb      	strb	r3, [r7, #7]
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2b0b      	cmp	r3, #11
 8002a78:	d9e0      	bls.n	8002a3c <main+0x1dc>
			}
	  }

end_tick = DWT->CYCCNT;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <main+0x2a4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4a46      	ldr	r2, [pc, #280]	@ (8002b98 <main+0x338>)
 8002a80:	6013      	str	r3, [r2, #0]
sprintf(message, "Time: %9.2f ms\r\n", (float)(end_tick-start_tick)/(168000000/1000.0));
 8002a82:	4b45      	ldr	r3, [pc, #276]	@ (8002b98 <main+0x338>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <main+0x2b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a94:	ee17 0a90 	vmov	r0, s15
 8002a98:	f7fd fd56 	bl	8000548 <__aeabi_f2d>
 8002a9c:	a316      	add	r3, pc, #88	@ (adr r3, 8002af8 <main+0x298>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fed3 	bl	800084c <__aeabi_ddiv>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	493c      	ldr	r1, [pc, #240]	@ (8002b9c <main+0x33c>)
 8002aac:	483c      	ldr	r0, [pc, #240]	@ (8002ba0 <main+0x340>)
 8002aae:	f00b fc75 	bl	800e39c <siprintf>
printf(message);
 8002ab2:	483b      	ldr	r0, [pc, #236]	@ (8002ba0 <main+0x340>)
 8002ab4:	f00b fc60 	bl	800e378 <iprintf>
HAL_Delay(1000 - ((end_tick-start_tick))/(168000000/1000.0));
 8002ab8:	4b37      	ldr	r3, [pc, #220]	@ (8002b98 <main+0x338>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b16      	ldr	r3, [pc, #88]	@ (8002b18 <main+0x2b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fd fd1e 	bl	8000504 <__aeabi_ui2d>
 8002ac8:	a30b      	add	r3, pc, #44	@ (adr r3, 8002af8 <main+0x298>)
 8002aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ace:	f7fd febd 	bl	800084c <__aeabi_ddiv>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	f04f 0000 	mov.w	r0, #0
 8002ada:	4932      	ldr	r1, [pc, #200]	@ (8002ba4 <main+0x344>)
 8002adc:	f7fd fbd4 	bl	8000288 <__aeabi_dsub>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f7fe f85e 	bl	8000ba8 <__aeabi_d2uiz>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 f980 	bl	8003df4 <HAL_Delay>
	  if(sd_Flag==1)
 8002af4:	e6ef      	b.n	80028d6 <main+0x76>
 8002af6:	bf00      	nop
 8002af8:	00000000 	.word	0x00000000
 8002afc:	41048200 	.word	0x41048200
 8002b00:	e000edf0 	.word	0xe000edf0
 8002b04:	e0001000 	.word	0xe0001000
 8002b08:	20002428 	.word	0x20002428
 8002b0c:	20002470 	.word	0x20002470
 8002b10:	20002390 	.word	0x20002390
 8002b14:	20002758 	.word	0x20002758
 8002b18:	20002658 	.word	0x20002658
 8002b1c:	08011d3c 	.word	0x08011d3c
 8002b20:	2000027c 	.word	0x2000027c
 8002b24:	200022e4 	.word	0x200022e4
 8002b28:	08011d40 	.word	0x08011d40
 8002b2c:	08011d68 	.word	0x08011d68
 8002b30:	08011d88 	.word	0x08011d88
 8002b34:	200012b4 	.word	0x200012b4
 8002b38:	08011d98 	.word	0x08011d98
 8002b3c:	08011dd0 	.word	0x08011dd0
 8002b40:	20002818 	.word	0x20002818
 8002b44:	08011e10 	.word	0x08011e10
 8002b48:	2000282c 	.word	0x2000282c
 8002b4c:	20002840 	.word	0x20002840
 8002b50:	20002854 	.word	0x20002854
 8002b54:	20002868 	.word	0x20002868
 8002b58:	2000287c 	.word	0x2000287c
 8002b5c:	20002890 	.word	0x20002890
 8002b60:	200028a4 	.word	0x200028a4
 8002b64:	200028b8 	.word	0x200028b8
 8002b68:	200028cc 	.word	0x200028cc
 8002b6c:	200028e0 	.word	0x200028e0
 8002b70:	08011e14 	.word	0x08011e14
 8002b74:	08011e18 	.word	0x08011e18
 8002b78:	08011e30 	.word	0x08011e30
 8002b7c:	20002754 	.word	0x20002754
 8002b80:	20002750 	.word	0x20002750
 8002b84:	20002660 	.word	0x20002660
 8002b88:	20002690 	.word	0x20002690
 8002b8c:	20002720 	.word	0x20002720
 8002b90:	200026c0 	.word	0x200026c0
 8002b94:	200026f0 	.word	0x200026f0
 8002b98:	2000265c 	.word	0x2000265c
 8002b9c:	08011e4c 	.word	0x08011e4c
 8002ba0:	200025d8 	.word	0x200025d8
 8002ba4:	408f4000 	.word	0x408f4000

08002ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b094      	sub	sp, #80	@ 0x50
 8002bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bae:	f107 0320 	add.w	r3, r7, #32
 8002bb2:	2230      	movs	r2, #48	@ 0x30
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f00b fc53 	bl	800e462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	4b28      	ldr	r3, [pc, #160]	@ (8002c74 <SystemClock_Config+0xcc>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4a27      	ldr	r2, [pc, #156]	@ (8002c74 <SystemClock_Config+0xcc>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bdc:	4b25      	ldr	r3, [pc, #148]	@ (8002c74 <SystemClock_Config+0xcc>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be8:	2300      	movs	r3, #0
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <SystemClock_Config+0xd0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a21      	ldr	r2, [pc, #132]	@ (8002c78 <SystemClock_Config+0xd0>)
 8002bf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c78 <SystemClock_Config+0xd0>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c04:	2301      	movs	r3, #1
 8002c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c18:	2304      	movs	r3, #4
 8002c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c1c:	23a8      	movs	r3, #168	@ 0xa8
 8002c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c20:	2302      	movs	r3, #2
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c24:	2307      	movs	r3, #7
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c28:	f107 0320 	add.w	r3, r7, #32
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f002 fcdf 	bl	80055f0 <HAL_RCC_OscConfig>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c38:	f000 fbac 	bl	8003394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c3c:	230f      	movs	r3, #15
 8002c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c40:	2302      	movs	r3, #2
 8002c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c54:	f107 030c 	add.w	r3, r7, #12
 8002c58:	2105      	movs	r1, #5
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 ff40 	bl	8005ae0 <HAL_RCC_ClockConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c66:	f000 fb95 	bl	8003394 <Error_Handler>
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3750      	adds	r7, #80	@ 0x50
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000

08002c7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c82:	463b      	mov	r3, r7
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002c90:	4a6e      	ldr	r2, [pc, #440]	@ (8002e4c <MX_ADC1_Init+0x1d0>)
 8002c92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c94:	4b6c      	ldr	r3, [pc, #432]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002c96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002c9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002ca2:	4b69      	ldr	r3, [pc, #420]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ca8:	4b67      	ldr	r3, [pc, #412]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cae:	4b66      	ldr	r3, [pc, #408]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cb6:	4b64      	ldr	r3, [pc, #400]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cbc:	4b62      	ldr	r3, [pc, #392]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cbe:	4a64      	ldr	r2, [pc, #400]	@ (8002e50 <MX_ADC1_Init+0x1d4>)
 8002cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cc2:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8002cc8:	4b5f      	ldr	r3, [pc, #380]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cca:	220c      	movs	r2, #12
 8002ccc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cce:	4b5e      	ldr	r3, [pc, #376]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cdc:	485a      	ldr	r0, [pc, #360]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cde:	f001 f8ad 	bl	8003e3c <HAL_ADC_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ce8:	f000 fb54 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002cf4:	2307      	movs	r3, #7
 8002cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4852      	ldr	r0, [pc, #328]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002cfe:	f001 fa05 	bl	800410c <HAL_ADC_ConfigChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d08:	f000 fb44 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d10:	2302      	movs	r3, #2
 8002d12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d14:	463b      	mov	r3, r7
 8002d16:	4619      	mov	r1, r3
 8002d18:	484b      	ldr	r0, [pc, #300]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002d1a:	f001 f9f7 	bl	800410c <HAL_ADC_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002d24:	f000 fb36 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d30:	463b      	mov	r3, r7
 8002d32:	4619      	mov	r1, r3
 8002d34:	4844      	ldr	r0, [pc, #272]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002d36:	f001 f9e9 	bl	800410c <HAL_ADC_ConfigChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002d40:	f000 fb28 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002d44:	2303      	movs	r3, #3
 8002d46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	4619      	mov	r1, r3
 8002d50:	483d      	ldr	r0, [pc, #244]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002d52:	f001 f9db 	bl	800410c <HAL_ADC_ConfigChannel>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002d5c:	f000 fb1a 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d60:	2306      	movs	r3, #6
 8002d62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002d64:	2305      	movs	r3, #5
 8002d66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d68:	463b      	mov	r3, r7
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4836      	ldr	r0, [pc, #216]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002d6e:	f001 f9cd 	bl	800410c <HAL_ADC_ConfigChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002d78:	f000 fb0c 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002d7c:	2307      	movs	r3, #7
 8002d7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002d80:	2306      	movs	r3, #6
 8002d82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d84:	463b      	mov	r3, r7
 8002d86:	4619      	mov	r1, r3
 8002d88:	482f      	ldr	r0, [pc, #188]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002d8a:	f001 f9bf 	bl	800410c <HAL_ADC_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002d94:	f000 fafe 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002d98:	2308      	movs	r3, #8
 8002d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002d9c:	2307      	movs	r3, #7
 8002d9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002da0:	463b      	mov	r3, r7
 8002da2:	4619      	mov	r1, r3
 8002da4:	4828      	ldr	r0, [pc, #160]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002da6:	f001 f9b1 	bl	800410c <HAL_ADC_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002db0:	f000 faf0 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002db4:	2309      	movs	r3, #9
 8002db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002db8:	2308      	movs	r3, #8
 8002dba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4821      	ldr	r0, [pc, #132]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002dc2:	f001 f9a3 	bl	800410c <HAL_ADC_ConfigChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002dcc:	f000 fae2 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002dd0:	230a      	movs	r3, #10
 8002dd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002dd4:	2309      	movs	r3, #9
 8002dd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dd8:	463b      	mov	r3, r7
 8002dda:	4619      	mov	r1, r3
 8002ddc:	481a      	ldr	r0, [pc, #104]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002dde:	f001 f995 	bl	800410c <HAL_ADC_ConfigChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002de8:	f000 fad4 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002dec:	230b      	movs	r3, #11
 8002dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002df0:	230a      	movs	r3, #10
 8002df2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002df4:	463b      	mov	r3, r7
 8002df6:	4619      	mov	r1, r3
 8002df8:	4813      	ldr	r0, [pc, #76]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002dfa:	f001 f987 	bl	800410c <HAL_ADC_ConfigChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002e04:	f000 fac6 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002e08:	230d      	movs	r3, #13
 8002e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002e0c:	230b      	movs	r3, #11
 8002e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e10:	463b      	mov	r3, r7
 8002e12:	4619      	mov	r1, r3
 8002e14:	480c      	ldr	r0, [pc, #48]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002e16:	f001 f979 	bl	800410c <HAL_ADC_ConfigChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002e20:	f000 fab8 	bl	8003394 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002e24:	230f      	movs	r3, #15
 8002e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002e28:	230c      	movs	r3, #12
 8002e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4805      	ldr	r0, [pc, #20]	@ (8002e48 <MX_ADC1_Init+0x1cc>)
 8002e32:	f001 f96b 	bl	800410c <HAL_ADC_ConfigChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002e3c:	f000 faaa 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200022e8 	.word	0x200022e8
 8002e4c:	40012000 	.word	0x40012000
 8002e50:	0f000001 	.word	0x0f000001

08002e54 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002e62:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <MX_DAC_Init+0x60>)
 8002e64:	4a14      	ldr	r2, [pc, #80]	@ (8002eb8 <MX_DAC_Init+0x64>)
 8002e66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002e68:	4812      	ldr	r0, [pc, #72]	@ (8002eb4 <MX_DAC_Init+0x60>)
 8002e6a:	f001 fd0d 	bl	8004888 <HAL_DAC_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002e74:	f000 fa8e 	bl	8003394 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002e80:	463b      	mov	r3, r7
 8002e82:	2200      	movs	r2, #0
 8002e84:	4619      	mov	r1, r3
 8002e86:	480b      	ldr	r0, [pc, #44]	@ (8002eb4 <MX_DAC_Init+0x60>)
 8002e88:	f001 fda1 	bl	80049ce <HAL_DAC_ConfigChannel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002e92:	f000 fa7f 	bl	8003394 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002e96:	463b      	mov	r3, r7
 8002e98:	2210      	movs	r2, #16
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4805      	ldr	r0, [pc, #20]	@ (8002eb4 <MX_DAC_Init+0x60>)
 8002e9e:	f001 fd96 	bl	80049ce <HAL_DAC_ConfigChannel>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002ea8:	f000 fa74 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20002390 	.word	0x20002390
 8002eb8:	40007400 	.word	0x40007400

08002ebc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <MX_SDIO_SD_Init+0x3c>)
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8002efc <MX_SDIO_SD_Init+0x40>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <MX_SDIO_SD_Init+0x3c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <MX_SDIO_SD_Init+0x3c>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ed2:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <MX_SDIO_SD_Init+0x3c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8002ed8:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <MX_SDIO_SD_Init+0x3c>)
 8002eda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ede:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <MX_SDIO_SD_Init+0x3c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002ee6:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <MX_SDIO_SD_Init+0x3c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	200023a4 	.word	0x200023a4
 8002efc:	40012c00 	.word	0x40012c00

08002f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f04:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f06:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <MX_SPI1_Init+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f0a:	4b16      	ldr	r3, [pc, #88]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f12:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f18:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f1e:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f24:	4b0f      	ldr	r3, [pc, #60]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002f32:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f34:	2210      	movs	r2, #16
 8002f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f38:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f3e:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f44:	4b07      	ldr	r3, [pc, #28]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f4c:	220a      	movs	r2, #10
 8002f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f50:	4804      	ldr	r0, [pc, #16]	@ (8002f64 <MX_SPI1_Init+0x64>)
 8002f52:	f004 f987 	bl	8007264 <HAL_SPI_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f5c:	f000 fa1a 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f60:	bf00      	nop
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000224 	.word	0x20000224
 8002f68:	40013000 	.word	0x40013000

08002f6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f72:	f107 0308 	add.w	r3, r7, #8
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f80:	463b      	mov	r3, r7
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f88:	4b1e      	ldr	r3, [pc, #120]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <MX_TIM1_Init+0x9c>)
 8002f8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8002f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002f9c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002fa0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa2:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fa8:	4b16      	ldr	r3, [pc, #88]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002fb4:	4813      	ldr	r0, [pc, #76]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002fb6:	f004 fdad 	bl	8007b14 <HAL_TIM_Base_Init>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002fc0:	f000 f9e8 	bl	8003394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002fca:	f107 0308 	add.w	r3, r7, #8
 8002fce:	4619      	mov	r1, r3
 8002fd0:	480c      	ldr	r0, [pc, #48]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002fd2:	f004 ff4f 	bl	8007e74 <HAL_TIM_ConfigClockSource>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002fdc:	f000 f9da 	bl	8003394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002fe8:	463b      	mov	r3, r7
 8002fea:	4619      	mov	r1, r3
 8002fec:	4805      	ldr	r0, [pc, #20]	@ (8003004 <MX_TIM1_Init+0x98>)
 8002fee:	f005 f977 	bl	80082e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002ff8:	f000 f9cc 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20002428 	.word	0x20002428
 8003008:	40010000 	.word	0x40010000

0800300c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003020:	463b      	mov	r3, r7
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003028:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 800302a:	4a20      	ldr	r2, [pc, #128]	@ (80030ac <MX_TIM8_Init+0xa0>)
 800302c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20000-1;
 800302e:	4b1e      	ldr	r3, [pc, #120]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 8003030:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003034:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003036:	4b1c      	ldr	r3, [pc, #112]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8400-1;
 800303c:	4b1a      	ldr	r3, [pc, #104]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 800303e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003042:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003044:	4b18      	ldr	r3, [pc, #96]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800304a:	4b17      	ldr	r3, [pc, #92]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 800304c:	2200      	movs	r2, #0
 800304e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003050:	4b15      	ldr	r3, [pc, #84]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 8003052:	2200      	movs	r2, #0
 8003054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003056:	4814      	ldr	r0, [pc, #80]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 8003058:	f004 fd5c 	bl	8007b14 <HAL_TIM_Base_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8003062:	f000 f997 	bl	8003394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800306a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800306c:	f107 0308 	add.w	r3, r7, #8
 8003070:	4619      	mov	r1, r3
 8003072:	480d      	ldr	r0, [pc, #52]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 8003074:	f004 fefe 	bl	8007e74 <HAL_TIM_ConfigClockSource>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800307e:	f000 f989 	bl	8003394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003082:	2320      	movs	r3, #32
 8003084:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800308a:	463b      	mov	r3, r7
 800308c:	4619      	mov	r1, r3
 800308e:	4806      	ldr	r0, [pc, #24]	@ (80030a8 <MX_TIM8_Init+0x9c>)
 8003090:	f005 f926 	bl	80082e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800309a:	f000 f97b 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20002470 	.word	0x20002470
 80030ac:	40010400 	.word	0x40010400

080030b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030b6:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <MX_USART1_UART_Init+0x50>)
 80030b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80030c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030c8:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030ce:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030d6:	220c      	movs	r2, #12
 80030d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030e6:	4805      	ldr	r0, [pc, #20]	@ (80030fc <MX_USART1_UART_Init+0x4c>)
 80030e8:	f005 f98a 	bl	8008400 <HAL_UART_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80030f2:	f000 f94f 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200024b8 	.word	0x200024b8
 8003100:	40011000 	.word	0x40011000

08003104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003108:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 800310a:	4a12      	ldr	r2, [pc, #72]	@ (8003154 <MX_USART2_UART_Init+0x50>)
 800310c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800310e:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 8003110:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003116:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800311c:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003128:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 800312a:	220c      	movs	r2, #12
 800312c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 8003136:	2200      	movs	r2, #0
 8003138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800313a:	4805      	ldr	r0, [pc, #20]	@ (8003150 <MX_USART2_UART_Init+0x4c>)
 800313c:	f005 f960 	bl	8008400 <HAL_UART_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003146:	f000 f925 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20002500 	.word	0x20002500
 8003154:	40004400 	.word	0x40004400

08003158 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 800315e:	4a12      	ldr	r2, [pc, #72]	@ (80031a8 <MX_USART3_UART_Init+0x50>)
 8003160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 8003164:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003176:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800318e:	4805      	ldr	r0, [pc, #20]	@ (80031a4 <MX_USART3_UART_Init+0x4c>)
 8003190:	f005 f936 	bl	8008400 <HAL_UART_Init>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800319a:	f000 f8fb 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20002548 	.word	0x20002548
 80031a8:	40004800 	.word	0x40004800

080031ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <MX_USART6_UART_Init+0x50>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80031b6:	4b10      	ldr	r3, [pc, #64]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80031bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80031d0:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d6:	4b08      	ldr	r3, [pc, #32]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80031dc:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80031e2:	4805      	ldr	r0, [pc, #20]	@ (80031f8 <MX_USART6_UART_Init+0x4c>)
 80031e4:	f005 f90c 	bl	8008400 <HAL_UART_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80031ee:	f000 f8d1 	bl	8003394 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20002590 	.word	0x20002590
 80031fc:	40011400 	.word	0x40011400

08003200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4b0c      	ldr	r3, [pc, #48]	@ (800323c <MX_DMA_Init+0x3c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4a0b      	ldr	r2, [pc, #44]	@ (800323c <MX_DMA_Init+0x3c>)
 8003210:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003214:	6313      	str	r3, [r2, #48]	@ 0x30
 8003216:	4b09      	ldr	r3, [pc, #36]	@ (800323c <MX_DMA_Init+0x3c>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2100      	movs	r1, #0
 8003226:	2038      	movs	r0, #56	@ 0x38
 8003228:	f001 faeb 	bl	8004802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800322c:	2038      	movs	r0, #56	@ 0x38
 800322e:	f001 fb04 	bl	800483a <HAL_NVIC_EnableIRQ>

}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	@ 0x28
 8003244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003246:	f107 0314 	add.w	r3, r7, #20
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	609a      	str	r2, [r3, #8]
 8003252:	60da      	str	r2, [r3, #12]
 8003254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	4b33      	ldr	r3, [pc, #204]	@ (8003328 <MX_GPIO_Init+0xe8>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	4a32      	ldr	r2, [pc, #200]	@ (8003328 <MX_GPIO_Init+0xe8>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6313      	str	r3, [r2, #48]	@ 0x30
 8003266:	4b30      	ldr	r3, [pc, #192]	@ (8003328 <MX_GPIO_Init+0xe8>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	4b2c      	ldr	r3, [pc, #176]	@ (8003328 <MX_GPIO_Init+0xe8>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	4a2b      	ldr	r2, [pc, #172]	@ (8003328 <MX_GPIO_Init+0xe8>)
 800327c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003280:	6313      	str	r3, [r2, #48]	@ 0x30
 8003282:	4b29      	ldr	r3, [pc, #164]	@ (8003328 <MX_GPIO_Init+0xe8>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	4b25      	ldr	r3, [pc, #148]	@ (8003328 <MX_GPIO_Init+0xe8>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	4a24      	ldr	r2, [pc, #144]	@ (8003328 <MX_GPIO_Init+0xe8>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	6313      	str	r3, [r2, #48]	@ 0x30
 800329e:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <MX_GPIO_Init+0xe8>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
 80032ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <MX_GPIO_Init+0xe8>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003328 <MX_GPIO_Init+0xe8>)
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <MX_GPIO_Init+0xe8>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4b17      	ldr	r3, [pc, #92]	@ (8003328 <MX_GPIO_Init+0xe8>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ce:	4a16      	ldr	r2, [pc, #88]	@ (8003328 <MX_GPIO_Init+0xe8>)
 80032d0:	f043 0308 	orr.w	r3, r3, #8
 80032d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d6:	4b14      	ldr	r3, [pc, #80]	@ (8003328 <MX_GPIO_Init+0xe8>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80032e2:	2201      	movs	r2, #1
 80032e4:	2140      	movs	r1, #64	@ 0x40
 80032e6:	4811      	ldr	r0, [pc, #68]	@ (800332c <MX_GPIO_Init+0xec>)
 80032e8:	f002 f968 	bl	80055bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : REF_Pin */
  GPIO_InitStruct.Pin = REF_Pin;
 80032ec:	2301      	movs	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f0:	2303      	movs	r3, #3
 80032f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REF_GPIO_Port, &GPIO_InitStruct);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	480c      	ldr	r0, [pc, #48]	@ (8003330 <MX_GPIO_Init+0xf0>)
 8003300:	f001 ffc0 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003304:	2340      	movs	r3, #64	@ 0x40
 8003306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003308:	2301      	movs	r3, #1
 800330a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003310:	2301      	movs	r3, #1
 8003312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4619      	mov	r1, r3
 800331a:	4804      	ldr	r0, [pc, #16]	@ (800332c <MX_GPIO_Init+0xec>)
 800331c:	f001 ffb2 	bl	8005284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003320:	bf00      	nop
 8003322:	3728      	adds	r7, #40	@ 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	40020400 	.word	0x40020400
 8003330:	40020000 	.word	0x40020000

08003334 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  /* TIMER CAGRILDI  */
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == TIM1)  // 50US'DE BIR KESMEYE GIRIP DEGER TOPLAYACAK.
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0d      	ldr	r2, [pc, #52]	@ (8003378 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d104      	bne.n	8003350 <HAL_TIM_PeriodElapsedCallback+0x1c>
	 {
		 HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_Buffer, sizeof(adc_Buffer)); /* ADC1 BASLADI VE DEGERLER ADC1'DEN CEKILDI */
 8003346:	2230      	movs	r2, #48	@ 0x30
 8003348:	490c      	ldr	r1, [pc, #48]	@ (800337c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800334a:	480d      	ldr	r0, [pc, #52]	@ (8003380 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800334c:	f000 fdba 	bl	8003ec4 <HAL_ADC_Start_DMA>

	 }

	 if(htim->Instance == TIM8) // 1s'de bir tft ekrana verileri gönderecek.
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0b      	ldr	r2, [pc, #44]	@ (8003384 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d109      	bne.n	800336e <HAL_TIM_PeriodElapsedCallback+0x3a>
	 {


		 HAL_UART_Receive_IT(&huart2, RX_Data, 4);  //UART CallBack'e git ve basılan butona göre değer gönder ekrana.
 800335a:	2204      	movs	r2, #4
 800335c:	490a      	ldr	r1, [pc, #40]	@ (8003388 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800335e:	480b      	ldr	r0, [pc, #44]	@ (800338c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003360:	f005 f95f 	bl	8008622 <HAL_UART_Receive_IT>
		 sec++;
 8003364:	4b0a      	ldr	r3, [pc, #40]	@ (8003390 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	4a09      	ldr	r2, [pc, #36]	@ (8003390 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800336c:	6013      	str	r3, [r2, #0]

	 }


}
 800336e:	bf00      	nop
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000
 800337c:	20002660 	.word	0x20002660
 8003380:	200022e8 	.word	0x200022e8
 8003384:	40010400 	.word	0x40010400
 8003388:	20002804 	.word	0x20002804
 800338c:	20002500 	.word	0x20002500
 8003390:	20002800 	.word	0x20002800

08003394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003398:	b672      	cpsid	i
}
 800339a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <Error_Handler+0x8>

080033a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <HAL_MspInit+0x4c>)
 80033ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ae:	4a0f      	ldr	r2, [pc, #60]	@ (80033ec <HAL_MspInit+0x4c>)
 80033b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80033b6:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <HAL_MspInit+0x4c>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_MspInit+0x4c>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <HAL_MspInit+0x4c>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_MspInit+0x4c>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033de:	2007      	movs	r0, #7
 80033e0:	f001 fa04 	bl	80047ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800

080033f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	@ 0x30
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 031c 	add.w	r3, r7, #28
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a49      	ldr	r2, [pc, #292]	@ (8003534 <HAL_ADC_MspInit+0x144>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f040 808c 	bne.w	800352c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	4b47      	ldr	r3, [pc, #284]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	4a46      	ldr	r2, [pc, #280]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003422:	6453      	str	r3, [r2, #68]	@ 0x44
 8003424:	4b44      	ldr	r3, [pc, #272]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 8003426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	4b40      	ldr	r3, [pc, #256]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	4a3f      	ldr	r2, [pc, #252]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 800343a:	f043 0304 	orr.w	r3, r3, #4
 800343e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003440:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	4b39      	ldr	r3, [pc, #228]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	4a38      	ldr	r2, [pc, #224]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6313      	str	r3, [r2, #48]	@ 0x30
 800345c:	4b36      	ldr	r3, [pc, #216]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	4b32      	ldr	r3, [pc, #200]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003470:	4a31      	ldr	r2, [pc, #196]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	6313      	str	r3, [r2, #48]	@ 0x30
 8003478:	4b2f      	ldr	r3, [pc, #188]	@ (8003538 <HAL_ADC_MspInit+0x148>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_OLC2_Pin|ADC1_OLC3_Pin|ADC1_OLC5_Pin|AKIM_FB_Pin;
 8003484:	232b      	movs	r3, #43	@ 0x2b
 8003486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003488:	2303      	movs	r3, #3
 800348a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003490:	f107 031c 	add.w	r3, r7, #28
 8003494:	4619      	mov	r1, r3
 8003496:	4829      	ldr	r0, [pc, #164]	@ (800353c <HAL_ADC_MspInit+0x14c>)
 8003498:	f001 fef4 	bl	8005284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = REF_Pin|L1_OLC_Pin|L2_OLC_Pin|L3_OLC_Pin
 800349c:	23cf      	movs	r3, #207	@ 0xcf
 800349e:	61fb      	str	r3, [r7, #28]
                          |I1_OLC_Pin|I2_OLC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a0:	2303      	movs	r3, #3
 80034a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a8:	f107 031c 	add.w	r3, r7, #28
 80034ac:	4619      	mov	r1, r3
 80034ae:	4824      	ldr	r0, [pc, #144]	@ (8003540 <HAL_ADC_MspInit+0x150>)
 80034b0:	f001 fee8 	bl	8005284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I3_OLC_Pin|ADC1_OLC_Pin;
 80034b4:	2303      	movs	r3, #3
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b8:	2303      	movs	r3, #3
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	4619      	mov	r1, r3
 80034c6:	481f      	ldr	r0, [pc, #124]	@ (8003544 <HAL_ADC_MspInit+0x154>)
 80034c8:	f001 fedc 	bl	8005284 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 80034ce:	4a1f      	ldr	r2, [pc, #124]	@ (800354c <HAL_ADC_MspInit+0x15c>)
 80034d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034de:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034e4:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 80034e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034ec:	4b16      	ldr	r3, [pc, #88]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 80034ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034f2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034f4:	4b14      	ldr	r3, [pc, #80]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 80034f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034fa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 80034fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003502:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003504:	4b10      	ldr	r3, [pc, #64]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 8003506:	2200      	movs	r2, #0
 8003508:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 800350c:	2200      	movs	r2, #0
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003510:	480d      	ldr	r0, [pc, #52]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 8003512:	f001 fab5 	bl	8004a80 <HAL_DMA_Init>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800351c:	f7ff ff3a 	bl	8003394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a09      	ldr	r2, [pc, #36]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 8003524:	639a      	str	r2, [r3, #56]	@ 0x38
 8003526:	4a08      	ldr	r2, [pc, #32]	@ (8003548 <HAL_ADC_MspInit+0x158>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800352c:	bf00      	nop
 800352e:	3730      	adds	r7, #48	@ 0x30
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40012000 	.word	0x40012000
 8003538:	40023800 	.word	0x40023800
 800353c:	40020800 	.word	0x40020800
 8003540:	40020000 	.word	0x40020000
 8003544:	40020400 	.word	0x40020400
 8003548:	20002330 	.word	0x20002330
 800354c:	40026410 	.word	0x40026410

08003550 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	@ 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	60da      	str	r2, [r3, #12]
 8003566:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a17      	ldr	r2, [pc, #92]	@ (80035cc <HAL_DAC_MspInit+0x7c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d127      	bne.n	80035c2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b16      	ldr	r3, [pc, #88]	@ (80035d0 <HAL_DAC_MspInit+0x80>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	4a15      	ldr	r2, [pc, #84]	@ (80035d0 <HAL_DAC_MspInit+0x80>)
 800357c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003580:	6413      	str	r3, [r2, #64]	@ 0x40
 8003582:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <HAL_DAC_MspInit+0x80>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b0f      	ldr	r3, [pc, #60]	@ (80035d0 <HAL_DAC_MspInit+0x80>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003596:	4a0e      	ldr	r2, [pc, #56]	@ (80035d0 <HAL_DAC_MspInit+0x80>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6313      	str	r3, [r2, #48]	@ 0x30
 800359e:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <HAL_DAC_MspInit+0x80>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = DAC_VOLTAJ_OUT_Pin|DAC_AKIM_OUT_Pin;
 80035aa:	2330      	movs	r3, #48	@ 0x30
 80035ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ae:	2303      	movs	r3, #3
 80035b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	4619      	mov	r1, r3
 80035bc:	4805      	ldr	r0, [pc, #20]	@ (80035d4 <HAL_DAC_MspInit+0x84>)
 80035be:	f001 fe61 	bl	8005284 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80035c2:	bf00      	nop
 80035c4:	3728      	adds	r7, #40	@ 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40007400 	.word	0x40007400
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40020000 	.word	0x40020000

080035d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	@ 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a28      	ldr	r2, [pc, #160]	@ (8003698 <HAL_SD_MspInit+0xc0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d14a      	bne.n	8003690 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	4b27      	ldr	r3, [pc, #156]	@ (800369c <HAL_SD_MspInit+0xc4>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	4a26      	ldr	r2, [pc, #152]	@ (800369c <HAL_SD_MspInit+0xc4>)
 8003604:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003608:	6453      	str	r3, [r2, #68]	@ 0x44
 800360a:	4b24      	ldr	r3, [pc, #144]	@ (800369c <HAL_SD_MspInit+0xc4>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	4b20      	ldr	r3, [pc, #128]	@ (800369c <HAL_SD_MspInit+0xc4>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	4a1f      	ldr	r2, [pc, #124]	@ (800369c <HAL_SD_MspInit+0xc4>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	6313      	str	r3, [r2, #48]	@ 0x30
 8003626:	4b1d      	ldr	r3, [pc, #116]	@ (800369c <HAL_SD_MspInit+0xc4>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_SD_MspInit+0xc4>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	4a18      	ldr	r2, [pc, #96]	@ (800369c <HAL_SD_MspInit+0xc4>)
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	6313      	str	r3, [r2, #48]	@ 0x30
 8003642:	4b16      	ldr	r3, [pc, #88]	@ (800369c <HAL_SD_MspInit+0xc4>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800364e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003652:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365c:	2303      	movs	r3, #3
 800365e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003660:	230c      	movs	r3, #12
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4619      	mov	r1, r3
 800366a:	480d      	ldr	r0, [pc, #52]	@ (80036a0 <HAL_SD_MspInit+0xc8>)
 800366c:	f001 fe0a 	bl	8005284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003670:	2304      	movs	r3, #4
 8003672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367c:	2303      	movs	r3, #3
 800367e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003680:	230c      	movs	r3, #12
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	4619      	mov	r1, r3
 800368a:	4806      	ldr	r0, [pc, #24]	@ (80036a4 <HAL_SD_MspInit+0xcc>)
 800368c:	f001 fdfa 	bl	8005284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003690:	bf00      	nop
 8003692:	3728      	adds	r7, #40	@ 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40023800 	.word	0x40023800
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020c00 	.word	0x40020c00

080036a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	@ 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a19      	ldr	r2, [pc, #100]	@ (800372c <HAL_SPI_MspInit+0x84>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d12b      	bne.n	8003722 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	4b18      	ldr	r3, [pc, #96]	@ (8003730 <HAL_SPI_MspInit+0x88>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d2:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <HAL_SPI_MspInit+0x88>)
 80036d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036da:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <HAL_SPI_MspInit+0x88>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b11      	ldr	r3, [pc, #68]	@ (8003730 <HAL_SPI_MspInit+0x88>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	4a10      	ldr	r2, [pc, #64]	@ (8003730 <HAL_SPI_MspInit+0x88>)
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <HAL_SPI_MspInit+0x88>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003702:	2338      	movs	r3, #56	@ 0x38
 8003704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003706:	2302      	movs	r3, #2
 8003708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800370e:	2303      	movs	r3, #3
 8003710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003712:	2305      	movs	r3, #5
 8003714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003716:	f107 0314 	add.w	r3, r7, #20
 800371a:	4619      	mov	r1, r3
 800371c:	4805      	ldr	r0, [pc, #20]	@ (8003734 <HAL_SPI_MspInit+0x8c>)
 800371e:	f001 fdb1 	bl	8005284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003722:	bf00      	nop
 8003724:	3728      	adds	r7, #40	@ 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40013000 	.word	0x40013000
 8003730:	40023800 	.word	0x40023800
 8003734:	40020400 	.word	0x40020400

08003738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1c      	ldr	r2, [pc, #112]	@ (80037b8 <HAL_TIM_Base_MspInit+0x80>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d116      	bne.n	8003778 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_TIM_Base_MspInit+0x84>)
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	4a1a      	ldr	r2, [pc, #104]	@ (80037bc <HAL_TIM_Base_MspInit+0x84>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6453      	str	r3, [r2, #68]	@ 0x44
 800375a:	4b18      	ldr	r3, [pc, #96]	@ (80037bc <HAL_TIM_Base_MspInit+0x84>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003766:	2200      	movs	r2, #0
 8003768:	2100      	movs	r1, #0
 800376a:	2019      	movs	r0, #25
 800376c:	f001 f849 	bl	8004802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003770:	2019      	movs	r0, #25
 8003772:	f001 f862 	bl	800483a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003776:	e01a      	b.n	80037ae <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM8)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <HAL_TIM_Base_MspInit+0x88>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d115      	bne.n	80037ae <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <HAL_TIM_Base_MspInit+0x84>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	4a0c      	ldr	r2, [pc, #48]	@ (80037bc <HAL_TIM_Base_MspInit+0x84>)
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	6453      	str	r3, [r2, #68]	@ 0x44
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_TIM_Base_MspInit+0x84>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	2100      	movs	r1, #0
 80037a2:	202c      	movs	r0, #44	@ 0x2c
 80037a4:	f001 f82d 	bl	8004802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80037a8:	202c      	movs	r0, #44	@ 0x2c
 80037aa:	f001 f846 	bl	800483a <HAL_NVIC_EnableIRQ>
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40010400 	.word	0x40010400

080037c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b090      	sub	sp, #64	@ 0x40
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a75      	ldr	r2, [pc, #468]	@ (80039b8 <HAL_UART_MspInit+0x1f4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d135      	bne.n	8003852 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ea:	4b74      	ldr	r3, [pc, #464]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	4a73      	ldr	r2, [pc, #460]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f6:	4b71      	ldr	r3, [pc, #452]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003800:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	627b      	str	r3, [r7, #36]	@ 0x24
 8003806:	4b6d      	ldr	r3, [pc, #436]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	4a6c      	ldr	r2, [pc, #432]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6313      	str	r3, [r2, #48]	@ 0x30
 8003812:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	627b      	str	r3, [r7, #36]	@ 0x24
 800381c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800381e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003824:	2302      	movs	r3, #2
 8003826:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003828:	2300      	movs	r3, #0
 800382a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382c:	2303      	movs	r3, #3
 800382e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003830:	2307      	movs	r3, #7
 8003832:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003834:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003838:	4619      	mov	r1, r3
 800383a:	4861      	ldr	r0, [pc, #388]	@ (80039c0 <HAL_UART_MspInit+0x1fc>)
 800383c:	f001 fd22 	bl	8005284 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003840:	2200      	movs	r2, #0
 8003842:	2100      	movs	r1, #0
 8003844:	2025      	movs	r0, #37	@ 0x25
 8003846:	f000 ffdc 	bl	8004802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800384a:	2025      	movs	r0, #37	@ 0x25
 800384c:	f000 fff5 	bl	800483a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003850:	e0ad      	b.n	80039ae <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a5b      	ldr	r2, [pc, #364]	@ (80039c4 <HAL_UART_MspInit+0x200>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d134      	bne.n	80038c6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 800385c:	2300      	movs	r3, #0
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	4b56      	ldr	r3, [pc, #344]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003864:	4a55      	ldr	r2, [pc, #340]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386a:	6413      	str	r3, [r2, #64]	@ 0x40
 800386c:	4b53      	ldr	r3, [pc, #332]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	4b4f      	ldr	r3, [pc, #316]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	4a4e      	ldr	r2, [pc, #312]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003882:	f043 0308 	orr.w	r3, r3, #8
 8003886:	6313      	str	r3, [r2, #48]	@ 0x30
 8003888:	4b4c      	ldr	r3, [pc, #304]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	61fb      	str	r3, [r7, #28]
 8003892:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = NEXTION_TX_Pin|NEXTION_RX_Pin;
 8003894:	2360      	movs	r3, #96	@ 0x60
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003898:	2302      	movs	r3, #2
 800389a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a0:	2303      	movs	r3, #3
 80038a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038a4:	2307      	movs	r3, #7
 80038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038ac:	4619      	mov	r1, r3
 80038ae:	4846      	ldr	r0, [pc, #280]	@ (80039c8 <HAL_UART_MspInit+0x204>)
 80038b0:	f001 fce8 	bl	8005284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80038b4:	2200      	movs	r2, #0
 80038b6:	2100      	movs	r1, #0
 80038b8:	2026      	movs	r0, #38	@ 0x26
 80038ba:	f000 ffa2 	bl	8004802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038be:	2026      	movs	r0, #38	@ 0x26
 80038c0:	f000 ffbb 	bl	800483a <HAL_NVIC_EnableIRQ>
}
 80038c4:	e073      	b.n	80039ae <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART3)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a40      	ldr	r2, [pc, #256]	@ (80039cc <HAL_UART_MspInit+0x208>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d135      	bne.n	800393c <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	4a38      	ldr	r2, [pc, #224]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80038da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038de:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e0:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	4b32      	ldr	r3, [pc, #200]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	4a31      	ldr	r2, [pc, #196]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80038f6:	f043 0302 	orr.w	r3, r3, #2
 80038fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80038fc:	4b2f      	ldr	r3, [pc, #188]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SD_CARD_TX_Pin|SD_CARD_RX_Pin;
 8003908:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800390c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	2302      	movs	r3, #2
 8003910:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003916:	2303      	movs	r3, #3
 8003918:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800391a:	2307      	movs	r3, #7
 800391c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800391e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003922:	4619      	mov	r1, r3
 8003924:	482a      	ldr	r0, [pc, #168]	@ (80039d0 <HAL_UART_MspInit+0x20c>)
 8003926:	f001 fcad 	bl	8005284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	2027      	movs	r0, #39	@ 0x27
 8003930:	f000 ff67 	bl	8004802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003934:	2027      	movs	r0, #39	@ 0x27
 8003936:	f000 ff80 	bl	800483a <HAL_NVIC_EnableIRQ>
}
 800393a:	e038      	b.n	80039ae <HAL_UART_MspInit+0x1ea>
  else if(huart->Instance==USART6)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a24      	ldr	r2, [pc, #144]	@ (80039d4 <HAL_UART_MspInit+0x210>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d133      	bne.n	80039ae <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	4b1c      	ldr	r3, [pc, #112]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	4a1b      	ldr	r2, [pc, #108]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003950:	f043 0320 	orr.w	r3, r3, #32
 8003954:	6453      	str	r3, [r2, #68]	@ 0x44
 8003956:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	6313      	str	r3, [r2, #48]	@ 0x30
 8003972:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <HAL_UART_MspInit+0x1f8>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	f003 0304 	and.w	r3, r3, #4
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800397e:	23c0      	movs	r3, #192	@ 0xc0
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003982:	2302      	movs	r3, #2
 8003984:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003986:	2300      	movs	r3, #0
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800398a:	2303      	movs	r3, #3
 800398c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800398e:	2308      	movs	r3, #8
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003992:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003996:	4619      	mov	r1, r3
 8003998:	480f      	ldr	r0, [pc, #60]	@ (80039d8 <HAL_UART_MspInit+0x214>)
 800399a:	f001 fc73 	bl	8005284 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	2047      	movs	r0, #71	@ 0x47
 80039a4:	f000 ff2d 	bl	8004802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80039a8:	2047      	movs	r0, #71	@ 0x47
 80039aa:	f000 ff46 	bl	800483a <HAL_NVIC_EnableIRQ>
}
 80039ae:	bf00      	nop
 80039b0:	3740      	adds	r7, #64	@ 0x40
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40011000 	.word	0x40011000
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	40004400 	.word	0x40004400
 80039c8:	40020c00 	.word	0x40020c00
 80039cc:	40004800 	.word	0x40004800
 80039d0:	40020400 	.word	0x40020400
 80039d4:	40011400 	.word	0x40011400
 80039d8:	40020800 	.word	0x40020800

080039dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039e0:	bf00      	nop
 80039e2:	e7fd      	b.n	80039e0 <NMI_Handler+0x4>

080039e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <HardFault_Handler+0x4>

080039ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f0:	bf00      	nop
 80039f2:	e7fd      	b.n	80039f0 <MemManage_Handler+0x4>

080039f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039f8:	bf00      	nop
 80039fa:	e7fd      	b.n	80039f8 <BusFault_Handler+0x4>

080039fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a00:	bf00      	nop
 8003a02:	e7fd      	b.n	8003a00 <UsageFault_Handler+0x4>

08003a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8003a34:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <SysTick_Handler+0x44>)
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <SysTick_Handler+0x18>
	   Timer1--;
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <SysTick_Handler+0x44>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <SysTick_Handler+0x44>)
 8003a46:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <SysTick_Handler+0x48>)
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <SysTick_Handler+0x2c>
	   Timer2--;
 8003a50:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <SysTick_Handler+0x48>)
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b07      	ldr	r3, [pc, #28]	@ (8003a78 <SysTick_Handler+0x48>)
 8003a5a:	801a      	strh	r2, [r3, #0]

	millis++;
 8003a5c:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <SysTick_Handler+0x4c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	4a06      	ldr	r2, [pc, #24]	@ (8003a7c <SysTick_Handler+0x4c>)
 8003a64:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a66:	f000 f9a5 	bl	8003db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003a6a:	f000 ff00 	bl	800486e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	2000021c 	.word	0x2000021c
 8003a78:	2000021e 	.word	0x2000021e
 8003a7c:	200028f4 	.word	0x200028f4

08003a80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a84:	4802      	ldr	r0, [pc, #8]	@ (8003a90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a86:	f004 f905 	bl	8007c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20002428 	.word	0x20002428

08003a94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a98:	4802      	ldr	r0, [pc, #8]	@ (8003aa4 <USART1_IRQHandler+0x10>)
 8003a9a:	f004 fde7 	bl	800866c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200024b8 	.word	0x200024b8

08003aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003aac:	4802      	ldr	r0, [pc, #8]	@ (8003ab8 <USART2_IRQHandler+0x10>)
 8003aae:	f004 fddd 	bl	800866c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20002500 	.word	0x20002500

08003abc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ac0:	4802      	ldr	r0, [pc, #8]	@ (8003acc <USART3_IRQHandler+0x10>)
 8003ac2:	f004 fdd3 	bl	800866c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20002548 	.word	0x20002548

08003ad0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003ad4:	4802      	ldr	r0, [pc, #8]	@ (8003ae0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003ad6:	f004 f8dd 	bl	8007c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20002470 	.word	0x20002470

08003ae4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ae8:	4802      	ldr	r0, [pc, #8]	@ (8003af4 <DMA2_Stream0_IRQHandler+0x10>)
 8003aea:	f001 f961 	bl	8004db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20002330 	.word	0x20002330

08003af8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <USART6_IRQHandler+0x10>)
 8003afe:	f004 fdb5 	bl	800866c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20002590 	.word	0x20002590

08003b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return 1;
 8003b10:	2301      	movs	r3, #1
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <_kill>:

int _kill(int pid, int sig)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b26:	f00a fcff 	bl	800e528 <__errno>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2216      	movs	r2, #22
 8003b2e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_exit>:

void _exit (int status)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b44:	f04f 31ff 	mov.w	r1, #4294967295
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ffe7 	bl	8003b1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b4e:	bf00      	nop
 8003b50:	e7fd      	b.n	8003b4e <_exit+0x12>

08003b52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e00a      	b.n	8003b7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b64:	f3af 8000 	nop.w
 8003b68:	4601      	mov	r1, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	60ba      	str	r2, [r7, #8]
 8003b70:	b2ca      	uxtb	r2, r1
 8003b72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3301      	adds	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	dbf0      	blt.n	8003b64 <_read+0x12>
  }

  return len;
 8003b82:	687b      	ldr	r3, [r7, #4]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e009      	b.n	8003bb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	60ba      	str	r2, [r7, #8]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd fee4 	bl	8001974 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	dbf1      	blt.n	8003b9e <_write+0x12>
  }
  return len;
 8003bba:	687b      	ldr	r3, [r7, #4]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <_close>:

int _close(int file)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bec:	605a      	str	r2, [r3, #4]
  return 0;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <_isatty>:

int _isatty(int file)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c04:	2301      	movs	r3, #1
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c34:	4a14      	ldr	r2, [pc, #80]	@ (8003c88 <_sbrk+0x5c>)
 8003c36:	4b15      	ldr	r3, [pc, #84]	@ (8003c8c <_sbrk+0x60>)
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c40:	4b13      	ldr	r3, [pc, #76]	@ (8003c90 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d102      	bne.n	8003c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c48:	4b11      	ldr	r3, [pc, #68]	@ (8003c90 <_sbrk+0x64>)
 8003c4a:	4a12      	ldr	r2, [pc, #72]	@ (8003c94 <_sbrk+0x68>)
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c4e:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <_sbrk+0x64>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d207      	bcs.n	8003c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c5c:	f00a fc64 	bl	800e528 <__errno>
 8003c60:	4603      	mov	r3, r0
 8003c62:	220c      	movs	r2, #12
 8003c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6a:	e009      	b.n	8003c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c6c:	4b08      	ldr	r3, [pc, #32]	@ (8003c90 <_sbrk+0x64>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c72:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <_sbrk+0x64>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4413      	add	r3, r2
 8003c7a:	4a05      	ldr	r2, [pc, #20]	@ (8003c90 <_sbrk+0x64>)
 8003c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20020000 	.word	0x20020000
 8003c8c:	00000400 	.word	0x00000400
 8003c90:	200028f8 	.word	0x200028f8
 8003c94:	20002c98 	.word	0x20002c98

08003c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <SystemInit+0x20>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca2:	4a05      	ldr	r2, [pc, #20]	@ (8003cb8 <SystemInit+0x20>)
 8003ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003cf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003cc0:	f7ff ffea 	bl	8003c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cc4:	480c      	ldr	r0, [pc, #48]	@ (8003cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003cc6:	490d      	ldr	r1, [pc, #52]	@ (8003cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ccc:	e002      	b.n	8003cd4 <LoopCopyDataInit>

08003cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cd2:	3304      	adds	r3, #4

08003cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cd8:	d3f9      	bcc.n	8003cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cda:	4a0a      	ldr	r2, [pc, #40]	@ (8003d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8003d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ce0:	e001      	b.n	8003ce6 <LoopFillZerobss>

08003ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ce4:	3204      	adds	r2, #4

08003ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ce8:	d3fb      	bcc.n	8003ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cea:	f00a fc23 	bl	800e534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cee:	f7fe fdb7 	bl	8002860 <main>
  bx  lr    
 8003cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cfc:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003d00:	08012758 	.word	0x08012758
  ldr r2, =_sbss
 8003d04:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003d08:	20002c98 	.word	0x20002c98

08003d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d0c:	e7fe      	b.n	8003d0c <ADC_IRQHandler>
	...

08003d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d14:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <HAL_Init+0x40>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <HAL_Init+0x40>)
 8003d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d20:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <HAL_Init+0x40>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0a      	ldr	r2, [pc, #40]	@ (8003d50 <HAL_Init+0x40>)
 8003d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d2c:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <HAL_Init+0x40>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a07      	ldr	r2, [pc, #28]	@ (8003d50 <HAL_Init+0x40>)
 8003d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d38:	2003      	movs	r0, #3
 8003d3a:	f000 fd57 	bl	80047ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f000 f808 	bl	8003d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d44:	f7ff fb2c 	bl	80033a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023c00 	.word	0x40023c00

08003d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d5c:	4b12      	ldr	r3, [pc, #72]	@ (8003da8 <HAL_InitTick+0x54>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <HAL_InitTick+0x58>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fd6f 	bl	8004856 <HAL_SYSTICK_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00e      	b.n	8003da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	d80a      	bhi.n	8003d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d90:	f000 fd37 	bl	8004802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d94:	4a06      	ldr	r2, [pc, #24]	@ (8003db0 <HAL_InitTick+0x5c>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000008 	.word	0x20000008
 8003dac:	20000010 	.word	0x20000010
 8003db0:	2000000c 	.word	0x2000000c

08003db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db8:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <HAL_IncTick+0x20>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <HAL_IncTick+0x24>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4a04      	ldr	r2, [pc, #16]	@ (8003dd8 <HAL_IncTick+0x24>)
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000010 	.word	0x20000010
 8003dd8:	200028fc 	.word	0x200028fc

08003ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return uwTick;
 8003de0:	4b03      	ldr	r3, [pc, #12]	@ (8003df0 <HAL_GetTick+0x14>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	200028fc 	.word	0x200028fc

08003df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dfc:	f7ff ffee 	bl	8003ddc <HAL_GetTick>
 8003e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d005      	beq.n	8003e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <HAL_Delay+0x44>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e1a:	bf00      	nop
 8003e1c:	f7ff ffde 	bl	8003ddc <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d8f7      	bhi.n	8003e1c <HAL_Delay+0x28>
  {
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000010 	.word	0x20000010

08003e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e033      	b.n	8003eba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fac8 	bl	80033f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d118      	bne.n	8003eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e82:	f023 0302 	bic.w	r3, r3, #2
 8003e86:	f043 0202 	orr.w	r2, r3, #2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa5e 	bl	8004350 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	f043 0201 	orr.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003eaa:	e001      	b.n	8003eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_ADC_Start_DMA+0x1e>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e0e9      	b.n	80040b6 <HAL_ADC_Start_DMA+0x1f2>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d018      	beq.n	8003f2a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f08:	4b6d      	ldr	r3, [pc, #436]	@ (80040c0 <HAL_ADC_Start_DMA+0x1fc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a6d      	ldr	r2, [pc, #436]	@ (80040c4 <HAL_ADC_Start_DMA+0x200>)
 8003f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f12:	0c9a      	lsrs	r2, r3, #18
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f1c:	e002      	b.n	8003f24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f9      	bne.n	8003f1e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f38:	d107      	bne.n	8003f4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f48:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f040 80a1 	bne.w	800409c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f98:	d106      	bne.n	8003fa8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f023 0206 	bic.w	r2, r3, #6
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fa6:	e002      	b.n	8003fae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fb6:	4b44      	ldr	r3, [pc, #272]	@ (80040c8 <HAL_ADC_Start_DMA+0x204>)
 8003fb8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbe:	4a43      	ldr	r2, [pc, #268]	@ (80040cc <HAL_ADC_Start_DMA+0x208>)
 8003fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc6:	4a42      	ldr	r2, [pc, #264]	@ (80040d0 <HAL_ADC_Start_DMA+0x20c>)
 8003fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	4a41      	ldr	r2, [pc, #260]	@ (80040d4 <HAL_ADC_Start_DMA+0x210>)
 8003fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003fda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003fea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689a      	ldr	r2, [r3, #8]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ffa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	334c      	adds	r3, #76	@ 0x4c
 8004006:	4619      	mov	r1, r3
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f000 fde6 	bl	8004bdc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2b00      	cmp	r3, #0
 800401a:	d12a      	bne.n	8004072 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2d      	ldr	r2, [pc, #180]	@ (80040d8 <HAL_ADC_Start_DMA+0x214>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d015      	beq.n	8004052 <HAL_ADC_Start_DMA+0x18e>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2c      	ldr	r2, [pc, #176]	@ (80040dc <HAL_ADC_Start_DMA+0x218>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d105      	bne.n	800403c <HAL_ADC_Start_DMA+0x178>
 8004030:	4b25      	ldr	r3, [pc, #148]	@ (80040c8 <HAL_ADC_Start_DMA+0x204>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a27      	ldr	r2, [pc, #156]	@ (80040e0 <HAL_ADC_Start_DMA+0x21c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d136      	bne.n	80040b4 <HAL_ADC_Start_DMA+0x1f0>
 8004046:	4b20      	ldr	r3, [pc, #128]	@ (80040c8 <HAL_ADC_Start_DMA+0x204>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b00      	cmp	r3, #0
 8004050:	d130      	bne.n	80040b4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d129      	bne.n	80040b4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	e020      	b.n	80040b4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <HAL_ADC_Start_DMA+0x214>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d11b      	bne.n	80040b4 <HAL_ADC_Start_DMA+0x1f0>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d114      	bne.n	80040b4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004098:	609a      	str	r2, [r3, #8]
 800409a:	e00b      	b.n	80040b4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	f043 0210 	orr.w	r2, r3, #16
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000008 	.word	0x20000008
 80040c4:	431bde83 	.word	0x431bde83
 80040c8:	40012300 	.word	0x40012300
 80040cc:	08004549 	.word	0x08004549
 80040d0:	08004603 	.word	0x08004603
 80040d4:	0800461f 	.word	0x0800461f
 80040d8:	40012000 	.word	0x40012000
 80040dc:	40012100 	.word	0x40012100
 80040e0:	40012200 	.word	0x40012200

080040e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x1c>
 8004124:	2302      	movs	r3, #2
 8004126:	e105      	b.n	8004334 <HAL_ADC_ConfigChannel+0x228>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b09      	cmp	r3, #9
 8004136:	d925      	bls.n	8004184 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68d9      	ldr	r1, [r3, #12]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	4613      	mov	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4413      	add	r3, r2
 800414c:	3b1e      	subs	r3, #30
 800414e:	2207      	movs	r2, #7
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	43da      	mvns	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	400a      	ands	r2, r1
 800415c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68d9      	ldr	r1, [r3, #12]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	4618      	mov	r0, r3
 8004170:	4603      	mov	r3, r0
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4403      	add	r3, r0
 8004176:	3b1e      	subs	r3, #30
 8004178:	409a      	lsls	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	60da      	str	r2, [r3, #12]
 8004182:	e022      	b.n	80041ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6919      	ldr	r1, [r3, #16]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	461a      	mov	r2, r3
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	2207      	movs	r2, #7
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43da      	mvns	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	400a      	ands	r2, r1
 80041a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6919      	ldr	r1, [r3, #16]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	4618      	mov	r0, r3
 80041ba:	4603      	mov	r3, r0
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4403      	add	r3, r0
 80041c0:	409a      	lsls	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d824      	bhi.n	800421c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	3b05      	subs	r3, #5
 80041e4:	221f      	movs	r2, #31
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	400a      	ands	r2, r1
 80041f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	4618      	mov	r0, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	3b05      	subs	r3, #5
 800420e:	fa00 f203 	lsl.w	r2, r0, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	635a      	str	r2, [r3, #52]	@ 0x34
 800421a:	e04c      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b0c      	cmp	r3, #12
 8004222:	d824      	bhi.n	800426e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	3b23      	subs	r3, #35	@ 0x23
 8004236:	221f      	movs	r2, #31
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43da      	mvns	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	400a      	ands	r2, r1
 8004244:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	4618      	mov	r0, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	3b23      	subs	r3, #35	@ 0x23
 8004260:	fa00 f203 	lsl.w	r2, r0, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
 800426c:	e023      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	3b41      	subs	r3, #65	@ 0x41
 8004280:	221f      	movs	r2, #31
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43da      	mvns	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	400a      	ands	r2, r1
 800428e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	4618      	mov	r0, r3
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	3b41      	subs	r3, #65	@ 0x41
 80042aa:	fa00 f203 	lsl.w	r2, r0, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042b6:	4b22      	ldr	r3, [pc, #136]	@ (8004340 <HAL_ADC_ConfigChannel+0x234>)
 80042b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a21      	ldr	r2, [pc, #132]	@ (8004344 <HAL_ADC_ConfigChannel+0x238>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d109      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x1cc>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b12      	cmp	r3, #18
 80042ca:	d105      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_ADC_ConfigChannel+0x238>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d123      	bne.n	800432a <HAL_ADC_ConfigChannel+0x21e>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d003      	beq.n	80042f2 <HAL_ADC_ConfigChannel+0x1e6>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b11      	cmp	r3, #17
 80042f0:	d11b      	bne.n	800432a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b10      	cmp	r3, #16
 8004304:	d111      	bne.n	800432a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004306:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <HAL_ADC_ConfigChannel+0x23c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a10      	ldr	r2, [pc, #64]	@ (800434c <HAL_ADC_ConfigChannel+0x240>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	0c9a      	lsrs	r2, r3, #18
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800431c:	e002      	b.n	8004324 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3b01      	subs	r3, #1
 8004322:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f9      	bne.n	800431e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40012300 	.word	0x40012300
 8004344:	40012000 	.word	0x40012000
 8004348:	20000008 	.word	0x20000008
 800434c:	431bde83 	.word	0x431bde83

08004350 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004358:	4b79      	ldr	r3, [pc, #484]	@ (8004540 <ADC_Init+0x1f0>)
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6859      	ldr	r1, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	021a      	lsls	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80043a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6899      	ldr	r1, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e2:	4a58      	ldr	r2, [pc, #352]	@ (8004544 <ADC_Init+0x1f4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80043f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6899      	ldr	r1, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	e00f      	b.n	800444e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800443c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800444c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0202 	bic.w	r2, r2, #2
 800445c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6899      	ldr	r1, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7e1b      	ldrb	r3, [r3, #24]
 8004468:	005a      	lsls	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800448a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800449a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a6:	3b01      	subs	r3, #1
 80044a8:	035a      	lsls	r2, r3, #13
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	e007      	b.n	80044c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80044d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	3b01      	subs	r3, #1
 80044e0:	051a      	lsls	r2, r3, #20
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80044f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004506:	025a      	lsls	r2, r3, #9
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6899      	ldr	r1, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	029a      	lsls	r2, r3, #10
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40012300 	.word	0x40012300
 8004544:	0f000001 	.word	0x0f000001

08004548 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800455e:	2b00      	cmp	r3, #0
 8004560:	d13c      	bne.n	80045dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004566:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d12b      	bne.n	80045d4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004580:	2b00      	cmp	r3, #0
 8004582:	d127      	bne.n	80045d4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800459c:	2b00      	cmp	r3, #0
 800459e:	d119      	bne.n	80045d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0220 	bic.w	r2, r2, #32
 80045ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045cc:	f043 0201 	orr.w	r2, r3, #1
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7fd fbeb 	bl	8001db0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045da:	e00e      	b.n	80045fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff fd85 	bl	80040f8 <HAL_ADC_ErrorCallback>
}
 80045ee:	e004      	b.n	80045fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	4798      	blx	r3
}
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff fd67 	bl	80040e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2240      	movs	r2, #64	@ 0x40
 8004630:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	f043 0204 	orr.w	r2, r3, #4
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fd5a 	bl	80040f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800465c:	4b0c      	ldr	r3, [pc, #48]	@ (8004690 <__NVIC_SetPriorityGrouping+0x44>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004668:	4013      	ands	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467e:	4a04      	ldr	r2, [pc, #16]	@ (8004690 <__NVIC_SetPriorityGrouping+0x44>)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	60d3      	str	r3, [r2, #12]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004698:	4b04      	ldr	r3, [pc, #16]	@ (80046ac <__NVIC_GetPriorityGrouping+0x18>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	f003 0307 	and.w	r3, r3, #7
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	db0b      	blt.n	80046da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	f003 021f 	and.w	r2, r3, #31
 80046c8:	4907      	ldr	r1, [pc, #28]	@ (80046e8 <__NVIC_EnableIRQ+0x38>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2001      	movs	r0, #1
 80046d2:	fa00 f202 	lsl.w	r2, r0, r2
 80046d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000e100 	.word	0xe000e100

080046ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	db0a      	blt.n	8004716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	b2da      	uxtb	r2, r3
 8004704:	490c      	ldr	r1, [pc, #48]	@ (8004738 <__NVIC_SetPriority+0x4c>)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	440b      	add	r3, r1
 8004710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004714:	e00a      	b.n	800472c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4908      	ldr	r1, [pc, #32]	@ (800473c <__NVIC_SetPriority+0x50>)
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	3b04      	subs	r3, #4
 8004724:	0112      	lsls	r2, r2, #4
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	440b      	add	r3, r1
 800472a:	761a      	strb	r2, [r3, #24]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	e000e100 	.word	0xe000e100
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	@ 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f1c3 0307 	rsb	r3, r3, #7
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf28      	it	cs
 800475e:	2304      	movcs	r3, #4
 8004760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3304      	adds	r3, #4
 8004766:	2b06      	cmp	r3, #6
 8004768:	d902      	bls.n	8004770 <NVIC_EncodePriority+0x30>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3b03      	subs	r3, #3
 800476e:	e000      	b.n	8004772 <NVIC_EncodePriority+0x32>
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43da      	mvns	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	401a      	ands	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004788:	f04f 31ff 	mov.w	r1, #4294967295
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	43d9      	mvns	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004798:	4313      	orrs	r3, r2
         );
}
 800479a:	4618      	mov	r0, r3
 800479c:	3724      	adds	r7, #36	@ 0x24
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047b8:	d301      	bcc.n	80047be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00f      	b.n	80047de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047be:	4a0a      	ldr	r2, [pc, #40]	@ (80047e8 <SysTick_Config+0x40>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047c6:	210f      	movs	r1, #15
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	f7ff ff8e 	bl	80046ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d0:	4b05      	ldr	r3, [pc, #20]	@ (80047e8 <SysTick_Config+0x40>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047d6:	4b04      	ldr	r3, [pc, #16]	@ (80047e8 <SysTick_Config+0x40>)
 80047d8:	2207      	movs	r2, #7
 80047da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	e000e010 	.word	0xe000e010

080047ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff29 	bl	800464c <__NVIC_SetPriorityGrouping>
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	4603      	mov	r3, r0
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004814:	f7ff ff3e 	bl	8004694 <__NVIC_GetPriorityGrouping>
 8004818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	6978      	ldr	r0, [r7, #20]
 8004820:	f7ff ff8e 	bl	8004740 <NVIC_EncodePriority>
 8004824:	4602      	mov	r2, r0
 8004826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff5d 	bl	80046ec <__NVIC_SetPriority>
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	4603      	mov	r3, r0
 8004842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff31 	bl	80046b0 <__NVIC_EnableIRQ>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff ffa2 	bl	80047a8 <SysTick_Config>
 8004864:	4603      	mov	r3, r0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004872:	f000 f802 	bl	800487a <HAL_SYSTICK_Callback>
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}

0800487a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800487e:	bf00      	nop
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e014      	b.n	80048c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	791b      	ldrb	r3, [r3, #4]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fe fe50 	bl	8003550 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e046      	b.n	800496e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	795b      	ldrb	r3, [r3, #5]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_DAC_Start+0x20>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e040      	b.n	800496e <HAL_DAC_Start+0xa2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2202      	movs	r2, #2
 80048f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6819      	ldr	r1, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2201      	movs	r2, #1
 8004906:	409a      	lsls	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10f      	bne.n	8004936 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004920:	2b3c      	cmp	r3, #60	@ 0x3c
 8004922:	d11d      	bne.n	8004960 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	605a      	str	r2, [r3, #4]
 8004934:	e014      	b.n	8004960 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	213c      	movs	r1, #60	@ 0x3c
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	429a      	cmp	r2, r3
 800494e:	d107      	bne.n	8004960 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0202 	orr.w	r2, r2, #2
 800495e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004988:	2300      	movs	r3, #0
 800498a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e015      	b.n	80049c2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d105      	bne.n	80049ae <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4413      	add	r3, r2
 80049a8:	3308      	adds	r3, #8
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	e004      	b.n	80049b8 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4413      	add	r3, r2
 80049b4:	3314      	adds	r3, #20
 80049b6:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	461a      	mov	r2, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b089      	sub	sp, #36	@ 0x24
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_DAC_ConfigChannel+0x1c>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e042      	b.n	8004a74 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	795b      	ldrb	r3, [r3, #5]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_DAC_ConfigChannel+0x2c>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e03c      	b.n	8004a74 <HAL_DAC_ConfigChannel+0xa6>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2202      	movs	r2, #2
 8004a04:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	4013      	ands	r3, r2
 8004a22:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f003 0310 	and.w	r3, r3, #16
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6819      	ldr	r1, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	22c0      	movs	r2, #192	@ 0xc0
 8004a58:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5c:	43da      	mvns	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	400a      	ands	r2, r1
 8004a64:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3724      	adds	r7, #36	@ 0x24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a8c:	f7ff f9a6 	bl	8003ddc <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e099      	b.n	8004bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004abc:	e00f      	b.n	8004ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004abe:	f7ff f98d 	bl	8003ddc <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	d908      	bls.n	8004ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e078      	b.n	8004bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e8      	bne.n	8004abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	4b38      	ldr	r3, [pc, #224]	@ (8004bd8 <HAL_DMA_Init+0x158>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b34:	2b04      	cmp	r3, #4
 8004b36:	d107      	bne.n	8004b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b40:	4313      	orrs	r3, r2
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0307 	bic.w	r3, r3, #7
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d117      	bne.n	8004ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00e      	beq.n	8004ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb01 	bl	800518c <DMA_CheckFifoParam>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2240      	movs	r2, #64	@ 0x40
 8004b94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e016      	b.n	8004bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fab8 	bl	8005120 <DMA_CalcBaseAndBitshift>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb8:	223f      	movs	r2, #63	@ 0x3f
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	f010803f 	.word	0xf010803f

08004bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_DMA_Start_IT+0x26>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e040      	b.n	8004c84 <HAL_DMA_Start_IT+0xa8>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d12f      	bne.n	8004c76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fa4a 	bl	80050c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c34:	223f      	movs	r2, #63	@ 0x3f
 8004c36:	409a      	lsls	r2, r3
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0216 	orr.w	r2, r2, #22
 8004c4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d007      	beq.n	8004c64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0208 	orr.w	r2, r2, #8
 8004c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e005      	b.n	8004c82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c98:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c9a:	f7ff f89f 	bl	8003ddc <HAL_GetTick>
 8004c9e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d008      	beq.n	8004cbe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2280      	movs	r2, #128	@ 0x80
 8004cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e052      	b.n	8004d64 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0216 	bic.w	r2, r2, #22
 8004ccc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cdc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <HAL_DMA_Abort+0x62>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0208 	bic.w	r2, r2, #8
 8004cfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d0e:	e013      	b.n	8004d38 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d10:	f7ff f864 	bl	8003ddc <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b05      	cmp	r3, #5
 8004d1c:	d90c      	bls.n	8004d38 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2203      	movs	r2, #3
 8004d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e015      	b.n	8004d64 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1e4      	bne.n	8004d10 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d4a:	223f      	movs	r2, #63	@ 0x3f
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d004      	beq.n	8004d8a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2280      	movs	r2, #128	@ 0x80
 8004d84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e00c      	b.n	8004da4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2205      	movs	r2, #5
 8004d8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0201 	bic.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8004ff8 <HAL_DMA_IRQHandler+0x248>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a8e      	ldr	r2, [pc, #568]	@ (8004ffc <HAL_DMA_IRQHandler+0x24c>)
 8004dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc6:	0a9b      	lsrs	r3, r3, #10
 8004dc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dda:	2208      	movs	r2, #8
 8004ddc:	409a      	lsls	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01a      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d013      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0204 	bic.w	r2, r2, #4
 8004e02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e08:	2208      	movs	r2, #8
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	2201      	movs	r2, #1
 8004e22:	409a      	lsls	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d012      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e3e:	2201      	movs	r2, #1
 8004e40:	409a      	lsls	r2, r3
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e4a:	f043 0202 	orr.w	r2, r3, #2
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e56:	2204      	movs	r2, #4
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d012      	beq.n	8004e88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e74:	2204      	movs	r2, #4
 8004e76:	409a      	lsls	r2, r3
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e80:	f043 0204 	orr.w	r2, r3, #4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e8c:	2210      	movs	r2, #16
 8004e8e:	409a      	lsls	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d043      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d03c      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eaa:	2210      	movs	r2, #16
 8004eac:	409a      	lsls	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d018      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d108      	bne.n	8004ee0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d024      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
 8004ede:	e01f      	b.n	8004f20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d01b      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
 8004ef0:	e016      	b.n	8004f20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0208 	bic.w	r2, r2, #8
 8004f0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f24:	2220      	movs	r2, #32
 8004f26:	409a      	lsls	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 808f 	beq.w	8005050 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8087 	beq.w	8005050 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	2220      	movs	r2, #32
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b05      	cmp	r3, #5
 8004f58:	d136      	bne.n	8004fc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 0216 	bic.w	r2, r2, #22
 8004f68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695a      	ldr	r2, [r3, #20]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d103      	bne.n	8004f8a <HAL_DMA_IRQHandler+0x1da>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0208 	bic.w	r2, r2, #8
 8004f98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9e:	223f      	movs	r2, #63	@ 0x3f
 8004fa0:	409a      	lsls	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d07e      	beq.n	80050bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4798      	blx	r3
        }
        return;
 8004fc6:	e079      	b.n	80050bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01d      	beq.n	8005012 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10d      	bne.n	8005000 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d031      	beq.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
 8004ff4:	e02c      	b.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
 8004ff6:	bf00      	nop
 8004ff8:	20000008 	.word	0x20000008
 8004ffc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	4798      	blx	r3
 8005010:	e01e      	b.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10f      	bne.n	8005040 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0210 	bic.w	r2, r2, #16
 800502e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005054:	2b00      	cmp	r3, #0
 8005056:	d032      	beq.n	80050be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d022      	beq.n	80050aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2205      	movs	r2, #5
 8005068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 0201 	bic.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	3301      	adds	r3, #1
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	429a      	cmp	r2, r3
 8005086:	d307      	bcc.n	8005098 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f2      	bne.n	800507c <HAL_DMA_IRQHandler+0x2cc>
 8005096:	e000      	b.n	800509a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005098:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	4798      	blx	r3
 80050ba:	e000      	b.n	80050be <HAL_DMA_IRQHandler+0x30e>
        return;
 80050bc:	bf00      	nop
    }
  }
}
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b40      	cmp	r3, #64	@ 0x40
 80050f0:	d108      	bne.n	8005104 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005102:	e007      	b.n	8005114 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	3b10      	subs	r3, #16
 8005130:	4a14      	ldr	r2, [pc, #80]	@ (8005184 <DMA_CalcBaseAndBitshift+0x64>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800513a:	4a13      	ldr	r2, [pc, #76]	@ (8005188 <DMA_CalcBaseAndBitshift+0x68>)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b03      	cmp	r3, #3
 800514c:	d909      	bls.n	8005162 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	1d1a      	adds	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005160:	e007      	b.n	8005172 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800516a:	f023 0303 	bic.w	r3, r3, #3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	aaaaaaab 	.word	0xaaaaaaab
 8005188:	08011ec0 	.word	0x08011ec0

0800518c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d11f      	bne.n	80051e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d856      	bhi.n	800525a <DMA_CheckFifoParam+0xce>
 80051ac:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <DMA_CheckFifoParam+0x28>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051d7 	.word	0x080051d7
 80051bc:	080051c5 	.word	0x080051c5
 80051c0:	0800525b 	.word	0x0800525b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d046      	beq.n	800525e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d4:	e043      	b.n	800525e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051de:	d140      	bne.n	8005262 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e4:	e03d      	b.n	8005262 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ee:	d121      	bne.n	8005234 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d837      	bhi.n	8005266 <DMA_CheckFifoParam+0xda>
 80051f6:	a201      	add	r2, pc, #4	@ (adr r2, 80051fc <DMA_CheckFifoParam+0x70>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	0800520d 	.word	0x0800520d
 8005200:	08005213 	.word	0x08005213
 8005204:	0800520d 	.word	0x0800520d
 8005208:	08005225 	.word	0x08005225
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e030      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005216:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d025      	beq.n	800526a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005222:	e022      	b.n	800526a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800522c:	d11f      	bne.n	800526e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005232:	e01c      	b.n	800526e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d903      	bls.n	8005242 <DMA_CheckFifoParam+0xb6>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d003      	beq.n	8005248 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005240:	e018      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	73fb      	strb	r3, [r7, #15]
      break;
 8005246:	e015      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00e      	beq.n	8005272 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      break;
 8005258:	e00b      	b.n	8005272 <DMA_CheckFifoParam+0xe6>
      break;
 800525a:	bf00      	nop
 800525c:	e00a      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 800525e:	bf00      	nop
 8005260:	e008      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005262:	bf00      	nop
 8005264:	e006      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005266:	bf00      	nop
 8005268:	e004      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 800526a:	bf00      	nop
 800526c:	e002      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;   
 800526e:	bf00      	nop
 8005270:	e000      	b.n	8005274 <DMA_CheckFifoParam+0xe8>
      break;
 8005272:	bf00      	nop
    }
  } 
  
  return status; 
 8005274:	7bfb      	ldrb	r3, [r7, #15]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop

08005284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	@ 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
 800529e:	e16b      	b.n	8005578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052a0:	2201      	movs	r2, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4013      	ands	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	f040 815a 	bne.w	8005572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d005      	beq.n	80052d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d130      	bne.n	8005338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	2203      	movs	r2, #3
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800530c:	2201      	movs	r2, #1
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	43db      	mvns	r3, r3
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4013      	ands	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f003 0201 	and.w	r2, r3, #1
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4313      	orrs	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b03      	cmp	r3, #3
 8005342:	d017      	beq.n	8005374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2203      	movs	r2, #3
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4313      	orrs	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d123      	bne.n	80053c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	08da      	lsrs	r2, r3, #3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	3208      	adds	r2, #8
 8005388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	220f      	movs	r2, #15
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	43db      	mvns	r3, r3
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	4013      	ands	r3, r2
 80053a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	69ba      	ldr	r2, [r7, #24]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	08da      	lsrs	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3208      	adds	r2, #8
 80053c2:	69b9      	ldr	r1, [r7, #24]
 80053c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	2203      	movs	r2, #3
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f003 0203 	and.w	r2, r3, #3
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80b4 	beq.w	8005572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	4b60      	ldr	r3, [pc, #384]	@ (8005590 <HAL_GPIO_Init+0x30c>)
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	4a5f      	ldr	r2, [pc, #380]	@ (8005590 <HAL_GPIO_Init+0x30c>)
 8005414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005418:	6453      	str	r3, [r2, #68]	@ 0x44
 800541a:	4b5d      	ldr	r3, [pc, #372]	@ (8005590 <HAL_GPIO_Init+0x30c>)
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005426:	4a5b      	ldr	r2, [pc, #364]	@ (8005594 <HAL_GPIO_Init+0x310>)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	3302      	adds	r3, #2
 800542e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	220f      	movs	r2, #15
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43db      	mvns	r3, r3
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	4013      	ands	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a52      	ldr	r2, [pc, #328]	@ (8005598 <HAL_GPIO_Init+0x314>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d02b      	beq.n	80054aa <HAL_GPIO_Init+0x226>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a51      	ldr	r2, [pc, #324]	@ (800559c <HAL_GPIO_Init+0x318>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d025      	beq.n	80054a6 <HAL_GPIO_Init+0x222>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a50      	ldr	r2, [pc, #320]	@ (80055a0 <HAL_GPIO_Init+0x31c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d01f      	beq.n	80054a2 <HAL_GPIO_Init+0x21e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a4f      	ldr	r2, [pc, #316]	@ (80055a4 <HAL_GPIO_Init+0x320>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d019      	beq.n	800549e <HAL_GPIO_Init+0x21a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a4e      	ldr	r2, [pc, #312]	@ (80055a8 <HAL_GPIO_Init+0x324>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <HAL_GPIO_Init+0x216>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a4d      	ldr	r2, [pc, #308]	@ (80055ac <HAL_GPIO_Init+0x328>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00d      	beq.n	8005496 <HAL_GPIO_Init+0x212>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a4c      	ldr	r2, [pc, #304]	@ (80055b0 <HAL_GPIO_Init+0x32c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <HAL_GPIO_Init+0x20e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a4b      	ldr	r2, [pc, #300]	@ (80055b4 <HAL_GPIO_Init+0x330>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d101      	bne.n	800548e <HAL_GPIO_Init+0x20a>
 800548a:	2307      	movs	r3, #7
 800548c:	e00e      	b.n	80054ac <HAL_GPIO_Init+0x228>
 800548e:	2308      	movs	r3, #8
 8005490:	e00c      	b.n	80054ac <HAL_GPIO_Init+0x228>
 8005492:	2306      	movs	r3, #6
 8005494:	e00a      	b.n	80054ac <HAL_GPIO_Init+0x228>
 8005496:	2305      	movs	r3, #5
 8005498:	e008      	b.n	80054ac <HAL_GPIO_Init+0x228>
 800549a:	2304      	movs	r3, #4
 800549c:	e006      	b.n	80054ac <HAL_GPIO_Init+0x228>
 800549e:	2303      	movs	r3, #3
 80054a0:	e004      	b.n	80054ac <HAL_GPIO_Init+0x228>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e002      	b.n	80054ac <HAL_GPIO_Init+0x228>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <HAL_GPIO_Init+0x228>
 80054aa:	2300      	movs	r3, #0
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	f002 0203 	and.w	r2, r2, #3
 80054b2:	0092      	lsls	r2, r2, #2
 80054b4:	4093      	lsls	r3, r2
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054bc:	4935      	ldr	r1, [pc, #212]	@ (8005594 <HAL_GPIO_Init+0x310>)
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	3302      	adds	r3, #2
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ca:	4b3b      	ldr	r3, [pc, #236]	@ (80055b8 <HAL_GPIO_Init+0x334>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	4013      	ands	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054ee:	4a32      	ldr	r2, [pc, #200]	@ (80055b8 <HAL_GPIO_Init+0x334>)
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054f4:	4b30      	ldr	r3, [pc, #192]	@ (80055b8 <HAL_GPIO_Init+0x334>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4013      	ands	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005518:	4a27      	ldr	r2, [pc, #156]	@ (80055b8 <HAL_GPIO_Init+0x334>)
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800551e:	4b26      	ldr	r3, [pc, #152]	@ (80055b8 <HAL_GPIO_Init+0x334>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	43db      	mvns	r3, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4013      	ands	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005542:	4a1d      	ldr	r2, [pc, #116]	@ (80055b8 <HAL_GPIO_Init+0x334>)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005548:	4b1b      	ldr	r3, [pc, #108]	@ (80055b8 <HAL_GPIO_Init+0x334>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	43db      	mvns	r3, r3
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800556c:	4a12      	ldr	r2, [pc, #72]	@ (80055b8 <HAL_GPIO_Init+0x334>)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2b0f      	cmp	r3, #15
 800557c:	f67f ae90 	bls.w	80052a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	3724      	adds	r7, #36	@ 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40023800 	.word	0x40023800
 8005594:	40013800 	.word	0x40013800
 8005598:	40020000 	.word	0x40020000
 800559c:	40020400 	.word	0x40020400
 80055a0:	40020800 	.word	0x40020800
 80055a4:	40020c00 	.word	0x40020c00
 80055a8:	40021000 	.word	0x40021000
 80055ac:	40021400 	.word	0x40021400
 80055b0:	40021800 	.word	0x40021800
 80055b4:	40021c00 	.word	0x40021c00
 80055b8:	40013c00 	.word	0x40013c00

080055bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	807b      	strh	r3, [r7, #2]
 80055c8:	4613      	mov	r3, r2
 80055ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055cc:	787b      	ldrb	r3, [r7, #1]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055d2:	887a      	ldrh	r2, [r7, #2]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055d8:	e003      	b.n	80055e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055da:	887b      	ldrh	r3, [r7, #2]
 80055dc:	041a      	lsls	r2, r3, #16
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	619a      	str	r2, [r3, #24]
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e267      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d075      	beq.n	80056fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800560e:	4b88      	ldr	r3, [pc, #544]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b04      	cmp	r3, #4
 8005618:	d00c      	beq.n	8005634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561a:	4b85      	ldr	r3, [pc, #532]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005622:	2b08      	cmp	r3, #8
 8005624:	d112      	bne.n	800564c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005626:	4b82      	ldr	r3, [pc, #520]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005632:	d10b      	bne.n	800564c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005634:	4b7e      	ldr	r3, [pc, #504]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05b      	beq.n	80056f8 <HAL_RCC_OscConfig+0x108>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d157      	bne.n	80056f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e242      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d106      	bne.n	8005664 <HAL_RCC_OscConfig+0x74>
 8005656:	4b76      	ldr	r3, [pc, #472]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a75      	ldr	r2, [pc, #468]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e01d      	b.n	80056a0 <HAL_RCC_OscConfig+0xb0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x98>
 800566e:	4b70      	ldr	r3, [pc, #448]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6f      	ldr	r2, [pc, #444]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b6d      	ldr	r3, [pc, #436]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a6c      	ldr	r2, [pc, #432]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0xb0>
 8005688:	4b69      	ldr	r3, [pc, #420]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a68      	ldr	r2, [pc, #416]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800568e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b66      	ldr	r3, [pc, #408]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a65      	ldr	r2, [pc, #404]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800569a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800569e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fe fb98 	bl	8003ddc <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fe fb94 	bl	8003ddc <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	@ 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e207      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0xc0>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fe fb84 	bl	8003ddc <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fe fb80 	bl	8003ddc <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e1f3      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ea:	4b51      	ldr	r3, [pc, #324]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0xe8>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d063      	beq.n	80057ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005706:	4b4a      	ldr	r3, [pc, #296]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005712:	4b47      	ldr	r3, [pc, #284]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800571a:	2b08      	cmp	r3, #8
 800571c:	d11c      	bne.n	8005758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800571e:	4b44      	ldr	r3, [pc, #272]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d116      	bne.n	8005758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	4b41      	ldr	r3, [pc, #260]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_RCC_OscConfig+0x152>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e1c7      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b3b      	ldr	r3, [pc, #236]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4937      	ldr	r1, [pc, #220]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005756:	e03a      	b.n	80057ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005760:	4b34      	ldr	r3, [pc, #208]	@ (8005834 <HAL_RCC_OscConfig+0x244>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005766:	f7fe fb39 	bl	8003ddc <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800576e:	f7fe fb35 	bl	8003ddc <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e1a8      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005780:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578c:	4b28      	ldr	r3, [pc, #160]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4925      	ldr	r1, [pc, #148]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]
 80057a0:	e015      	b.n	80057ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a2:	4b24      	ldr	r3, [pc, #144]	@ (8005834 <HAL_RCC_OscConfig+0x244>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fe fb18 	bl	8003ddc <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057b0:	f7fe fb14 	bl	8003ddc <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e187      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d036      	beq.n	8005848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e2:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <HAL_RCC_OscConfig+0x248>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fe faf8 	bl	8003ddc <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fe faf4 	bl	8003ddc <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e167      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005802:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x200>
 800580e:	e01b      	b.n	8005848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005810:	4b09      	ldr	r3, [pc, #36]	@ (8005838 <HAL_RCC_OscConfig+0x248>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005816:	f7fe fae1 	bl	8003ddc <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800581c:	e00e      	b.n	800583c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581e:	f7fe fadd 	bl	8003ddc <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d907      	bls.n	800583c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e150      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
 8005830:	40023800 	.word	0x40023800
 8005834:	42470000 	.word	0x42470000
 8005838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800583c:	4b88      	ldr	r3, [pc, #544]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800583e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1ea      	bne.n	800581e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8097 	beq.w	8005984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585a:	4b81      	ldr	r3, [pc, #516]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005866:	2300      	movs	r3, #0
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	4b7d      	ldr	r3, [pc, #500]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005874:	6413      	str	r3, [r2, #64]	@ 0x40
 8005876:	4b7a      	ldr	r3, [pc, #488]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005882:	2301      	movs	r3, #1
 8005884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005886:	4b77      	ldr	r3, [pc, #476]	@ (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d118      	bne.n	80058c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005892:	4b74      	ldr	r3, [pc, #464]	@ (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a73      	ldr	r2, [pc, #460]	@ (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800589c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589e:	f7fe fa9d 	bl	8003ddc <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a6:	f7fe fa99 	bl	8003ddc <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e10c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <HAL_RCC_OscConfig+0x474>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d106      	bne.n	80058da <HAL_RCC_OscConfig+0x2ea>
 80058cc:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d0:	4a63      	ldr	r2, [pc, #396]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d8:	e01c      	b.n	8005914 <HAL_RCC_OscConfig+0x324>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d10c      	bne.n	80058fc <HAL_RCC_OscConfig+0x30c>
 80058e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80058ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80058fa:	e00b      	b.n	8005914 <HAL_RCC_OscConfig+0x324>
 80058fc:	4b58      	ldr	r3, [pc, #352]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005900:	4a57      	ldr	r2, [pc, #348]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	@ 0x70
 8005908:	4b55      	ldr	r3, [pc, #340]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	4a54      	ldr	r2, [pc, #336]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800590e:	f023 0304 	bic.w	r3, r3, #4
 8005912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d015      	beq.n	8005948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fe fa5e 	bl	8003ddc <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005922:	e00a      	b.n	800593a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fe fa5a 	bl	8003ddc <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e0cb      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593a:	4b49      	ldr	r3, [pc, #292]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ee      	beq.n	8005924 <HAL_RCC_OscConfig+0x334>
 8005946:	e014      	b.n	8005972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005948:	f7fe fa48 	bl	8003ddc <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800594e:	e00a      	b.n	8005966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005950:	f7fe fa44 	bl	8003ddc <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e0b5      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005966:	4b3e      	ldr	r3, [pc, #248]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1ee      	bne.n	8005950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d105      	bne.n	8005984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005978:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	4a38      	ldr	r2, [pc, #224]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800597e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005982:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80a1 	beq.w	8005ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800598e:	4b34      	ldr	r3, [pc, #208]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
 8005996:	2b08      	cmp	r3, #8
 8005998:	d05c      	beq.n	8005a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d141      	bne.n	8005a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a2:	4b31      	ldr	r3, [pc, #196]	@ (8005a68 <HAL_RCC_OscConfig+0x478>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fe fa18 	bl	8003ddc <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fe fa14 	bl	8003ddc <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e087      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c2:	4b27      	ldr	r3, [pc, #156]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	3b01      	subs	r3, #1
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	491b      	ldr	r1, [pc, #108]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <HAL_RCC_OscConfig+0x478>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fe f9ed 	bl	8003ddc <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fe f9e9 	bl	8003ddc <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e05c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a18:	4b11      	ldr	r3, [pc, #68]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <HAL_RCC_OscConfig+0x416>
 8005a24:	e054      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_RCC_OscConfig+0x478>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fe f9d6 	bl	8003ddc <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fe f9d2 	bl	8003ddc <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e045      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x444>
 8005a52:	e03d      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e038      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40007000 	.word	0x40007000
 8005a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005adc <HAL_RCC_OscConfig+0x4ec>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d028      	beq.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d121      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d11a      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d111      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d107      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800

08005ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0cc      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b68      	ldr	r3, [pc, #416]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d90c      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b65      	ldr	r3, [pc, #404]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b63      	ldr	r3, [pc, #396]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0b8      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d020      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b34:	4b59      	ldr	r3, [pc, #356]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4a58      	ldr	r2, [pc, #352]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b4c:	4b53      	ldr	r3, [pc, #332]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a52      	ldr	r2, [pc, #328]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b58:	4b50      	ldr	r3, [pc, #320]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	494d      	ldr	r1, [pc, #308]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d044      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7e:	4b47      	ldr	r3, [pc, #284]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d119      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d003      	beq.n	8005b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e06f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b3b      	ldr	r3, [pc, #236]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e067      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bbe:	4b37      	ldr	r3, [pc, #220]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4934      	ldr	r1, [pc, #208]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd0:	f7fe f904 	bl	8003ddc <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd6:	e00a      	b.n	8005bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd8:	f7fe f900 	bl	8003ddc <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e04f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	4b2b      	ldr	r3, [pc, #172]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 020c 	and.w	r2, r3, #12
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1eb      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c00:	4b25      	ldr	r3, [pc, #148]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20c      	bcs.n	8005c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b22      	ldr	r3, [pc, #136]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c16:	4b20      	ldr	r3, [pc, #128]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e032      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c34:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4916      	ldr	r1, [pc, #88]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c52:	4b12      	ldr	r3, [pc, #72]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	490e      	ldr	r1, [pc, #56]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c66:	f000 f821 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	490a      	ldr	r1, [pc, #40]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c78:	5ccb      	ldrb	r3, [r1, r3]
 8005c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7e:	4a09      	ldr	r2, [pc, #36]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c82:	4b09      	ldr	r3, [pc, #36]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe f864 	bl	8003d54 <HAL_InitTick>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40023c00 	.word	0x40023c00
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	08011ea8 	.word	0x08011ea8
 8005ca4:	20000008 	.word	0x20000008
 8005ca8:	2000000c 	.word	0x2000000c

08005cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb0:	b094      	sub	sp, #80	@ 0x50
 8005cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb8:	2300      	movs	r3, #0
 8005cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc4:	4b79      	ldr	r3, [pc, #484]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 030c 	and.w	r3, r3, #12
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d00d      	beq.n	8005cec <HAL_RCC_GetSysClockFreq+0x40>
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	f200 80e1 	bhi.w	8005e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cde:	e0db      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ce0:	4b73      	ldr	r3, [pc, #460]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005ce4:	e0db      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ce6:	4b73      	ldr	r3, [pc, #460]	@ (8005eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cea:	e0d8      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cec:	4b6f      	ldr	r3, [pc, #444]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d063      	beq.n	8005dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d02:	4b6a      	ldr	r3, [pc, #424]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	2200      	movs	r2, #0
 8005d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d16:	2300      	movs	r3, #0
 8005d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	0159      	lsls	r1, r3, #5
 8005d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d30:	0150      	lsls	r0, r2, #5
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4621      	mov	r1, r4
 8005d38:	1a51      	subs	r1, r2, r1
 8005d3a:	6139      	str	r1, [r7, #16]
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d50:	4659      	mov	r1, fp
 8005d52:	018b      	lsls	r3, r1, #6
 8005d54:	4651      	mov	r1, sl
 8005d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d5a:	4651      	mov	r1, sl
 8005d5c:	018a      	lsls	r2, r1, #6
 8005d5e:	4651      	mov	r1, sl
 8005d60:	ebb2 0801 	subs.w	r8, r2, r1
 8005d64:	4659      	mov	r1, fp
 8005d66:	eb63 0901 	sbc.w	r9, r3, r1
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d7e:	4690      	mov	r8, r2
 8005d80:	4699      	mov	r9, r3
 8005d82:	4623      	mov	r3, r4
 8005d84:	eb18 0303 	adds.w	r3, r8, r3
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	eb49 0303 	adc.w	r3, r9, r3
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d9e:	4629      	mov	r1, r5
 8005da0:	024b      	lsls	r3, r1, #9
 8005da2:	4621      	mov	r1, r4
 8005da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005da8:	4621      	mov	r1, r4
 8005daa:	024a      	lsls	r2, r1, #9
 8005dac:	4610      	mov	r0, r2
 8005dae:	4619      	mov	r1, r3
 8005db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005db2:	2200      	movs	r2, #0
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dbc:	f7fa ff64 	bl	8000c88 <__aeabi_uldivmod>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc8:	e058      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dca:	4b38      	ldr	r3, [pc, #224]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	099b      	lsrs	r3, r3, #6
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dda:	623b      	str	r3, [r7, #32]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	f04f 0000 	mov.w	r0, #0
 8005dec:	f04f 0100 	mov.w	r1, #0
 8005df0:	0159      	lsls	r1, r3, #5
 8005df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df6:	0150      	lsls	r0, r2, #5
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e02:	4649      	mov	r1, r9
 8005e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e20:	eb63 050b 	sbc.w	r5, r3, fp
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	00eb      	lsls	r3, r5, #3
 8005e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e32:	00e2      	lsls	r2, r4, #3
 8005e34:	4614      	mov	r4, r2
 8005e36:	461d      	mov	r5, r3
 8005e38:	4643      	mov	r3, r8
 8005e3a:	18e3      	adds	r3, r4, r3
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	464b      	mov	r3, r9
 8005e40:	eb45 0303 	adc.w	r3, r5, r3
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e52:	4629      	mov	r1, r5
 8005e54:	028b      	lsls	r3, r1, #10
 8005e56:	4621      	mov	r1, r4
 8005e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	028a      	lsls	r2, r1, #10
 8005e60:	4610      	mov	r0, r2
 8005e62:	4619      	mov	r1, r3
 8005e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e66:	2200      	movs	r2, #0
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	61fa      	str	r2, [r7, #28]
 8005e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e70:	f7fa ff0a 	bl	8000c88 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4613      	mov	r3, r2
 8005e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	3301      	adds	r3, #1
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e96:	e002      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e98:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3750      	adds	r7, #80	@ 0x50
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	00f42400 	.word	0x00f42400
 8005eb4:	007a1200 	.word	0x007a1200

08005eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20000008 	.word	0x20000008

08005ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ed4:	f7ff fff0 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0a9b      	lsrs	r3, r3, #10
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4903      	ldr	r1, [pc, #12]	@ (8005ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	08011eb8 	.word	0x08011eb8

08005ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005efc:	f7ff ffdc 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005f00:	4602      	mov	r2, r0
 8005f02:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	0b5b      	lsrs	r3, r3, #13
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	4903      	ldr	r1, [pc, #12]	@ (8005f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f0e:	5ccb      	ldrb	r3, [r1, r3]
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	08011eb8 	.word	0x08011eb8

08005f20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e022      	b.n	8005f78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d105      	bne.n	8005f4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fd fb47 	bl	80035d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2203      	movs	r2, #3
 8005f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f814 	bl	8005f80 <HAL_SD_InitCard>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e00a      	b.n	8005f78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f80:	b5b0      	push	{r4, r5, r7, lr}
 8005f82:	b08e      	sub	sp, #56	@ 0x38
 8005f84:	af04      	add	r7, sp, #16
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005f90:	2300      	movs	r3, #0
 8005f92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005f94:	2300      	movs	r3, #0
 8005f96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005f9c:	2376      	movs	r3, #118	@ 0x76
 8005f9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681d      	ldr	r5, [r3, #0]
 8005fa4:	466c      	mov	r4, sp
 8005fa6:	f107 0314 	add.w	r3, r7, #20
 8005faa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005fb2:	f107 0308 	add.w	r3, r7, #8
 8005fb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f003 faad 	bl	8009518 <SDIO_Init>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e04f      	b.n	8006070 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005fd0:	4b29      	ldr	r3, [pc, #164]	@ (8006078 <HAL_SD_InitCard+0xf8>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f003 fae5 	bl	80095aa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005fe0:	4b25      	ldr	r3, [pc, #148]	@ (8006078 <HAL_SD_InitCard+0xf8>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005fe6:	2002      	movs	r0, #2
 8005fe8:	f7fd ff04 	bl	8003df4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 ff13 	bl	8006e18 <SD_PowerON>
 8005ff2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	431a      	orrs	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e02e      	b.n	8006070 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fe32 	bl	8006c7c <SD_InitCard>
 8006018:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e01b      	b.n	8006070 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006040:	4618      	mov	r0, r3
 8006042:	f003 fb44 	bl	80096ce <SDMMC_CmdBlockLength>
 8006046:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00f      	beq.n	800606e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a0a      	ldr	r2, [pc, #40]	@ (800607c <HAL_SD_InitCard+0xfc>)
 8006054:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	431a      	orrs	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3728      	adds	r7, #40	@ 0x28
 8006074:	46bd      	mov	sp, r7
 8006076:	bdb0      	pop	{r4, r5, r7, pc}
 8006078:	422580a0 	.word	0x422580a0
 800607c:	004005ff 	.word	0x004005ff

08006080 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b092      	sub	sp, #72	@ 0x48
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800608e:	f7fd fea5 	bl	8003ddc <HAL_GetTick>
 8006092:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e1c5      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	f040 81b8 	bne.w	8006430 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	441a      	add	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d907      	bls.n	80060e4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e1ac      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2203      	movs	r2, #3
 80060e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2200      	movs	r2, #0
 80060f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d002      	beq.n	8006102 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80060fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fe:	025b      	lsls	r3, r3, #9
 8006100:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006102:	f04f 33ff 	mov.w	r3, #4294967295
 8006106:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	025b      	lsls	r3, r3, #9
 800610c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800610e:	2390      	movs	r3, #144	@ 0x90
 8006110:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006112:	2302      	movs	r3, #2
 8006114:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006116:	2300      	movs	r3, #0
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800611a:	2301      	movs	r3, #1
 800611c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f107 0214 	add.w	r2, r7, #20
 8006126:	4611      	mov	r1, r2
 8006128:	4618      	mov	r0, r3
 800612a:	f003 faa4 	bl	8009676 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d90a      	bls.n	800614a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2202      	movs	r2, #2
 8006138:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006140:	4618      	mov	r0, r3
 8006142:	f003 fb08 	bl	8009756 <SDMMC_CmdReadMultiBlock>
 8006146:	6478      	str	r0, [r7, #68]	@ 0x44
 8006148:	e009      	b.n	800615e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006156:	4618      	mov	r0, r3
 8006158:	f003 fadb 	bl	8009712 <SDMMC_CmdReadSingleBlock>
 800615c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800615e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006160:	2b00      	cmp	r3, #0
 8006162:	d012      	beq.n	800618a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a7e      	ldr	r2, [pc, #504]	@ (8006364 <HAL_SD_ReadBlocks+0x2e4>)
 800616a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006172:	431a      	orrs	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e159      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800618e:	e061      	b.n	8006254 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006196:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d03c      	beq.n	8006218 <HAL_SD_ReadBlocks+0x198>
 800619e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d039      	beq.n	8006218 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80061a4:	2300      	movs	r3, #0
 80061a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80061a8:	e033      	b.n	8006212 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f003 f9dd 	bl	800956e <SDIO_ReadFIFO>
 80061b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80061b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c0:	3301      	adds	r3, #1
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80061c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c6:	3b01      	subs	r3, #1
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	0a1b      	lsrs	r3, r3, #8
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d6:	3301      	adds	r3, #1
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80061da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061dc:	3b01      	subs	r3, #1
 80061de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	0c1b      	lsrs	r3, r3, #16
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80061ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ec:	3301      	adds	r3, #1
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80061f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f2:	3b01      	subs	r3, #1
 80061f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	0e1b      	lsrs	r3, r3, #24
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	3301      	adds	r3, #1
 8006204:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006208:	3b01      	subs	r3, #1
 800620a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800620c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800620e:	3301      	adds	r3, #1
 8006210:	643b      	str	r3, [r7, #64]	@ 0x40
 8006212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006214:	2b07      	cmp	r3, #7
 8006216:	d9c8      	bls.n	80061aa <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006218:	f7fd fde0 	bl	8003ddc <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006224:	429a      	cmp	r2, r3
 8006226:	d902      	bls.n	800622e <HAL_SD_ReadBlocks+0x1ae>
 8006228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800622a:	2b00      	cmp	r3, #0
 800622c:	d112      	bne.n	8006254 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a4c      	ldr	r2, [pc, #304]	@ (8006364 <HAL_SD_ReadBlocks+0x2e4>)
 8006234:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e0f4      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800625a:	f240 332a 	movw	r3, #810	@ 0x32a
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d095      	beq.n	8006190 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800626a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d022      	beq.n	80062b8 <HAL_SD_ReadBlocks+0x238>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d91f      	bls.n	80062b8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627c:	2b03      	cmp	r3, #3
 800627e:	d01b      	beq.n	80062b8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f003 facd 	bl	8009824 <SDMMC_CmdStopTransfer>
 800628a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800628c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628e:	2b00      	cmp	r3, #0
 8006290:	d012      	beq.n	80062b8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a33      	ldr	r2, [pc, #204]	@ (8006364 <HAL_SD_ReadBlocks+0x2e4>)
 8006298:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800629e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062a0:	431a      	orrs	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e0c2      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_SD_ReadBlocks+0x254>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d012      	beq.n	80062fa <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a22      	ldr	r2, [pc, #136]	@ (8006364 <HAL_SD_ReadBlocks+0x2e4>)
 80062da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	f043 0208 	orr.w	r2, r3, #8
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e0a1      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d012      	beq.n	800632e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a15      	ldr	r2, [pc, #84]	@ (8006364 <HAL_SD_ReadBlocks+0x2e4>)
 800630e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006314:	f043 0202 	orr.w	r2, r3, #2
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e087      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d064      	beq.n	8006406 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a08      	ldr	r2, [pc, #32]	@ (8006364 <HAL_SD_ReadBlocks+0x2e4>)
 8006342:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006348:	f043 0220 	orr.w	r2, r3, #32
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e06d      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
 8006362:	bf00      	nop
 8006364:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4618      	mov	r0, r3
 800636e:	f003 f8fe 	bl	800956e <SDIO_ReadFIFO>
 8006372:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	b2da      	uxtb	r2, r3
 8006378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800637c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637e:	3301      	adds	r3, #1
 8006380:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006384:	3b01      	subs	r3, #1
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	b2da      	uxtb	r2, r3
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006394:	3301      	adds	r3, #1
 8006396:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639a:	3b01      	subs	r3, #1
 800639c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800639e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a0:	0c1b      	lsrs	r3, r3, #16
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80063a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063aa:	3301      	adds	r3, #1
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80063ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b0:	3b01      	subs	r3, #1
 80063b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80063b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b6:	0e1b      	lsrs	r3, r3, #24
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	3301      	adds	r3, #1
 80063c2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80063c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c6:	3b01      	subs	r3, #1
 80063c8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80063ca:	f7fd fd07 	bl	8003ddc <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d902      	bls.n	80063e0 <HAL_SD_ReadBlocks+0x360>
 80063da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d112      	bne.n	8006406 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <HAL_SD_ReadBlocks+0x3c8>)
 80063e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e01b      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <HAL_SD_ReadBlocks+0x39a>
 8006414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1a6      	bne.n	8006368 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006422:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e006      	b.n	800643e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006434:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
  }
}
 800643e:	4618      	mov	r0, r3
 8006440:	3748      	adds	r7, #72	@ 0x48
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	004005ff 	.word	0x004005ff

0800644c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b092      	sub	sp, #72	@ 0x48
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	607a      	str	r2, [r7, #4]
 8006458:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800645a:	f7fd fcbf 	bl	8003ddc <HAL_GetTick>
 800645e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d107      	bne.n	800647e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006472:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e16d      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b01      	cmp	r3, #1
 8006488:	f040 8160 	bne.w	800674c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006492:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	441a      	add	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800649c:	429a      	cmp	r2, r3
 800649e:	d907      	bls.n	80064b0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e154      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2203      	movs	r2, #3
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2200      	movs	r2, #0
 80064be:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d002      	beq.n	80064ce <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	025b      	lsls	r3, r3, #9
 80064cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064ce:	f04f 33ff 	mov.w	r3, #4294967295
 80064d2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	025b      	lsls	r3, r3, #9
 80064d8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80064da:	2390      	movs	r3, #144	@ 0x90
 80064dc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80064e6:	2301      	movs	r3, #1
 80064e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f107 0218 	add.w	r2, r7, #24
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f003 f8be 	bl	8009676 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d90a      	bls.n	8006516 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800650c:	4618      	mov	r0, r3
 800650e:	f003 f966 	bl	80097de <SDMMC_CmdWriteMultiBlock>
 8006512:	6478      	str	r0, [r7, #68]	@ 0x44
 8006514:	e009      	b.n	800652a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2210      	movs	r2, #16
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006522:	4618      	mov	r0, r3
 8006524:	f003 f939 	bl	800979a <SDMMC_CmdWriteSingleBlock>
 8006528:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800652a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800652c:	2b00      	cmp	r3, #0
 800652e:	d012      	beq.n	8006556 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a8b      	ldr	r2, [pc, #556]	@ (8006764 <HAL_SD_WriteBlocks+0x318>)
 8006536:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800653c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800653e:	431a      	orrs	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e101      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800655a:	e065      	b.n	8006628 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d040      	beq.n	80065ec <HAL_SD_WriteBlocks+0x1a0>
 800656a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656c:	2b00      	cmp	r3, #0
 800656e:	d03d      	beq.n	80065ec <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8006570:	2300      	movs	r3, #0
 8006572:	643b      	str	r3, [r7, #64]	@ 0x40
 8006574:	e037      	b.n	80065e6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800657c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657e:	3301      	adds	r3, #1
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006584:	3b01      	subs	r3, #1
 8006586:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	021a      	lsls	r2, r3, #8
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006596:	3301      	adds	r3, #1
 8006598:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800659a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659c:	3b01      	subs	r3, #1
 800659e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80065a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	041a      	lsls	r2, r3, #16
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80065ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ae:	3301      	adds	r3, #1
 80065b0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b4:	3b01      	subs	r3, #1
 80065b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80065b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	061a      	lsls	r2, r3, #24
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80065c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c6:	3301      	adds	r3, #1
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065cc:	3b01      	subs	r3, #1
 80065ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f107 0214 	add.w	r2, r7, #20
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f002 ffd4 	bl	8009588 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80065e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e2:	3301      	adds	r3, #1
 80065e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80065e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e8:	2b07      	cmp	r3, #7
 80065ea:	d9c4      	bls.n	8006576 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80065ec:	f7fd fbf6 	bl	8003ddc <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d902      	bls.n	8006602 <HAL_SD_WriteBlocks+0x1b6>
 80065fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d112      	bne.n	8006628 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a57      	ldr	r2, [pc, #348]	@ (8006764 <HAL_SD_WriteBlocks+0x318>)
 8006608:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800660e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006610:	431a      	orrs	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e098      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800662e:	f240 331a 	movw	r3, #794	@ 0x31a
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d091      	beq.n	800655c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800663e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d022      	beq.n	800668c <HAL_SD_WriteBlocks+0x240>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d91f      	bls.n	800668c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006650:	2b03      	cmp	r3, #3
 8006652:	d01b      	beq.n	800668c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f003 f8e3 	bl	8009824 <SDMMC_CmdStopTransfer>
 800665e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006662:	2b00      	cmp	r3, #0
 8006664:	d012      	beq.n	800668c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a3e      	ldr	r2, [pc, #248]	@ (8006764 <HAL_SD_WriteBlocks+0x318>)
 800666c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006674:	431a      	orrs	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e066      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <HAL_SD_WriteBlocks+0x25c>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d012      	beq.n	80066ce <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006764 <HAL_SD_WriteBlocks+0x318>)
 80066ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b4:	f043 0208 	orr.w	r2, r3, #8
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e045      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d012      	beq.n	8006702 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a20      	ldr	r2, [pc, #128]	@ (8006764 <HAL_SD_WriteBlocks+0x318>)
 80066e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e8:	f043 0202 	orr.w	r2, r3, #2
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e02b      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006708:	f003 0310 	and.w	r3, r3, #16
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a13      	ldr	r2, [pc, #76]	@ (8006764 <HAL_SD_WriteBlocks+0x318>)
 8006716:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	f043 0210 	orr.w	r2, r3, #16
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e011      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800673e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e006      	b.n	800675a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	3748      	adds	r7, #72	@ 0x48
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	004005ff 	.word	0x004005ff

08006768 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006776:	0f9b      	lsrs	r3, r3, #30
 8006778:	b2da      	uxtb	r2, r3
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006782:	0e9b      	lsrs	r3, r3, #26
 8006784:	b2db      	uxtb	r3, r3
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	b2da      	uxtb	r2, r3
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006794:	0e1b      	lsrs	r3, r3, #24
 8006796:	b2db      	uxtb	r3, r3
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	b2da      	uxtb	r2, r3
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a6:	0c1b      	lsrs	r3, r3, #16
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067c8:	0d1b      	lsrs	r3, r3, #20
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067d4:	0c1b      	lsrs	r3, r3, #16
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 030f 	and.w	r3, r3, #15
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067e6:	0bdb      	lsrs	r3, r3, #15
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067f8:	0b9b      	lsrs	r3, r3, #14
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800680a:	0b5b      	lsrs	r3, r3, #13
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	b2da      	uxtb	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800681c:	0b1b      	lsrs	r3, r3, #12
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f003 0301 	and.w	r3, r3, #1
 8006824:	b2da      	uxtb	r2, r3
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2200      	movs	r2, #0
 800682e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006834:	2b00      	cmp	r3, #0
 8006836:	d163      	bne.n	8006900 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800683c:	009a      	lsls	r2, r3, #2
 800683e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006842:	4013      	ands	r3, r2
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006848:	0f92      	lsrs	r2, r2, #30
 800684a:	431a      	orrs	r2, r3
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006854:	0edb      	lsrs	r3, r3, #27
 8006856:	b2db      	uxtb	r3, r3
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	b2da      	uxtb	r2, r3
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006866:	0e1b      	lsrs	r3, r3, #24
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	b2da      	uxtb	r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006878:	0d5b      	lsrs	r3, r3, #21
 800687a:	b2db      	uxtb	r3, r3
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	b2da      	uxtb	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800688a:	0c9b      	lsrs	r3, r3, #18
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0307 	and.w	r3, r3, #7
 8006892:	b2da      	uxtb	r2, r3
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800689c:	0bdb      	lsrs	r3, r3, #15
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	7e1b      	ldrb	r3, [r3, #24]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	3302      	adds	r3, #2
 80068c0:	2201      	movs	r2, #1
 80068c2:	fa02 f303 	lsl.w	r3, r2, r3
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80068ca:	fb03 f202 	mul.w	r2, r3, r2
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	7a1b      	ldrb	r3, [r3, #8]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	2201      	movs	r2, #1
 80068de:	409a      	lsls	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80068ec:	0a52      	lsrs	r2, r2, #9
 80068ee:	fb03 f202 	mul.w	r2, r3, r2
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80068fe:	e031      	b.n	8006964 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006904:	2b01      	cmp	r3, #1
 8006906:	d11d      	bne.n	8006944 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800690c:	041b      	lsls	r3, r3, #16
 800690e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	431a      	orrs	r2, r3
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	3301      	adds	r3, #1
 8006924:	029a      	lsls	r2, r3, #10
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006938:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	661a      	str	r2, [r3, #96]	@ 0x60
 8006942:	e00f      	b.n	8006964 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a58      	ldr	r2, [pc, #352]	@ (8006aac <HAL_SD_GetCardCSD+0x344>)
 800694a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006950:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e09d      	b.n	8006aa0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006968:	0b9b      	lsrs	r3, r3, #14
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	b2da      	uxtb	r2, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800697a:	09db      	lsrs	r3, r3, #7
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800698c:	b2db      	uxtb	r3, r3
 800698e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006992:	b2da      	uxtb	r2, r3
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699c:	0fdb      	lsrs	r3, r3, #31
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a8:	0f5b      	lsrs	r3, r3, #29
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	f003 0303 	and.w	r3, r3, #3
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ba:	0e9b      	lsrs	r3, r3, #26
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069cc:	0d9b      	lsrs	r3, r3, #22
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	f003 030f 	and.w	r3, r3, #15
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069de:	0d5b      	lsrs	r3, r3, #21
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069fa:	0c1b      	lsrs	r3, r3, #16
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a0e:	0bdb      	lsrs	r3, r3, #15
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a22:	0b9b      	lsrs	r3, r3, #14
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a36:	0b5b      	lsrs	r3, r3, #13
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	b2da      	uxtb	r2, r3
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a4a:	0b1b      	lsrs	r3, r3, #12
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a5e:	0a9b      	lsrs	r3, r3, #10
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	f003 0303 	and.w	r3, r3, #3
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a72:	0a1b      	lsrs	r3, r3, #8
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	004005ff 	.word	0x004005ff

08006ab0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b08:	b5b0      	push	{r4, r5, r7, lr}
 8006b0a:	b08e      	sub	sp, #56	@ 0x38
 8006b0c:	af04      	add	r7, sp, #16
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d02e      	beq.n	8006b86 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2e:	d106      	bne.n	8006b3e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b3c:	e029      	b.n	8006b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b44:	d10a      	bne.n	8006b5c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa1c 	bl	8006f84 <SD_WideBus_Enable>
 8006b4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b5a:	e01a      	b.n	8006b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa59 	bl	800701a <SD_WideBus_Disable>
 8006b68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b76:	e00c      	b.n	8006b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b84:	e005      	b.n	8006b92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00b      	beq.n	8006bb2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a26      	ldr	r2, [pc, #152]	@ (8006c38 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006ba0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006bb0:	e01f      	b.n	8006bf2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681d      	ldr	r5, [r3, #0]
 8006bd8:	466c      	mov	r4, sp
 8006bda:	f107 0314 	add.w	r3, r7, #20
 8006bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bec:	4628      	mov	r0, r5
 8006bee:	f002 fc93 	bl	8009518 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f002 fd67 	bl	80096ce <SDMMC_CmdBlockLength>
 8006c00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00c      	beq.n	8006c22 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c38 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006c0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8006c2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3728      	adds	r7, #40	@ 0x28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bdb0      	pop	{r4, r5, r7, pc}
 8006c36:	bf00      	nop
 8006c38:	004005ff 	.word	0x004005ff

08006c3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006c44:	2300      	movs	r3, #0
 8006c46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c48:	f107 030c 	add.w	r3, r7, #12
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f970 	bl	8006f34 <SD_SendStatus>
 8006c54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	0a5b      	lsrs	r3, r3, #9
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006c72:	693b      	ldr	r3, [r7, #16]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c7c:	b5b0      	push	{r4, r5, r7, lr}
 8006c7e:	b094      	sub	sp, #80	@ 0x50
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006c84:	2301      	movs	r3, #1
 8006c86:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f002 fc9a 	bl	80095c6 <SDIO_GetPowerState>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c98:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006c9c:	e0b8      	b.n	8006e10 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d02f      	beq.n	8006d06 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f002 fec4 	bl	8009a38 <SDMMC_CmdSendCID>
 8006cb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <SD_InitCard+0x40>
    {
      return errorstate;
 8006cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cba:	e0a9      	b.n	8006e10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 fcc4 	bl	8009650 <SDIO_GetResponse>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2104      	movs	r1, #4
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f002 fcbb 	bl	8009650 <SDIO_GetResponse>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2108      	movs	r1, #8
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f002 fcb2 	bl	8009650 <SDIO_GetResponse>
 8006cec:	4602      	mov	r2, r0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	210c      	movs	r1, #12
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f002 fca9 	bl	8009650 <SDIO_GetResponse>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d00d      	beq.n	8006d2a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f107 020e 	add.w	r2, r7, #14
 8006d16:	4611      	mov	r1, r2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 feca 	bl	8009ab2 <SDMMC_CmdSetRelAdd>
 8006d1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <SD_InitCard+0xae>
    {
      return errorstate;
 8006d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d28:	e072      	b.n	8006e10 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d036      	beq.n	8006da0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d32:	89fb      	ldrh	r3, [r7, #14]
 8006d34:	461a      	mov	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d42:	041b      	lsls	r3, r3, #16
 8006d44:	4619      	mov	r1, r3
 8006d46:	4610      	mov	r0, r2
 8006d48:	f002 fe94 	bl	8009a74 <SDMMC_CmdSendCSD>
 8006d4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d56:	e05b      	b.n	8006e10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f002 fc76 	bl	8009650 <SDIO_GetResponse>
 8006d64:	4602      	mov	r2, r0
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2104      	movs	r1, #4
 8006d70:	4618      	mov	r0, r3
 8006d72:	f002 fc6d 	bl	8009650 <SDIO_GetResponse>
 8006d76:	4602      	mov	r2, r0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2108      	movs	r1, #8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f002 fc64 	bl	8009650 <SDIO_GetResponse>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	210c      	movs	r1, #12
 8006d94:	4618      	mov	r0, r3
 8006d96:	f002 fc5b 	bl	8009650 <SDIO_GetResponse>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2104      	movs	r1, #4
 8006da6:	4618      	mov	r0, r3
 8006da8:	f002 fc52 	bl	8009650 <SDIO_GetResponse>
 8006dac:	4603      	mov	r3, r0
 8006dae:	0d1a      	lsrs	r2, r3, #20
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006db4:	f107 0310 	add.w	r3, r7, #16
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff fcd4 	bl	8006768 <HAL_SD_GetCardCSD>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dc6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006dca:	e021      	b.n	8006e10 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6819      	ldr	r1, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	461c      	mov	r4, r3
 8006dda:	4615      	mov	r5, r2
 8006ddc:	4622      	mov	r2, r4
 8006dde:	462b      	mov	r3, r5
 8006de0:	4608      	mov	r0, r1
 8006de2:	f002 fd41 	bl	8009868 <SDMMC_CmdSelDesel>
 8006de6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <SD_InitCard+0x176>
  {
    return errorstate;
 8006dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df0:	e00e      	b.n	8006e10 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681d      	ldr	r5, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	466c      	mov	r4, sp
 8006dfa:	f103 0210 	add.w	r2, r3, #16
 8006dfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e04:	3304      	adds	r3, #4
 8006e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f002 fb85 	bl	8009518 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3740      	adds	r7, #64	@ 0x40
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bdb0      	pop	{r4, r5, r7, pc}

08006e18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f002 fd3c 	bl	80098ae <SDMMC_CmdGoIdleState>
 8006e36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	e072      	b.n	8006f28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f002 fd4f 	bl	80098ea <SDMMC_CmdOperCond>
 8006e4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f002 fd25 	bl	80098ae <SDMMC_CmdGoIdleState>
 8006e64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	e05b      	b.n	8006f28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d137      	bne.n	8006eee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2100      	movs	r1, #0
 8006e84:	4618      	mov	r0, r3
 8006e86:	f002 fd4f 	bl	8009928 <SDMMC_CmdAppCommand>
 8006e8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d02d      	beq.n	8006eee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006e96:	e047      	b.n	8006f28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f002 fd42 	bl	8009928 <SDMMC_CmdAppCommand>
 8006ea4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <SD_PowerON+0x98>
    {
      return errorstate;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	e03b      	b.n	8006f28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	491e      	ldr	r1, [pc, #120]	@ (8006f30 <SD_PowerON+0x118>)
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f002 fd58 	bl	800996c <SDMMC_CmdAppOperCommand>
 8006ebc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ec4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006ec8:	e02e      	b.n	8006f28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f002 fbbd 	bl	8009650 <SDIO_GetResponse>
 8006ed6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	0fdb      	lsrs	r3, r3, #31
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <SD_PowerON+0xcc>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <SD_PowerON+0xce>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	613b      	str	r3, [r7, #16]

    count++;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d802      	bhi.n	8006efe <SD_PowerON+0xe6>
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0cc      	beq.n	8006e98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d902      	bls.n	8006f0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f0c:	e00c      	b.n	8006f28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8006f1e:	e002      	b.n	8006f26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	c1100000 	.word	0xc1100000

08006f34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d102      	bne.n	8006f4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006f44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f48:	e018      	b.n	8006f7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f52:	041b      	lsls	r3, r3, #16
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f002 fdcc 	bl	8009af4 <SDMMC_CmdSendStatus>
 8006f5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	e009      	b.n	8006f7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f002 fb6e 	bl	8009650 <SDIO_GetResponse>
 8006f74:	4602      	mov	r2, r0
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2100      	movs	r1, #0
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f002 fb58 	bl	8009650 <SDIO_GetResponse>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006faa:	d102      	bne.n	8006fb2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fb0:	e02f      	b.n	8007012 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fb2:	f107 030c 	add.w	r3, r7, #12
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f879 	bl	80070b0 <SD_FindSCR>
 8006fbe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	e023      	b.n	8007012 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01c      	beq.n	800700e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	4619      	mov	r1, r3
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	f002 fca1 	bl	8009928 <SDMMC_CmdAppCommand>
 8006fe6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	e00f      	b.n	8007012 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2102      	movs	r1, #2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f002 fcda 	bl	80099b2 <SDMMC_CmdBusWidth>
 8006ffe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	e003      	b.n	8007012 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800700a:	2300      	movs	r3, #0
 800700c:	e001      	b.n	8007012 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800700e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b086      	sub	sp, #24
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f002 fb0d 	bl	8009650 <SDIO_GetResponse>
 8007036:	4603      	mov	r3, r0
 8007038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800703c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007040:	d102      	bne.n	8007048 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007042:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007046:	e02f      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007048:	f107 030c 	add.w	r3, r7, #12
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f82e 	bl	80070b0 <SD_FindSCR>
 8007054:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e023      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01c      	beq.n	80070a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f002 fc56 	bl	8009928 <SDMMC_CmdAppCommand>
 800707c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	e00f      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f002 fc8f 	bl	80099b2 <SDMMC_CmdBusWidth>
 8007094:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	e003      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	e001      	b.n	80070a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b08f      	sub	sp, #60	@ 0x3c
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070ba:	f7fc fe8f 	bl	8003ddc <HAL_GetTick>
 80070be:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80070c4:	2300      	movs	r3, #0
 80070c6:	60bb      	str	r3, [r7, #8]
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2108      	movs	r1, #8
 80070d6:	4618      	mov	r0, r3
 80070d8:	f002 faf9 	bl	80096ce <SDMMC_CmdBlockLength>
 80070dc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	e0b9      	b.n	800725c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f002 fc17 	bl	8009928 <SDMMC_CmdAppCommand>
 80070fa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80070fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007104:	e0aa      	b.n	800725c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007106:	f04f 33ff 	mov.w	r3, #4294967295
 800710a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800710c:	2308      	movs	r3, #8
 800710e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007110:	2330      	movs	r3, #48	@ 0x30
 8007112:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007114:	2302      	movs	r3, #2
 8007116:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007118:	2300      	movs	r3, #0
 800711a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800711c:	2301      	movs	r3, #1
 800711e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f107 0210 	add.w	r2, r7, #16
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f002 faa3 	bl	8009676 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f002 fc5e 	bl	80099f6 <SDMMC_CmdSendSCR>
 800713a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d02a      	beq.n	8007198 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007144:	e08a      	b.n	800725c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800714c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00f      	beq.n	8007174 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6819      	ldr	r1, [r3, #0]
 8007158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	f107 0208 	add.w	r2, r7, #8
 8007160:	18d4      	adds	r4, r2, r3
 8007162:	4608      	mov	r0, r1
 8007164:	f002 fa03 	bl	800956e <SDIO_ReadFIFO>
 8007168:	4603      	mov	r3, r0
 800716a:	6023      	str	r3, [r4, #0]
      index++;
 800716c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716e:	3301      	adds	r3, #1
 8007170:	637b      	str	r3, [r7, #52]	@ 0x34
 8007172:	e006      	b.n	8007182 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800717a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d012      	beq.n	80071a8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8007182:	f7fc fe2b 	bl	8003ddc <HAL_GetTick>
 8007186:	4602      	mov	r2, r0
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007190:	d102      	bne.n	8007198 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007192:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007196:	e061      	b.n	800725c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800719e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0cf      	beq.n	8007146 <SD_FindSCR+0x96>
 80071a6:	e000      	b.n	80071aa <SD_FindSCR+0xfa>
      break;
 80071a8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071b0:	f003 0308 	and.w	r3, r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <SD_FindSCR+0x116>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2208      	movs	r2, #8
 80071cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071ce:	2308      	movs	r3, #8
 80071d0:	e044      	b.n	800725c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2202      	movs	r2, #2
 80071e6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80071e8:	2302      	movs	r3, #2
 80071ea:	e037      	b.n	800725c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2220      	movs	r2, #32
 8007200:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007202:	2320      	movs	r3, #32
 8007204:	e02a      	b.n	800725c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800720e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	061a      	lsls	r2, r3, #24
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800721c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007226:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	0e1b      	lsrs	r3, r3, #24
 800722c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800722e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007230:	601a      	str	r2, [r3, #0]
    scr++;
 8007232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007234:	3304      	adds	r3, #4
 8007236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	061a      	lsls	r2, r3, #24
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007244:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	0a1b      	lsrs	r3, r3, #8
 800724a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800724e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	0e1b      	lsrs	r3, r3, #24
 8007254:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007258:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	373c      	adds	r7, #60	@ 0x3c
 8007260:	46bd      	mov	sp, r7
 8007262:	bd90      	pop	{r4, r7, pc}

08007264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e07b      	b.n	800736e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	2b00      	cmp	r3, #0
 800727c:	d108      	bne.n	8007290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007286:	d009      	beq.n	800729c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	61da      	str	r2, [r3, #28]
 800728e:	e005      	b.n	800729c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d106      	bne.n	80072bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fc f9f6 	bl	80036a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	699b      	ldr	r3, [r3, #24]
 8007308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007316:	431a      	orrs	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007320:	ea42 0103 	orr.w	r1, r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007328:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	f003 0104 	and.w	r1, r3, #4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007342:	f003 0210 	and.w	r2, r3, #16
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800735c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b088      	sub	sp, #32
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	603b      	str	r3, [r7, #0]
 8007382:	4613      	mov	r3, r2
 8007384:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_SPI_Transmit+0x22>
 8007394:	2302      	movs	r3, #2
 8007396:	e12d      	b.n	80075f4 <HAL_SPI_Transmit+0x27e>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073a0:	f7fc fd1c 	bl	8003ddc <HAL_GetTick>
 80073a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073a6:	88fb      	ldrh	r3, [r7, #6]
 80073a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d002      	beq.n	80073bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073b6:	2302      	movs	r3, #2
 80073b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073ba:	e116      	b.n	80075ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <HAL_SPI_Transmit+0x52>
 80073c2:	88fb      	ldrh	r3, [r7, #6]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073cc:	e10d      	b.n	80075ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2203      	movs	r2, #3
 80073d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007414:	d10f      	bne.n	8007436 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007424:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007434:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007440:	2b40      	cmp	r3, #64	@ 0x40
 8007442:	d007      	beq.n	8007454 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007452:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800745c:	d14f      	bne.n	80074fe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_SPI_Transmit+0xf6>
 8007466:	8afb      	ldrh	r3, [r7, #22]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d142      	bne.n	80074f2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	881a      	ldrh	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747c:	1c9a      	adds	r2, r3, #2
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007490:	e02f      	b.n	80074f2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b02      	cmp	r3, #2
 800749e:	d112      	bne.n	80074c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a4:	881a      	ldrh	r2, [r3, #0]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b0:	1c9a      	adds	r2, r3, #2
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	b29a      	uxth	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80074c4:	e015      	b.n	80074f2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074c6:	f7fc fc89 	bl	8003ddc <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d803      	bhi.n	80074de <HAL_SPI_Transmit+0x168>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074dc:	d102      	bne.n	80074e4 <HAL_SPI_Transmit+0x16e>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d106      	bne.n	80074f2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80074f0:	e07b      	b.n	80075ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1ca      	bne.n	8007492 <HAL_SPI_Transmit+0x11c>
 80074fc:	e050      	b.n	80075a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <HAL_SPI_Transmit+0x196>
 8007506:	8afb      	ldrh	r3, [r7, #22]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d144      	bne.n	8007596 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	330c      	adds	r3, #12
 8007516:	7812      	ldrb	r2, [r2, #0]
 8007518:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007528:	b29b      	uxth	r3, r3
 800752a:	3b01      	subs	r3, #1
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007532:	e030      	b.n	8007596 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b02      	cmp	r3, #2
 8007540:	d113      	bne.n	800756a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	7812      	ldrb	r2, [r2, #0]
 800754e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007554:	1c5a      	adds	r2, r3, #1
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800755e:	b29b      	uxth	r3, r3
 8007560:	3b01      	subs	r3, #1
 8007562:	b29a      	uxth	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007568:	e015      	b.n	8007596 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800756a:	f7fc fc37 	bl	8003ddc <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d803      	bhi.n	8007582 <HAL_SPI_Transmit+0x20c>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007580:	d102      	bne.n	8007588 <HAL_SPI_Transmit+0x212>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007594:	e029      	b.n	80075ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1c9      	bne.n	8007534 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fa61 	bl	8007a6c <SPI_EndRxTxTransaction>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2220      	movs	r2, #32
 80075b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075be:	2300      	movs	r3, #0
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	613b      	str	r3, [r7, #16]
 80075d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	77fb      	strb	r3, [r7, #31]
 80075e0:	e003      	b.n	80075ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80075f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3720      	adds	r7, #32
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08c      	sub	sp, #48	@ 0x30
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800760a:	2301      	movs	r3, #1
 800760c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x26>
 800761e:	2302      	movs	r3, #2
 8007620:	e198      	b.n	8007954 <HAL_SPI_TransmitReceive+0x358>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800762a:	f7fc fbd7 	bl	8003ddc <HAL_GetTick>
 800762e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007640:	887b      	ldrh	r3, [r7, #2]
 8007642:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007644:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007648:	2b01      	cmp	r3, #1
 800764a:	d00f      	beq.n	800766c <HAL_SPI_TransmitReceive+0x70>
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007652:	d107      	bne.n	8007664 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d103      	bne.n	8007664 <HAL_SPI_TransmitReceive+0x68>
 800765c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007660:	2b04      	cmp	r3, #4
 8007662:	d003      	beq.n	800766c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007664:	2302      	movs	r3, #2
 8007666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800766a:	e16d      	b.n	8007948 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d005      	beq.n	800767e <HAL_SPI_TransmitReceive+0x82>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <HAL_SPI_TransmitReceive+0x82>
 8007678:	887b      	ldrh	r3, [r7, #2]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007684:	e160      	b.n	8007948 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b04      	cmp	r3, #4
 8007690:	d003      	beq.n	800769a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2205      	movs	r2, #5
 8007696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	887a      	ldrh	r2, [r7, #2]
 80076aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	887a      	ldrh	r2, [r7, #2]
 80076b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	887a      	ldrh	r2, [r7, #2]
 80076bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	887a      	ldrh	r2, [r7, #2]
 80076c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076da:	2b40      	cmp	r3, #64	@ 0x40
 80076dc:	d007      	beq.n	80076ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076f6:	d17c      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_SPI_TransmitReceive+0x10a>
 8007700:	8b7b      	ldrh	r3, [r7, #26]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d16a      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770a:	881a      	ldrh	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007716:	1c9a      	adds	r2, r3, #2
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800772a:	e057      	b.n	80077dc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	d11b      	bne.n	8007772 <HAL_SPI_TransmitReceive+0x176>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800773e:	b29b      	uxth	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d016      	beq.n	8007772 <HAL_SPI_TransmitReceive+0x176>
 8007744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007746:	2b01      	cmp	r3, #1
 8007748:	d113      	bne.n	8007772 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774e:	881a      	ldrh	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800775a:	1c9a      	adds	r2, r3, #2
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b01      	cmp	r3, #1
 800777e:	d119      	bne.n	80077b4 <HAL_SPI_TransmitReceive+0x1b8>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007784:	b29b      	uxth	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d014      	beq.n	80077b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007794:	b292      	uxth	r2, r2
 8007796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779c:	1c9a      	adds	r2, r3, #2
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077b0:	2301      	movs	r3, #1
 80077b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077b4:	f7fc fb12 	bl	8003ddc <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d80b      	bhi.n	80077dc <HAL_SPI_TransmitReceive+0x1e0>
 80077c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ca:	d007      	beq.n	80077dc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80077da:	e0b5      	b.n	8007948 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1a2      	bne.n	800772c <HAL_SPI_TransmitReceive+0x130>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d19d      	bne.n	800772c <HAL_SPI_TransmitReceive+0x130>
 80077f0:	e080      	b.n	80078f4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_SPI_TransmitReceive+0x204>
 80077fa:	8b7b      	ldrh	r3, [r7, #26]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d16f      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	7812      	ldrb	r2, [r2, #0]
 800780c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007826:	e05b      	b.n	80078e0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b02      	cmp	r3, #2
 8007834:	d11c      	bne.n	8007870 <HAL_SPI_TransmitReceive+0x274>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d017      	beq.n	8007870 <HAL_SPI_TransmitReceive+0x274>
 8007840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007842:	2b01      	cmp	r3, #1
 8007844:	d114      	bne.n	8007870 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	330c      	adds	r3, #12
 8007850:	7812      	ldrb	r2, [r2, #0]
 8007852:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b01      	cmp	r3, #1
 800787c:	d119      	bne.n	80078b2 <HAL_SPI_TransmitReceive+0x2b6>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d014      	beq.n	80078b2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007892:	b2d2      	uxtb	r2, r2
 8007894:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	3b01      	subs	r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078ae:	2301      	movs	r3, #1
 80078b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078b2:	f7fc fa93 	bl	8003ddc <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078be:	429a      	cmp	r2, r3
 80078c0:	d803      	bhi.n	80078ca <HAL_SPI_TransmitReceive+0x2ce>
 80078c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d102      	bne.n	80078d0 <HAL_SPI_TransmitReceive+0x2d4>
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d107      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80078de:	e033      	b.n	8007948 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d19e      	bne.n	8007828 <HAL_SPI_TransmitReceive+0x22c>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d199      	bne.n	8007828 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 f8b7 	bl	8007a6c <SPI_EndRxTxTransaction>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d006      	beq.n	8007912 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2220      	movs	r2, #32
 800790e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007910:	e01a      	b.n	8007948 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	617b      	str	r3, [r7, #20]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e003      	b.n	8007948 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007950:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007954:	4618      	mov	r0, r3
 8007956:	3730      	adds	r7, #48	@ 0x30
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	4613      	mov	r3, r2
 800796a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800796c:	f7fc fa36 	bl	8003ddc <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4413      	add	r3, r2
 800797a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800797c:	f7fc fa2e 	bl	8003ddc <HAL_GetTick>
 8007980:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007982:	4b39      	ldr	r3, [pc, #228]	@ (8007a68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	015b      	lsls	r3, r3, #5
 8007988:	0d1b      	lsrs	r3, r3, #20
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	fb02 f303 	mul.w	r3, r2, r3
 8007990:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007992:	e054      	b.n	8007a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d050      	beq.n	8007a3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800799c:	f7fc fa1e 	bl	8003ddc <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d902      	bls.n	80079b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d13d      	bne.n	8007a2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ca:	d111      	bne.n	80079f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079d4:	d004      	beq.n	80079e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079de:	d107      	bne.n	80079f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079f8:	d10f      	bne.n	8007a1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e017      	b.n	8007a5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	4013      	ands	r3, r2
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	bf0c      	ite	eq
 8007a4e:	2301      	moveq	r3, #1
 8007a50:	2300      	movne	r3, #0
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d19b      	bne.n	8007994 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3720      	adds	r7, #32
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000008 	.word	0x20000008

08007a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b088      	sub	sp, #32
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	2102      	movs	r1, #2
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f7ff ff6a 	bl	800795c <SPI_WaitFlagStateUntilTimeout>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d007      	beq.n	8007a9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a92:	f043 0220 	orr.w	r2, r3, #32
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e032      	b.n	8007b04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b0c <SPI_EndRxTxTransaction+0xa0>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8007b10 <SPI_EndRxTxTransaction+0xa4>)
 8007aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa8:	0d5b      	lsrs	r3, r3, #21
 8007aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007aae:	fb02 f303 	mul.w	r3, r2, r3
 8007ab2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007abc:	d112      	bne.n	8007ae4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2180      	movs	r1, #128	@ 0x80
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff ff47 	bl	800795c <SPI_WaitFlagStateUntilTimeout>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d016      	beq.n	8007b02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad8:	f043 0220 	orr.w	r2, r3, #32
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e00f      	b.n	8007b04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00a      	beq.n	8007b00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afa:	2b80      	cmp	r3, #128	@ 0x80
 8007afc:	d0f2      	beq.n	8007ae4 <SPI_EndRxTxTransaction+0x78>
 8007afe:	e000      	b.n	8007b02 <SPI_EndRxTxTransaction+0x96>
        break;
 8007b00:	bf00      	nop
  }

  return HAL_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000008 	.word	0x20000008
 8007b10:	165e9f81 	.word	0x165e9f81

08007b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e041      	b.n	8007baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fb fdfc 	bl	8003738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2202      	movs	r2, #2
 8007b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f000 fa7e 	bl	8008054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d001      	beq.n	8007bcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e04e      	b.n	8007c6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68da      	ldr	r2, [r3, #12]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0201 	orr.w	r2, r2, #1
 8007be2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a23      	ldr	r2, [pc, #140]	@ (8007c78 <HAL_TIM_Base_Start_IT+0xc4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d022      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x80>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf6:	d01d      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x80>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8007c7c <HAL_TIM_Base_Start_IT+0xc8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d018      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x80>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a1e      	ldr	r2, [pc, #120]	@ (8007c80 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d013      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x80>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a1c      	ldr	r2, [pc, #112]	@ (8007c84 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00e      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x80>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007c88 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d009      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x80>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a19      	ldr	r2, [pc, #100]	@ (8007c8c <HAL_TIM_Base_Start_IT+0xd8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d004      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x80>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a18      	ldr	r2, [pc, #96]	@ (8007c90 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d111      	bne.n	8007c58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b06      	cmp	r3, #6
 8007c44:	d010      	beq.n	8007c68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 0201 	orr.w	r2, r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c56:	e007      	b.n	8007c68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40010000 	.word	0x40010000
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40000800 	.word	0x40000800
 8007c84:	40000c00 	.word	0x40000c00
 8007c88:	40010400 	.word	0x40010400
 8007c8c:	40014000 	.word	0x40014000
 8007c90:	40001800 	.word	0x40001800

08007c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d020      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01b      	beq.n	8007cf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f06f 0202 	mvn.w	r2, #2
 8007cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f999 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007ce4:	e005      	b.n	8007cf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f98b 	bl	8008002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f99c 	bl	800802a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f003 0304 	and.w	r3, r3, #4
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d020      	beq.n	8007d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f003 0304 	and.w	r3, r3, #4
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d01b      	beq.n	8007d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0204 	mvn.w	r2, #4
 8007d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2202      	movs	r2, #2
 8007d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f973 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007d30:	e005      	b.n	8007d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f965 	bl	8008002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 f976 	bl	800802a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f003 0308 	and.w	r3, r3, #8
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d020      	beq.n	8007d90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01b      	beq.n	8007d90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0208 	mvn.w	r2, #8
 8007d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2204      	movs	r2, #4
 8007d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f94d 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007d7c:	e005      	b.n	8007d8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f93f 	bl	8008002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f950 	bl	800802a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f003 0310 	and.w	r3, r3, #16
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d020      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f003 0310 	and.w	r3, r3, #16
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01b      	beq.n	8007ddc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0210 	mvn.w	r2, #16
 8007dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2208      	movs	r2, #8
 8007db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f927 	bl	8008016 <HAL_TIM_IC_CaptureCallback>
 8007dc8:	e005      	b.n	8007dd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f919 	bl	8008002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f92a 	bl	800802a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00c      	beq.n	8007e00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d007      	beq.n	8007e00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f06f 0201 	mvn.w	r2, #1
 8007df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fb fa9a 	bl	8003334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00c      	beq.n	8007e24 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d007      	beq.n	8007e24 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fae4 	bl	80083ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00c      	beq.n	8007e48 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f8fb 	bl	800803e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	f003 0320 	and.w	r3, r3, #32
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00c      	beq.n	8007e6c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f003 0320 	and.w	r3, r3, #32
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f06f 0220 	mvn.w	r2, #32
 8007e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fab6 	bl	80083d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d101      	bne.n	8007e90 <HAL_TIM_ConfigClockSource+0x1c>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	e0b4      	b.n	8007ffa <HAL_TIM_ConfigClockSource+0x186>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec8:	d03e      	beq.n	8007f48 <HAL_TIM_ConfigClockSource+0xd4>
 8007eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ece:	f200 8087 	bhi.w	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed6:	f000 8086 	beq.w	8007fe6 <HAL_TIM_ConfigClockSource+0x172>
 8007eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ede:	d87f      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee0:	2b70      	cmp	r3, #112	@ 0x70
 8007ee2:	d01a      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0xa6>
 8007ee4:	2b70      	cmp	r3, #112	@ 0x70
 8007ee6:	d87b      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee8:	2b60      	cmp	r3, #96	@ 0x60
 8007eea:	d050      	beq.n	8007f8e <HAL_TIM_ConfigClockSource+0x11a>
 8007eec:	2b60      	cmp	r3, #96	@ 0x60
 8007eee:	d877      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef0:	2b50      	cmp	r3, #80	@ 0x50
 8007ef2:	d03c      	beq.n	8007f6e <HAL_TIM_ConfigClockSource+0xfa>
 8007ef4:	2b50      	cmp	r3, #80	@ 0x50
 8007ef6:	d873      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef8:	2b40      	cmp	r3, #64	@ 0x40
 8007efa:	d058      	beq.n	8007fae <HAL_TIM_ConfigClockSource+0x13a>
 8007efc:	2b40      	cmp	r3, #64	@ 0x40
 8007efe:	d86f      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f00:	2b30      	cmp	r3, #48	@ 0x30
 8007f02:	d064      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x15a>
 8007f04:	2b30      	cmp	r3, #48	@ 0x30
 8007f06:	d86b      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d060      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x15a>
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d867      	bhi.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d05c      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x15a>
 8007f14:	2b10      	cmp	r3, #16
 8007f16:	d05a      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0x15a>
 8007f18:	e062      	b.n	8007fe0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f2a:	f000 f9b9 	bl	80082a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	609a      	str	r2, [r3, #8]
      break;
 8007f46:	e04f      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f58:	f000 f9a2 	bl	80082a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689a      	ldr	r2, [r3, #8]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f6a:	609a      	str	r2, [r3, #8]
      break;
 8007f6c:	e03c      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f000 f916 	bl	80081ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2150      	movs	r1, #80	@ 0x50
 8007f86:	4618      	mov	r0, r3
 8007f88:	f000 f96f 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007f8c:	e02c      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f000 f935 	bl	800820a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2160      	movs	r1, #96	@ 0x60
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 f95f 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007fac:	e01c      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f000 f8f6 	bl	80081ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2140      	movs	r1, #64	@ 0x40
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f94f 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007fcc:	e00c      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f000 f946 	bl	800826a <TIM_ITRx_SetConfig>
      break;
 8007fde:	e003      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe4:	e000      	b.n	8007fe8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800800a:	bf00      	nop
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
	...

08008054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a46      	ldr	r2, [pc, #280]	@ (8008180 <TIM_Base_SetConfig+0x12c>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d013      	beq.n	8008094 <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008072:	d00f      	beq.n	8008094 <TIM_Base_SetConfig+0x40>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a43      	ldr	r2, [pc, #268]	@ (8008184 <TIM_Base_SetConfig+0x130>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d00b      	beq.n	8008094 <TIM_Base_SetConfig+0x40>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a42      	ldr	r2, [pc, #264]	@ (8008188 <TIM_Base_SetConfig+0x134>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d007      	beq.n	8008094 <TIM_Base_SetConfig+0x40>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a41      	ldr	r2, [pc, #260]	@ (800818c <TIM_Base_SetConfig+0x138>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d003      	beq.n	8008094 <TIM_Base_SetConfig+0x40>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a40      	ldr	r2, [pc, #256]	@ (8008190 <TIM_Base_SetConfig+0x13c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d108      	bne.n	80080a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800809a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a35      	ldr	r2, [pc, #212]	@ (8008180 <TIM_Base_SetConfig+0x12c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d02b      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b4:	d027      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a32      	ldr	r2, [pc, #200]	@ (8008184 <TIM_Base_SetConfig+0x130>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d023      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a31      	ldr	r2, [pc, #196]	@ (8008188 <TIM_Base_SetConfig+0x134>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01f      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a30      	ldr	r2, [pc, #192]	@ (800818c <TIM_Base_SetConfig+0x138>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d01b      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2f      	ldr	r2, [pc, #188]	@ (8008190 <TIM_Base_SetConfig+0x13c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d017      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2e      	ldr	r2, [pc, #184]	@ (8008194 <TIM_Base_SetConfig+0x140>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d013      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008198 <TIM_Base_SetConfig+0x144>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00f      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a2c      	ldr	r2, [pc, #176]	@ (800819c <TIM_Base_SetConfig+0x148>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d00b      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a2b      	ldr	r2, [pc, #172]	@ (80081a0 <TIM_Base_SetConfig+0x14c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d007      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a2a      	ldr	r2, [pc, #168]	@ (80081a4 <TIM_Base_SetConfig+0x150>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d003      	beq.n	8008106 <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a29      	ldr	r2, [pc, #164]	@ (80081a8 <TIM_Base_SetConfig+0x154>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d108      	bne.n	8008118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800810c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	689a      	ldr	r2, [r3, #8]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a10      	ldr	r2, [pc, #64]	@ (8008180 <TIM_Base_SetConfig+0x12c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d003      	beq.n	800814c <TIM_Base_SetConfig+0xf8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a12      	ldr	r2, [pc, #72]	@ (8008190 <TIM_Base_SetConfig+0x13c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d103      	bne.n	8008154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	691a      	ldr	r2, [r3, #16]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b01      	cmp	r3, #1
 8008164:	d105      	bne.n	8008172 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	611a      	str	r2, [r3, #16]
  }
}
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010000 	.word	0x40010000
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	40000c00 	.word	0x40000c00
 8008190:	40010400 	.word	0x40010400
 8008194:	40014000 	.word	0x40014000
 8008198:	40014400 	.word	0x40014400
 800819c:	40014800 	.word	0x40014800
 80081a0:	40001800 	.word	0x40001800
 80081a4:	40001c00 	.word	0x40001c00
 80081a8:	40002000 	.word	0x40002000

080081ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f023 0201 	bic.w	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f023 030a 	bic.w	r3, r3, #10
 80081e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	621a      	str	r2, [r3, #32]
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800820a:	b480      	push	{r7}
 800820c:	b087      	sub	sp, #28
 800820e:	af00      	add	r7, sp, #0
 8008210:	60f8      	str	r0, [r7, #12]
 8008212:	60b9      	str	r1, [r7, #8]
 8008214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	f023 0210 	bic.w	r2, r3, #16
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	031b      	lsls	r3, r3, #12
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008246:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4313      	orrs	r3, r2
 8008250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800826a:	b480      	push	{r7}
 800826c:	b085      	sub	sp, #20
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	f043 0307 	orr.w	r3, r3, #7
 800828c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	609a      	str	r2, [r3, #8]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	021a      	lsls	r2, r3, #8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	609a      	str	r2, [r3, #8]
}
 80082d4:	bf00      	nop
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d101      	bne.n	80082f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e05a      	b.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a21      	ldr	r2, [pc, #132]	@ (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d022      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008344:	d01d      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1d      	ldr	r2, [pc, #116]	@ (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d018      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a1b      	ldr	r2, [pc, #108]	@ (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1a      	ldr	r2, [pc, #104]	@ (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00e      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a18      	ldr	r2, [pc, #96]	@ (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d009      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a17      	ldr	r2, [pc, #92]	@ (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a15      	ldr	r2, [pc, #84]	@ (80083d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d10c      	bne.n	800839c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4313      	orrs	r3, r2
 8008392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40000400 	.word	0x40000400
 80083c4:	40000800 	.word	0x40000800
 80083c8:	40000c00 	.word	0x40000c00
 80083cc:	40010400 	.word	0x40010400
 80083d0:	40014000 	.word	0x40014000
 80083d4:	40001800 	.word	0x40001800

080083d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e042      	b.n	8008498 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7fb f9cc 	bl	80037c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2224      	movs	r2, #36	@ 0x24
 8008430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fdf3 	bl	8009030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08a      	sub	sp, #40	@ 0x28
 80084a4:	af02      	add	r7, sp, #8
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4613      	mov	r3, r2
 80084ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084b0:	2300      	movs	r3, #0
 80084b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d175      	bne.n	80085ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d002      	beq.n	80084cc <HAL_UART_Transmit+0x2c>
 80084c6:	88fb      	ldrh	r3, [r7, #6]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e06e      	b.n	80085ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2221      	movs	r2, #33	@ 0x21
 80084da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084de:	f7fb fc7d 	bl	8003ddc <HAL_GetTick>
 80084e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	88fa      	ldrh	r2, [r7, #6]
 80084e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	88fa      	ldrh	r2, [r7, #6]
 80084ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f8:	d108      	bne.n	800850c <HAL_UART_Transmit+0x6c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	e003      	b.n	8008514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008514:	e02e      	b.n	8008574 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2200      	movs	r2, #0
 800851e:	2180      	movs	r1, #128	@ 0x80
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 fb55 	bl	8008bd0 <UART_WaitOnFlagUntilTimeout>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2220      	movs	r2, #32
 8008530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e03a      	b.n	80085ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10b      	bne.n	8008556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	3302      	adds	r3, #2
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e007      	b.n	8008566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	3301      	adds	r3, #1
 8008564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008578:	b29b      	uxth	r3, r3
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1cb      	bne.n	8008516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2200      	movs	r2, #0
 8008586:	2140      	movs	r1, #64	@ 0x40
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fb21 	bl	8008bd0 <UART_WaitOnFlagUntilTimeout>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e006      	b.n	80085ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e000      	b.n	80085ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80085ac:	2302      	movs	r3, #2
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3720      	adds	r7, #32
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	4613      	mov	r3, r2
 80085c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d121      	bne.n	8008614 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <HAL_UART_Transmit_IT+0x26>
 80085d6:	88fb      	ldrh	r3, [r7, #6]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e01a      	b.n	8008616 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	88fa      	ldrh	r2, [r7, #6]
 80085ea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	88fa      	ldrh	r2, [r7, #6]
 80085f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2221      	movs	r2, #33	@ 0x21
 80085fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800860e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	e000      	b.n	8008616 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008614:	2302      	movs	r3, #2
  }
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	4613      	mov	r3, r2
 800862e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b20      	cmp	r3, #32
 800863a:	d112      	bne.n	8008662 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <HAL_UART_Receive_IT+0x26>
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e00b      	b.n	8008664 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	461a      	mov	r2, r3
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fb12 	bl	8008c82 <UART_Start_Receive_IT>
 800865e:	4603      	mov	r3, r0
 8008660:	e000      	b.n	8008664 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008662:	2302      	movs	r3, #2
  }
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b0ba      	sub	sp, #232	@ 0xe8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008692:	2300      	movs	r3, #0
 8008694:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008698:	2300      	movs	r3, #0
 800869a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800869e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80086aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10f      	bne.n	80086d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <HAL_UART_IRQHandler+0x66>
 80086be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c2:	f003 0320 	and.w	r3, r3, #32
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fbf2 	bl	8008eb4 <UART_Receive_IT>
      return;
 80086d0:	e25b      	b.n	8008b8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80de 	beq.w	8008898 <HAL_UART_IRQHandler+0x22c>
 80086dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086e0:	f003 0301 	and.w	r3, r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d106      	bne.n	80086f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80d1 	beq.w	8008898 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <HAL_UART_IRQHandler+0xae>
 8008702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008712:	f043 0201 	orr.w	r2, r3, #1
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800871a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800871e:	f003 0304 	and.w	r3, r3, #4
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00b      	beq.n	800873e <HAL_UART_IRQHandler+0xd2>
 8008726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008736:	f043 0202 	orr.w	r2, r3, #2
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800873e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00b      	beq.n	8008762 <HAL_UART_IRQHandler+0xf6>
 800874a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d005      	beq.n	8008762 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875a:	f043 0204 	orr.w	r2, r3, #4
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008766:	f003 0308 	and.w	r3, r3, #8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d011      	beq.n	8008792 <HAL_UART_IRQHandler+0x126>
 800876e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d105      	bne.n	8008786 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800877a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800877e:	f003 0301 	and.w	r3, r3, #1
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800878a:	f043 0208 	orr.w	r2, r3, #8
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 81f2 	beq.w	8008b80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800879c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d008      	beq.n	80087ba <HAL_UART_IRQHandler+0x14e>
 80087a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087ac:	f003 0320 	and.w	r3, r3, #32
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fb7d 	bl	8008eb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c4:	2b40      	cmp	r3, #64	@ 0x40
 80087c6:	bf0c      	ite	eq
 80087c8:	2301      	moveq	r3, #1
 80087ca:	2300      	movne	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d103      	bne.n	80087e6 <HAL_UART_IRQHandler+0x17a>
 80087de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d04f      	beq.n	8008886 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa85 	bl	8008cf6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f6:	2b40      	cmp	r3, #64	@ 0x40
 80087f8:	d141      	bne.n	800887e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3314      	adds	r3, #20
 8008800:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008810:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3314      	adds	r3, #20
 8008822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008826:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800882a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800883e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1d9      	bne.n	80087fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800884a:	2b00      	cmp	r3, #0
 800884c:	d013      	beq.n	8008876 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	4a7e      	ldr	r2, [pc, #504]	@ (8008a4c <HAL_UART_IRQHandler+0x3e0>)
 8008854:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800885a:	4618      	mov	r0, r3
 800885c:	f7fc fa86 	bl	8004d6c <HAL_DMA_Abort_IT>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d016      	beq.n	8008894 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008874:	e00e      	b.n	8008894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f994 	bl	8008ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800887c:	e00a      	b.n	8008894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f990 	bl	8008ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008884:	e006      	b.n	8008894 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f98c 	bl	8008ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008892:	e175      	b.n	8008b80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008894:	bf00      	nop
    return;
 8008896:	e173      	b.n	8008b80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889c:	2b01      	cmp	r3, #1
 800889e:	f040 814f 	bne.w	8008b40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088a6:	f003 0310 	and.w	r3, r3, #16
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 8148 	beq.w	8008b40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b4:	f003 0310 	and.w	r3, r3, #16
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8141 	beq.w	8008b40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088be:	2300      	movs	r3, #0
 80088c0:	60bb      	str	r3, [r7, #8]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60bb      	str	r3, [r7, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	60bb      	str	r3, [r7, #8]
 80088d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088de:	2b40      	cmp	r3, #64	@ 0x40
 80088e0:	f040 80b6 	bne.w	8008a50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 8145 	beq.w	8008b84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008902:	429a      	cmp	r2, r3
 8008904:	f080 813e 	bcs.w	8008b84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800890e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800891a:	f000 8088 	beq.w	8008a2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	330c      	adds	r3, #12
 8008924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800893c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	330c      	adds	r3, #12
 8008946:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800894a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800894e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008956:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1d9      	bne.n	800891e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3314      	adds	r3, #20
 8008970:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800897a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800897c:	f023 0301 	bic.w	r3, r3, #1
 8008980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3314      	adds	r3, #20
 800898a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800898e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008992:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008996:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e1      	bne.n	800896a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3314      	adds	r3, #20
 80089ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3314      	adds	r3, #20
 80089c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e3      	bne.n	80089a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2220      	movs	r2, #32
 80089e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	330c      	adds	r3, #12
 80089f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f6:	e853 3f00 	ldrex	r3, [r3]
 80089fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089fe:	f023 0310 	bic.w	r3, r3, #16
 8008a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a18:	e841 2300 	strex	r3, r2, [r1]
 8008a1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1e3      	bne.n	80089ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fc f92f 	bl	8004c8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2202      	movs	r2, #2
 8008a32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f8b7 	bl	8008bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a4a:	e09b      	b.n	8008b84 <HAL_UART_IRQHandler+0x518>
 8008a4c:	08008dbd 	.word	0x08008dbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 808e 	beq.w	8008b88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 8089 	beq.w	8008b88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	330c      	adds	r3, #12
 8008a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	330c      	adds	r3, #12
 8008a96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008a9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008aa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e3      	bne.n	8008a76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3314      	adds	r3, #20
 8008ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	623b      	str	r3, [r7, #32]
   return(result);
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3314      	adds	r3, #20
 8008ace:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008ad2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e3      	bne.n	8008aae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	330c      	adds	r3, #12
 8008afa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0310 	bic.w	r3, r3, #16
 8008b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	330c      	adds	r3, #12
 8008b14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b18:	61fa      	str	r2, [r7, #28]
 8008b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	69b9      	ldr	r1, [r7, #24]
 8008b1e:	69fa      	ldr	r2, [r7, #28]
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	617b      	str	r3, [r7, #20]
   return(result);
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e3      	bne.n	8008af4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f83d 	bl	8008bb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b3e:	e023      	b.n	8008b88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <HAL_UART_IRQHandler+0x4f4>
 8008b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f943 	bl	8008de4 <UART_Transmit_IT>
    return;
 8008b5e:	e014      	b.n	8008b8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00e      	beq.n	8008b8a <HAL_UART_IRQHandler+0x51e>
 8008b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d008      	beq.n	8008b8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f983 	bl	8008e84 <UART_EndTransmit_IT>
    return;
 8008b7e:	e004      	b.n	8008b8a <HAL_UART_IRQHandler+0x51e>
    return;
 8008b80:	bf00      	nop
 8008b82:	e002      	b.n	8008b8a <HAL_UART_IRQHandler+0x51e>
      return;
 8008b84:	bf00      	nop
 8008b86:	e000      	b.n	8008b8a <HAL_UART_IRQHandler+0x51e>
      return;
 8008b88:	bf00      	nop
  }
}
 8008b8a:	37e8      	adds	r7, #232	@ 0xe8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be0:	e03b      	b.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be8:	d037      	beq.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bea:	f7fb f8f7 	bl	8003ddc <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	6a3a      	ldr	r2, [r7, #32]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d302      	bcc.n	8008c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e03a      	b.n	8008c7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d023      	beq.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b80      	cmp	r3, #128	@ 0x80
 8008c16:	d020      	beq.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b40      	cmp	r3, #64	@ 0x40
 8008c1c:	d01d      	beq.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0308 	and.w	r3, r3, #8
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d116      	bne.n	8008c5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	617b      	str	r3, [r7, #20]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	617b      	str	r3, [r7, #20]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	617b      	str	r3, [r7, #20]
 8008c40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 f857 	bl	8008cf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2208      	movs	r2, #8
 8008c4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e00f      	b.n	8008c7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4013      	ands	r3, r2
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	bf0c      	ite	eq
 8008c6a:	2301      	moveq	r3, #1
 8008c6c:	2300      	movne	r3, #0
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	461a      	mov	r2, r3
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d0b4      	beq.n	8008be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	88fa      	ldrh	r2, [r7, #6]
 8008c9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	88fa      	ldrh	r2, [r7, #6]
 8008ca0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2222      	movs	r2, #34	@ 0x22
 8008cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d007      	beq.n	8008cc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008cc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695a      	ldr	r2, [r3, #20]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 0220 	orr.w	r2, r2, #32
 8008ce6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b095      	sub	sp, #84	@ 0x54
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	330c      	adds	r3, #12
 8008d04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	330c      	adds	r3, #12
 8008d1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e5      	bne.n	8008cfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	3314      	adds	r3, #20
 8008d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6a3b      	ldr	r3, [r7, #32]
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f023 0301 	bic.w	r3, r3, #1
 8008d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3314      	adds	r3, #20
 8008d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d119      	bne.n	8008da2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	330c      	adds	r3, #12
 8008d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f023 0310 	bic.w	r3, r3, #16
 8008d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	330c      	adds	r3, #12
 8008d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d8e:	61ba      	str	r2, [r7, #24]
 8008d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6979      	ldr	r1, [r7, #20]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008db0:	bf00      	nop
 8008db2:	3754      	adds	r7, #84	@ 0x54
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7ff fee4 	bl	8008ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ddc:	bf00      	nop
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b21      	cmp	r3, #33	@ 0x21
 8008df6:	d13e      	bne.n	8008e76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e00:	d114      	bne.n	8008e2c <UART_Transmit_IT+0x48>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d110      	bne.n	8008e2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	881b      	ldrh	r3, [r3, #0]
 8008e14:	461a      	mov	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	1c9a      	adds	r2, r3, #2
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	621a      	str	r2, [r3, #32]
 8008e2a:	e008      	b.n	8008e3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	1c59      	adds	r1, r3, #1
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6211      	str	r1, [r2, #32]
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10f      	bne.n	8008e72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e000      	b.n	8008e78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e76:	2302      	movs	r3, #2
  }
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7ff fe73 	bl	8008b90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08c      	sub	sp, #48	@ 0x30
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b22      	cmp	r3, #34	@ 0x22
 8008ec6:	f040 80ae 	bne.w	8009026 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ed2:	d117      	bne.n	8008f04 <UART_Receive_IT+0x50>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d113      	bne.n	8008f04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efc:	1c9a      	adds	r2, r3, #2
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f02:	e026      	b.n	8008f52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f16:	d007      	beq.n	8008f28 <UART_Receive_IT+0x74>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <UART_Receive_IT+0x82>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	701a      	strb	r2, [r3, #0]
 8008f34:	e008      	b.n	8008f48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d15d      	bne.n	8009022 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68da      	ldr	r2, [r3, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 0220 	bic.w	r2, r2, #32
 8008f74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	695a      	ldr	r2, [r3, #20]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f022 0201 	bic.w	r2, r2, #1
 8008f94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d135      	bne.n	8009018 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	613b      	str	r3, [r7, #16]
   return(result);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f023 0310 	bic.w	r3, r3, #16
 8008fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	330c      	adds	r3, #12
 8008fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fd2:	623a      	str	r2, [r7, #32]
 8008fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	69f9      	ldr	r1, [r7, #28]
 8008fd8:	6a3a      	ldr	r2, [r7, #32]
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e5      	bne.n	8008fb2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0310 	and.w	r3, r3, #16
 8008ff0:	2b10      	cmp	r3, #16
 8008ff2:	d10a      	bne.n	800900a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	60fb      	str	r3, [r7, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	60fb      	str	r3, [r7, #12]
 8009008:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fdd1 	bl	8008bb8 <HAL_UARTEx_RxEventCallback>
 8009016:	e002      	b.n	800901e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7f8 fd11 	bl	8001a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800901e:	2300      	movs	r3, #0
 8009020:	e002      	b.n	8009028 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	e000      	b.n	8009028 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009026:	2302      	movs	r3, #2
  }
}
 8009028:	4618      	mov	r0, r3
 800902a:	3730      	adds	r7, #48	@ 0x30
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009034:	b0c0      	sub	sp, #256	@ 0x100
 8009036:	af00      	add	r7, sp, #0
 8009038:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800903c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800904c:	68d9      	ldr	r1, [r3, #12]
 800904e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	ea40 0301 	orr.w	r3, r0, r1
 8009058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800905a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	431a      	orrs	r2, r3
 8009068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	431a      	orrs	r2, r3
 8009070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	4313      	orrs	r3, r2
 8009078:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009088:	f021 010c 	bic.w	r1, r1, #12
 800908c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009096:	430b      	orrs	r3, r1
 8009098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800909a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090aa:	6999      	ldr	r1, [r3, #24]
 80090ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	ea40 0301 	orr.w	r3, r0, r1
 80090b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	4b8f      	ldr	r3, [pc, #572]	@ (80092fc <UART_SetConfig+0x2cc>)
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d005      	beq.n	80090d0 <UART_SetConfig+0xa0>
 80090c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b8d      	ldr	r3, [pc, #564]	@ (8009300 <UART_SetConfig+0x2d0>)
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d104      	bne.n	80090da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090d0:	f7fc ff12 	bl	8005ef8 <HAL_RCC_GetPCLK2Freq>
 80090d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80090d8:	e003      	b.n	80090e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090da:	f7fc fef9 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 80090de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090ec:	f040 810c 	bne.w	8009308 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090f4:	2200      	movs	r2, #0
 80090f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80090fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80090fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009102:	4622      	mov	r2, r4
 8009104:	462b      	mov	r3, r5
 8009106:	1891      	adds	r1, r2, r2
 8009108:	65b9      	str	r1, [r7, #88]	@ 0x58
 800910a:	415b      	adcs	r3, r3
 800910c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800910e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009112:	4621      	mov	r1, r4
 8009114:	eb12 0801 	adds.w	r8, r2, r1
 8009118:	4629      	mov	r1, r5
 800911a:	eb43 0901 	adc.w	r9, r3, r1
 800911e:	f04f 0200 	mov.w	r2, #0
 8009122:	f04f 0300 	mov.w	r3, #0
 8009126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800912a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800912e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009132:	4690      	mov	r8, r2
 8009134:	4699      	mov	r9, r3
 8009136:	4623      	mov	r3, r4
 8009138:	eb18 0303 	adds.w	r3, r8, r3
 800913c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009140:	462b      	mov	r3, r5
 8009142:	eb49 0303 	adc.w	r3, r9, r3
 8009146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800914a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009156:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800915a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800915e:	460b      	mov	r3, r1
 8009160:	18db      	adds	r3, r3, r3
 8009162:	653b      	str	r3, [r7, #80]	@ 0x50
 8009164:	4613      	mov	r3, r2
 8009166:	eb42 0303 	adc.w	r3, r2, r3
 800916a:	657b      	str	r3, [r7, #84]	@ 0x54
 800916c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009170:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009174:	f7f7 fd88 	bl	8000c88 <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4b61      	ldr	r3, [pc, #388]	@ (8009304 <UART_SetConfig+0x2d4>)
 800917e:	fba3 2302 	umull	r2, r3, r3, r2
 8009182:	095b      	lsrs	r3, r3, #5
 8009184:	011c      	lsls	r4, r3, #4
 8009186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800918a:	2200      	movs	r2, #0
 800918c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009190:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009194:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009198:	4642      	mov	r2, r8
 800919a:	464b      	mov	r3, r9
 800919c:	1891      	adds	r1, r2, r2
 800919e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091a0:	415b      	adcs	r3, r3
 80091a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091a8:	4641      	mov	r1, r8
 80091aa:	eb12 0a01 	adds.w	sl, r2, r1
 80091ae:	4649      	mov	r1, r9
 80091b0:	eb43 0b01 	adc.w	fp, r3, r1
 80091b4:	f04f 0200 	mov.w	r2, #0
 80091b8:	f04f 0300 	mov.w	r3, #0
 80091bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091c8:	4692      	mov	sl, r2
 80091ca:	469b      	mov	fp, r3
 80091cc:	4643      	mov	r3, r8
 80091ce:	eb1a 0303 	adds.w	r3, sl, r3
 80091d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091d6:	464b      	mov	r3, r9
 80091d8:	eb4b 0303 	adc.w	r3, fp, r3
 80091dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80091f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80091f4:	460b      	mov	r3, r1
 80091f6:	18db      	adds	r3, r3, r3
 80091f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80091fa:	4613      	mov	r3, r2
 80091fc:	eb42 0303 	adc.w	r3, r2, r3
 8009200:	647b      	str	r3, [r7, #68]	@ 0x44
 8009202:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009206:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800920a:	f7f7 fd3d 	bl	8000c88 <__aeabi_uldivmod>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4611      	mov	r1, r2
 8009214:	4b3b      	ldr	r3, [pc, #236]	@ (8009304 <UART_SetConfig+0x2d4>)
 8009216:	fba3 2301 	umull	r2, r3, r3, r1
 800921a:	095b      	lsrs	r3, r3, #5
 800921c:	2264      	movs	r2, #100	@ 0x64
 800921e:	fb02 f303 	mul.w	r3, r2, r3
 8009222:	1acb      	subs	r3, r1, r3
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800922a:	4b36      	ldr	r3, [pc, #216]	@ (8009304 <UART_SetConfig+0x2d4>)
 800922c:	fba3 2302 	umull	r2, r3, r3, r2
 8009230:	095b      	lsrs	r3, r3, #5
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009238:	441c      	add	r4, r3
 800923a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800923e:	2200      	movs	r2, #0
 8009240:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009244:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009248:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800924c:	4642      	mov	r2, r8
 800924e:	464b      	mov	r3, r9
 8009250:	1891      	adds	r1, r2, r2
 8009252:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009254:	415b      	adcs	r3, r3
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009258:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800925c:	4641      	mov	r1, r8
 800925e:	1851      	adds	r1, r2, r1
 8009260:	6339      	str	r1, [r7, #48]	@ 0x30
 8009262:	4649      	mov	r1, r9
 8009264:	414b      	adcs	r3, r1
 8009266:	637b      	str	r3, [r7, #52]	@ 0x34
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	f04f 0300 	mov.w	r3, #0
 8009270:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009274:	4659      	mov	r1, fp
 8009276:	00cb      	lsls	r3, r1, #3
 8009278:	4651      	mov	r1, sl
 800927a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800927e:	4651      	mov	r1, sl
 8009280:	00ca      	lsls	r2, r1, #3
 8009282:	4610      	mov	r0, r2
 8009284:	4619      	mov	r1, r3
 8009286:	4603      	mov	r3, r0
 8009288:	4642      	mov	r2, r8
 800928a:	189b      	adds	r3, r3, r2
 800928c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009290:	464b      	mov	r3, r9
 8009292:	460a      	mov	r2, r1
 8009294:	eb42 0303 	adc.w	r3, r2, r3
 8009298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800929c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092b0:	460b      	mov	r3, r1
 80092b2:	18db      	adds	r3, r3, r3
 80092b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092b6:	4613      	mov	r3, r2
 80092b8:	eb42 0303 	adc.w	r3, r2, r3
 80092bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092c6:	f7f7 fcdf 	bl	8000c88 <__aeabi_uldivmod>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009304 <UART_SetConfig+0x2d4>)
 80092d0:	fba3 1302 	umull	r1, r3, r3, r2
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	2164      	movs	r1, #100	@ 0x64
 80092d8:	fb01 f303 	mul.w	r3, r1, r3
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	3332      	adds	r3, #50	@ 0x32
 80092e2:	4a08      	ldr	r2, [pc, #32]	@ (8009304 <UART_SetConfig+0x2d4>)
 80092e4:	fba2 2303 	umull	r2, r3, r2, r3
 80092e8:	095b      	lsrs	r3, r3, #5
 80092ea:	f003 0207 	and.w	r2, r3, #7
 80092ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4422      	add	r2, r4
 80092f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092f8:	e106      	b.n	8009508 <UART_SetConfig+0x4d8>
 80092fa:	bf00      	nop
 80092fc:	40011000 	.word	0x40011000
 8009300:	40011400 	.word	0x40011400
 8009304:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800930c:	2200      	movs	r2, #0
 800930e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009312:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009316:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800931a:	4642      	mov	r2, r8
 800931c:	464b      	mov	r3, r9
 800931e:	1891      	adds	r1, r2, r2
 8009320:	6239      	str	r1, [r7, #32]
 8009322:	415b      	adcs	r3, r3
 8009324:	627b      	str	r3, [r7, #36]	@ 0x24
 8009326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800932a:	4641      	mov	r1, r8
 800932c:	1854      	adds	r4, r2, r1
 800932e:	4649      	mov	r1, r9
 8009330:	eb43 0501 	adc.w	r5, r3, r1
 8009334:	f04f 0200 	mov.w	r2, #0
 8009338:	f04f 0300 	mov.w	r3, #0
 800933c:	00eb      	lsls	r3, r5, #3
 800933e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009342:	00e2      	lsls	r2, r4, #3
 8009344:	4614      	mov	r4, r2
 8009346:	461d      	mov	r5, r3
 8009348:	4643      	mov	r3, r8
 800934a:	18e3      	adds	r3, r4, r3
 800934c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009350:	464b      	mov	r3, r9
 8009352:	eb45 0303 	adc.w	r3, r5, r3
 8009356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800935a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009366:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800936a:	f04f 0200 	mov.w	r2, #0
 800936e:	f04f 0300 	mov.w	r3, #0
 8009372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009376:	4629      	mov	r1, r5
 8009378:	008b      	lsls	r3, r1, #2
 800937a:	4621      	mov	r1, r4
 800937c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009380:	4621      	mov	r1, r4
 8009382:	008a      	lsls	r2, r1, #2
 8009384:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009388:	f7f7 fc7e 	bl	8000c88 <__aeabi_uldivmod>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4b60      	ldr	r3, [pc, #384]	@ (8009514 <UART_SetConfig+0x4e4>)
 8009392:	fba3 2302 	umull	r2, r3, r3, r2
 8009396:	095b      	lsrs	r3, r3, #5
 8009398:	011c      	lsls	r4, r3, #4
 800939a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800939e:	2200      	movs	r2, #0
 80093a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093ac:	4642      	mov	r2, r8
 80093ae:	464b      	mov	r3, r9
 80093b0:	1891      	adds	r1, r2, r2
 80093b2:	61b9      	str	r1, [r7, #24]
 80093b4:	415b      	adcs	r3, r3
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093bc:	4641      	mov	r1, r8
 80093be:	1851      	adds	r1, r2, r1
 80093c0:	6139      	str	r1, [r7, #16]
 80093c2:	4649      	mov	r1, r9
 80093c4:	414b      	adcs	r3, r1
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	f04f 0200 	mov.w	r2, #0
 80093cc:	f04f 0300 	mov.w	r3, #0
 80093d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093d4:	4659      	mov	r1, fp
 80093d6:	00cb      	lsls	r3, r1, #3
 80093d8:	4651      	mov	r1, sl
 80093da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093de:	4651      	mov	r1, sl
 80093e0:	00ca      	lsls	r2, r1, #3
 80093e2:	4610      	mov	r0, r2
 80093e4:	4619      	mov	r1, r3
 80093e6:	4603      	mov	r3, r0
 80093e8:	4642      	mov	r2, r8
 80093ea:	189b      	adds	r3, r3, r2
 80093ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093f0:	464b      	mov	r3, r9
 80093f2:	460a      	mov	r2, r1
 80093f4:	eb42 0303 	adc.w	r3, r2, r3
 80093f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009406:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	f04f 0300 	mov.w	r3, #0
 8009410:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009414:	4649      	mov	r1, r9
 8009416:	008b      	lsls	r3, r1, #2
 8009418:	4641      	mov	r1, r8
 800941a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800941e:	4641      	mov	r1, r8
 8009420:	008a      	lsls	r2, r1, #2
 8009422:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009426:	f7f7 fc2f 	bl	8000c88 <__aeabi_uldivmod>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4611      	mov	r1, r2
 8009430:	4b38      	ldr	r3, [pc, #224]	@ (8009514 <UART_SetConfig+0x4e4>)
 8009432:	fba3 2301 	umull	r2, r3, r3, r1
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	2264      	movs	r2, #100	@ 0x64
 800943a:	fb02 f303 	mul.w	r3, r2, r3
 800943e:	1acb      	subs	r3, r1, r3
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	3332      	adds	r3, #50	@ 0x32
 8009444:	4a33      	ldr	r2, [pc, #204]	@ (8009514 <UART_SetConfig+0x4e4>)
 8009446:	fba2 2303 	umull	r2, r3, r2, r3
 800944a:	095b      	lsrs	r3, r3, #5
 800944c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009450:	441c      	add	r4, r3
 8009452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009456:	2200      	movs	r2, #0
 8009458:	673b      	str	r3, [r7, #112]	@ 0x70
 800945a:	677a      	str	r2, [r7, #116]	@ 0x74
 800945c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009460:	4642      	mov	r2, r8
 8009462:	464b      	mov	r3, r9
 8009464:	1891      	adds	r1, r2, r2
 8009466:	60b9      	str	r1, [r7, #8]
 8009468:	415b      	adcs	r3, r3
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009470:	4641      	mov	r1, r8
 8009472:	1851      	adds	r1, r2, r1
 8009474:	6039      	str	r1, [r7, #0]
 8009476:	4649      	mov	r1, r9
 8009478:	414b      	adcs	r3, r1
 800947a:	607b      	str	r3, [r7, #4]
 800947c:	f04f 0200 	mov.w	r2, #0
 8009480:	f04f 0300 	mov.w	r3, #0
 8009484:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009488:	4659      	mov	r1, fp
 800948a:	00cb      	lsls	r3, r1, #3
 800948c:	4651      	mov	r1, sl
 800948e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009492:	4651      	mov	r1, sl
 8009494:	00ca      	lsls	r2, r1, #3
 8009496:	4610      	mov	r0, r2
 8009498:	4619      	mov	r1, r3
 800949a:	4603      	mov	r3, r0
 800949c:	4642      	mov	r2, r8
 800949e:	189b      	adds	r3, r3, r2
 80094a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094a2:	464b      	mov	r3, r9
 80094a4:	460a      	mov	r2, r1
 80094a6:	eb42 0303 	adc.w	r3, r2, r3
 80094aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80094b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80094b8:	f04f 0200 	mov.w	r2, #0
 80094bc:	f04f 0300 	mov.w	r3, #0
 80094c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094c4:	4649      	mov	r1, r9
 80094c6:	008b      	lsls	r3, r1, #2
 80094c8:	4641      	mov	r1, r8
 80094ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094ce:	4641      	mov	r1, r8
 80094d0:	008a      	lsls	r2, r1, #2
 80094d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80094d6:	f7f7 fbd7 	bl	8000c88 <__aeabi_uldivmod>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	4b0d      	ldr	r3, [pc, #52]	@ (8009514 <UART_SetConfig+0x4e4>)
 80094e0:	fba3 1302 	umull	r1, r3, r3, r2
 80094e4:	095b      	lsrs	r3, r3, #5
 80094e6:	2164      	movs	r1, #100	@ 0x64
 80094e8:	fb01 f303 	mul.w	r3, r1, r3
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	3332      	adds	r3, #50	@ 0x32
 80094f2:	4a08      	ldr	r2, [pc, #32]	@ (8009514 <UART_SetConfig+0x4e4>)
 80094f4:	fba2 2303 	umull	r2, r3, r2, r3
 80094f8:	095b      	lsrs	r3, r3, #5
 80094fa:	f003 020f 	and.w	r2, r3, #15
 80094fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4422      	add	r2, r4
 8009506:	609a      	str	r2, [r3, #8]
}
 8009508:	bf00      	nop
 800950a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800950e:	46bd      	mov	sp, r7
 8009510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009514:	51eb851f 	.word	0x51eb851f

08009518 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009518:	b084      	sub	sp, #16
 800951a:	b480      	push	{r7}
 800951c:	b085      	sub	sp, #20
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	f107 001c 	add.w	r0, r7, #28
 8009526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800952e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009530:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009532:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8009536:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800953a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800953c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800953e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8009542:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8009552:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	b004      	add	sp, #16
 800956c:	4770      	bx	lr

0800956e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800957c:	4618      	mov	r0, r3
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2203      	movs	r2, #3
 80095b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0303 	and.w	r3, r3, #3
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b085      	sub	sp, #20
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009600:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009606:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800960c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	4313      	orrs	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800961c:	f023 030f 	bic.w	r3, r3, #15
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	431a      	orrs	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	b2db      	uxtb	r3, r3
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3314      	adds	r3, #20
 800965e:	461a      	mov	r2, r3
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	4413      	add	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
}  
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009680:	2300      	movs	r3, #0
 8009682:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800969c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80096a2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80096a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0

}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b088      	sub	sp, #32
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80096dc:	2310      	movs	r3, #16
 80096de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096e0:	2340      	movs	r3, #64	@ 0x40
 80096e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096e4:	2300      	movs	r3, #0
 80096e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096ee:	f107 0308 	add.w	r3, r7, #8
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff ff74 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80096fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096fe:	2110      	movs	r1, #16
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fa19 	bl	8009b38 <SDMMC_GetCmdResp1>
 8009706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009708:	69fb      	ldr	r3, [r7, #28]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b088      	sub	sp, #32
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009720:	2311      	movs	r3, #17
 8009722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009724:	2340      	movs	r3, #64	@ 0x40
 8009726:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800972c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009730:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009732:	f107 0308 	add.w	r3, r7, #8
 8009736:	4619      	mov	r1, r3
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f7ff ff52 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800973e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009742:	2111      	movs	r1, #17
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 f9f7 	bl	8009b38 <SDMMC_GetCmdResp1>
 800974a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800974c:	69fb      	ldr	r3, [r7, #28]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3720      	adds	r7, #32
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b088      	sub	sp, #32
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009764:	2312      	movs	r3, #18
 8009766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009768:	2340      	movs	r3, #64	@ 0x40
 800976a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800976c:	2300      	movs	r3, #0
 800976e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009774:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009776:	f107 0308 	add.w	r3, r7, #8
 800977a:	4619      	mov	r1, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff ff30 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009786:	2112      	movs	r1, #18
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f9d5 	bl	8009b38 <SDMMC_GetCmdResp1>
 800978e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009790:	69fb      	ldr	r3, [r7, #28]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3720      	adds	r7, #32
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b088      	sub	sp, #32
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80097a8:	2318      	movs	r3, #24
 80097aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097ac:	2340      	movs	r3, #64	@ 0x40
 80097ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097ba:	f107 0308 	add.w	r3, r7, #8
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff ff0e 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80097c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097ca:	2118      	movs	r1, #24
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f9b3 	bl	8009b38 <SDMMC_GetCmdResp1>
 80097d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097d4:	69fb      	ldr	r3, [r7, #28]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3720      	adds	r7, #32
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b088      	sub	sp, #32
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80097ec:	2319      	movs	r3, #25
 80097ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097f0:	2340      	movs	r3, #64	@ 0x40
 80097f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097f4:	2300      	movs	r3, #0
 80097f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097fe:	f107 0308 	add.w	r3, r7, #8
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff feec 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800980a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800980e:	2119      	movs	r1, #25
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f991 	bl	8009b38 <SDMMC_GetCmdResp1>
 8009816:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009818:	69fb      	ldr	r3, [r7, #28]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3720      	adds	r7, #32
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b088      	sub	sp, #32
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009830:	230c      	movs	r3, #12
 8009832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009834:	2340      	movs	r3, #64	@ 0x40
 8009836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009838:	2300      	movs	r3, #0
 800983a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800983c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009842:	f107 0308 	add.w	r3, r7, #8
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff feca 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800984e:	4a05      	ldr	r2, [pc, #20]	@ (8009864 <SDMMC_CmdStopTransfer+0x40>)
 8009850:	210c      	movs	r1, #12
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 f970 	bl	8009b38 <SDMMC_GetCmdResp1>
 8009858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800985a:	69fb      	ldr	r3, [r7, #28]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3720      	adds	r7, #32
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	05f5e100 	.word	0x05f5e100

08009868 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08a      	sub	sp, #40	@ 0x28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009878:	2307      	movs	r3, #7
 800987a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800987c:	2340      	movs	r3, #64	@ 0x40
 800987e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009880:	2300      	movs	r3, #0
 8009882:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009884:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009888:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800988a:	f107 0310 	add.w	r3, r7, #16
 800988e:	4619      	mov	r1, r3
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff fea6 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800989a:	2107      	movs	r1, #7
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f94b 	bl	8009b38 <SDMMC_GetCmdResp1>
 80098a2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3728      	adds	r7, #40	@ 0x28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b088      	sub	sp, #32
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80098be:	2300      	movs	r3, #0
 80098c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098c2:	2300      	movs	r3, #0
 80098c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098cc:	f107 0308 	add.w	r3, r7, #8
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff fe85 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fb65 	bl	8009fa8 <SDMMC_GetCmdError>
 80098de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098e0:	69fb      	ldr	r3, [r7, #28]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3720      	adds	r7, #32
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b088      	sub	sp, #32
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80098f2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80098f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80098f8:	2308      	movs	r3, #8
 80098fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098fc:	2340      	movs	r3, #64	@ 0x40
 80098fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009900:	2300      	movs	r3, #0
 8009902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009908:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800990a:	f107 0308 	add.w	r3, r7, #8
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7ff fe66 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 faf8 	bl	8009f0c <SDMMC_GetCmdResp7>
 800991c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800991e:	69fb      	ldr	r3, [r7, #28]
}
 8009920:	4618      	mov	r0, r3
 8009922:	3720      	adds	r7, #32
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009936:	2337      	movs	r3, #55	@ 0x37
 8009938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800993a:	2340      	movs	r3, #64	@ 0x40
 800993c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800993e:	2300      	movs	r3, #0
 8009940:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009946:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009948:	f107 0308 	add.w	r3, r7, #8
 800994c:	4619      	mov	r1, r3
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff fe47 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009954:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009958:	2137      	movs	r1, #55	@ 0x37
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 f8ec 	bl	8009b38 <SDMMC_GetCmdResp1>
 8009960:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009962:	69fb      	ldr	r3, [r7, #28]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3720      	adds	r7, #32
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b088      	sub	sp, #32
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800997c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009982:	2329      	movs	r3, #41	@ 0x29
 8009984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009986:	2340      	movs	r3, #64	@ 0x40
 8009988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800998e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009992:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009994:	f107 0308 	add.w	r3, r7, #8
 8009998:	4619      	mov	r1, r3
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff fe21 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f9ff 	bl	8009da4 <SDMMC_GetCmdResp3>
 80099a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099a8:	69fb      	ldr	r3, [r7, #28]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b088      	sub	sp, #32
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80099c0:	2306      	movs	r3, #6
 80099c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099c4:	2340      	movs	r3, #64	@ 0x40
 80099c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099c8:	2300      	movs	r3, #0
 80099ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099d2:	f107 0308 	add.w	r3, r7, #8
 80099d6:	4619      	mov	r1, r3
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f7ff fe02 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80099de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099e2:	2106      	movs	r1, #6
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f8a7 	bl	8009b38 <SDMMC_GetCmdResp1>
 80099ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099ec:	69fb      	ldr	r3, [r7, #28]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3720      	adds	r7, #32
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b088      	sub	sp, #32
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009a02:	2333      	movs	r3, #51	@ 0x33
 8009a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a06:	2340      	movs	r3, #64	@ 0x40
 8009a08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a14:	f107 0308 	add.w	r3, r7, #8
 8009a18:	4619      	mov	r1, r3
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff fde1 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a24:	2133      	movs	r1, #51	@ 0x33
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f886 	bl	8009b38 <SDMMC_GetCmdResp1>
 8009a2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a2e:	69fb      	ldr	r3, [r7, #28]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3720      	adds	r7, #32
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009a44:	2302      	movs	r3, #2
 8009a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a48:	23c0      	movs	r3, #192	@ 0xc0
 8009a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a56:	f107 0308 	add.w	r3, r7, #8
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f7ff fdc0 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f956 	bl	8009d14 <SDMMC_GetCmdResp2>
 8009a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a6a:	69fb      	ldr	r3, [r7, #28]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3720      	adds	r7, #32
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009a82:	2309      	movs	r3, #9
 8009a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a86:	23c0      	movs	r3, #192	@ 0xc0
 8009a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a94:	f107 0308 	add.w	r3, r7, #8
 8009a98:	4619      	mov	r1, r3
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7ff fda1 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f937 	bl	8009d14 <SDMMC_GetCmdResp2>
 8009aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b088      	sub	sp, #32
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ac4:	2340      	movs	r3, #64	@ 0x40
 8009ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009acc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ad0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ad2:	f107 0308 	add.w	r3, r7, #8
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f7ff fd82 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	2103      	movs	r1, #3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f99c 	bl	8009e20 <SDMMC_GetCmdResp6>
 8009ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009aea:	69fb      	ldr	r3, [r7, #28]
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3720      	adds	r7, #32
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009b02:	230d      	movs	r3, #13
 8009b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b06:	2340      	movs	r3, #64	@ 0x40
 8009b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b14:	f107 0308 	add.w	r3, r7, #8
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff fd61 	bl	80095e2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b24:	210d      	movs	r1, #13
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f806 	bl	8009b38 <SDMMC_GetCmdResp1>
 8009b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b2e:	69fb      	ldr	r3, [r7, #28]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3720      	adds	r7, #32
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b088      	sub	sp, #32
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	460b      	mov	r3, r1
 8009b42:	607a      	str	r2, [r7, #4]
 8009b44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b46:	4b70      	ldr	r3, [pc, #448]	@ (8009d08 <SDMMC_GetCmdResp1+0x1d0>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a70      	ldr	r2, [pc, #448]	@ (8009d0c <SDMMC_GetCmdResp1+0x1d4>)
 8009b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b50:	0a5a      	lsrs	r2, r3, #9
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	fb02 f303 	mul.w	r3, r2, r3
 8009b58:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	1e5a      	subs	r2, r3, #1
 8009b5e:	61fa      	str	r2, [r7, #28]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d102      	bne.n	8009b6a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009b68:	e0c9      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b6e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0ef      	beq.n	8009b5a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1ea      	bne.n	8009b5a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b88:	f003 0304 	and.w	r3, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d004      	beq.n	8009b9a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2204      	movs	r2, #4
 8009b94:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b96:	2304      	movs	r3, #4
 8009b98:	e0b1      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d004      	beq.n	8009bb0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e0a6      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	22c5      	movs	r2, #197	@ 0xc5
 8009bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fd3d 	bl	8009636 <SDIO_GetCommandResponse>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	7afb      	ldrb	r3, [r7, #11]
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d001      	beq.n	8009bca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e099      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009bca:	2100      	movs	r1, #0
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7ff fd3f 	bl	8009650 <SDIO_GetResponse>
 8009bd2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8009d10 <SDMMC_GetCmdResp1+0x1d8>)
 8009bd8:	4013      	ands	r3, r2
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	e08d      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	da02      	bge.n	8009bee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009be8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009bec:	e087      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009bf8:	2340      	movs	r3, #64	@ 0x40
 8009bfa:	e080      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009c06:	2380      	movs	r3, #128	@ 0x80
 8009c08:	e079      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c18:	e071      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c28:	e069      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d002      	beq.n	8009c3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c38:	e061      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009c48:	e059      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009c58:	e051      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c68:	e049      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009c78:	e041      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d002      	beq.n	8009c8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c88:	e039      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009c98:	e031      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009ca4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009ca8:	e029      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d002      	beq.n	8009cba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009cb4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009cb8:	e021      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009cc4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009cc8:	e019      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d002      	beq.n	8009cda <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009cd4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009cd8:	e011      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009ce4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009ce8:	e009      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	f003 0308 	and.w	r3, r3, #8
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009cf4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009cf8:	e001      	b.n	8009cfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009cfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20000008 	.word	0x20000008
 8009d0c:	10624dd3 	.word	0x10624dd3
 8009d10:	fdffe008 	.word	0xfdffe008

08009d14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8009d9c <SDMMC_GetCmdResp2+0x88>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a1f      	ldr	r2, [pc, #124]	@ (8009da0 <SDMMC_GetCmdResp2+0x8c>)
 8009d22:	fba2 2303 	umull	r2, r3, r2, r3
 8009d26:	0a5b      	lsrs	r3, r3, #9
 8009d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d2c:	fb02 f303 	mul.w	r3, r2, r3
 8009d30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	1e5a      	subs	r2, r3, #1
 8009d36:	60fa      	str	r2, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009d40:	e026      	b.n	8009d90 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0ef      	beq.n	8009d32 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1ea      	bne.n	8009d32 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d004      	beq.n	8009d72 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2204      	movs	r2, #4
 8009d6c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d6e:	2304      	movs	r3, #4
 8009d70:	e00e      	b.n	8009d90 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d004      	beq.n	8009d88 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e003      	b.n	8009d90 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	22c5      	movs	r2, #197	@ 0xc5
 8009d8c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	20000008 	.word	0x20000008
 8009da0:	10624dd3 	.word	0x10624dd3

08009da4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009dac:	4b1a      	ldr	r3, [pc, #104]	@ (8009e18 <SDMMC_GetCmdResp3+0x74>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a1a      	ldr	r2, [pc, #104]	@ (8009e1c <SDMMC_GetCmdResp3+0x78>)
 8009db2:	fba2 2303 	umull	r2, r3, r2, r3
 8009db6:	0a5b      	lsrs	r3, r3, #9
 8009db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009dbc:	fb02 f303 	mul.w	r3, r2, r3
 8009dc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	1e5a      	subs	r2, r3, #1
 8009dc6:	60fa      	str	r2, [r7, #12]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d102      	bne.n	8009dd2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dcc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009dd0:	e01b      	b.n	8009e0a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d0ef      	beq.n	8009dc2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1ea      	bne.n	8009dc2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d004      	beq.n	8009e02 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dfe:	2304      	movs	r3, #4
 8009e00:	e003      	b.n	8009e0a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	22c5      	movs	r2, #197	@ 0xc5
 8009e06:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20000008 	.word	0x20000008
 8009e1c:	10624dd3 	.word	0x10624dd3

08009e20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e2e:	4b35      	ldr	r3, [pc, #212]	@ (8009f04 <SDMMC_GetCmdResp6+0xe4>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a35      	ldr	r2, [pc, #212]	@ (8009f08 <SDMMC_GetCmdResp6+0xe8>)
 8009e34:	fba2 2303 	umull	r2, r3, r2, r3
 8009e38:	0a5b      	lsrs	r3, r3, #9
 8009e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e3e:	fb02 f303 	mul.w	r3, r2, r3
 8009e42:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	1e5a      	subs	r2, r3, #1
 8009e48:	61fa      	str	r2, [r7, #28]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d102      	bne.n	8009e54 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009e52:	e052      	b.n	8009efa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e58:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e5a:	69bb      	ldr	r3, [r7, #24]
 8009e5c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0ef      	beq.n	8009e44 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1ea      	bne.n	8009e44 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e72:	f003 0304 	and.w	r3, r3, #4
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2204      	movs	r2, #4
 8009e7e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e80:	2304      	movs	r3, #4
 8009e82:	e03a      	b.n	8009efa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d004      	beq.n	8009e9a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2201      	movs	r2, #1
 8009e94:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e02f      	b.n	8009efa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	f7ff fbcb 	bl	8009636 <SDIO_GetCommandResponse>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d001      	beq.n	8009eae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e025      	b.n	8009efa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	22c5      	movs	r2, #197	@ 0xc5
 8009eb2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff fbca 	bl	8009650 <SDIO_GetResponse>
 8009ebc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d106      	bne.n	8009ed6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	0c1b      	lsrs	r3, r3, #16
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e011      	b.n	8009efa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009ee4:	e009      	b.n	8009efa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d002      	beq.n	8009ef6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ef4:	e001      	b.n	8009efa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ef6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3720      	adds	r7, #32
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	20000008 	.word	0x20000008
 8009f08:	10624dd3 	.word	0x10624dd3

08009f0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f14:	4b22      	ldr	r3, [pc, #136]	@ (8009fa0 <SDMMC_GetCmdResp7+0x94>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a22      	ldr	r2, [pc, #136]	@ (8009fa4 <SDMMC_GetCmdResp7+0x98>)
 8009f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1e:	0a5b      	lsrs	r3, r3, #9
 8009f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f24:	fb02 f303 	mul.w	r3, r2, r3
 8009f28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	1e5a      	subs	r2, r3, #1
 8009f2e:	60fa      	str	r2, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d102      	bne.n	8009f3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009f38:	e02c      	b.n	8009f94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d0ef      	beq.n	8009f2a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1ea      	bne.n	8009f2a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d004      	beq.n	8009f6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2204      	movs	r2, #4
 8009f64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f66:	2304      	movs	r3, #4
 8009f68:	e014      	b.n	8009f94 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d004      	beq.n	8009f80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e009      	b.n	8009f94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2240      	movs	r2, #64	@ 0x40
 8009f90:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f92:	2300      	movs	r3, #0
  
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	20000008 	.word	0x20000008
 8009fa4:	10624dd3 	.word	0x10624dd3

08009fa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fb0:	4b11      	ldr	r3, [pc, #68]	@ (8009ff8 <SDMMC_GetCmdError+0x50>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a11      	ldr	r2, [pc, #68]	@ (8009ffc <SDMMC_GetCmdError+0x54>)
 8009fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fba:	0a5b      	lsrs	r3, r3, #9
 8009fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009fc0:	fb02 f303 	mul.w	r3, r2, r3
 8009fc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	1e5a      	subs	r2, r3, #1
 8009fca:	60fa      	str	r2, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fd4:	e009      	b.n	8009fea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d0f1      	beq.n	8009fc6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	22c5      	movs	r2, #197	@ 0xc5
 8009fe6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20000008 	.word	0x20000008
 8009ffc:	10624dd3 	.word	0x10624dd3

0800a000 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a004:	4908      	ldr	r1, [pc, #32]	@ (800a028 <MX_FATFS_Init+0x28>)
 800a006:	4809      	ldr	r0, [pc, #36]	@ (800a02c <MX_FATFS_Init+0x2c>)
 800a008:	f003 f8f4 	bl	800d1f4 <FATFS_LinkDriver>
 800a00c:	4603      	mov	r3, r0
 800a00e:	461a      	mov	r2, r3
 800a010:	4b07      	ldr	r3, [pc, #28]	@ (800a030 <MX_FATFS_Init+0x30>)
 800a012:	701a      	strb	r2, [r3, #0]
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a014:	4907      	ldr	r1, [pc, #28]	@ (800a034 <MX_FATFS_Init+0x34>)
 800a016:	4808      	ldr	r0, [pc, #32]	@ (800a038 <MX_FATFS_Init+0x38>)
 800a018:	f003 f8ec 	bl	800d1f4 <FATFS_LinkDriver>
 800a01c:	4603      	mov	r3, r0
 800a01e:	461a      	mov	r2, r3
 800a020:	4b06      	ldr	r3, [pc, #24]	@ (800a03c <MX_FATFS_Init+0x3c>)
 800a022:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a024:	bf00      	nop
 800a026:	bd80      	pop	{r7, pc}
 800a028:	20002904 	.word	0x20002904
 800a02c:	08011ec8 	.word	0x08011ec8
 800a030:	20002900 	.word	0x20002900
 800a034:	2000290c 	.word	0x2000290c
 800a038:	20000014 	.word	0x20000014
 800a03c:	20002908 	.word	0x20002908

0800a040 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a040:	b480      	push	{r7}
 800a042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a044:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a046:	4618      	mov	r0, r3
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a05a:	f000 f879 	bl	800a150 <BSP_SD_IsDetected>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b01      	cmp	r3, #1
 800a062:	d001      	beq.n	800a068 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e012      	b.n	800a08e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a068:	480b      	ldr	r0, [pc, #44]	@ (800a098 <BSP_SD_Init+0x48>)
 800a06a:	f7fb ff59 	bl	8005f20 <HAL_SD_Init>
 800a06e:	4603      	mov	r3, r0
 800a070:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d109      	bne.n	800a08c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a078:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a07c:	4806      	ldr	r0, [pc, #24]	@ (800a098 <BSP_SD_Init+0x48>)
 800a07e:	f7fc fd43 	bl	8006b08 <HAL_SD_ConfigWideBusOperation>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a08c:	79fb      	ldrb	r3, [r7, #7]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	200023a4 	.word	0x200023a4

0800a09c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b088      	sub	sp, #32
 800a0a0:	af02      	add	r7, sp, #8
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
 800a0a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	68f9      	ldr	r1, [r7, #12]
 800a0b8:	4806      	ldr	r0, [pc, #24]	@ (800a0d4 <BSP_SD_ReadBlocks+0x38>)
 800a0ba:	f7fb ffe1 	bl	8006080 <HAL_SD_ReadBlocks>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3718      	adds	r7, #24
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	200023a4 	.word	0x200023a4

0800a0d8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b088      	sub	sp, #32
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68ba      	ldr	r2, [r7, #8]
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	4806      	ldr	r0, [pc, #24]	@ (800a110 <BSP_SD_WriteBlocks+0x38>)
 800a0f6:	f7fc f9a9 	bl	800644c <HAL_SD_WriteBlocks>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d001      	beq.n	800a104 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a104:	7dfb      	ldrb	r3, [r7, #23]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	200023a4 	.word	0x200023a4

0800a114 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a118:	4805      	ldr	r0, [pc, #20]	@ (800a130 <BSP_SD_GetCardState+0x1c>)
 800a11a:	f7fc fd8f 	bl	8006c3c <HAL_SD_GetCardState>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b04      	cmp	r3, #4
 800a122:	bf14      	ite	ne
 800a124:	2301      	movne	r3, #1
 800a126:	2300      	moveq	r3, #0
 800a128:	b2db      	uxtb	r3, r3
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	200023a4 	.word	0x200023a4

0800a134 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	4803      	ldr	r0, [pc, #12]	@ (800a14c <BSP_SD_GetCardInfo+0x18>)
 800a140:	f7fc fcb6 	bl	8006ab0 <HAL_SD_GetCardInfo>
}
 800a144:	bf00      	nop
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	200023a4 	.word	0x200023a4

0800a150 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a156:	2301      	movs	r3, #1
 800a158:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a15a:	79fb      	ldrb	r3, [r7, #7]
 800a15c:	b2db      	uxtb	r3, r3
}
 800a15e:	4618      	mov	r0, r3
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
	...

0800a16c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a176:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a4 <SD_CheckStatus+0x38>)
 800a178:	2201      	movs	r2, #1
 800a17a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a17c:	f7ff ffca 	bl	800a114 <BSP_SD_GetCardState>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d107      	bne.n	800a196 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a186:	4b07      	ldr	r3, [pc, #28]	@ (800a1a4 <SD_CheckStatus+0x38>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f023 0301 	bic.w	r3, r3, #1
 800a190:	b2da      	uxtb	r2, r3
 800a192:	4b04      	ldr	r3, [pc, #16]	@ (800a1a4 <SD_CheckStatus+0x38>)
 800a194:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a196:	4b03      	ldr	r3, [pc, #12]	@ (800a1a4 <SD_CheckStatus+0x38>)
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	b2db      	uxtb	r3, r3
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3708      	adds	r7, #8
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	20000011 	.word	0x20000011

0800a1a8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a1b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e0 <SD_initialize+0x38>)
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a1b8:	f7ff ff4a 	bl	800a050 <BSP_SD_Init>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d107      	bne.n	800a1d2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff ffd1 	bl	800a16c <SD_CheckStatus>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	4b04      	ldr	r3, [pc, #16]	@ (800a1e0 <SD_initialize+0x38>)
 800a1d0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a1d2:	4b03      	ldr	r3, [pc, #12]	@ (800a1e0 <SD_initialize+0x38>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	b2db      	uxtb	r3, r3
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000011 	.word	0x20000011

0800a1e4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7ff ffbb 	bl	800a16c <SD_CheckStatus>
 800a1f6:	4603      	mov	r3, r0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	60b9      	str	r1, [r7, #8]
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	4603      	mov	r3, r0
 800a20e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a214:	f04f 33ff 	mov.w	r3, #4294967295
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	6879      	ldr	r1, [r7, #4]
 800a21c:	68b8      	ldr	r0, [r7, #8]
 800a21e:	f7ff ff3d 	bl	800a09c <BSP_SD_ReadBlocks>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d107      	bne.n	800a238 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a228:	bf00      	nop
 800a22a:	f7ff ff73 	bl	800a114 <BSP_SD_GetCardState>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1fa      	bne.n	800a22a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a238:	7dfb      	ldrb	r3, [r7, #23]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b086      	sub	sp, #24
 800a246:	af00      	add	r7, sp, #0
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a256:	f04f 33ff 	mov.w	r3, #4294967295
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	68b8      	ldr	r0, [r7, #8]
 800a260:	f7ff ff3a 	bl	800a0d8 <BSP_SD_WriteBlocks>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d107      	bne.n	800a27a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a26a:	bf00      	nop
 800a26c:	f7ff ff52 	bl	800a114 <BSP_SD_GetCardState>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1fa      	bne.n	800a26c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a276:	2300      	movs	r3, #0
 800a278:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b08c      	sub	sp, #48	@ 0x30
 800a288:	af00      	add	r7, sp, #0
 800a28a:	4603      	mov	r3, r0
 800a28c:	603a      	str	r2, [r7, #0]
 800a28e:	71fb      	strb	r3, [r7, #7]
 800a290:	460b      	mov	r3, r1
 800a292:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a29a:	4b25      	ldr	r3, [pc, #148]	@ (800a330 <SD_ioctl+0xac>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <SD_ioctl+0x28>
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e03c      	b.n	800a326 <SD_ioctl+0xa2>

  switch (cmd)
 800a2ac:	79bb      	ldrb	r3, [r7, #6]
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d834      	bhi.n	800a31c <SD_ioctl+0x98>
 800a2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b8 <SD_ioctl+0x34>)
 800a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b8:	0800a2c9 	.word	0x0800a2c9
 800a2bc:	0800a2d1 	.word	0x0800a2d1
 800a2c0:	0800a2e9 	.word	0x0800a2e9
 800a2c4:	0800a303 	.word	0x0800a303
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a2ce:	e028      	b.n	800a322 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7ff ff2d 	bl	800a134 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a2da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a2e6:	e01c      	b.n	800a322 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a2e8:	f107 030c 	add.w	r3, r7, #12
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff ff21 	bl	800a134 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a300:	e00f      	b.n	800a322 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a302:	f107 030c 	add.w	r3, r7, #12
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff ff14 	bl	800a134 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30e:	0a5a      	lsrs	r2, r3, #9
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800a31a:	e002      	b.n	800a322 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a31c:	2304      	movs	r3, #4
 800a31e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800a322:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a326:	4618      	mov	r0, r3
 800a328:	3730      	adds	r7, #48	@ 0x30
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000011 	.word	0x20000011

0800a334 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	SD_disk_initialize (pdrv);
 800a33e:	79fb      	ldrb	r3, [r7, #7]
 800a340:	4618      	mov	r0, r3
 800a342:	f7f7 f803 	bl	800134c <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800a346:	bf00      	nop
 800a348:	4618      	mov	r0, r3
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SD_disk_status (pdrv);
 800a35a:	79fb      	ldrb	r3, [r7, #7]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7f7 f8db 	bl	8001518 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800a362:	bf00      	nop
 800a364:	4618      	mov	r0, r3
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_disk_read (pdrv, buff, sector, count);
 800a37c:	7bf8      	ldrb	r0, [r7, #15]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	68b9      	ldr	r1, [r7, #8]
 800a384:	f7f7 f8de 	bl	8001544 <SD_disk_read>
  /* USER CODE END READ */
}
 800a388:	bf00      	nop
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
 800a39c:	603b      	str	r3, [r7, #0]
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_disk_write (pdrv, buff, sector, count);
 800a3a2:	7bf8      	ldrb	r0, [r7, #15]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	68b9      	ldr	r1, [r7, #8]
 800a3aa:	f7f7 f935 	bl	8001618 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800a3ae:	bf00      	nop
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	603a      	str	r2, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	SD_disk_ioctl (pdrv, cmd, buff);
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	79b9      	ldrb	r1, [r7, #6]
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f7 f9a6 	bl	8001720 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800a3d4:	bf00      	nop
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	4a08      	ldr	r2, [pc, #32]	@ (800a410 <disk_status+0x30>)
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	79fa      	ldrb	r2, [r7, #7]
 800a3f8:	4905      	ldr	r1, [pc, #20]	@ (800a410 <disk_status+0x30>)
 800a3fa:	440a      	add	r2, r1
 800a3fc:	7b12      	ldrb	r2, [r2, #12]
 800a3fe:	4610      	mov	r0, r2
 800a400:	4798      	blx	r3
 800a402:	4603      	mov	r3, r0
 800a404:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a406:	7bfb      	ldrb	r3, [r7, #15]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20002b3c 	.word	0x20002b3c

0800a414 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a41e:	2300      	movs	r3, #0
 800a420:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	4a0e      	ldr	r2, [pc, #56]	@ (800a460 <disk_initialize+0x4c>)
 800a426:	5cd3      	ldrb	r3, [r2, r3]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d114      	bne.n	800a456 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a42c:	79fb      	ldrb	r3, [r7, #7]
 800a42e:	4a0c      	ldr	r2, [pc, #48]	@ (800a460 <disk_initialize+0x4c>)
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	79fa      	ldrb	r2, [r7, #7]
 800a43a:	4909      	ldr	r1, [pc, #36]	@ (800a460 <disk_initialize+0x4c>)
 800a43c:	440a      	add	r2, r1
 800a43e:	7b12      	ldrb	r2, [r2, #12]
 800a440:	4610      	mov	r0, r2
 800a442:	4798      	blx	r3
 800a444:	4603      	mov	r3, r0
 800a446:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d103      	bne.n	800a456 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	4a03      	ldr	r2, [pc, #12]	@ (800a460 <disk_initialize+0x4c>)
 800a452:	2101      	movs	r1, #1
 800a454:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a456:	7bfb      	ldrb	r3, [r7, #15]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20002b3c 	.word	0x20002b3c

0800a464 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a464:	b590      	push	{r4, r7, lr}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60b9      	str	r1, [r7, #8]
 800a46c:	607a      	str	r2, [r7, #4]
 800a46e:	603b      	str	r3, [r7, #0]
 800a470:	4603      	mov	r3, r0
 800a472:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a474:	7bfb      	ldrb	r3, [r7, #15]
 800a476:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a0 <disk_read+0x3c>)
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	689c      	ldr	r4, [r3, #8]
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	4a07      	ldr	r2, [pc, #28]	@ (800a4a0 <disk_read+0x3c>)
 800a484:	4413      	add	r3, r2
 800a486:	7b18      	ldrb	r0, [r3, #12]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	68b9      	ldr	r1, [r7, #8]
 800a48e:	47a0      	blx	r4
 800a490:	4603      	mov	r3, r0
 800a492:	75fb      	strb	r3, [r7, #23]
  return res;
 800a494:	7dfb      	ldrb	r3, [r7, #23]
}
 800a496:	4618      	mov	r0, r3
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd90      	pop	{r4, r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	20002b3c 	.word	0x20002b3c

0800a4a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a4a4:	b590      	push	{r4, r7, lr}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60b9      	str	r1, [r7, #8]
 800a4ac:	607a      	str	r2, [r7, #4]
 800a4ae:	603b      	str	r3, [r7, #0]
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	4a0a      	ldr	r2, [pc, #40]	@ (800a4e0 <disk_write+0x3c>)
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4413      	add	r3, r2
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	68dc      	ldr	r4, [r3, #12]
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	4a07      	ldr	r2, [pc, #28]	@ (800a4e0 <disk_write+0x3c>)
 800a4c4:	4413      	add	r3, r2
 800a4c6:	7b18      	ldrb	r0, [r3, #12]
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	47a0      	blx	r4
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	371c      	adds	r7, #28
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd90      	pop	{r4, r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	20002b3c 	.word	0x20002b3c

0800a4e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	603a      	str	r2, [r7, #0]
 800a4ee:	71fb      	strb	r3, [r7, #7]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	4a09      	ldr	r2, [pc, #36]	@ (800a51c <disk_ioctl+0x38>)
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	79fa      	ldrb	r2, [r7, #7]
 800a502:	4906      	ldr	r1, [pc, #24]	@ (800a51c <disk_ioctl+0x38>)
 800a504:	440a      	add	r2, r1
 800a506:	7b10      	ldrb	r0, [r2, #12]
 800a508:	79b9      	ldrb	r1, [r7, #6]
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4798      	blx	r3
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
  return res;
 800a512:	7bfb      	ldrb	r3, [r7, #15]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3710      	adds	r7, #16
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	20002b3c 	.word	0x20002b3c

0800a520 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	3301      	adds	r3, #1
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a530:	89fb      	ldrh	r3, [r7, #14]
 800a532:	021b      	lsls	r3, r3, #8
 800a534:	b21a      	sxth	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	b21b      	sxth	r3, r3
 800a53c:	4313      	orrs	r3, r2
 800a53e:	b21b      	sxth	r3, r3
 800a540:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a542:	89fb      	ldrh	r3, [r7, #14]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a550:	b480      	push	{r7}
 800a552:	b085      	sub	sp, #20
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3303      	adds	r3, #3
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	3202      	adds	r2, #2
 800a568:	7812      	ldrb	r2, [r2, #0]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	021b      	lsls	r3, r3, #8
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	3201      	adds	r2, #1
 800a576:	7812      	ldrb	r2, [r2, #0]
 800a578:	4313      	orrs	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	021b      	lsls	r3, r3, #8
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	7812      	ldrb	r2, [r2, #0]
 800a584:	4313      	orrs	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]
	return rv;
 800a588:	68fb      	ldr	r3, [r7, #12]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	887a      	ldrh	r2, [r7, #2]
 800a5aa:	b2d2      	uxtb	r2, r2
 800a5ac:	701a      	strb	r2, [r3, #0]
 800a5ae:	887b      	ldrh	r3, [r7, #2]
 800a5b0:	0a1b      	lsrs	r3, r3, #8
 800a5b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	607a      	str	r2, [r7, #4]
 800a5ba:	887a      	ldrh	r2, [r7, #2]
 800a5bc:	b2d2      	uxtb	r2, r2
 800a5be:	701a      	strb	r2, [r3, #0]
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	1c5a      	adds	r2, r3, #1
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	0a1b      	lsrs	r3, r3, #8
 800a5e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	607a      	str	r2, [r7, #4]
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	b2d2      	uxtb	r2, r2
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	0a1b      	lsrs	r3, r3, #8
 800a5f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	b2d2      	uxtb	r2, r2
 800a604:	701a      	strb	r2, [r3, #0]
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	0a1b      	lsrs	r3, r3, #8
 800a60a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	607a      	str	r2, [r7, #4]
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	b2d2      	uxtb	r2, r2
 800a616:	701a      	strb	r2, [r3, #0]
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a624:	b480      	push	{r7}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00d      	beq.n	800a65a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	1c53      	adds	r3, r2, #1
 800a642:	613b      	str	r3, [r7, #16]
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	1c59      	adds	r1, r3, #1
 800a648:	6179      	str	r1, [r7, #20]
 800a64a:	7812      	ldrb	r2, [r2, #0]
 800a64c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	3b01      	subs	r3, #1
 800a652:	607b      	str	r3, [r7, #4]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1f1      	bne.n	800a63e <mem_cpy+0x1a>
	}
}
 800a65a:	bf00      	nop
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a666:	b480      	push	{r7}
 800a668:	b087      	sub	sp, #28
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	617a      	str	r2, [r7, #20]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	b2d2      	uxtb	r2, r2
 800a680:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3b01      	subs	r3, #1
 800a686:	607b      	str	r3, [r7, #4]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1f3      	bne.n	800a676 <mem_set+0x10>
}
 800a68e:	bf00      	nop
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a69c:	b480      	push	{r7}
 800a69e:	b089      	sub	sp, #36	@ 0x24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	61fb      	str	r3, [r7, #28]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	61fa      	str	r2, [r7, #28]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	61ba      	str	r2, [r7, #24]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	1acb      	subs	r3, r1, r3
 800a6c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	607b      	str	r3, [r7, #4]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <mem_cmp+0x40>
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0eb      	beq.n	800a6b4 <mem_cmp+0x18>

	return r;
 800a6dc:	697b      	ldr	r3, [r7, #20]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3724      	adds	r7, #36	@ 0x24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a6f4:	e002      	b.n	800a6fc <chk_chr+0x12>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	607b      	str	r3, [r7, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <chk_chr+0x26>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	461a      	mov	r2, r3
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d1f2      	bne.n	800a6f6 <chk_chr+0xc>
	return *str;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	781b      	ldrb	r3, [r3, #0]
}
 800a714:	4618      	mov	r0, r3
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a72a:	2300      	movs	r3, #0
 800a72c:	60bb      	str	r3, [r7, #8]
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	e029      	b.n	800a788 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a734:	4a27      	ldr	r2, [pc, #156]	@ (800a7d4 <chk_lock+0xb4>)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	4413      	add	r3, r2
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d01d      	beq.n	800a77e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a742:	4a24      	ldr	r2, [pc, #144]	@ (800a7d4 <chk_lock+0xb4>)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	011b      	lsls	r3, r3, #4
 800a748:	4413      	add	r3, r2
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	429a      	cmp	r2, r3
 800a752:	d116      	bne.n	800a782 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a754:	4a1f      	ldr	r2, [pc, #124]	@ (800a7d4 <chk_lock+0xb4>)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	4413      	add	r3, r2
 800a75c:	3304      	adds	r3, #4
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a764:	429a      	cmp	r2, r3
 800a766:	d10c      	bne.n	800a782 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a768:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d4 <chk_lock+0xb4>)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	4413      	add	r3, r2
 800a770:	3308      	adds	r3, #8
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a778:	429a      	cmp	r2, r3
 800a77a:	d102      	bne.n	800a782 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a77c:	e007      	b.n	800a78e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	3301      	adds	r3, #1
 800a786:	60fb      	str	r3, [r7, #12]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d9d2      	bls.n	800a734 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2b02      	cmp	r3, #2
 800a792:	d109      	bne.n	800a7a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <chk_lock+0x80>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d101      	bne.n	800a7a4 <chk_lock+0x84>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e010      	b.n	800a7c6 <chk_lock+0xa6>
 800a7a4:	2312      	movs	r3, #18
 800a7a6:	e00e      	b.n	800a7c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d108      	bne.n	800a7c0 <chk_lock+0xa0>
 800a7ae:	4a09      	ldr	r2, [pc, #36]	@ (800a7d4 <chk_lock+0xb4>)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	011b      	lsls	r3, r3, #4
 800a7b4:	4413      	add	r3, r2
 800a7b6:	330c      	adds	r3, #12
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7be:	d101      	bne.n	800a7c4 <chk_lock+0xa4>
 800a7c0:	2310      	movs	r3, #16
 800a7c2:	e000      	b.n	800a7c6 <chk_lock+0xa6>
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	2000291c 	.word	0x2000291c

0800a7d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	e002      	b.n	800a7ea <enq_lock+0x12>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	607b      	str	r3, [r7, #4]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d806      	bhi.n	800a7fe <enq_lock+0x26>
 800a7f0:	4a09      	ldr	r2, [pc, #36]	@ (800a818 <enq_lock+0x40>)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	011b      	lsls	r3, r3, #4
 800a7f6:	4413      	add	r3, r2
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1f2      	bne.n	800a7e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b02      	cmp	r3, #2
 800a802:	bf14      	ite	ne
 800a804:	2301      	movne	r3, #1
 800a806:	2300      	moveq	r3, #0
 800a808:	b2db      	uxtb	r3, r3
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	370c      	adds	r7, #12
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	2000291c 	.word	0x2000291c

0800a81c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a826:	2300      	movs	r3, #0
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	e01f      	b.n	800a86c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a82c:	4a41      	ldr	r2, [pc, #260]	@ (800a934 <inc_lock+0x118>)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	4413      	add	r3, r2
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d113      	bne.n	800a866 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a83e:	4a3d      	ldr	r2, [pc, #244]	@ (800a934 <inc_lock+0x118>)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	011b      	lsls	r3, r3, #4
 800a844:	4413      	add	r3, r2
 800a846:	3304      	adds	r3, #4
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a84e:	429a      	cmp	r2, r3
 800a850:	d109      	bne.n	800a866 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a852:	4a38      	ldr	r2, [pc, #224]	@ (800a934 <inc_lock+0x118>)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	011b      	lsls	r3, r3, #4
 800a858:	4413      	add	r3, r2
 800a85a:	3308      	adds	r3, #8
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a862:	429a      	cmp	r2, r3
 800a864:	d006      	beq.n	800a874 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d9dc      	bls.n	800a82c <inc_lock+0x10>
 800a872:	e000      	b.n	800a876 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a874:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d132      	bne.n	800a8e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e002      	b.n	800a888 <inc_lock+0x6c>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3301      	adds	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d806      	bhi.n	800a89c <inc_lock+0x80>
 800a88e:	4a29      	ldr	r2, [pc, #164]	@ (800a934 <inc_lock+0x118>)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	011b      	lsls	r3, r3, #4
 800a894:	4413      	add	r3, r2
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1f2      	bne.n	800a882 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d101      	bne.n	800a8a6 <inc_lock+0x8a>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e040      	b.n	800a928 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	4922      	ldr	r1, [pc, #136]	@ (800a934 <inc_lock+0x118>)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	011b      	lsls	r3, r3, #4
 800a8b0:	440b      	add	r3, r1
 800a8b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	491e      	ldr	r1, [pc, #120]	@ (800a934 <inc_lock+0x118>)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	011b      	lsls	r3, r3, #4
 800a8be:	440b      	add	r3, r1
 800a8c0:	3304      	adds	r3, #4
 800a8c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	695a      	ldr	r2, [r3, #20]
 800a8c8:	491a      	ldr	r1, [pc, #104]	@ (800a934 <inc_lock+0x118>)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	011b      	lsls	r3, r3, #4
 800a8ce:	440b      	add	r3, r1
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a8d4:	4a17      	ldr	r2, [pc, #92]	@ (800a934 <inc_lock+0x118>)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	011b      	lsls	r3, r3, #4
 800a8da:	4413      	add	r3, r2
 800a8dc:	330c      	adds	r3, #12
 800a8de:	2200      	movs	r2, #0
 800a8e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d009      	beq.n	800a8fc <inc_lock+0xe0>
 800a8e8:	4a12      	ldr	r2, [pc, #72]	@ (800a934 <inc_lock+0x118>)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	4413      	add	r3, r2
 800a8f0:	330c      	adds	r3, #12
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <inc_lock+0xe0>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e015      	b.n	800a928 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d108      	bne.n	800a914 <inc_lock+0xf8>
 800a902:	4a0c      	ldr	r2, [pc, #48]	@ (800a934 <inc_lock+0x118>)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	4413      	add	r3, r2
 800a90a:	330c      	adds	r3, #12
 800a90c:	881b      	ldrh	r3, [r3, #0]
 800a90e:	3301      	adds	r3, #1
 800a910:	b29a      	uxth	r2, r3
 800a912:	e001      	b.n	800a918 <inc_lock+0xfc>
 800a914:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a918:	4906      	ldr	r1, [pc, #24]	@ (800a934 <inc_lock+0x118>)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	011b      	lsls	r3, r3, #4
 800a91e:	440b      	add	r3, r1
 800a920:	330c      	adds	r3, #12
 800a922:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	3301      	adds	r3, #1
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3714      	adds	r7, #20
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	2000291c 	.word	0x2000291c

0800a938 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3b01      	subs	r3, #1
 800a944:	607b      	str	r3, [r7, #4]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d825      	bhi.n	800a998 <dec_lock+0x60>
		n = Files[i].ctr;
 800a94c:	4a17      	ldr	r2, [pc, #92]	@ (800a9ac <dec_lock+0x74>)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	4413      	add	r3, r2
 800a954:	330c      	adds	r3, #12
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a95a:	89fb      	ldrh	r3, [r7, #14]
 800a95c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a960:	d101      	bne.n	800a966 <dec_lock+0x2e>
 800a962:	2300      	movs	r3, #0
 800a964:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a966:	89fb      	ldrh	r3, [r7, #14]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <dec_lock+0x3a>
 800a96c:	89fb      	ldrh	r3, [r7, #14]
 800a96e:	3b01      	subs	r3, #1
 800a970:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a972:	4a0e      	ldr	r2, [pc, #56]	@ (800a9ac <dec_lock+0x74>)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	011b      	lsls	r3, r3, #4
 800a978:	4413      	add	r3, r2
 800a97a:	330c      	adds	r3, #12
 800a97c:	89fa      	ldrh	r2, [r7, #14]
 800a97e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a980:	89fb      	ldrh	r3, [r7, #14]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d105      	bne.n	800a992 <dec_lock+0x5a>
 800a986:	4a09      	ldr	r2, [pc, #36]	@ (800a9ac <dec_lock+0x74>)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	011b      	lsls	r3, r3, #4
 800a98c:	4413      	add	r3, r2
 800a98e:	2200      	movs	r2, #0
 800a990:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	737b      	strb	r3, [r7, #13]
 800a996:	e001      	b.n	800a99c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a998:	2302      	movs	r3, #2
 800a99a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a99c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	2000291c 	.word	0x2000291c

0800a9b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	e010      	b.n	800a9e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9be:	4a0d      	ldr	r2, [pc, #52]	@ (800a9f4 <clear_lock+0x44>)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	011b      	lsls	r3, r3, #4
 800a9c4:	4413      	add	r3, r2
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d105      	bne.n	800a9da <clear_lock+0x2a>
 800a9ce:	4a09      	ldr	r2, [pc, #36]	@ (800a9f4 <clear_lock+0x44>)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	011b      	lsls	r3, r3, #4
 800a9d4:	4413      	add	r3, r2
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	60fb      	str	r3, [r7, #12]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d9eb      	bls.n	800a9be <clear_lock+0xe>
	}
}
 800a9e6:	bf00      	nop
 800a9e8:	bf00      	nop
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	2000291c 	.word	0x2000291c

0800a9f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	78db      	ldrb	r3, [r3, #3]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d034      	beq.n	800aa76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	7858      	ldrb	r0, [r3, #1]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	f7ff fd40 	bl	800a4a4 <disk_write>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d002      	beq.n	800aa30 <sync_window+0x38>
			res = FR_DISK_ERR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	73fb      	strb	r3, [r7, #15]
 800aa2e:	e022      	b.n	800aa76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	1ad2      	subs	r2, r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d217      	bcs.n	800aa76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	789b      	ldrb	r3, [r3, #2]
 800aa4a:	613b      	str	r3, [r7, #16]
 800aa4c:	e010      	b.n	800aa70 <sync_window+0x78>
					wsect += fs->fsize;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	4413      	add	r3, r2
 800aa56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	7858      	ldrb	r0, [r3, #1]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa62:	2301      	movs	r3, #1
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	f7ff fd1d 	bl	800a4a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	613b      	str	r3, [r7, #16]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d8eb      	bhi.n	800aa4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d01b      	beq.n	800aad0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff ffad 	bl	800a9f8 <sync_window>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d113      	bne.n	800aad0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	7858      	ldrb	r0, [r3, #1]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aab2:	2301      	movs	r3, #1
 800aab4:	683a      	ldr	r2, [r7, #0]
 800aab6:	f7ff fcd5 	bl	800a464 <disk_read>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d004      	beq.n	800aaca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aac0:	f04f 33ff 	mov.w	r3, #4294967295
 800aac4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
	...

0800aadc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7ff ff87 	bl	800a9f8 <sync_window>
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d159      	bne.n	800aba8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d149      	bne.n	800ab90 <sync_fs+0xb4>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	791b      	ldrb	r3, [r3, #4]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d145      	bne.n	800ab90 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	899b      	ldrh	r3, [r3, #12]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	2100      	movs	r1, #0
 800ab12:	f7ff fda8 	bl	800a666 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	3338      	adds	r3, #56	@ 0x38
 800ab1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ab1e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fd37 	bl	800a596 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3338      	adds	r3, #56	@ 0x38
 800ab2c:	4921      	ldr	r1, [pc, #132]	@ (800abb4 <sync_fs+0xd8>)
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff fd4c 	bl	800a5cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3338      	adds	r3, #56	@ 0x38
 800ab38:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ab3c:	491e      	ldr	r1, [pc, #120]	@ (800abb8 <sync_fs+0xdc>)
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff fd44 	bl	800a5cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3338      	adds	r3, #56	@ 0x38
 800ab48:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f7ff fd3a 	bl	800a5cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	3338      	adds	r3, #56	@ 0x38
 800ab5c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	695b      	ldr	r3, [r3, #20]
 800ab64:	4619      	mov	r1, r3
 800ab66:	4610      	mov	r0, r2
 800ab68:	f7ff fd30 	bl	800a5cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab70:	1c5a      	adds	r2, r3, #1
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	7858      	ldrb	r0, [r3, #1]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab84:	2301      	movs	r3, #1
 800ab86:	f7ff fc8d 	bl	800a4a4 <disk_write>
			fs->fsi_flag = 0;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	785b      	ldrb	r3, [r3, #1]
 800ab94:	2200      	movs	r2, #0
 800ab96:	2100      	movs	r1, #0
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7ff fca3 	bl	800a4e4 <disk_ioctl>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <sync_fs+0xcc>
 800aba4:	2301      	movs	r3, #1
 800aba6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	41615252 	.word	0x41615252
 800abb8:	61417272 	.word	0x61417272

0800abbc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	3b02      	subs	r3, #2
 800abca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	3b02      	subs	r3, #2
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d301      	bcc.n	800abdc <clust2sect+0x20>
 800abd8:	2300      	movs	r3, #0
 800abda:	e008      	b.n	800abee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	895b      	ldrh	r3, [r3, #10]
 800abe0:	461a      	mov	r2, r3
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	fb03 f202 	mul.w	r2, r3, r2
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abec:	4413      	add	r3, r2
}
 800abee:	4618      	mov	r0, r3
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr

0800abfa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b086      	sub	sp, #24
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d904      	bls.n	800ac1a <get_fat+0x20>
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d302      	bcc.n	800ac20 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	617b      	str	r3, [r7, #20]
 800ac1e:	e0ba      	b.n	800ad96 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ac20:	f04f 33ff 	mov.w	r3, #4294967295
 800ac24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	2b03      	cmp	r3, #3
 800ac2c:	f000 8082 	beq.w	800ad34 <get_fat+0x13a>
 800ac30:	2b03      	cmp	r3, #3
 800ac32:	f300 80a6 	bgt.w	800ad82 <get_fat+0x188>
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d002      	beq.n	800ac40 <get_fat+0x46>
 800ac3a:	2b02      	cmp	r3, #2
 800ac3c:	d055      	beq.n	800acea <get_fat+0xf0>
 800ac3e:	e0a0      	b.n	800ad82 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	60fb      	str	r3, [r7, #12]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	085b      	lsrs	r3, r3, #1
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	899b      	ldrh	r3, [r3, #12]
 800ac56:	4619      	mov	r1, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac5e:	4413      	add	r3, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	6938      	ldr	r0, [r7, #16]
 800ac64:	f7ff ff0c 	bl	800aa80 <move_window>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f040 808c 	bne.w	800ad88 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	1c5a      	adds	r2, r3, #1
 800ac74:	60fa      	str	r2, [r7, #12]
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	8992      	ldrh	r2, [r2, #12]
 800ac7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac7e:	fb01 f202 	mul.w	r2, r1, r2
 800ac82:	1a9b      	subs	r3, r3, r2
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	4413      	add	r3, r2
 800ac88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ac8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	899b      	ldrh	r3, [r3, #12]
 800ac96:	4619      	mov	r1, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac9e:	4413      	add	r3, r2
 800aca0:	4619      	mov	r1, r3
 800aca2:	6938      	ldr	r0, [r7, #16]
 800aca4:	f7ff feec 	bl	800aa80 <move_window>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d16e      	bne.n	800ad8c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	899b      	ldrh	r3, [r3, #12]
 800acb2:	461a      	mov	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800acba:	fb01 f202 	mul.w	r2, r1, r2
 800acbe:	1a9b      	subs	r3, r3, r2
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	4413      	add	r3, r2
 800acc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800acc8:	021b      	lsls	r3, r3, #8
 800acca:	68ba      	ldr	r2, [r7, #8]
 800accc:	4313      	orrs	r3, r2
 800acce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <get_fat+0xe6>
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	091b      	lsrs	r3, r3, #4
 800acde:	e002      	b.n	800ace6 <get_fat+0xec>
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ace6:	617b      	str	r3, [r7, #20]
			break;
 800ace8:	e055      	b.n	800ad96 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	899b      	ldrh	r3, [r3, #12]
 800acf2:	085b      	lsrs	r3, r3, #1
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	4619      	mov	r1, r3
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800acfe:	4413      	add	r3, r2
 800ad00:	4619      	mov	r1, r3
 800ad02:	6938      	ldr	r0, [r7, #16]
 800ad04:	f7ff febc 	bl	800aa80 <move_window>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d140      	bne.n	800ad90 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	005b      	lsls	r3, r3, #1
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	8992      	ldrh	r2, [r2, #12]
 800ad1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad20:	fb00 f202 	mul.w	r2, r0, r2
 800ad24:	1a9b      	subs	r3, r3, r2
 800ad26:	440b      	add	r3, r1
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7ff fbf9 	bl	800a520 <ld_word>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	617b      	str	r3, [r7, #20]
			break;
 800ad32:	e030      	b.n	800ad96 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	899b      	ldrh	r3, [r3, #12]
 800ad3c:	089b      	lsrs	r3, r3, #2
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	4619      	mov	r1, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad48:	4413      	add	r3, r2
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6938      	ldr	r0, [r7, #16]
 800ad4e:	f7ff fe97 	bl	800aa80 <move_window>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d11d      	bne.n	800ad94 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	693a      	ldr	r2, [r7, #16]
 800ad64:	8992      	ldrh	r2, [r2, #12]
 800ad66:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad6a:	fb00 f202 	mul.w	r2, r0, r2
 800ad6e:	1a9b      	subs	r3, r3, r2
 800ad70:	440b      	add	r3, r1
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7ff fbec 	bl	800a550 <ld_dword>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ad7e:	617b      	str	r3, [r7, #20]
			break;
 800ad80:	e009      	b.n	800ad96 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad82:	2301      	movs	r3, #1
 800ad84:	617b      	str	r3, [r7, #20]
 800ad86:	e006      	b.n	800ad96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad88:	bf00      	nop
 800ad8a:	e004      	b.n	800ad96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad8c:	bf00      	nop
 800ad8e:	e002      	b.n	800ad96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad90:	bf00      	nop
 800ad92:	e000      	b.n	800ad96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad94:	bf00      	nop
		}
	}

	return val;
 800ad96:	697b      	ldr	r3, [r7, #20]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ada0:	b590      	push	{r4, r7, lr}
 800ada2:	b089      	sub	sp, #36	@ 0x24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800adac:	2302      	movs	r3, #2
 800adae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	f240 8109 	bls.w	800afca <put_fat+0x22a>
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	f080 8103 	bcs.w	800afca <put_fat+0x22a>
		switch (fs->fs_type) {
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b03      	cmp	r3, #3
 800adca:	f000 80b6 	beq.w	800af3a <put_fat+0x19a>
 800adce:	2b03      	cmp	r3, #3
 800add0:	f300 80fb 	bgt.w	800afca <put_fat+0x22a>
 800add4:	2b01      	cmp	r3, #1
 800add6:	d003      	beq.n	800ade0 <put_fat+0x40>
 800add8:	2b02      	cmp	r3, #2
 800adda:	f000 8083 	beq.w	800aee4 <put_fat+0x144>
 800adde:	e0f4      	b.n	800afca <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	61bb      	str	r3, [r7, #24]
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	085b      	lsrs	r3, r3, #1
 800ade8:	69ba      	ldr	r2, [r7, #24]
 800adea:	4413      	add	r3, r2
 800adec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	899b      	ldrh	r3, [r3, #12]
 800adf6:	4619      	mov	r1, r3
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800adfe:	4413      	add	r3, r2
 800ae00:	4619      	mov	r1, r3
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f7ff fe3c 	bl	800aa80 <move_window>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae0c:	7ffb      	ldrb	r3, [r7, #31]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 80d4 	bne.w	800afbc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	1c5a      	adds	r2, r3, #1
 800ae1e:	61ba      	str	r2, [r7, #24]
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	8992      	ldrh	r2, [r2, #12]
 800ae24:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae28:	fb00 f202 	mul.w	r2, r0, r2
 800ae2c:	1a9b      	subs	r3, r3, r2
 800ae2e:	440b      	add	r3, r1
 800ae30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00d      	beq.n	800ae58 <put_fat+0xb8>
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	b25b      	sxtb	r3, r3
 800ae42:	f003 030f 	and.w	r3, r3, #15
 800ae46:	b25a      	sxtb	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	011b      	lsls	r3, r3, #4
 800ae4e:	b25b      	sxtb	r3, r3
 800ae50:	4313      	orrs	r3, r2
 800ae52:	b25b      	sxtb	r3, r3
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	e001      	b.n	800ae5c <put_fat+0xbc>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2201      	movs	r2, #1
 800ae64:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	899b      	ldrh	r3, [r3, #12]
 800ae6e:	4619      	mov	r1, r3
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae76:	4413      	add	r3, r2
 800ae78:	4619      	mov	r1, r3
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff fe00 	bl	800aa80 <move_window>
 800ae80:	4603      	mov	r3, r0
 800ae82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae84:	7ffb      	ldrb	r3, [r7, #31]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f040 809a 	bne.w	800afc0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	899b      	ldrh	r3, [r3, #12]
 800ae96:	461a      	mov	r2, r3
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae9e:	fb00 f202 	mul.w	r2, r0, r2
 800aea2:	1a9b      	subs	r3, r3, r2
 800aea4:	440b      	add	r3, r1
 800aea6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d003      	beq.n	800aeba <put_fat+0x11a>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	091b      	lsrs	r3, r3, #4
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	e00e      	b.n	800aed8 <put_fat+0x138>
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	b25b      	sxtb	r3, r3
 800aec0:	f023 030f 	bic.w	r3, r3, #15
 800aec4:	b25a      	sxtb	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	0a1b      	lsrs	r3, r3, #8
 800aeca:	b25b      	sxtb	r3, r3
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	b25b      	sxtb	r3, r3
 800aed2:	4313      	orrs	r3, r2
 800aed4:	b25b      	sxtb	r3, r3
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2201      	movs	r2, #1
 800aee0:	70da      	strb	r2, [r3, #3]
			break;
 800aee2:	e072      	b.n	800afca <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	899b      	ldrh	r3, [r3, #12]
 800aeec:	085b      	lsrs	r3, r3, #1
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	4619      	mov	r1, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	fbb3 f3f1 	udiv	r3, r3, r1
 800aef8:	4413      	add	r3, r2
 800aefa:	4619      	mov	r1, r3
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f7ff fdbf 	bl	800aa80 <move_window>
 800af02:	4603      	mov	r3, r0
 800af04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af06:	7ffb      	ldrb	r3, [r7, #31]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d15b      	bne.n	800afc4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	8992      	ldrh	r2, [r2, #12]
 800af1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800af1e:	fb00 f202 	mul.w	r2, r0, r2
 800af22:	1a9b      	subs	r3, r3, r2
 800af24:	440b      	add	r3, r1
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	b292      	uxth	r2, r2
 800af2a:	4611      	mov	r1, r2
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7ff fb32 	bl	800a596 <st_word>
			fs->wflag = 1;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2201      	movs	r2, #1
 800af36:	70da      	strb	r2, [r3, #3]
			break;
 800af38:	e047      	b.n	800afca <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	899b      	ldrh	r3, [r3, #12]
 800af42:	089b      	lsrs	r3, r3, #2
 800af44:	b29b      	uxth	r3, r3
 800af46:	4619      	mov	r1, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800af4e:	4413      	add	r3, r2
 800af50:	4619      	mov	r1, r3
 800af52:	68f8      	ldr	r0, [r7, #12]
 800af54:	f7ff fd94 	bl	800aa80 <move_window>
 800af58:	4603      	mov	r3, r0
 800af5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af5c:	7ffb      	ldrb	r3, [r7, #31]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d132      	bne.n	800afc8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	68fa      	ldr	r2, [r7, #12]
 800af74:	8992      	ldrh	r2, [r2, #12]
 800af76:	fbb3 f0f2 	udiv	r0, r3, r2
 800af7a:	fb00 f202 	mul.w	r2, r0, r2
 800af7e:	1a9b      	subs	r3, r3, r2
 800af80:	440b      	add	r3, r1
 800af82:	4618      	mov	r0, r3
 800af84:	f7ff fae4 	bl	800a550 <ld_dword>
 800af88:	4603      	mov	r3, r0
 800af8a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800af8e:	4323      	orrs	r3, r4
 800af90:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	8992      	ldrh	r2, [r2, #12]
 800afa0:	fbb3 f0f2 	udiv	r0, r3, r2
 800afa4:	fb00 f202 	mul.w	r2, r0, r2
 800afa8:	1a9b      	subs	r3, r3, r2
 800afaa:	440b      	add	r3, r1
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff fb0c 	bl	800a5cc <st_dword>
			fs->wflag = 1;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2201      	movs	r2, #1
 800afb8:	70da      	strb	r2, [r3, #3]
			break;
 800afba:	e006      	b.n	800afca <put_fat+0x22a>
			if (res != FR_OK) break;
 800afbc:	bf00      	nop
 800afbe:	e004      	b.n	800afca <put_fat+0x22a>
			if (res != FR_OK) break;
 800afc0:	bf00      	nop
 800afc2:	e002      	b.n	800afca <put_fat+0x22a>
			if (res != FR_OK) break;
 800afc4:	bf00      	nop
 800afc6:	e000      	b.n	800afca <put_fat+0x22a>
			if (res != FR_OK) break;
 800afc8:	bf00      	nop
		}
	}
	return res;
 800afca:	7ffb      	ldrb	r3, [r7, #31]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3724      	adds	r7, #36	@ 0x24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd90      	pop	{r4, r7, pc}

0800afd4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d904      	bls.n	800affa <remove_chain+0x26>
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d301      	bcc.n	800affe <remove_chain+0x2a>
 800affa:	2302      	movs	r3, #2
 800affc:	e04b      	b.n	800b096 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00c      	beq.n	800b01e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	69b8      	ldr	r0, [r7, #24]
 800b00c:	f7ff fec8 	bl	800ada0 <put_fat>
 800b010:	4603      	mov	r3, r0
 800b012:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b014:	7ffb      	ldrb	r3, [r7, #31]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <remove_chain+0x4a>
 800b01a:	7ffb      	ldrb	r3, [r7, #31]
 800b01c:	e03b      	b.n	800b096 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7ff fdea 	bl	800abfa <get_fat>
 800b026:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d031      	beq.n	800b092 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d101      	bne.n	800b038 <remove_chain+0x64>
 800b034:	2302      	movs	r3, #2
 800b036:	e02e      	b.n	800b096 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03e:	d101      	bne.n	800b044 <remove_chain+0x70>
 800b040:	2301      	movs	r3, #1
 800b042:	e028      	b.n	800b096 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b044:	2200      	movs	r2, #0
 800b046:	68b9      	ldr	r1, [r7, #8]
 800b048:	69b8      	ldr	r0, [r7, #24]
 800b04a:	f7ff fea9 	bl	800ada0 <put_fat>
 800b04e:	4603      	mov	r3, r0
 800b050:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b052:	7ffb      	ldrb	r3, [r7, #31]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <remove_chain+0x88>
 800b058:	7ffb      	ldrb	r3, [r7, #31]
 800b05a:	e01c      	b.n	800b096 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	699a      	ldr	r2, [r3, #24]
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	3b02      	subs	r3, #2
 800b066:	429a      	cmp	r2, r3
 800b068:	d20b      	bcs.n	800b082 <remove_chain+0xae>
			fs->free_clst++;
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	791b      	ldrb	r3, [r3, #4]
 800b078:	f043 0301 	orr.w	r3, r3, #1
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d3c6      	bcc.n	800b01e <remove_chain+0x4a>
 800b090:	e000      	b.n	800b094 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b092:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3720      	adds	r7, #32
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}

0800b09e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b088      	sub	sp, #32
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10d      	bne.n	800b0d0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d004      	beq.n	800b0ca <create_chain+0x2c>
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	69db      	ldr	r3, [r3, #28]
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d31b      	bcc.n	800b102 <create_chain+0x64>
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	61bb      	str	r3, [r7, #24]
 800b0ce:	e018      	b.n	800b102 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff fd91 	bl	800abfa <get_fat>
 800b0d8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d801      	bhi.n	800b0e4 <create_chain+0x46>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e070      	b.n	800b1c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ea:	d101      	bne.n	800b0f0 <create_chain+0x52>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	e06a      	b.n	800b1c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	69db      	ldr	r3, [r3, #28]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d201      	bcs.n	800b0fe <create_chain+0x60>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	e063      	b.n	800b1c6 <create_chain+0x128>
		scl = clst;
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	3301      	adds	r3, #1
 800b10a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	429a      	cmp	r2, r3
 800b114:	d307      	bcc.n	800b126 <create_chain+0x88>
				ncl = 2;
 800b116:	2302      	movs	r3, #2
 800b118:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b11a:	69fa      	ldr	r2, [r7, #28]
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d901      	bls.n	800b126 <create_chain+0x88>
 800b122:	2300      	movs	r3, #0
 800b124:	e04f      	b.n	800b1c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b126:	69f9      	ldr	r1, [r7, #28]
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f7ff fd66 	bl	800abfa <get_fat>
 800b12e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00e      	beq.n	800b154 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d003      	beq.n	800b144 <create_chain+0xa6>
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b142:	d101      	bne.n	800b148 <create_chain+0xaa>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	e03e      	b.n	800b1c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b148:	69fa      	ldr	r2, [r7, #28]
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d1da      	bne.n	800b106 <create_chain+0x68>
 800b150:	2300      	movs	r3, #0
 800b152:	e038      	b.n	800b1c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b154:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b156:	f04f 32ff 	mov.w	r2, #4294967295
 800b15a:	69f9      	ldr	r1, [r7, #28]
 800b15c:	6938      	ldr	r0, [r7, #16]
 800b15e:	f7ff fe1f 	bl	800ada0 <put_fat>
 800b162:	4603      	mov	r3, r0
 800b164:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b166:	7dfb      	ldrb	r3, [r7, #23]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d109      	bne.n	800b180 <create_chain+0xe2>
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d006      	beq.n	800b180 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b172:	69fa      	ldr	r2, [r7, #28]
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6938      	ldr	r0, [r7, #16]
 800b178:	f7ff fe12 	bl	800ada0 <put_fat>
 800b17c:	4603      	mov	r3, r0
 800b17e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b180:	7dfb      	ldrb	r3, [r7, #23]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d116      	bne.n	800b1b4 <create_chain+0x116>
		fs->last_clst = ncl;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	69fa      	ldr	r2, [r7, #28]
 800b18a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	699a      	ldr	r2, [r3, #24]
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	3b02      	subs	r3, #2
 800b196:	429a      	cmp	r2, r3
 800b198:	d804      	bhi.n	800b1a4 <create_chain+0x106>
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	1e5a      	subs	r2, r3, #1
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	791b      	ldrb	r3, [r3, #4]
 800b1a8:	f043 0301 	orr.w	r3, r3, #1
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	711a      	strb	r2, [r3, #4]
 800b1b2:	e007      	b.n	800b1c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d102      	bne.n	800b1c0 <create_chain+0x122>
 800b1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b1be:	e000      	b.n	800b1c2 <create_chain+0x124>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b1c4:	69fb      	ldr	r3, [r7, #28]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3720      	adds	r7, #32
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b1ce:	b480      	push	{r7}
 800b1d0:	b087      	sub	sp, #28
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
 800b1d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	899b      	ldrh	r3, [r3, #12]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	8952      	ldrh	r2, [r2, #10]
 800b1f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	1d1a      	adds	r2, r3, #4
 800b200:	613a      	str	r2, [r7, #16]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <clmt_clust+0x42>
 800b20c:	2300      	movs	r3, #0
 800b20e:	e010      	b.n	800b232 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b210:	697a      	ldr	r2, [r7, #20]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	429a      	cmp	r2, r3
 800b216:	d307      	bcc.n	800b228 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	3304      	adds	r3, #4
 800b224:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b226:	e7e9      	b.n	800b1fc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b228:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	4413      	add	r3, r2
}
 800b232:	4618      	mov	r0, r3
 800b234:	371c      	adds	r7, #28
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b086      	sub	sp, #24
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b254:	d204      	bcs.n	800b260 <dir_sdi+0x22>
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	f003 031f 	and.w	r3, r3, #31
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b260:	2302      	movs	r3, #2
 800b262:	e071      	b.n	800b348 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d106      	bne.n	800b284 <dir_sdi+0x46>
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d902      	bls.n	800b284 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b282:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10c      	bne.n	800b2a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	095b      	lsrs	r3, r3, #5
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	8912      	ldrh	r2, [r2, #8]
 800b292:	4293      	cmp	r3, r2
 800b294:	d301      	bcc.n	800b29a <dir_sdi+0x5c>
 800b296:	2302      	movs	r3, #2
 800b298:	e056      	b.n	800b348 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	61da      	str	r2, [r3, #28]
 800b2a2:	e02d      	b.n	800b300 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	895b      	ldrh	r3, [r3, #10]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	899b      	ldrh	r3, [r3, #12]
 800b2ae:	fb02 f303 	mul.w	r3, r2, r3
 800b2b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2b4:	e019      	b.n	800b2ea <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6979      	ldr	r1, [r7, #20]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7ff fc9d 	bl	800abfa <get_fat>
 800b2c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c8:	d101      	bne.n	800b2ce <dir_sdi+0x90>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e03c      	b.n	800b348 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d904      	bls.n	800b2de <dir_sdi+0xa0>
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d301      	bcc.n	800b2e2 <dir_sdi+0xa4>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e032      	b.n	800b348 <dir_sdi+0x10a>
			ofs -= csz;
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d2e1      	bcs.n	800b2b6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b2f2:	6979      	ldr	r1, [r7, #20]
 800b2f4:	6938      	ldr	r0, [r7, #16]
 800b2f6:	f7ff fc61 	bl	800abbc <clust2sect>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	697a      	ldr	r2, [r7, #20]
 800b304:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <dir_sdi+0xd4>
 800b30e:	2302      	movs	r3, #2
 800b310:	e01a      	b.n	800b348 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	69da      	ldr	r2, [r3, #28]
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	899b      	ldrh	r3, [r3, #12]
 800b31a:	4619      	mov	r1, r3
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b322:	441a      	add	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	899b      	ldrh	r3, [r3, #12]
 800b332:	461a      	mov	r2, r3
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	fbb3 f0f2 	udiv	r0, r3, r2
 800b33a:	fb00 f202 	mul.w	r2, r0, r2
 800b33e:	1a9b      	subs	r3, r3, r2
 800b340:	18ca      	adds	r2, r1, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	695b      	ldr	r3, [r3, #20]
 800b364:	3320      	adds	r3, #32
 800b366:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d003      	beq.n	800b378 <dir_next+0x28>
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b376:	d301      	bcc.n	800b37c <dir_next+0x2c>
 800b378:	2304      	movs	r3, #4
 800b37a:	e0bb      	b.n	800b4f4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	899b      	ldrh	r3, [r3, #12]
 800b380:	461a      	mov	r2, r3
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	fbb3 f1f2 	udiv	r1, r3, r2
 800b388:	fb01 f202 	mul.w	r2, r1, r2
 800b38c:	1a9b      	subs	r3, r3, r2
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f040 809d 	bne.w	800b4ce <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	69db      	ldr	r3, [r3, #28]
 800b398:	1c5a      	adds	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10b      	bne.n	800b3be <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	095b      	lsrs	r3, r3, #5
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	8912      	ldrh	r2, [r2, #8]
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	f0c0 808d 	bcc.w	800b4ce <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	61da      	str	r2, [r3, #28]
 800b3ba:	2304      	movs	r3, #4
 800b3bc:	e09a      	b.n	800b4f4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	899b      	ldrh	r3, [r3, #12]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	8952      	ldrh	r2, [r2, #10]
 800b3ce:	3a01      	subs	r2, #1
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d17b      	bne.n	800b4ce <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	4619      	mov	r1, r3
 800b3de:	4610      	mov	r0, r2
 800b3e0:	f7ff fc0b 	bl	800abfa <get_fat>
 800b3e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d801      	bhi.n	800b3f0 <dir_next+0xa0>
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	e081      	b.n	800b4f4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f6:	d101      	bne.n	800b3fc <dir_next+0xac>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e07b      	b.n	800b4f4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	69db      	ldr	r3, [r3, #28]
 800b400:	697a      	ldr	r2, [r7, #20]
 800b402:	429a      	cmp	r2, r3
 800b404:	d359      	bcc.n	800b4ba <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d104      	bne.n	800b416 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	61da      	str	r2, [r3, #28]
 800b412:	2304      	movs	r3, #4
 800b414:	e06e      	b.n	800b4f4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	699b      	ldr	r3, [r3, #24]
 800b41c:	4619      	mov	r1, r3
 800b41e:	4610      	mov	r0, r2
 800b420:	f7ff fe3d 	bl	800b09e <create_chain>
 800b424:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <dir_next+0xe0>
 800b42c:	2307      	movs	r3, #7
 800b42e:	e061      	b.n	800b4f4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d101      	bne.n	800b43a <dir_next+0xea>
 800b436:	2302      	movs	r3, #2
 800b438:	e05c      	b.n	800b4f4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b440:	d101      	bne.n	800b446 <dir_next+0xf6>
 800b442:	2301      	movs	r3, #1
 800b444:	e056      	b.n	800b4f4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7ff fad6 	bl	800a9f8 <sync_window>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <dir_next+0x106>
 800b452:	2301      	movs	r3, #1
 800b454:	e04e      	b.n	800b4f4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	899b      	ldrh	r3, [r3, #12]
 800b460:	461a      	mov	r2, r3
 800b462:	2100      	movs	r1, #0
 800b464:	f7ff f8ff 	bl	800a666 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b468:	2300      	movs	r3, #0
 800b46a:	613b      	str	r3, [r7, #16]
 800b46c:	6979      	ldr	r1, [r7, #20]
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f7ff fba4 	bl	800abbc <clust2sect>
 800b474:	4602      	mov	r2, r0
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	635a      	str	r2, [r3, #52]	@ 0x34
 800b47a:	e012      	b.n	800b4a2 <dir_next+0x152>
						fs->wflag = 1;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2201      	movs	r2, #1
 800b480:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f7ff fab8 	bl	800a9f8 <sync_window>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <dir_next+0x142>
 800b48e:	2301      	movs	r3, #1
 800b490:	e030      	b.n	800b4f4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	3301      	adds	r3, #1
 800b496:	613b      	str	r3, [r7, #16]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	895b      	ldrh	r3, [r3, #10]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d3e6      	bcc.n	800b47c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	1ad2      	subs	r2, r2, r3
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b4c0:	6979      	ldr	r1, [r7, #20]
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f7ff fb7a 	bl	800abbc <clust2sect>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	899b      	ldrh	r3, [r3, #12]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4e6:	fb00 f202 	mul.w	r2, r0, r2
 800b4ea:	1a9b      	subs	r3, r3, r2
 800b4ec:	18ca      	adds	r2, r1, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3718      	adds	r7, #24
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b50c:	2100      	movs	r1, #0
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff fe95 	bl	800b23e <dir_sdi>
 800b514:	4603      	mov	r3, r0
 800b516:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d12b      	bne.n	800b576 <dir_alloc+0x7a>
		n = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	69db      	ldr	r3, [r3, #28]
 800b526:	4619      	mov	r1, r3
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f7ff faa9 	bl	800aa80 <move_window>
 800b52e:	4603      	mov	r3, r0
 800b530:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b532:	7dfb      	ldrb	r3, [r7, #23]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d11d      	bne.n	800b574 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6a1b      	ldr	r3, [r3, #32]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	2be5      	cmp	r3, #229	@ 0xe5
 800b540:	d004      	beq.n	800b54c <dir_alloc+0x50>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d107      	bne.n	800b55c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	3301      	adds	r3, #1
 800b550:	613b      	str	r3, [r7, #16]
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d102      	bne.n	800b560 <dir_alloc+0x64>
 800b55a:	e00c      	b.n	800b576 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b55c:	2300      	movs	r3, #0
 800b55e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b560:	2101      	movs	r1, #1
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff fef4 	bl	800b350 <dir_next>
 800b568:	4603      	mov	r3, r0
 800b56a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b56c:	7dfb      	ldrb	r3, [r7, #23]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0d7      	beq.n	800b522 <dir_alloc+0x26>
 800b572:	e000      	b.n	800b576 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b574:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	2b04      	cmp	r3, #4
 800b57a:	d101      	bne.n	800b580 <dir_alloc+0x84>
 800b57c:	2307      	movs	r3, #7
 800b57e:	75fb      	strb	r3, [r7, #23]
	return res;
 800b580:	7dfb      	ldrb	r3, [r7, #23]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3718      	adds	r7, #24
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	331a      	adds	r3, #26
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fe ffc1 	bl	800a520 <ld_word>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d109      	bne.n	800b5be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	3314      	adds	r3, #20
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe ffb6 	bl	800a520 <ld_word>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	041b      	lsls	r3, r3, #16
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b5be:	68fb      	ldr	r3, [r7, #12]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	331a      	adds	r3, #26
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	b292      	uxth	r2, r2
 800b5dc:	4611      	mov	r1, r2
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe ffd9 	bl	800a596 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b03      	cmp	r3, #3
 800b5ea:	d109      	bne.n	800b600 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f103 0214 	add.w	r2, r3, #20
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	0c1b      	lsrs	r3, r3, #16
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4610      	mov	r0, r2
 800b5fc:	f7fe ffcb 	bl	800a596 <st_word>
	}
}
 800b600:	bf00      	nop
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b608:	b590      	push	{r4, r7, lr}
 800b60a:	b087      	sub	sp, #28
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	331a      	adds	r3, #26
 800b616:	4618      	mov	r0, r3
 800b618:	f7fe ff82 	bl	800a520 <ld_word>
 800b61c:	4603      	mov	r3, r0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d001      	beq.n	800b626 <cmp_lfn+0x1e>
 800b622:	2300      	movs	r3, #0
 800b624:	e059      	b.n	800b6da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b62e:	1e5a      	subs	r2, r3, #1
 800b630:	4613      	mov	r3, r2
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	4413      	add	r3, r2
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b63c:	2301      	movs	r3, #1
 800b63e:	81fb      	strh	r3, [r7, #14]
 800b640:	2300      	movs	r3, #0
 800b642:	613b      	str	r3, [r7, #16]
 800b644:	e033      	b.n	800b6ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b646:	4a27      	ldr	r2, [pc, #156]	@ (800b6e4 <cmp_lfn+0xdc>)
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	4413      	add	r3, r2
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	4413      	add	r3, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f7fe ff63 	bl	800a520 <ld_word>
 800b65a:	4603      	mov	r3, r0
 800b65c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b65e:	89fb      	ldrh	r3, [r7, #14]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01a      	beq.n	800b69a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	2bfe      	cmp	r3, #254	@ 0xfe
 800b668:	d812      	bhi.n	800b690 <cmp_lfn+0x88>
 800b66a:	89bb      	ldrh	r3, [r7, #12]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f001 fe0d 	bl	800d28c <ff_wtoupper>
 800b672:	4603      	mov	r3, r0
 800b674:	461c      	mov	r4, r3
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	1c5a      	adds	r2, r3, #1
 800b67a:	617a      	str	r2, [r7, #20]
 800b67c:	005b      	lsls	r3, r3, #1
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	4413      	add	r3, r2
 800b682:	881b      	ldrh	r3, [r3, #0]
 800b684:	4618      	mov	r0, r3
 800b686:	f001 fe01 	bl	800d28c <ff_wtoupper>
 800b68a:	4603      	mov	r3, r0
 800b68c:	429c      	cmp	r4, r3
 800b68e:	d001      	beq.n	800b694 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b690:	2300      	movs	r3, #0
 800b692:	e022      	b.n	800b6da <cmp_lfn+0xd2>
			}
			wc = uc;
 800b694:	89bb      	ldrh	r3, [r7, #12]
 800b696:	81fb      	strh	r3, [r7, #14]
 800b698:	e006      	b.n	800b6a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b69a:	89bb      	ldrh	r3, [r7, #12]
 800b69c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d001      	beq.n	800b6a8 <cmp_lfn+0xa0>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e018      	b.n	800b6da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	613b      	str	r3, [r7, #16]
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	2b0c      	cmp	r3, #12
 800b6b2:	d9c8      	bls.n	800b646 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00b      	beq.n	800b6d8 <cmp_lfn+0xd0>
 800b6c0:	89fb      	ldrh	r3, [r7, #14]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d008      	beq.n	800b6d8 <cmp_lfn+0xd0>
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d001      	beq.n	800b6d8 <cmp_lfn+0xd0>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	e000      	b.n	800b6da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b6d8:	2301      	movs	r3, #1
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd90      	pop	{r4, r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	08011f5c 	.word	0x08011f5c

0800b6e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	71fb      	strb	r3, [r7, #7]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	330d      	adds	r3, #13
 800b702:	79ba      	ldrb	r2, [r7, #6]
 800b704:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	330b      	adds	r3, #11
 800b70a:	220f      	movs	r2, #15
 800b70c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	330c      	adds	r3, #12
 800b712:	2200      	movs	r2, #0
 800b714:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	331a      	adds	r3, #26
 800b71a:	2100      	movs	r1, #0
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe ff3a 	bl	800a596 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	1e5a      	subs	r2, r3, #1
 800b726:	4613      	mov	r3, r2
 800b728:	005b      	lsls	r3, r3, #1
 800b72a:	4413      	add	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b732:	2300      	movs	r3, #0
 800b734:	82fb      	strh	r3, [r7, #22]
 800b736:	2300      	movs	r3, #0
 800b738:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b73a:	8afb      	ldrh	r3, [r7, #22]
 800b73c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b740:	4293      	cmp	r3, r2
 800b742:	d007      	beq.n	800b754 <put_lfn+0x6c>
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	61fa      	str	r2, [r7, #28]
 800b74a:	005b      	lsls	r3, r3, #1
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	4413      	add	r3, r2
 800b750:	881b      	ldrh	r3, [r3, #0]
 800b752:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b754:	4a17      	ldr	r2, [pc, #92]	@ (800b7b4 <put_lfn+0xcc>)
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	4413      	add	r3, r2
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	461a      	mov	r2, r3
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	4413      	add	r3, r2
 800b762:	8afa      	ldrh	r2, [r7, #22]
 800b764:	4611      	mov	r1, r2
 800b766:	4618      	mov	r0, r3
 800b768:	f7fe ff15 	bl	800a596 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b76c:	8afb      	ldrh	r3, [r7, #22]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d102      	bne.n	800b778 <put_lfn+0x90>
 800b772:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b776:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	3301      	adds	r3, #1
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	2b0c      	cmp	r3, #12
 800b782:	d9da      	bls.n	800b73a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b784:	8afb      	ldrh	r3, [r7, #22]
 800b786:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d006      	beq.n	800b79c <put_lfn+0xb4>
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	005b      	lsls	r3, r3, #1
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	4413      	add	r3, r2
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d103      	bne.n	800b7a4 <put_lfn+0xbc>
 800b79c:	79fb      	ldrb	r3, [r7, #7]
 800b79e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	79fa      	ldrb	r2, [r7, #7]
 800b7a8:	701a      	strb	r2, [r3, #0]
}
 800b7aa:	bf00      	nop
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	08011f5c 	.word	0x08011f5c

0800b7b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08c      	sub	sp, #48	@ 0x30
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
 800b7c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b7c6:	220b      	movs	r2, #11
 800b7c8:	68b9      	ldr	r1, [r7, #8]
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7fe ff2a 	bl	800a624 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b05      	cmp	r3, #5
 800b7d4:	d92b      	bls.n	800b82e <gen_numname+0x76>
		sr = seq;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b7da:	e022      	b.n	800b822 <gen_numname+0x6a>
			wc = *lfn++;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	1c9a      	adds	r2, r3, #2
 800b7e0:	607a      	str	r2, [r7, #4]
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7ea:	e017      	b.n	800b81c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	005a      	lsls	r2, r3, #1
 800b7f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b7f2:	f003 0301 	and.w	r3, r3, #1
 800b7f6:	4413      	add	r3, r2
 800b7f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b7fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b7fc:	085b      	lsrs	r3, r3, #1
 800b7fe:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b806:	2b00      	cmp	r3, #0
 800b808:	d005      	beq.n	800b816 <gen_numname+0x5e>
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b810:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b814:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b818:	3301      	adds	r3, #1
 800b81a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81e:	2b0f      	cmp	r3, #15
 800b820:	d9e4      	bls.n	800b7ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	881b      	ldrh	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1d8      	bne.n	800b7dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b82e:	2307      	movs	r3, #7
 800b830:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	b2db      	uxtb	r3, r3
 800b836:	f003 030f 	and.w	r3, r3, #15
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	3330      	adds	r3, #48	@ 0x30
 800b83e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b846:	2b39      	cmp	r3, #57	@ 0x39
 800b848:	d904      	bls.n	800b854 <gen_numname+0x9c>
 800b84a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b84e:	3307      	adds	r3, #7
 800b850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b856:	1e5a      	subs	r2, r3, #1
 800b858:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b85a:	3330      	adds	r3, #48	@ 0x30
 800b85c:	443b      	add	r3, r7
 800b85e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b862:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	091b      	lsrs	r3, r3, #4
 800b86a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1df      	bne.n	800b832 <gen_numname+0x7a>
	ns[i] = '~';
 800b872:	f107 0214 	add.w	r2, r7, #20
 800b876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b878:	4413      	add	r3, r2
 800b87a:	227e      	movs	r2, #126	@ 0x7e
 800b87c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b87e:	2300      	movs	r3, #0
 800b880:	627b      	str	r3, [r7, #36]	@ 0x24
 800b882:	e002      	b.n	800b88a <gen_numname+0xd2>
 800b884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b886:	3301      	adds	r3, #1
 800b888:	627b      	str	r3, [r7, #36]	@ 0x24
 800b88a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b88e:	429a      	cmp	r2, r3
 800b890:	d205      	bcs.n	800b89e <gen_numname+0xe6>
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b896:	4413      	add	r3, r2
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	2b20      	cmp	r3, #32
 800b89c:	d1f2      	bne.n	800b884 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a0:	2b07      	cmp	r3, #7
 800b8a2:	d807      	bhi.n	800b8b4 <gen_numname+0xfc>
 800b8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a6:	1c5a      	adds	r2, r3, #1
 800b8a8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b8aa:	3330      	adds	r3, #48	@ 0x30
 800b8ac:	443b      	add	r3, r7
 800b8ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b8b2:	e000      	b.n	800b8b6 <gen_numname+0xfe>
 800b8b4:	2120      	movs	r1, #32
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	460a      	mov	r2, r1
 800b8c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c6:	2b07      	cmp	r3, #7
 800b8c8:	d9e9      	bls.n	800b89e <gen_numname+0xe6>
}
 800b8ca:	bf00      	nop
 800b8cc:	bf00      	nop
 800b8ce:	3730      	adds	r7, #48	@ 0x30
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b8e0:	230b      	movs	r3, #11
 800b8e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	0852      	lsrs	r2, r2, #1
 800b8ea:	01db      	lsls	r3, r3, #7
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	1c59      	adds	r1, r3, #1
 800b8f4:	6079      	str	r1, [r7, #4]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	60bb      	str	r3, [r7, #8]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1ed      	bne.n	800b8e4 <sum_sfn+0x10>
	return sum;
 800b908:	7bfb      	ldrb	r3, [r7, #15]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b916:	b580      	push	{r7, lr}
 800b918:	b086      	sub	sp, #24
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b924:	2100      	movs	r1, #0
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7ff fc89 	bl	800b23e <dir_sdi>
 800b92c:	4603      	mov	r3, r0
 800b92e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b930:	7dfb      	ldrb	r3, [r7, #23]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d001      	beq.n	800b93a <dir_find+0x24>
 800b936:	7dfb      	ldrb	r3, [r7, #23]
 800b938:	e0a9      	b.n	800ba8e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b93a:	23ff      	movs	r3, #255	@ 0xff
 800b93c:	753b      	strb	r3, [r7, #20]
 800b93e:	7d3b      	ldrb	r3, [r7, #20]
 800b940:	757b      	strb	r3, [r7, #21]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f04f 32ff 	mov.w	r2, #4294967295
 800b948:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	4619      	mov	r1, r3
 800b950:	6938      	ldr	r0, [r7, #16]
 800b952:	f7ff f895 	bl	800aa80 <move_window>
 800b956:	4603      	mov	r3, r0
 800b958:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f040 8090 	bne.w	800ba82 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b96a:	7dbb      	ldrb	r3, [r7, #22]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d102      	bne.n	800b976 <dir_find+0x60>
 800b970:	2304      	movs	r3, #4
 800b972:	75fb      	strb	r3, [r7, #23]
 800b974:	e08a      	b.n	800ba8c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	330b      	adds	r3, #11
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b982:	73fb      	strb	r3, [r7, #15]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	7bfa      	ldrb	r2, [r7, #15]
 800b988:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b98a:	7dbb      	ldrb	r3, [r7, #22]
 800b98c:	2be5      	cmp	r3, #229	@ 0xe5
 800b98e:	d007      	beq.n	800b9a0 <dir_find+0x8a>
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	f003 0308 	and.w	r3, r3, #8
 800b996:	2b00      	cmp	r3, #0
 800b998:	d009      	beq.n	800b9ae <dir_find+0x98>
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
 800b99c:	2b0f      	cmp	r3, #15
 800b99e:	d006      	beq.n	800b9ae <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9a0:	23ff      	movs	r3, #255	@ 0xff
 800b9a2:	757b      	strb	r3, [r7, #21]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9aa:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9ac:	e05e      	b.n	800ba6c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b9ae:	7bfb      	ldrb	r3, [r7, #15]
 800b9b0:	2b0f      	cmp	r3, #15
 800b9b2:	d136      	bne.n	800ba22 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d154      	bne.n	800ba6c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b9c2:	7dbb      	ldrb	r3, [r7, #22]
 800b9c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00d      	beq.n	800b9e8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6a1b      	ldr	r3, [r3, #32]
 800b9d0:	7b5b      	ldrb	r3, [r3, #13]
 800b9d2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b9d4:	7dbb      	ldrb	r3, [r7, #22]
 800b9d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9da:	75bb      	strb	r3, [r7, #22]
 800b9dc:	7dbb      	ldrb	r3, [r7, #22]
 800b9de:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	695a      	ldr	r2, [r3, #20]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b9e8:	7dba      	ldrb	r2, [r7, #22]
 800b9ea:	7d7b      	ldrb	r3, [r7, #21]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d115      	bne.n	800ba1c <dir_find+0x106>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	330d      	adds	r3, #13
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	7d3a      	ldrb	r2, [r7, #20]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d10e      	bne.n	800ba1c <dir_find+0x106>
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	691a      	ldr	r2, [r3, #16]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a1b      	ldr	r3, [r3, #32]
 800ba06:	4619      	mov	r1, r3
 800ba08:	4610      	mov	r0, r2
 800ba0a:	f7ff fdfd 	bl	800b608 <cmp_lfn>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <dir_find+0x106>
 800ba14:	7d7b      	ldrb	r3, [r7, #21]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	e000      	b.n	800ba1e <dir_find+0x108>
 800ba1c:	23ff      	movs	r3, #255	@ 0xff
 800ba1e:	757b      	strb	r3, [r7, #21]
 800ba20:	e024      	b.n	800ba6c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ba22:	7d7b      	ldrb	r3, [r7, #21]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d109      	bne.n	800ba3c <dir_find+0x126>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7ff ff51 	bl	800b8d4 <sum_sfn>
 800ba32:	4603      	mov	r3, r0
 800ba34:	461a      	mov	r2, r3
 800ba36:	7d3b      	ldrb	r3, [r7, #20]
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d024      	beq.n	800ba86 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10a      	bne.n	800ba60 <dir_find+0x14a>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a18      	ldr	r0, [r3, #32]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	3324      	adds	r3, #36	@ 0x24
 800ba52:	220b      	movs	r2, #11
 800ba54:	4619      	mov	r1, r3
 800ba56:	f7fe fe21 	bl	800a69c <mem_cmp>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d014      	beq.n	800ba8a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ba60:	23ff      	movs	r3, #255	@ 0xff
 800ba62:	757b      	strb	r3, [r7, #21]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f7ff fc6e 	bl	800b350 <dir_next>
 800ba74:	4603      	mov	r3, r0
 800ba76:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ba78:	7dfb      	ldrb	r3, [r7, #23]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	f43f af65 	beq.w	800b94a <dir_find+0x34>
 800ba80:	e004      	b.n	800ba8c <dir_find+0x176>
		if (res != FR_OK) break;
 800ba82:	bf00      	nop
 800ba84:	e002      	b.n	800ba8c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ba86:	bf00      	nop
 800ba88:	e000      	b.n	800ba8c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ba8a:	bf00      	nop

	return res;
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
	...

0800ba98 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b08c      	sub	sp, #48	@ 0x30
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800baac:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <dir_register+0x20>
 800bab4:	2306      	movs	r3, #6
 800bab6:	e0e0      	b.n	800bc7a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bab8:	2300      	movs	r3, #0
 800baba:	627b      	str	r3, [r7, #36]	@ 0x24
 800babc:	e002      	b.n	800bac4 <dir_register+0x2c>
 800babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac0:	3301      	adds	r3, #1
 800bac2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	691a      	ldr	r2, [r3, #16]
 800bac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	4413      	add	r3, r2
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1f4      	bne.n	800babe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800bada:	f107 030c 	add.w	r3, r7, #12
 800bade:	220c      	movs	r2, #12
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fe fd9f 	bl	800a624 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	2b00      	cmp	r3, #0
 800baee:	d032      	beq.n	800bb56 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2240      	movs	r2, #64	@ 0x40
 800baf4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800baf8:	2301      	movs	r3, #1
 800bafa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bafc:	e016      	b.n	800bb2c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	691a      	ldr	r2, [r3, #16]
 800bb08:	f107 010c 	add.w	r1, r7, #12
 800bb0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb0e:	f7ff fe53 	bl	800b7b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff feff 	bl	800b916 <dir_find>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800bb1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d106      	bne.n	800bb34 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb28:	3301      	adds	r3, #1
 800bb2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2e:	2b63      	cmp	r3, #99	@ 0x63
 800bb30:	d9e5      	bls.n	800bafe <dir_register+0x66>
 800bb32:	e000      	b.n	800bb36 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bb34:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb38:	2b64      	cmp	r3, #100	@ 0x64
 800bb3a:	d101      	bne.n	800bb40 <dir_register+0xa8>
 800bb3c:	2307      	movs	r3, #7
 800bb3e:	e09c      	b.n	800bc7a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bb40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb44:	2b04      	cmp	r3, #4
 800bb46:	d002      	beq.n	800bb4e <dir_register+0xb6>
 800bb48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb4c:	e095      	b.n	800bc7a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bb4e:	7dfa      	ldrb	r2, [r7, #23]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	f003 0302 	and.w	r3, r3, #2
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d007      	beq.n	800bb70 <dir_register+0xd8>
 800bb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb62:	330c      	adds	r3, #12
 800bb64:	4a47      	ldr	r2, [pc, #284]	@ (800bc84 <dir_register+0x1ec>)
 800bb66:	fba2 2303 	umull	r2, r3, r2, r3
 800bb6a:	089b      	lsrs	r3, r3, #2
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	e000      	b.n	800bb72 <dir_register+0xda>
 800bb70:	2301      	movs	r3, #1
 800bb72:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bb74:	6a39      	ldr	r1, [r7, #32]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff fcc0 	bl	800b4fc <dir_alloc>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bb82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d148      	bne.n	800bc1c <dir_register+0x184>
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	623b      	str	r3, [r7, #32]
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d042      	beq.n	800bc1c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	695a      	ldr	r2, [r3, #20]
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	015b      	lsls	r3, r3, #5
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	4619      	mov	r1, r3
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff fb4b 	bl	800b23e <dir_sdi>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bbae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d132      	bne.n	800bc1c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	3324      	adds	r3, #36	@ 0x24
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff fe8a 	bl	800b8d4 <sum_sfn>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	69db      	ldr	r3, [r3, #28]
 800bbc8:	4619      	mov	r1, r3
 800bbca:	69f8      	ldr	r0, [r7, #28]
 800bbcc:	f7fe ff58 	bl	800aa80 <move_window>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800bbd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d11d      	bne.n	800bc1a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	6918      	ldr	r0, [r3, #16]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6a19      	ldr	r1, [r3, #32]
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	b2da      	uxtb	r2, r3
 800bbea:	7efb      	ldrb	r3, [r7, #27]
 800bbec:	f7ff fd7c 	bl	800b6e8 <put_lfn>
				fs->wflag = 1;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f7ff fba9 	bl	800b350 <dir_next>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800bc04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d107      	bne.n	800bc1c <dir_register+0x184>
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	623b      	str	r3, [r7, #32]
 800bc12:	6a3b      	ldr	r3, [r7, #32]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1d5      	bne.n	800bbc4 <dir_register+0x12c>
 800bc18:	e000      	b.n	800bc1c <dir_register+0x184>
				if (res != FR_OK) break;
 800bc1a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bc1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d128      	bne.n	800bc76 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	69db      	ldr	r3, [r3, #28]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	69f8      	ldr	r0, [r7, #28]
 800bc2c:	f7fe ff28 	bl	800aa80 <move_window>
 800bc30:	4603      	mov	r3, r0
 800bc32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bc36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d11b      	bne.n	800bc76 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6a1b      	ldr	r3, [r3, #32]
 800bc42:	2220      	movs	r2, #32
 800bc44:	2100      	movs	r1, #0
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe fd0d 	bl	800a666 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a18      	ldr	r0, [r3, #32]
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	3324      	adds	r3, #36	@ 0x24
 800bc54:	220b      	movs	r2, #11
 800bc56:	4619      	mov	r1, r3
 800bc58:	f7fe fce4 	bl	800a624 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	330c      	adds	r3, #12
 800bc68:	f002 0218 	and.w	r2, r2, #24
 800bc6c:	b2d2      	uxtb	r2, r2
 800bc6e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	2201      	movs	r2, #1
 800bc74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bc76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3730      	adds	r7, #48	@ 0x30
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	4ec4ec4f 	.word	0x4ec4ec4f

0800bc88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08a      	sub	sp, #40	@ 0x28
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	613b      	str	r3, [r7, #16]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	2300      	movs	r3, #0
 800bca2:	617b      	str	r3, [r7, #20]
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	1c5a      	adds	r2, r3, #1
 800bcac:	61ba      	str	r2, [r7, #24]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bcb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcb8:	2b1f      	cmp	r3, #31
 800bcba:	d940      	bls.n	800bd3e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bcbc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcbe:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcc0:	d006      	beq.n	800bcd0 <create_name+0x48>
 800bcc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcc4:	2b5c      	cmp	r3, #92	@ 0x5c
 800bcc6:	d110      	bne.n	800bcea <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bcc8:	e002      	b.n	800bcd0 <create_name+0x48>
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	3301      	adds	r3, #1
 800bcce:	61bb      	str	r3, [r7, #24]
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcda:	d0f6      	beq.n	800bcca <create_name+0x42>
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	4413      	add	r3, r2
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	2b5c      	cmp	r3, #92	@ 0x5c
 800bce6:	d0f0      	beq.n	800bcca <create_name+0x42>
			break;
 800bce8:	e02a      	b.n	800bd40 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2bfe      	cmp	r3, #254	@ 0xfe
 800bcee:	d901      	bls.n	800bcf4 <create_name+0x6c>
 800bcf0:	2306      	movs	r3, #6
 800bcf2:	e17d      	b.n	800bff0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800bcf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800bcfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f001 fa88 	bl	800d214 <ff_convert>
 800bd04:	4603      	mov	r3, r0
 800bd06:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bd08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <create_name+0x8a>
 800bd0e:	2306      	movs	r3, #6
 800bd10:	e16e      	b.n	800bff0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bd12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd14:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd16:	d809      	bhi.n	800bd2c <create_name+0xa4>
 800bd18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	488d      	ldr	r0, [pc, #564]	@ (800bf54 <create_name+0x2cc>)
 800bd1e:	f7fe fce4 	bl	800a6ea <chk_chr>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <create_name+0xa4>
 800bd28:	2306      	movs	r3, #6
 800bd2a:	e161      	b.n	800bff0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	617a      	str	r2, [r7, #20]
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	4413      	add	r3, r2
 800bd38:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bd3a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bd3c:	e7b4      	b.n	800bca8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bd3e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bd40:	693a      	ldr	r2, [r7, #16]
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	441a      	add	r2, r3
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bd4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd4c:	2b1f      	cmp	r3, #31
 800bd4e:	d801      	bhi.n	800bd54 <create_name+0xcc>
 800bd50:	2304      	movs	r3, #4
 800bd52:	e000      	b.n	800bd56 <create_name+0xce>
 800bd54:	2300      	movs	r3, #0
 800bd56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bd5a:	e011      	b.n	800bd80 <create_name+0xf8>
		w = lfn[di - 1];
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bd62:	3b01      	subs	r3, #1
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4413      	add	r3, r2
 800bd6a:	881b      	ldrh	r3, [r3, #0]
 800bd6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800bd6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd70:	2b20      	cmp	r3, #32
 800bd72:	d002      	beq.n	800bd7a <create_name+0xf2>
 800bd74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bd76:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd78:	d106      	bne.n	800bd88 <create_name+0x100>
		di--;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1ea      	bne.n	800bd5c <create_name+0xd4>
 800bd86:	e000      	b.n	800bd8a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bd88:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	4413      	add	r3, r2
 800bd92:	2200      	movs	r2, #0
 800bd94:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d101      	bne.n	800bda0 <create_name+0x118>
 800bd9c:	2306      	movs	r3, #6
 800bd9e:	e127      	b.n	800bff0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3324      	adds	r3, #36	@ 0x24
 800bda4:	220b      	movs	r2, #11
 800bda6:	2120      	movs	r1, #32
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fe fc5c 	bl	800a666 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bdae:	2300      	movs	r3, #0
 800bdb0:	61bb      	str	r3, [r7, #24]
 800bdb2:	e002      	b.n	800bdba <create_name+0x132>
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	61bb      	str	r3, [r7, #24]
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	881b      	ldrh	r3, [r3, #0]
 800bdc4:	2b20      	cmp	r3, #32
 800bdc6:	d0f5      	beq.n	800bdb4 <create_name+0x12c>
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	005b      	lsls	r3, r3, #1
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdd4:	d0ee      	beq.n	800bdb4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d009      	beq.n	800bdf0 <create_name+0x168>
 800bddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bde0:	f043 0303 	orr.w	r3, r3, #3
 800bde4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bde8:	e002      	b.n	800bdf0 <create_name+0x168>
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	617b      	str	r3, [r7, #20]
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d009      	beq.n	800be0a <create_name+0x182>
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	005b      	lsls	r3, r3, #1
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	2b2e      	cmp	r3, #46	@ 0x2e
 800be08:	d1ef      	bne.n	800bdea <create_name+0x162>

	i = b = 0; ni = 8;
 800be0a:	2300      	movs	r3, #0
 800be0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800be10:	2300      	movs	r3, #0
 800be12:	623b      	str	r3, [r7, #32]
 800be14:	2308      	movs	r3, #8
 800be16:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800be18:	69bb      	ldr	r3, [r7, #24]
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	61ba      	str	r2, [r7, #24]
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	4413      	add	r3, r2
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800be28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f000 8090 	beq.w	800bf50 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800be30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be32:	2b20      	cmp	r3, #32
 800be34:	d006      	beq.n	800be44 <create_name+0x1bc>
 800be36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be38:	2b2e      	cmp	r3, #46	@ 0x2e
 800be3a:	d10a      	bne.n	800be52 <create_name+0x1ca>
 800be3c:	69ba      	ldr	r2, [r7, #24]
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	429a      	cmp	r2, r3
 800be42:	d006      	beq.n	800be52 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800be44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be48:	f043 0303 	orr.w	r3, r3, #3
 800be4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be50:	e07d      	b.n	800bf4e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800be52:	6a3a      	ldr	r2, [r7, #32]
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	429a      	cmp	r2, r3
 800be58:	d203      	bcs.n	800be62 <create_name+0x1da>
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d123      	bne.n	800beaa <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	2b0b      	cmp	r3, #11
 800be66:	d106      	bne.n	800be76 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800be68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be6c:	f043 0303 	orr.w	r3, r3, #3
 800be70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be74:	e075      	b.n	800bf62 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800be76:	69ba      	ldr	r2, [r7, #24]
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d005      	beq.n	800be8a <create_name+0x202>
 800be7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be82:	f043 0303 	orr.w	r3, r3, #3
 800be86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800be8a:	69ba      	ldr	r2, [r7, #24]
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d866      	bhi.n	800bf60 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	61bb      	str	r3, [r7, #24]
 800be96:	2308      	movs	r3, #8
 800be98:	623b      	str	r3, [r7, #32]
 800be9a:	230b      	movs	r3, #11
 800be9c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800be9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bea8:	e051      	b.n	800bf4e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800beaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800beac:	2b7f      	cmp	r3, #127	@ 0x7f
 800beae:	d914      	bls.n	800beda <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800beb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800beb2:	2100      	movs	r1, #0
 800beb4:	4618      	mov	r0, r3
 800beb6:	f001 f9ad 	bl	800d214 <ff_convert>
 800beba:	4603      	mov	r3, r0
 800bebc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bebe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d004      	beq.n	800bece <create_name+0x246>
 800bec4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bec6:	3b80      	subs	r3, #128	@ 0x80
 800bec8:	4a23      	ldr	r2, [pc, #140]	@ (800bf58 <create_name+0x2d0>)
 800beca:	5cd3      	ldrb	r3, [r2, r3]
 800becc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bece:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bed2:	f043 0302 	orr.w	r3, r3, #2
 800bed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800beda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d007      	beq.n	800bef0 <create_name+0x268>
 800bee0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bee2:	4619      	mov	r1, r3
 800bee4:	481d      	ldr	r0, [pc, #116]	@ (800bf5c <create_name+0x2d4>)
 800bee6:	f7fe fc00 	bl	800a6ea <chk_chr>
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d008      	beq.n	800bf02 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bef0:	235f      	movs	r3, #95	@ 0x5f
 800bef2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bef8:	f043 0303 	orr.w	r3, r3, #3
 800befc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bf00:	e01b      	b.n	800bf3a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bf02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf04:	2b40      	cmp	r3, #64	@ 0x40
 800bf06:	d909      	bls.n	800bf1c <create_name+0x294>
 800bf08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf0a:	2b5a      	cmp	r3, #90	@ 0x5a
 800bf0c:	d806      	bhi.n	800bf1c <create_name+0x294>
					b |= 2;
 800bf0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf12:	f043 0302 	orr.w	r3, r3, #2
 800bf16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bf1a:	e00e      	b.n	800bf3a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bf1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf1e:	2b60      	cmp	r3, #96	@ 0x60
 800bf20:	d90b      	bls.n	800bf3a <create_name+0x2b2>
 800bf22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf24:	2b7a      	cmp	r3, #122	@ 0x7a
 800bf26:	d808      	bhi.n	800bf3a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bf28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf2c:	f043 0301 	orr.w	r3, r3, #1
 800bf30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bf34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf36:	3b20      	subs	r3, #32
 800bf38:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	1c5a      	adds	r2, r3, #1
 800bf3e:	623a      	str	r2, [r7, #32]
 800bf40:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bf42:	b2d1      	uxtb	r1, r2
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	4413      	add	r3, r2
 800bf48:	460a      	mov	r2, r1
 800bf4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bf4e:	e763      	b.n	800be18 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bf50:	bf00      	nop
 800bf52:	e006      	b.n	800bf62 <create_name+0x2da>
 800bf54:	08011e60 	.word	0x08011e60
 800bf58:	08011edc 	.word	0x08011edc
 800bf5c:	08011e6c 	.word	0x08011e6c
			if (si > di) break;			/* No extension */
 800bf60:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bf68:	2be5      	cmp	r3, #229	@ 0xe5
 800bf6a:	d103      	bne.n	800bf74 <create_name+0x2ec>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2205      	movs	r2, #5
 800bf70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	2b08      	cmp	r3, #8
 800bf78:	d104      	bne.n	800bf84 <create_name+0x2fc>
 800bf7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bf84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf88:	f003 030c 	and.w	r3, r3, #12
 800bf8c:	2b0c      	cmp	r3, #12
 800bf8e:	d005      	beq.n	800bf9c <create_name+0x314>
 800bf90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf94:	f003 0303 	and.w	r3, r3, #3
 800bf98:	2b03      	cmp	r3, #3
 800bf9a:	d105      	bne.n	800bfa8 <create_name+0x320>
 800bf9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfa0:	f043 0302 	orr.w	r3, r3, #2
 800bfa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bfa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfac:	f003 0302 	and.w	r3, r3, #2
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d117      	bne.n	800bfe4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bfb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bfb8:	f003 0303 	and.w	r3, r3, #3
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d105      	bne.n	800bfcc <create_name+0x344>
 800bfc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfc4:	f043 0310 	orr.w	r3, r3, #16
 800bfc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bfcc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bfd0:	f003 030c 	and.w	r3, r3, #12
 800bfd4:	2b04      	cmp	r3, #4
 800bfd6:	d105      	bne.n	800bfe4 <create_name+0x35c>
 800bfd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfdc:	f043 0308 	orr.w	r3, r3, #8
 800bfe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bfea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800bfee:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3728      	adds	r7, #40	@ 0x28
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c00c:	e002      	b.n	800c014 <follow_path+0x1c>
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	3301      	adds	r3, #1
 800c012:	603b      	str	r3, [r7, #0]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b2f      	cmp	r3, #47	@ 0x2f
 800c01a:	d0f8      	beq.n	800c00e <follow_path+0x16>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	2b5c      	cmp	r3, #92	@ 0x5c
 800c022:	d0f4      	beq.n	800c00e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	2200      	movs	r2, #0
 800c028:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	2b1f      	cmp	r3, #31
 800c030:	d80a      	bhi.n	800c048 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2280      	movs	r2, #128	@ 0x80
 800c036:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c03a:	2100      	movs	r1, #0
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff f8fe 	bl	800b23e <dir_sdi>
 800c042:	4603      	mov	r3, r0
 800c044:	75fb      	strb	r3, [r7, #23]
 800c046:	e048      	b.n	800c0da <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c048:	463b      	mov	r3, r7
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7ff fe1b 	bl	800bc88 <create_name>
 800c052:	4603      	mov	r3, r0
 800c054:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d139      	bne.n	800c0d0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7ff fc5a 	bl	800b916 <dir_find>
 800c062:	4603      	mov	r3, r0
 800c064:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c06c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d00a      	beq.n	800c08a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c074:	7dfb      	ldrb	r3, [r7, #23]
 800c076:	2b04      	cmp	r3, #4
 800c078:	d12c      	bne.n	800c0d4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	f003 0304 	and.w	r3, r3, #4
 800c080:	2b00      	cmp	r3, #0
 800c082:	d127      	bne.n	800c0d4 <follow_path+0xdc>
 800c084:	2305      	movs	r3, #5
 800c086:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c088:	e024      	b.n	800c0d4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c08a:	7afb      	ldrb	r3, [r7, #11]
 800c08c:	f003 0304 	and.w	r3, r3, #4
 800c090:	2b00      	cmp	r3, #0
 800c092:	d121      	bne.n	800c0d8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	799b      	ldrb	r3, [r3, #6]
 800c098:	f003 0310 	and.w	r3, r3, #16
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d102      	bne.n	800c0a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c0a0:	2305      	movs	r3, #5
 800c0a2:	75fb      	strb	r3, [r7, #23]
 800c0a4:	e019      	b.n	800c0da <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	8992      	ldrh	r2, [r2, #12]
 800c0b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0b8:	fb00 f202 	mul.w	r2, r0, r2
 800c0bc:	1a9b      	subs	r3, r3, r2
 800c0be:	440b      	add	r3, r1
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	68f8      	ldr	r0, [r7, #12]
 800c0c4:	f7ff fa61 	bl	800b58a <ld_clust>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c0ce:	e7bb      	b.n	800c048 <follow_path+0x50>
			if (res != FR_OK) break;
 800c0d0:	bf00      	nop
 800c0d2:	e002      	b.n	800c0da <follow_path+0xe2>
				break;
 800c0d4:	bf00      	nop
 800c0d6:	e000      	b.n	800c0da <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c0d8:	bf00      	nop
			}
		}
	}

	return res;
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3718      	adds	r7, #24
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d031      	beq.n	800c15e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	617b      	str	r3, [r7, #20]
 800c100:	e002      	b.n	800c108 <get_ldnumber+0x24>
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	3301      	adds	r3, #1
 800c106:	617b      	str	r3, [r7, #20]
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b1f      	cmp	r3, #31
 800c10e:	d903      	bls.n	800c118 <get_ldnumber+0x34>
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b3a      	cmp	r3, #58	@ 0x3a
 800c116:	d1f4      	bne.n	800c102 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b3a      	cmp	r3, #58	@ 0x3a
 800c11e:	d11c      	bne.n	800c15a <get_ldnumber+0x76>
			tp = *path;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	60fa      	str	r2, [r7, #12]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	3b30      	subs	r3, #48	@ 0x30
 800c130:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b09      	cmp	r3, #9
 800c136:	d80e      	bhi.n	800c156 <get_ldnumber+0x72>
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d10a      	bne.n	800c156 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b01      	cmp	r3, #1
 800c144:	d807      	bhi.n	800c156 <get_ldnumber+0x72>
					vol = (int)i;
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	3301      	adds	r3, #1
 800c14e:	617b      	str	r3, [r7, #20]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	e002      	b.n	800c160 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c15a:	2300      	movs	r3, #0
 800c15c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c15e:	693b      	ldr	r3, [r7, #16]
}
 800c160:	4618      	mov	r0, r3
 800c162:	371c      	adds	r7, #28
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	70da      	strb	r2, [r3, #3]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f04f 32ff 	mov.w	r2, #4294967295
 800c182:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7fe fc7a 	bl	800aa80 <move_window>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d001      	beq.n	800c196 <check_fs+0x2a>
 800c192:	2304      	movs	r3, #4
 800c194:	e038      	b.n	800c208 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	3338      	adds	r3, #56	@ 0x38
 800c19a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe f9be 	bl	800a520 <ld_word>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d001      	beq.n	800c1b4 <check_fs+0x48>
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	e029      	b.n	800c208 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c1ba:	2be9      	cmp	r3, #233	@ 0xe9
 800c1bc:	d009      	beq.n	800c1d2 <check_fs+0x66>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c1c4:	2beb      	cmp	r3, #235	@ 0xeb
 800c1c6:	d11e      	bne.n	800c206 <check_fs+0x9a>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800c1ce:	2b90      	cmp	r3, #144	@ 0x90
 800c1d0:	d119      	bne.n	800c206 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3338      	adds	r3, #56	@ 0x38
 800c1d6:	3336      	adds	r3, #54	@ 0x36
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7fe f9b9 	bl	800a550 <ld_dword>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c1e4:	4a0a      	ldr	r2, [pc, #40]	@ (800c210 <check_fs+0xa4>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d101      	bne.n	800c1ee <check_fs+0x82>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	e00c      	b.n	800c208 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	3338      	adds	r3, #56	@ 0x38
 800c1f2:	3352      	adds	r3, #82	@ 0x52
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe f9ab 	bl	800a550 <ld_dword>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	4a05      	ldr	r2, [pc, #20]	@ (800c214 <check_fs+0xa8>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d101      	bne.n	800c206 <check_fs+0x9a>
 800c202:	2300      	movs	r3, #0
 800c204:	e000      	b.n	800c208 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c206:	2302      	movs	r3, #2
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	00544146 	.word	0x00544146
 800c214:	33544146 	.word	0x33544146

0800c218 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b096      	sub	sp, #88	@ 0x58
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	4613      	mov	r3, r2
 800c224:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c22c:	68f8      	ldr	r0, [r7, #12]
 800c22e:	f7ff ff59 	bl	800c0e4 <get_ldnumber>
 800c232:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c236:	2b00      	cmp	r3, #0
 800c238:	da01      	bge.n	800c23e <find_volume+0x26>
 800c23a:	230b      	movs	r3, #11
 800c23c:	e265      	b.n	800c70a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c23e:	4a9f      	ldr	r2, [pc, #636]	@ (800c4bc <find_volume+0x2a4>)
 800c240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c246:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d101      	bne.n	800c252 <find_volume+0x3a>
 800c24e:	230c      	movs	r3, #12
 800c250:	e25b      	b.n	800c70a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c256:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c258:	79fb      	ldrb	r3, [r7, #7]
 800c25a:	f023 0301 	bic.w	r3, r3, #1
 800c25e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d01a      	beq.n	800c29e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26a:	785b      	ldrb	r3, [r3, #1]
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe f8b7 	bl	800a3e0 <disk_status>
 800c272:	4603      	mov	r3, r0
 800c274:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c278:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c27c:	f003 0301 	and.w	r3, r3, #1
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10c      	bne.n	800c29e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c284:	79fb      	ldrb	r3, [r7, #7]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d007      	beq.n	800c29a <find_volume+0x82>
 800c28a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c28e:	f003 0304 	and.w	r3, r3, #4
 800c292:	2b00      	cmp	r3, #0
 800c294:	d001      	beq.n	800c29a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c296:	230a      	movs	r3, #10
 800c298:	e237      	b.n	800c70a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c29a:	2300      	movs	r3, #0
 800c29c:	e235      	b.n	800c70a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ae:	785b      	ldrb	r3, [r3, #1]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fe f8af 	bl	800a414 <disk_initialize>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e21e      	b.n	800c70a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d007      	beq.n	800c2e2 <find_volume+0xca>
 800c2d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2d6:	f003 0304 	and.w	r3, r3, #4
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d001      	beq.n	800c2e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c2de:	230a      	movs	r3, #10
 800c2e0:	e213      	b.n	800c70a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e4:	7858      	ldrb	r0, [r3, #1]
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e8:	330c      	adds	r3, #12
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	2102      	movs	r1, #2
 800c2ee:	f7fe f8f9 	bl	800a4e4 <disk_ioctl>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <find_volume+0xe4>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e206      	b.n	800c70a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fe:	899b      	ldrh	r3, [r3, #12]
 800c300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c304:	d80d      	bhi.n	800c322 <find_volume+0x10a>
 800c306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c308:	899b      	ldrh	r3, [r3, #12]
 800c30a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c30e:	d308      	bcc.n	800c322 <find_volume+0x10a>
 800c310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c312:	899b      	ldrh	r3, [r3, #12]
 800c314:	461a      	mov	r2, r3
 800c316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c318:	899b      	ldrh	r3, [r3, #12]
 800c31a:	3b01      	subs	r3, #1
 800c31c:	4013      	ands	r3, r2
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <find_volume+0x10e>
 800c322:	2301      	movs	r3, #1
 800c324:	e1f1      	b.n	800c70a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c32a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c32c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c32e:	f7ff ff1d 	bl	800c16c <check_fs>
 800c332:	4603      	mov	r3, r0
 800c334:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c338:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c33c:	2b02      	cmp	r3, #2
 800c33e:	d149      	bne.n	800c3d4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c340:	2300      	movs	r3, #0
 800c342:	643b      	str	r3, [r7, #64]	@ 0x40
 800c344:	e01e      	b.n	800c384 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c348:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c34c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c34e:	011b      	lsls	r3, r3, #4
 800c350:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c354:	4413      	add	r3, r2
 800c356:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c35a:	3304      	adds	r3, #4
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d006      	beq.n	800c370 <find_volume+0x158>
 800c362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c364:	3308      	adds	r3, #8
 800c366:	4618      	mov	r0, r3
 800c368:	f7fe f8f2 	bl	800a550 <ld_dword>
 800c36c:	4602      	mov	r2, r0
 800c36e:	e000      	b.n	800c372 <find_volume+0x15a>
 800c370:	2200      	movs	r2, #0
 800c372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	3358      	adds	r3, #88	@ 0x58
 800c378:	443b      	add	r3, r7
 800c37a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c380:	3301      	adds	r3, #1
 800c382:	643b      	str	r3, [r7, #64]	@ 0x40
 800c384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c386:	2b03      	cmp	r3, #3
 800c388:	d9dd      	bls.n	800c346 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c38a:	2300      	movs	r3, #0
 800c38c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c390:	2b00      	cmp	r3, #0
 800c392:	d002      	beq.n	800c39a <find_volume+0x182>
 800c394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c396:	3b01      	subs	r3, #1
 800c398:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	3358      	adds	r3, #88	@ 0x58
 800c3a0:	443b      	add	r3, r7
 800c3a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c3a6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c3a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d005      	beq.n	800c3ba <find_volume+0x1a2>
 800c3ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c3b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c3b2:	f7ff fedb 	bl	800c16c <check_fs>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	e000      	b.n	800c3bc <find_volume+0x1a4>
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c3c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d905      	bls.n	800c3d4 <find_volume+0x1bc>
 800c3c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3d0:	2b03      	cmp	r3, #3
 800c3d2:	d9e2      	bls.n	800c39a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c3d8:	2b04      	cmp	r3, #4
 800c3da:	d101      	bne.n	800c3e0 <find_volume+0x1c8>
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e194      	b.n	800c70a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c3e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d901      	bls.n	800c3ec <find_volume+0x1d4>
 800c3e8:	230d      	movs	r3, #13
 800c3ea:	e18e      	b.n	800c70a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ee:	3338      	adds	r3, #56	@ 0x38
 800c3f0:	330b      	adds	r3, #11
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe f894 	bl	800a520 <ld_word>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3fe:	899b      	ldrh	r3, [r3, #12]
 800c400:	429a      	cmp	r2, r3
 800c402:	d001      	beq.n	800c408 <find_volume+0x1f0>
 800c404:	230d      	movs	r3, #13
 800c406:	e180      	b.n	800c70a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40a:	3338      	adds	r3, #56	@ 0x38
 800c40c:	3316      	adds	r3, #22
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe f886 	bl	800a520 <ld_word>
 800c414:	4603      	mov	r3, r0
 800c416:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <find_volume+0x214>
 800c41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c420:	3338      	adds	r3, #56	@ 0x38
 800c422:	3324      	adds	r3, #36	@ 0x24
 800c424:	4618      	mov	r0, r3
 800c426:	f7fe f893 	bl	800a550 <ld_dword>
 800c42a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c430:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c434:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43e:	789b      	ldrb	r3, [r3, #2]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d005      	beq.n	800c450 <find_volume+0x238>
 800c444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c446:	789b      	ldrb	r3, [r3, #2]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d001      	beq.n	800c450 <find_volume+0x238>
 800c44c:	230d      	movs	r3, #13
 800c44e:	e15c      	b.n	800c70a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c452:	789b      	ldrb	r3, [r3, #2]
 800c454:	461a      	mov	r2, r3
 800c456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c458:	fb02 f303 	mul.w	r3, r2, r3
 800c45c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c464:	461a      	mov	r2, r3
 800c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c468:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46c:	895b      	ldrh	r3, [r3, #10]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d008      	beq.n	800c484 <find_volume+0x26c>
 800c472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c474:	895b      	ldrh	r3, [r3, #10]
 800c476:	461a      	mov	r2, r3
 800c478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47a:	895b      	ldrh	r3, [r3, #10]
 800c47c:	3b01      	subs	r3, #1
 800c47e:	4013      	ands	r3, r2
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <find_volume+0x270>
 800c484:	230d      	movs	r3, #13
 800c486:	e140      	b.n	800c70a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48a:	3338      	adds	r3, #56	@ 0x38
 800c48c:	3311      	adds	r3, #17
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe f846 	bl	800a520 <ld_word>
 800c494:	4603      	mov	r3, r0
 800c496:	461a      	mov	r2, r3
 800c498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49e:	891b      	ldrh	r3, [r3, #8]
 800c4a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4a2:	8992      	ldrh	r2, [r2, #12]
 800c4a4:	0952      	lsrs	r2, r2, #5
 800c4a6:	b292      	uxth	r2, r2
 800c4a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c4ac:	fb01 f202 	mul.w	r2, r1, r2
 800c4b0:	1a9b      	subs	r3, r3, r2
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d003      	beq.n	800c4c0 <find_volume+0x2a8>
 800c4b8:	230d      	movs	r3, #13
 800c4ba:	e126      	b.n	800c70a <find_volume+0x4f2>
 800c4bc:	20002910 	.word	0x20002910

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c2:	3338      	adds	r3, #56	@ 0x38
 800c4c4:	3313      	adds	r3, #19
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fe f82a 	bl	800a520 <ld_word>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c4d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <find_volume+0x2cc>
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4d8:	3338      	adds	r3, #56	@ 0x38
 800c4da:	3320      	adds	r3, #32
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe f837 	bl	800a550 <ld_dword>
 800c4e2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e6:	3338      	adds	r3, #56	@ 0x38
 800c4e8:	330e      	adds	r3, #14
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe f818 	bl	800a520 <ld_word>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c4f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d101      	bne.n	800c4fe <find_volume+0x2e6>
 800c4fa:	230d      	movs	r3, #13
 800c4fc:	e105      	b.n	800c70a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c4fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c502:	4413      	add	r3, r2
 800c504:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c506:	8911      	ldrh	r1, [r2, #8]
 800c508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c50a:	8992      	ldrh	r2, [r2, #12]
 800c50c:	0952      	lsrs	r2, r2, #5
 800c50e:	b292      	uxth	r2, r2
 800c510:	fbb1 f2f2 	udiv	r2, r1, r2
 800c514:	b292      	uxth	r2, r2
 800c516:	4413      	add	r3, r2
 800c518:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c51a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c51e:	429a      	cmp	r2, r3
 800c520:	d201      	bcs.n	800c526 <find_volume+0x30e>
 800c522:	230d      	movs	r3, #13
 800c524:	e0f1      	b.n	800c70a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c52e:	8952      	ldrh	r2, [r2, #10]
 800c530:	fbb3 f3f2 	udiv	r3, r3, r2
 800c534:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d101      	bne.n	800c540 <find_volume+0x328>
 800c53c:	230d      	movs	r3, #13
 800c53e:	e0e4      	b.n	800c70a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c540:	2303      	movs	r3, #3
 800c542:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c548:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d802      	bhi.n	800c556 <find_volume+0x33e>
 800c550:	2302      	movs	r3, #2
 800c552:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c558:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d802      	bhi.n	800c566 <find_volume+0x34e>
 800c560:	2301      	movs	r3, #1
 800c562:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c568:	1c9a      	adds	r2, r3, #2
 800c56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c570:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c572:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c574:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c578:	441a      	add	r2, r3
 800c57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c57e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c582:	441a      	add	r2, r3
 800c584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c586:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c588:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d11e      	bne.n	800c5ce <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c592:	3338      	adds	r3, #56	@ 0x38
 800c594:	332a      	adds	r3, #42	@ 0x2a
 800c596:	4618      	mov	r0, r3
 800c598:	f7fd ffc2 	bl	800a520 <ld_word>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <find_volume+0x38e>
 800c5a2:	230d      	movs	r3, #13
 800c5a4:	e0b1      	b.n	800c70a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a8:	891b      	ldrh	r3, [r3, #8]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d001      	beq.n	800c5b2 <find_volume+0x39a>
 800c5ae:	230d      	movs	r3, #13
 800c5b0:	e0ab      	b.n	800c70a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b4:	3338      	adds	r3, #56	@ 0x38
 800c5b6:	332c      	adds	r3, #44	@ 0x2c
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fd ffc9 	bl	800a550 <ld_dword>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5cc:	e01f      	b.n	800c60e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d0:	891b      	ldrh	r3, [r3, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d101      	bne.n	800c5da <find_volume+0x3c2>
 800c5d6:	230d      	movs	r3, #13
 800c5d8:	e097      	b.n	800c70a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c5de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5e0:	441a      	add	r2, r3
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c5e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d103      	bne.n	800c5f6 <find_volume+0x3de>
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f0:	69db      	ldr	r3, [r3, #28]
 800c5f2:	005b      	lsls	r3, r3, #1
 800c5f4:	e00a      	b.n	800c60c <find_volume+0x3f4>
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f8:	69da      	ldr	r2, [r3, #28]
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	4413      	add	r3, r2
 800c600:	085a      	lsrs	r2, r3, #1
 800c602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c604:	69db      	ldr	r3, [r3, #28]
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c60c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c610:	6a1a      	ldr	r2, [r3, #32]
 800c612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c614:	899b      	ldrh	r3, [r3, #12]
 800c616:	4619      	mov	r1, r3
 800c618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c61a:	440b      	add	r3, r1
 800c61c:	3b01      	subs	r3, #1
 800c61e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c620:	8989      	ldrh	r1, [r1, #12]
 800c622:	fbb3 f3f1 	udiv	r3, r3, r1
 800c626:	429a      	cmp	r2, r3
 800c628:	d201      	bcs.n	800c62e <find_volume+0x416>
 800c62a:	230d      	movs	r3, #13
 800c62c:	e06d      	b.n	800c70a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c630:	f04f 32ff 	mov.w	r2, #4294967295
 800c634:	619a      	str	r2, [r3, #24]
 800c636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c638:	699a      	ldr	r2, [r3, #24]
 800c63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c640:	2280      	movs	r2, #128	@ 0x80
 800c642:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c644:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c648:	2b03      	cmp	r3, #3
 800c64a:	d149      	bne.n	800c6e0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64e:	3338      	adds	r3, #56	@ 0x38
 800c650:	3330      	adds	r3, #48	@ 0x30
 800c652:	4618      	mov	r0, r3
 800c654:	f7fd ff64 	bl	800a520 <ld_word>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d140      	bne.n	800c6e0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c65e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c660:	3301      	adds	r3, #1
 800c662:	4619      	mov	r1, r3
 800c664:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c666:	f7fe fa0b 	bl	800aa80 <move_window>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d137      	bne.n	800c6e0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c672:	2200      	movs	r2, #0
 800c674:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c678:	3338      	adds	r3, #56	@ 0x38
 800c67a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fd ff4e 	bl	800a520 <ld_word>
 800c684:	4603      	mov	r3, r0
 800c686:	461a      	mov	r2, r3
 800c688:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d127      	bne.n	800c6e0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c692:	3338      	adds	r3, #56	@ 0x38
 800c694:	4618      	mov	r0, r3
 800c696:	f7fd ff5b 	bl	800a550 <ld_dword>
 800c69a:	4603      	mov	r3, r0
 800c69c:	4a1d      	ldr	r2, [pc, #116]	@ (800c714 <find_volume+0x4fc>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d11e      	bne.n	800c6e0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6a4:	3338      	adds	r3, #56	@ 0x38
 800c6a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fd ff50 	bl	800a550 <ld_dword>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	4a19      	ldr	r2, [pc, #100]	@ (800c718 <find_volume+0x500>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d113      	bne.n	800c6e0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ba:	3338      	adds	r3, #56	@ 0x38
 800c6bc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7fd ff45 	bl	800a550 <ld_dword>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ca:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ce:	3338      	adds	r3, #56	@ 0x38
 800c6d0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fd ff3b 	bl	800a550 <ld_dword>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6de:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c6e6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800c71c <find_volume+0x504>)
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	b29a      	uxth	r2, r3
 800c6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c71c <find_volume+0x504>)
 800c6f2:	801a      	strh	r2, [r3, #0]
 800c6f4:	4b09      	ldr	r3, [pc, #36]	@ (800c71c <find_volume+0x504>)
 800c6f6:	881a      	ldrh	r2, [r3, #0]
 800c6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fa:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fe:	4a08      	ldr	r2, [pc, #32]	@ (800c720 <find_volume+0x508>)
 800c700:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c702:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c704:	f7fe f954 	bl	800a9b0 <clear_lock>
#endif
	return FR_OK;
 800c708:	2300      	movs	r3, #0
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3758      	adds	r7, #88	@ 0x58
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	41615252 	.word	0x41615252
 800c718:	61417272 	.word	0x61417272
 800c71c:	20002918 	.word	0x20002918
 800c720:	2000293c 	.word	0x2000293c

0800c724 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b084      	sub	sp, #16
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c72e:	2309      	movs	r3, #9
 800c730:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d01c      	beq.n	800c772 <validate+0x4e>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d018      	beq.n	800c772 <validate+0x4e>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d013      	beq.n	800c772 <validate+0x4e>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	889a      	ldrh	r2, [r3, #4]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	88db      	ldrh	r3, [r3, #6]
 800c754:	429a      	cmp	r2, r3
 800c756:	d10c      	bne.n	800c772 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	785b      	ldrb	r3, [r3, #1]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7fd fe3e 	bl	800a3e0 <disk_status>
 800c764:	4603      	mov	r3, r0
 800c766:	f003 0301 	and.w	r3, r3, #1
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d101      	bne.n	800c772 <validate+0x4e>
			res = FR_OK;
 800c76e:	2300      	movs	r3, #0
 800c770:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c772:	7bfb      	ldrb	r3, [r7, #15]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <validate+0x5a>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	e000      	b.n	800c780 <validate+0x5c>
 800c77e:	2300      	movs	r3, #0
 800c780:	683a      	ldr	r2, [r7, #0]
 800c782:	6013      	str	r3, [r2, #0]
	return res;
 800c784:	7bfb      	ldrb	r3, [r7, #15]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b088      	sub	sp, #32
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	4613      	mov	r3, r2
 800c79c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c7a2:	f107 0310 	add.w	r3, r7, #16
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fc9c 	bl	800c0e4 <get_ldnumber>
 800c7ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	da01      	bge.n	800c7b8 <f_mount+0x28>
 800c7b4:	230b      	movs	r3, #11
 800c7b6:	e02b      	b.n	800c810 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c7b8:	4a17      	ldr	r2, [pc, #92]	@ (800c818 <f_mount+0x88>)
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d005      	beq.n	800c7d4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c7c8:	69b8      	ldr	r0, [r7, #24]
 800c7ca:	f7fe f8f1 	bl	800a9b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c7e0:	68fa      	ldr	r2, [r7, #12]
 800c7e2:	490d      	ldr	r1, [pc, #52]	@ (800c818 <f_mount+0x88>)
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <f_mount+0x66>
 800c7f0:	79fb      	ldrb	r3, [r7, #7]
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d001      	beq.n	800c7fa <f_mount+0x6a>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e00a      	b.n	800c810 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c7fa:	f107 010c 	add.w	r1, r7, #12
 800c7fe:	f107 0308 	add.w	r3, r7, #8
 800c802:	2200      	movs	r2, #0
 800c804:	4618      	mov	r0, r3
 800c806:	f7ff fd07 	bl	800c218 <find_volume>
 800c80a:	4603      	mov	r3, r0
 800c80c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3720      	adds	r7, #32
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	20002910 	.word	0x20002910

0800c81c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b09a      	sub	sp, #104	@ 0x68
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	4613      	mov	r3, r2
 800c828:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d101      	bne.n	800c834 <f_open+0x18>
 800c830:	2309      	movs	r3, #9
 800c832:	e1b7      	b.n	800cba4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c83a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c83c:	79fa      	ldrb	r2, [r7, #7]
 800c83e:	f107 0114 	add.w	r1, r7, #20
 800c842:	f107 0308 	add.w	r3, r7, #8
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff fce6 	bl	800c218 <find_volume>
 800c84c:	4603      	mov	r3, r0
 800c84e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800c852:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c856:	2b00      	cmp	r3, #0
 800c858:	f040 819b 	bne.w	800cb92 <f_open+0x376>
		dj.obj.fs = fs;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	f107 0318 	add.w	r3, r7, #24
 800c866:	4611      	mov	r1, r2
 800c868:	4618      	mov	r0, r3
 800c86a:	f7ff fbc5 	bl	800bff8 <follow_path>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c874:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d118      	bne.n	800c8ae <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c87c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c880:	b25b      	sxtb	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	da03      	bge.n	800c88e <f_open+0x72>
				res = FR_INVALID_NAME;
 800c886:	2306      	movs	r3, #6
 800c888:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c88c:	e00f      	b.n	800c8ae <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c88e:	79fb      	ldrb	r3, [r7, #7]
 800c890:	2b01      	cmp	r3, #1
 800c892:	bf8c      	ite	hi
 800c894:	2301      	movhi	r3, #1
 800c896:	2300      	movls	r3, #0
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	461a      	mov	r2, r3
 800c89c:	f107 0318 	add.w	r3, r7, #24
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7fd ff3c 	bl	800a720 <chk_lock>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c8ae:	79fb      	ldrb	r3, [r7, #7]
 800c8b0:	f003 031c 	and.w	r3, r3, #28
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d07f      	beq.n	800c9b8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c8b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d017      	beq.n	800c8f0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c8c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	d10e      	bne.n	800c8e6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c8c8:	f7fd ff86 	bl	800a7d8 <enq_lock>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d006      	beq.n	800c8e0 <f_open+0xc4>
 800c8d2:	f107 0318 	add.w	r3, r7, #24
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7ff f8de 	bl	800ba98 <dir_register>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	e000      	b.n	800c8e2 <f_open+0xc6>
 800c8e0:	2312      	movs	r3, #18
 800c8e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c8e6:	79fb      	ldrb	r3, [r7, #7]
 800c8e8:	f043 0308 	orr.w	r3, r3, #8
 800c8ec:	71fb      	strb	r3, [r7, #7]
 800c8ee:	e010      	b.n	800c912 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c8f0:	7fbb      	ldrb	r3, [r7, #30]
 800c8f2:	f003 0311 	and.w	r3, r3, #17
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d003      	beq.n	800c902 <f_open+0xe6>
					res = FR_DENIED;
 800c8fa:	2307      	movs	r3, #7
 800c8fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c900:	e007      	b.n	800c912 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c902:	79fb      	ldrb	r3, [r7, #7]
 800c904:	f003 0304 	and.w	r3, r3, #4
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <f_open+0xf6>
 800c90c:	2308      	movs	r3, #8
 800c90e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c912:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c916:	2b00      	cmp	r3, #0
 800c918:	d168      	bne.n	800c9ec <f_open+0x1d0>
 800c91a:	79fb      	ldrb	r3, [r7, #7]
 800c91c:	f003 0308 	and.w	r3, r3, #8
 800c920:	2b00      	cmp	r3, #0
 800c922:	d063      	beq.n	800c9ec <f_open+0x1d0>
				dw = GET_FATTIME();
 800c924:	f7fd fb8c 	bl	800a040 <get_fattime>
 800c928:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92c:	330e      	adds	r3, #14
 800c92e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c930:	4618      	mov	r0, r3
 800c932:	f7fd fe4b 	bl	800a5cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c938:	3316      	adds	r3, #22
 800c93a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fd fe45 	bl	800a5cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c944:	330b      	adds	r3, #11
 800c946:	2220      	movs	r2, #32
 800c948:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c94e:	4611      	mov	r1, r2
 800c950:	4618      	mov	r0, r3
 800c952:	f7fe fe1a 	bl	800b58a <ld_clust>
 800c956:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c95c:	2200      	movs	r2, #0
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fe32 	bl	800b5c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c966:	331c      	adds	r3, #28
 800c968:	2100      	movs	r1, #0
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fd fe2e 	bl	800a5cc <st_dword>
					fs->wflag = 1;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	2201      	movs	r2, #1
 800c974:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d037      	beq.n	800c9ec <f_open+0x1d0>
						dw = fs->winsect;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c980:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c982:	f107 0318 	add.w	r3, r7, #24
 800c986:	2200      	movs	r2, #0
 800c988:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7fe fb22 	bl	800afd4 <remove_chain>
 800c990:	4603      	mov	r3, r0
 800c992:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800c996:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d126      	bne.n	800c9ec <f_open+0x1d0>
							res = move_window(fs, dw);
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe f86c 	bl	800aa80 <move_window>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9b2:	3a01      	subs	r2, #1
 800c9b4:	615a      	str	r2, [r3, #20]
 800c9b6:	e019      	b.n	800c9ec <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c9b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d115      	bne.n	800c9ec <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c9c0:	7fbb      	ldrb	r3, [r7, #30]
 800c9c2:	f003 0310 	and.w	r3, r3, #16
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d003      	beq.n	800c9d2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800c9ca:	2304      	movs	r3, #4
 800c9cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c9d0:	e00c      	b.n	800c9ec <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c9d2:	79fb      	ldrb	r3, [r7, #7]
 800c9d4:	f003 0302 	and.w	r3, r3, #2
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d007      	beq.n	800c9ec <f_open+0x1d0>
 800c9dc:	7fbb      	ldrb	r3, [r7, #30]
 800c9de:	f003 0301 	and.w	r3, r3, #1
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d002      	beq.n	800c9ec <f_open+0x1d0>
						res = FR_DENIED;
 800c9e6:	2307      	movs	r3, #7
 800c9e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c9ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d126      	bne.n	800ca42 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c9f4:	79fb      	ldrb	r3, [r7, #7]
 800c9f6:	f003 0308 	and.w	r3, r3, #8
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d003      	beq.n	800ca06 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ca0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca14:	79fb      	ldrb	r3, [r7, #7]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	bf8c      	ite	hi
 800ca1a:	2301      	movhi	r3, #1
 800ca1c:	2300      	movls	r3, #0
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	461a      	mov	r2, r3
 800ca22:	f107 0318 	add.w	r3, r7, #24
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fd fef7 	bl	800a81c <inc_lock>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	691b      	ldr	r3, [r3, #16]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <f_open+0x226>
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ca42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f040 80a3 	bne.w	800cb92 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca50:	4611      	mov	r1, r2
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fe fd99 	bl	800b58a <ld_clust>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ca5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca60:	331c      	adds	r3, #28
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fd fd74 	bl	800a550 <ld_dword>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ca74:	697a      	ldr	r2, [r7, #20]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	88da      	ldrh	r2, [r3, #6]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3330      	adds	r3, #48	@ 0x30
 800ca9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800caa2:	2100      	movs	r1, #0
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fd fdde 	bl	800a666 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800caaa:	79fb      	ldrb	r3, [r7, #7]
 800caac:	f003 0320 	and.w	r3, r3, #32
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d06e      	beq.n	800cb92 <f_open+0x376>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d06a      	beq.n	800cb92 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	895b      	ldrh	r3, [r3, #10]
 800cac8:	461a      	mov	r2, r3
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	899b      	ldrh	r3, [r3, #12]
 800cace:	fb02 f303 	mul.w	r3, r2, r3
 800cad2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cae0:	e016      	b.n	800cb10 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fe f887 	bl	800abfa <get_fat>
 800caec:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800caee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d802      	bhi.n	800cafa <f_open+0x2de>
 800caf4:	2302      	movs	r3, #2
 800caf6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cafa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb00:	d102      	bne.n	800cb08 <f_open+0x2ec>
 800cb02:	2301      	movs	r3, #1
 800cb04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cb08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cb0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d103      	bne.n	800cb20 <f_open+0x304>
 800cb18:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cb1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d8e0      	bhi.n	800cae2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cb24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cb26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d131      	bne.n	800cb92 <f_open+0x376>
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	899b      	ldrh	r3, [r3, #12]
 800cb32:	461a      	mov	r2, r3
 800cb34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb36:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb3a:	fb01 f202 	mul.w	r2, r1, r2
 800cb3e:	1a9b      	subs	r3, r3, r2
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d026      	beq.n	800cb92 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fe f837 	bl	800abbc <clust2sect>
 800cb4e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800cb50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d103      	bne.n	800cb5e <f_open+0x342>
						res = FR_INT_ERR;
 800cb56:	2302      	movs	r3, #2
 800cb58:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cb5c:	e019      	b.n	800cb92 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	899b      	ldrh	r3, [r3, #12]
 800cb62:	461a      	mov	r2, r3
 800cb64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb66:	fbb3 f2f2 	udiv	r2, r3, r2
 800cb6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb6c:	441a      	add	r2, r3
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	7858      	ldrb	r0, [r3, #1]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6a1a      	ldr	r2, [r3, #32]
 800cb80:	2301      	movs	r3, #1
 800cb82:	f7fd fc6f 	bl	800a464 <disk_read>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <f_open+0x376>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cb92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d002      	beq.n	800cba0 <f_open+0x384>
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cba0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3768      	adds	r7, #104	@ 0x68
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08c      	sub	sp, #48	@ 0x30
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]
 800cbb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f107 0210 	add.w	r2, r7, #16
 800cbca:	4611      	mov	r1, r2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7ff fda9 	bl	800c724 <validate>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cbd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d107      	bne.n	800cbf0 <f_write+0x44>
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	7d5b      	ldrb	r3, [r3, #21]
 800cbe4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cbe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <f_write+0x4a>
 800cbf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbf4:	e16a      	b.n	800cecc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	7d1b      	ldrb	r3, [r3, #20]
 800cbfa:	f003 0302 	and.w	r3, r3, #2
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <f_write+0x5a>
 800cc02:	2307      	movs	r3, #7
 800cc04:	e162      	b.n	800cecc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	699a      	ldr	r2, [r3, #24]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	441a      	add	r2, r3
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	699b      	ldr	r3, [r3, #24]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	f080 814c 	bcs.w	800ceb0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	699b      	ldr	r3, [r3, #24]
 800cc1c:	43db      	mvns	r3, r3
 800cc1e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cc20:	e146      	b.n	800ceb0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	699b      	ldr	r3, [r3, #24]
 800cc26:	693a      	ldr	r2, [r7, #16]
 800cc28:	8992      	ldrh	r2, [r2, #12]
 800cc2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc2e:	fb01 f202 	mul.w	r2, r1, r2
 800cc32:	1a9b      	subs	r3, r3, r2
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f040 80f1 	bne.w	800ce1c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	693a      	ldr	r2, [r7, #16]
 800cc40:	8992      	ldrh	r2, [r2, #12]
 800cc42:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc46:	693a      	ldr	r2, [r7, #16]
 800cc48:	8952      	ldrh	r2, [r2, #10]
 800cc4a:	3a01      	subs	r2, #1
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d143      	bne.n	800ccde <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d10c      	bne.n	800cc78 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800cc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d11a      	bne.n	800cca0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fa15 	bl	800b09e <create_chain>
 800cc74:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cc76:	e013      	b.n	800cca0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d007      	beq.n	800cc90 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	4619      	mov	r1, r3
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7fe faa1 	bl	800b1ce <clmt_clust>
 800cc8c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800cc8e:	e007      	b.n	800cca0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	69db      	ldr	r3, [r3, #28]
 800cc96:	4619      	mov	r1, r3
 800cc98:	4610      	mov	r0, r2
 800cc9a:	f7fe fa00 	bl	800b09e <create_chain>
 800cc9e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 8109 	beq.w	800ceba <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d104      	bne.n	800ccb8 <f_write+0x10c>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2202      	movs	r2, #2
 800ccb2:	755a      	strb	r2, [r3, #21]
 800ccb4:	2302      	movs	r3, #2
 800ccb6:	e109      	b.n	800cecc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ccb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccbe:	d104      	bne.n	800ccca <f_write+0x11e>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	755a      	strb	r2, [r3, #21]
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e100      	b.n	800cecc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccce:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d102      	bne.n	800ccde <f_write+0x132>
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccdc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	7d1b      	ldrb	r3, [r3, #20]
 800cce2:	b25b      	sxtb	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	da18      	bge.n	800cd1a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	7858      	ldrb	r0, [r3, #1]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6a1a      	ldr	r2, [r3, #32]
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	f7fd fbd4 	bl	800a4a4 <disk_write>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d004      	beq.n	800cd0c <f_write+0x160>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2201      	movs	r2, #1
 800cd06:	755a      	strb	r2, [r3, #21]
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e0df      	b.n	800cecc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	7d1b      	ldrb	r3, [r3, #20]
 800cd10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd14:	b2da      	uxtb	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	69db      	ldr	r3, [r3, #28]
 800cd20:	4619      	mov	r1, r3
 800cd22:	4610      	mov	r0, r2
 800cd24:	f7fd ff4a 	bl	800abbc <clust2sect>
 800cd28:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d104      	bne.n	800cd3a <f_write+0x18e>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2202      	movs	r2, #2
 800cd34:	755a      	strb	r2, [r3, #21]
 800cd36:	2302      	movs	r3, #2
 800cd38:	e0c8      	b.n	800cecc <f_write+0x320>
			sect += csect;
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	4413      	add	r3, r2
 800cd40:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	899b      	ldrh	r3, [r3, #12]
 800cd46:	461a      	mov	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd4e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800cd50:	6a3b      	ldr	r3, [r7, #32]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d043      	beq.n	800cdde <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cd56:	69ba      	ldr	r2, [r7, #24]
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	693a      	ldr	r2, [r7, #16]
 800cd5e:	8952      	ldrh	r2, [r2, #10]
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d905      	bls.n	800cd70 <f_write+0x1c4>
					cc = fs->csize - csect;
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	895b      	ldrh	r3, [r3, #10]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	7858      	ldrb	r0, [r3, #1]
 800cd74:	6a3b      	ldr	r3, [r7, #32]
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	69f9      	ldr	r1, [r7, #28]
 800cd7a:	f7fd fb93 	bl	800a4a4 <disk_write>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d004      	beq.n	800cd8e <f_write+0x1e2>
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2201      	movs	r2, #1
 800cd88:	755a      	strb	r2, [r3, #21]
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e09e      	b.n	800cecc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6a1a      	ldr	r2, [r3, #32]
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	1ad3      	subs	r3, r2, r3
 800cd96:	6a3a      	ldr	r2, [r7, #32]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d918      	bls.n	800cdce <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6a1a      	ldr	r2, [r3, #32]
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	8992      	ldrh	r2, [r2, #12]
 800cdae:	fb02 f303 	mul.w	r3, r2, r3
 800cdb2:	69fa      	ldr	r2, [r7, #28]
 800cdb4:	18d1      	adds	r1, r2, r3
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	899b      	ldrh	r3, [r3, #12]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f7fd fc32 	bl	800a624 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	7d1b      	ldrb	r3, [r3, #20]
 800cdc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	899b      	ldrh	r3, [r3, #12]
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	6a3b      	ldr	r3, [r7, #32]
 800cdd6:	fb02 f303 	mul.w	r3, r2, r3
 800cdda:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800cddc:	e04b      	b.n	800ce76 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6a1b      	ldr	r3, [r3, #32]
 800cde2:	697a      	ldr	r2, [r7, #20]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d016      	beq.n	800ce16 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	699a      	ldr	r2, [r3, #24]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d210      	bcs.n	800ce16 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	7858      	ldrb	r0, [r3, #1]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cdfe:	2301      	movs	r3, #1
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	f7fd fb2f 	bl	800a464 <disk_read>
 800ce06:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d004      	beq.n	800ce16 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	755a      	strb	r2, [r3, #21]
 800ce12:	2301      	movs	r3, #1
 800ce14:	e05a      	b.n	800cecc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	697a      	ldr	r2, [r7, #20]
 800ce1a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	899b      	ldrh	r3, [r3, #12]
 800ce20:	4618      	mov	r0, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	699b      	ldr	r3, [r3, #24]
 800ce26:	693a      	ldr	r2, [r7, #16]
 800ce28:	8992      	ldrh	r2, [r2, #12]
 800ce2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce2e:	fb01 f202 	mul.w	r2, r1, r2
 800ce32:	1a9b      	subs	r3, r3, r2
 800ce34:	1ac3      	subs	r3, r0, r3
 800ce36:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ce38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d901      	bls.n	800ce44 <f_write+0x298>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	693a      	ldr	r2, [r7, #16]
 800ce50:	8992      	ldrh	r2, [r2, #12]
 800ce52:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce56:	fb00 f202 	mul.w	r2, r0, r2
 800ce5a:	1a9b      	subs	r3, r3, r2
 800ce5c:	440b      	add	r3, r1
 800ce5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce60:	69f9      	ldr	r1, [r7, #28]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fd fbde 	bl	800a624 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	7d1b      	ldrb	r3, [r3, #20]
 800ce6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ce76:	69fa      	ldr	r2, [r7, #28]
 800ce78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7a:	4413      	add	r3, r2
 800ce7c:	61fb      	str	r3, [r7, #28]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	699a      	ldr	r2, [r3, #24]
 800ce82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce84:	441a      	add	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	619a      	str	r2, [r3, #24]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	68da      	ldr	r2, [r3, #12]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	bf38      	it	cc
 800ce96:	461a      	movcc	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	60da      	str	r2, [r3, #12]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea2:	441a      	add	r2, r3
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceac:	1ad3      	subs	r3, r2, r3
 800ceae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f47f aeb5 	bne.w	800cc22 <f_write+0x76>
 800ceb8:	e000      	b.n	800cebc <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ceba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	7d1b      	ldrb	r3, [r3, #20]
 800cec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3730      	adds	r7, #48	@ 0x30
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f107 0208 	add.w	r2, r7, #8
 800cee2:	4611      	mov	r1, r2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7ff fc1d 	bl	800c724 <validate>
 800ceea:	4603      	mov	r3, r0
 800ceec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ceee:	7dfb      	ldrb	r3, [r7, #23]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d168      	bne.n	800cfc6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7d1b      	ldrb	r3, [r3, #20]
 800cef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d062      	beq.n	800cfc6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7d1b      	ldrb	r3, [r3, #20]
 800cf04:	b25b      	sxtb	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	da15      	bge.n	800cf36 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	7858      	ldrb	r0, [r3, #1]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6a1a      	ldr	r2, [r3, #32]
 800cf18:	2301      	movs	r3, #1
 800cf1a:	f7fd fac3 	bl	800a4a4 <disk_write>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d001      	beq.n	800cf28 <f_sync+0x54>
 800cf24:	2301      	movs	r3, #1
 800cf26:	e04f      	b.n	800cfc8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	7d1b      	ldrb	r3, [r3, #20]
 800cf2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cf36:	f7fd f883 	bl	800a040 <get_fattime>
 800cf3a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf42:	4619      	mov	r1, r3
 800cf44:	4610      	mov	r0, r2
 800cf46:	f7fd fd9b 	bl	800aa80 <move_window>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cf4e:	7dfb      	ldrb	r3, [r7, #23]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d138      	bne.n	800cfc6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf58:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	330b      	adds	r3, #11
 800cf5e:	781a      	ldrb	r2, [r3, #0]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	330b      	adds	r3, #11
 800cf64:	f042 0220 	orr.w	r2, r2, #32
 800cf68:	b2d2      	uxtb	r2, r2
 800cf6a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6818      	ldr	r0, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	461a      	mov	r2, r3
 800cf76:	68f9      	ldr	r1, [r7, #12]
 800cf78:	f7fe fb26 	bl	800b5c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f103 021c 	add.w	r2, r3, #28
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	4619      	mov	r1, r3
 800cf88:	4610      	mov	r0, r2
 800cf8a:	f7fd fb1f 	bl	800a5cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	3316      	adds	r3, #22
 800cf92:	6939      	ldr	r1, [r7, #16]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fd fb19 	bl	800a5cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	3312      	adds	r3, #18
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fd faf8 	bl	800a596 <st_word>
					fs->wflag = 1;
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fd fd94 	bl	800aadc <sync_fs>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	7d1b      	ldrb	r3, [r3, #20]
 800cfbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff ff7b 	bl	800ced4 <f_sync>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cfe2:	7bfb      	ldrb	r3, [r7, #15]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d118      	bne.n	800d01a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f107 0208 	add.w	r2, r7, #8
 800cfee:	4611      	mov	r1, r2
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7ff fb97 	bl	800c724 <validate>
 800cff6:	4603      	mov	r3, r0
 800cff8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10c      	bne.n	800d01a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	691b      	ldr	r3, [r3, #16]
 800d004:	4618      	mov	r0, r3
 800d006:	f7fd fc97 	bl	800a938 <dec_lock>
 800d00a:	4603      	mov	r3, r0
 800d00c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d00e:	7bfb      	ldrb	r3, [r7, #15]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d102      	bne.n	800d01a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	460b      	mov	r3, r1
 800d02e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d030:	78fb      	ldrb	r3, [r7, #3]
 800d032:	2b0a      	cmp	r3, #10
 800d034:	d103      	bne.n	800d03e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d036:	210d      	movs	r1, #13
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7ff fff3 	bl	800d024 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	db25      	blt.n	800d096 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	1c5a      	adds	r2, r3, #1
 800d04e:	60fa      	str	r2, [r7, #12]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	4413      	add	r3, r2
 800d054:	78fa      	ldrb	r2, [r7, #3]
 800d056:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b3c      	cmp	r3, #60	@ 0x3c
 800d05c:	dd12      	ble.n	800d084 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6818      	ldr	r0, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f103 010c 	add.w	r1, r3, #12
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	f107 0308 	add.w	r3, r7, #8
 800d06e:	f7ff fd9d 	bl	800cbac <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	429a      	cmp	r2, r3
 800d078:	d101      	bne.n	800d07e <putc_bfd+0x5a>
 800d07a:	2300      	movs	r3, #0
 800d07c:	e001      	b.n	800d082 <putc_bfd+0x5e>
 800d07e:	f04f 33ff 	mov.w	r3, #4294967295
 800d082:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	68fa      	ldr	r2, [r7, #12]
 800d088:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	1c5a      	adds	r2, r3, #1
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	609a      	str	r2, [r3, #8]
 800d094:	e000      	b.n	800d098 <putc_bfd+0x74>
	if (i < 0) return;
 800d096:	bf00      	nop
}
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	db16      	blt.n	800d0dc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6818      	ldr	r0, [r3, #0]
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f103 010c 	add.w	r1, r3, #12
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	f107 030c 	add.w	r3, r7, #12
 800d0c2:	f7ff fd73 	bl	800cbac <f_write>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d107      	bne.n	800d0dc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d102      	bne.n	800d0dc <putc_flush+0x3e>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	e001      	b.n	800d0e0 <putc_flush+0x42>
	return EOF;
 800d0dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	605a      	str	r2, [r3, #4]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685a      	ldr	r2, [r3, #4]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	609a      	str	r2, [r3, #8]
}
 800d106:	bf00      	nop
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b096      	sub	sp, #88	@ 0x58
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800d11c:	f107 030c 	add.w	r3, r7, #12
 800d120:	6839      	ldr	r1, [r7, #0]
 800d122:	4618      	mov	r0, r3
 800d124:	f7ff ffe0 	bl	800d0e8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800d128:	e009      	b.n	800d13e <f_puts+0x2c>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	1c5a      	adds	r2, r3, #1
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	781a      	ldrb	r2, [r3, #0]
 800d132:	f107 030c 	add.w	r3, r7, #12
 800d136:	4611      	mov	r1, r2
 800d138:	4618      	mov	r0, r3
 800d13a:	f7ff ff73 	bl	800d024 <putc_bfd>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1f1      	bne.n	800d12a <f_puts+0x18>
	return putc_flush(&pb);
 800d146:	f107 030c 	add.w	r3, r7, #12
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7ff ffa7 	bl	800d09e <putc_flush>
 800d150:	4603      	mov	r3, r0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3758      	adds	r7, #88	@ 0x58
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
	...

0800d15c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	4613      	mov	r3, r2
 800d168:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d16a:	2301      	movs	r3, #1
 800d16c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d172:	4b1f      	ldr	r3, [pc, #124]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d174:	7b9b      	ldrb	r3, [r3, #14]
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d831      	bhi.n	800d1e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d17c:	4b1c      	ldr	r3, [pc, #112]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d17e:	7b9b      	ldrb	r3, [r3, #14]
 800d180:	b2db      	uxtb	r3, r3
 800d182:	461a      	mov	r2, r3
 800d184:	4b1a      	ldr	r3, [pc, #104]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d186:	2100      	movs	r1, #0
 800d188:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d18a:	4b19      	ldr	r3, [pc, #100]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d18c:	7b9b      	ldrb	r3, [r3, #14]
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	4a17      	ldr	r2, [pc, #92]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d19a:	4b15      	ldr	r3, [pc, #84]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d19c:	7b9b      	ldrb	r3, [r3, #14]
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b13      	ldr	r3, [pc, #76]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d1a4:	4413      	add	r3, r2
 800d1a6:	79fa      	ldrb	r2, [r7, #7]
 800d1a8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800d1aa:	4b11      	ldr	r3, [pc, #68]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d1ac:	7b9b      	ldrb	r3, [r3, #14]
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	1c5a      	adds	r2, r3, #1
 800d1b2:	b2d1      	uxtb	r1, r2
 800d1b4:	4a0e      	ldr	r2, [pc, #56]	@ (800d1f0 <FATFS_LinkDriverEx+0x94>)
 800d1b6:	7391      	strb	r1, [r2, #14]
 800d1b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d1ba:	7dbb      	ldrb	r3, [r7, #22]
 800d1bc:	3330      	adds	r3, #48	@ 0x30
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	223a      	movs	r2, #58	@ 0x3a
 800d1ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	3302      	adds	r3, #2
 800d1d0:	222f      	movs	r2, #47	@ 0x2f
 800d1d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	3303      	adds	r3, #3
 800d1d8:	2200      	movs	r2, #0
 800d1da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	371c      	adds	r7, #28
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	20002b3c 	.word	0x20002b3c

0800d1f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d1fe:	2200      	movs	r2, #0
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff ffaa 	bl	800d15c <FATFS_LinkDriverEx>
 800d208:	4603      	mov	r3, r0
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3708      	adds	r7, #8
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
	...

0800d214 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	6039      	str	r1, [r7, #0]
 800d21e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d220:	88fb      	ldrh	r3, [r7, #6]
 800d222:	2b7f      	cmp	r3, #127	@ 0x7f
 800d224:	d802      	bhi.n	800d22c <ff_convert+0x18>
		c = chr;
 800d226:	88fb      	ldrh	r3, [r7, #6]
 800d228:	81fb      	strh	r3, [r7, #14]
 800d22a:	e025      	b.n	800d278 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d00b      	beq.n	800d24a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d232:	88fb      	ldrh	r3, [r7, #6]
 800d234:	2bff      	cmp	r3, #255	@ 0xff
 800d236:	d805      	bhi.n	800d244 <ff_convert+0x30>
 800d238:	88fb      	ldrh	r3, [r7, #6]
 800d23a:	3b80      	subs	r3, #128	@ 0x80
 800d23c:	4a12      	ldr	r2, [pc, #72]	@ (800d288 <ff_convert+0x74>)
 800d23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d242:	e000      	b.n	800d246 <ff_convert+0x32>
 800d244:	2300      	movs	r3, #0
 800d246:	81fb      	strh	r3, [r7, #14]
 800d248:	e016      	b.n	800d278 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d24a:	2300      	movs	r3, #0
 800d24c:	81fb      	strh	r3, [r7, #14]
 800d24e:	e009      	b.n	800d264 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d250:	89fb      	ldrh	r3, [r7, #14]
 800d252:	4a0d      	ldr	r2, [pc, #52]	@ (800d288 <ff_convert+0x74>)
 800d254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d258:	88fa      	ldrh	r2, [r7, #6]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d006      	beq.n	800d26c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d25e:	89fb      	ldrh	r3, [r7, #14]
 800d260:	3301      	adds	r3, #1
 800d262:	81fb      	strh	r3, [r7, #14]
 800d264:	89fb      	ldrh	r3, [r7, #14]
 800d266:	2b7f      	cmp	r3, #127	@ 0x7f
 800d268:	d9f2      	bls.n	800d250 <ff_convert+0x3c>
 800d26a:	e000      	b.n	800d26e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d26c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d26e:	89fb      	ldrh	r3, [r7, #14]
 800d270:	3380      	adds	r3, #128	@ 0x80
 800d272:	b29b      	uxth	r3, r3
 800d274:	b2db      	uxtb	r3, r3
 800d276:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d278:	89fb      	ldrh	r3, [r7, #14]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	08011f6c 	.word	0x08011f6c

0800d28c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b087      	sub	sp, #28
 800d290:	af00      	add	r7, sp, #0
 800d292:	4603      	mov	r3, r0
 800d294:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d296:	88fb      	ldrh	r3, [r7, #6]
 800d298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d29c:	d201      	bcs.n	800d2a2 <ff_wtoupper+0x16>
 800d29e:	4b3e      	ldr	r3, [pc, #248]	@ (800d398 <ff_wtoupper+0x10c>)
 800d2a0:	e000      	b.n	800d2a4 <ff_wtoupper+0x18>
 800d2a2:	4b3e      	ldr	r3, [pc, #248]	@ (800d39c <ff_wtoupper+0x110>)
 800d2a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	1c9a      	adds	r2, r3, #2
 800d2aa:	617a      	str	r2, [r7, #20]
 800d2ac:	881b      	ldrh	r3, [r3, #0]
 800d2ae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d2b0:	8a7b      	ldrh	r3, [r7, #18]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d068      	beq.n	800d388 <ff_wtoupper+0xfc>
 800d2b6:	88fa      	ldrh	r2, [r7, #6]
 800d2b8:	8a7b      	ldrh	r3, [r7, #18]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d364      	bcc.n	800d388 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	1c9a      	adds	r2, r3, #2
 800d2c2:	617a      	str	r2, [r7, #20]
 800d2c4:	881b      	ldrh	r3, [r3, #0]
 800d2c6:	823b      	strh	r3, [r7, #16]
 800d2c8:	8a3b      	ldrh	r3, [r7, #16]
 800d2ca:	0a1b      	lsrs	r3, r3, #8
 800d2cc:	81fb      	strh	r3, [r7, #14]
 800d2ce:	8a3b      	ldrh	r3, [r7, #16]
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d2d4:	88fa      	ldrh	r2, [r7, #6]
 800d2d6:	8a79      	ldrh	r1, [r7, #18]
 800d2d8:	8a3b      	ldrh	r3, [r7, #16]
 800d2da:	440b      	add	r3, r1
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	da49      	bge.n	800d374 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d2e0:	89fb      	ldrh	r3, [r7, #14]
 800d2e2:	2b08      	cmp	r3, #8
 800d2e4:	d84f      	bhi.n	800d386 <ff_wtoupper+0xfa>
 800d2e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d2ec <ff_wtoupper+0x60>)
 800d2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ec:	0800d311 	.word	0x0800d311
 800d2f0:	0800d323 	.word	0x0800d323
 800d2f4:	0800d339 	.word	0x0800d339
 800d2f8:	0800d341 	.word	0x0800d341
 800d2fc:	0800d349 	.word	0x0800d349
 800d300:	0800d351 	.word	0x0800d351
 800d304:	0800d359 	.word	0x0800d359
 800d308:	0800d361 	.word	0x0800d361
 800d30c:	0800d369 	.word	0x0800d369
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d310:	88fa      	ldrh	r2, [r7, #6]
 800d312:	8a7b      	ldrh	r3, [r7, #18]
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	005b      	lsls	r3, r3, #1
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	4413      	add	r3, r2
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	80fb      	strh	r3, [r7, #6]
 800d320:	e027      	b.n	800d372 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d322:	88fa      	ldrh	r2, [r7, #6]
 800d324:	8a7b      	ldrh	r3, [r7, #18]
 800d326:	1ad3      	subs	r3, r2, r3
 800d328:	b29b      	uxth	r3, r3
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	b29b      	uxth	r3, r3
 800d330:	88fa      	ldrh	r2, [r7, #6]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	80fb      	strh	r3, [r7, #6]
 800d336:	e01c      	b.n	800d372 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d338:	88fb      	ldrh	r3, [r7, #6]
 800d33a:	3b10      	subs	r3, #16
 800d33c:	80fb      	strh	r3, [r7, #6]
 800d33e:	e018      	b.n	800d372 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d340:	88fb      	ldrh	r3, [r7, #6]
 800d342:	3b20      	subs	r3, #32
 800d344:	80fb      	strh	r3, [r7, #6]
 800d346:	e014      	b.n	800d372 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d348:	88fb      	ldrh	r3, [r7, #6]
 800d34a:	3b30      	subs	r3, #48	@ 0x30
 800d34c:	80fb      	strh	r3, [r7, #6]
 800d34e:	e010      	b.n	800d372 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d350:	88fb      	ldrh	r3, [r7, #6]
 800d352:	3b1a      	subs	r3, #26
 800d354:	80fb      	strh	r3, [r7, #6]
 800d356:	e00c      	b.n	800d372 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d358:	88fb      	ldrh	r3, [r7, #6]
 800d35a:	3308      	adds	r3, #8
 800d35c:	80fb      	strh	r3, [r7, #6]
 800d35e:	e008      	b.n	800d372 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d360:	88fb      	ldrh	r3, [r7, #6]
 800d362:	3b50      	subs	r3, #80	@ 0x50
 800d364:	80fb      	strh	r3, [r7, #6]
 800d366:	e004      	b.n	800d372 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d368:	88fb      	ldrh	r3, [r7, #6]
 800d36a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800d36e:	80fb      	strh	r3, [r7, #6]
 800d370:	bf00      	nop
			}
			break;
 800d372:	e008      	b.n	800d386 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d374:	89fb      	ldrh	r3, [r7, #14]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d195      	bne.n	800d2a6 <ff_wtoupper+0x1a>
 800d37a:	8a3b      	ldrh	r3, [r7, #16]
 800d37c:	005b      	lsls	r3, r3, #1
 800d37e:	697a      	ldr	r2, [r7, #20]
 800d380:	4413      	add	r3, r2
 800d382:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d384:	e78f      	b.n	800d2a6 <ff_wtoupper+0x1a>
			break;
 800d386:	bf00      	nop
	}

	return chr;
 800d388:	88fb      	ldrh	r3, [r7, #6]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	371c      	adds	r7, #28
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr
 800d396:	bf00      	nop
 800d398:	0801206c 	.word	0x0801206c
 800d39c:	08012260 	.word	0x08012260

0800d3a0 <malloc>:
 800d3a0:	4b02      	ldr	r3, [pc, #8]	@ (800d3ac <malloc+0xc>)
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	6818      	ldr	r0, [r3, #0]
 800d3a6:	f000 b82d 	b.w	800d404 <_malloc_r>
 800d3aa:	bf00      	nop
 800d3ac:	20000034 	.word	0x20000034

0800d3b0 <free>:
 800d3b0:	4b02      	ldr	r3, [pc, #8]	@ (800d3bc <free+0xc>)
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	6818      	ldr	r0, [r3, #0]
 800d3b6:	f001 bf37 	b.w	800f228 <_free_r>
 800d3ba:	bf00      	nop
 800d3bc:	20000034 	.word	0x20000034

0800d3c0 <sbrk_aligned>:
 800d3c0:	b570      	push	{r4, r5, r6, lr}
 800d3c2:	4e0f      	ldr	r6, [pc, #60]	@ (800d400 <sbrk_aligned+0x40>)
 800d3c4:	460c      	mov	r4, r1
 800d3c6:	6831      	ldr	r1, [r6, #0]
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	b911      	cbnz	r1, 800d3d2 <sbrk_aligned+0x12>
 800d3cc:	f001 f88a 	bl	800e4e4 <_sbrk_r>
 800d3d0:	6030      	str	r0, [r6, #0]
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	f001 f885 	bl	800e4e4 <_sbrk_r>
 800d3da:	1c43      	adds	r3, r0, #1
 800d3dc:	d103      	bne.n	800d3e6 <sbrk_aligned+0x26>
 800d3de:	f04f 34ff 	mov.w	r4, #4294967295
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	bd70      	pop	{r4, r5, r6, pc}
 800d3e6:	1cc4      	adds	r4, r0, #3
 800d3e8:	f024 0403 	bic.w	r4, r4, #3
 800d3ec:	42a0      	cmp	r0, r4
 800d3ee:	d0f8      	beq.n	800d3e2 <sbrk_aligned+0x22>
 800d3f0:	1a21      	subs	r1, r4, r0
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f001 f876 	bl	800e4e4 <_sbrk_r>
 800d3f8:	3001      	adds	r0, #1
 800d3fa:	d1f2      	bne.n	800d3e2 <sbrk_aligned+0x22>
 800d3fc:	e7ef      	b.n	800d3de <sbrk_aligned+0x1e>
 800d3fe:	bf00      	nop
 800d400:	20002b4c 	.word	0x20002b4c

0800d404 <_malloc_r>:
 800d404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d408:	1ccd      	adds	r5, r1, #3
 800d40a:	f025 0503 	bic.w	r5, r5, #3
 800d40e:	3508      	adds	r5, #8
 800d410:	2d0c      	cmp	r5, #12
 800d412:	bf38      	it	cc
 800d414:	250c      	movcc	r5, #12
 800d416:	2d00      	cmp	r5, #0
 800d418:	4606      	mov	r6, r0
 800d41a:	db01      	blt.n	800d420 <_malloc_r+0x1c>
 800d41c:	42a9      	cmp	r1, r5
 800d41e:	d904      	bls.n	800d42a <_malloc_r+0x26>
 800d420:	230c      	movs	r3, #12
 800d422:	6033      	str	r3, [r6, #0]
 800d424:	2000      	movs	r0, #0
 800d426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d42a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d500 <_malloc_r+0xfc>
 800d42e:	f000 f869 	bl	800d504 <__malloc_lock>
 800d432:	f8d8 3000 	ldr.w	r3, [r8]
 800d436:	461c      	mov	r4, r3
 800d438:	bb44      	cbnz	r4, 800d48c <_malloc_r+0x88>
 800d43a:	4629      	mov	r1, r5
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff ffbf 	bl	800d3c0 <sbrk_aligned>
 800d442:	1c43      	adds	r3, r0, #1
 800d444:	4604      	mov	r4, r0
 800d446:	d158      	bne.n	800d4fa <_malloc_r+0xf6>
 800d448:	f8d8 4000 	ldr.w	r4, [r8]
 800d44c:	4627      	mov	r7, r4
 800d44e:	2f00      	cmp	r7, #0
 800d450:	d143      	bne.n	800d4da <_malloc_r+0xd6>
 800d452:	2c00      	cmp	r4, #0
 800d454:	d04b      	beq.n	800d4ee <_malloc_r+0xea>
 800d456:	6823      	ldr	r3, [r4, #0]
 800d458:	4639      	mov	r1, r7
 800d45a:	4630      	mov	r0, r6
 800d45c:	eb04 0903 	add.w	r9, r4, r3
 800d460:	f001 f840 	bl	800e4e4 <_sbrk_r>
 800d464:	4581      	cmp	r9, r0
 800d466:	d142      	bne.n	800d4ee <_malloc_r+0xea>
 800d468:	6821      	ldr	r1, [r4, #0]
 800d46a:	1a6d      	subs	r5, r5, r1
 800d46c:	4629      	mov	r1, r5
 800d46e:	4630      	mov	r0, r6
 800d470:	f7ff ffa6 	bl	800d3c0 <sbrk_aligned>
 800d474:	3001      	adds	r0, #1
 800d476:	d03a      	beq.n	800d4ee <_malloc_r+0xea>
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	442b      	add	r3, r5
 800d47c:	6023      	str	r3, [r4, #0]
 800d47e:	f8d8 3000 	ldr.w	r3, [r8]
 800d482:	685a      	ldr	r2, [r3, #4]
 800d484:	bb62      	cbnz	r2, 800d4e0 <_malloc_r+0xdc>
 800d486:	f8c8 7000 	str.w	r7, [r8]
 800d48a:	e00f      	b.n	800d4ac <_malloc_r+0xa8>
 800d48c:	6822      	ldr	r2, [r4, #0]
 800d48e:	1b52      	subs	r2, r2, r5
 800d490:	d420      	bmi.n	800d4d4 <_malloc_r+0xd0>
 800d492:	2a0b      	cmp	r2, #11
 800d494:	d917      	bls.n	800d4c6 <_malloc_r+0xc2>
 800d496:	1961      	adds	r1, r4, r5
 800d498:	42a3      	cmp	r3, r4
 800d49a:	6025      	str	r5, [r4, #0]
 800d49c:	bf18      	it	ne
 800d49e:	6059      	strne	r1, [r3, #4]
 800d4a0:	6863      	ldr	r3, [r4, #4]
 800d4a2:	bf08      	it	eq
 800d4a4:	f8c8 1000 	streq.w	r1, [r8]
 800d4a8:	5162      	str	r2, [r4, r5]
 800d4aa:	604b      	str	r3, [r1, #4]
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f000 f82f 	bl	800d510 <__malloc_unlock>
 800d4b2:	f104 000b 	add.w	r0, r4, #11
 800d4b6:	1d23      	adds	r3, r4, #4
 800d4b8:	f020 0007 	bic.w	r0, r0, #7
 800d4bc:	1ac2      	subs	r2, r0, r3
 800d4be:	bf1c      	itt	ne
 800d4c0:	1a1b      	subne	r3, r3, r0
 800d4c2:	50a3      	strne	r3, [r4, r2]
 800d4c4:	e7af      	b.n	800d426 <_malloc_r+0x22>
 800d4c6:	6862      	ldr	r2, [r4, #4]
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	bf0c      	ite	eq
 800d4cc:	f8c8 2000 	streq.w	r2, [r8]
 800d4d0:	605a      	strne	r2, [r3, #4]
 800d4d2:	e7eb      	b.n	800d4ac <_malloc_r+0xa8>
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	6864      	ldr	r4, [r4, #4]
 800d4d8:	e7ae      	b.n	800d438 <_malloc_r+0x34>
 800d4da:	463c      	mov	r4, r7
 800d4dc:	687f      	ldr	r7, [r7, #4]
 800d4de:	e7b6      	b.n	800d44e <_malloc_r+0x4a>
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	42a3      	cmp	r3, r4
 800d4e6:	d1fb      	bne.n	800d4e0 <_malloc_r+0xdc>
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	6053      	str	r3, [r2, #4]
 800d4ec:	e7de      	b.n	800d4ac <_malloc_r+0xa8>
 800d4ee:	230c      	movs	r3, #12
 800d4f0:	6033      	str	r3, [r6, #0]
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f000 f80c 	bl	800d510 <__malloc_unlock>
 800d4f8:	e794      	b.n	800d424 <_malloc_r+0x20>
 800d4fa:	6005      	str	r5, [r0, #0]
 800d4fc:	e7d6      	b.n	800d4ac <_malloc_r+0xa8>
 800d4fe:	bf00      	nop
 800d500:	20002b50 	.word	0x20002b50

0800d504 <__malloc_lock>:
 800d504:	4801      	ldr	r0, [pc, #4]	@ (800d50c <__malloc_lock+0x8>)
 800d506:	f001 b83a 	b.w	800e57e <__retarget_lock_acquire_recursive>
 800d50a:	bf00      	nop
 800d50c:	20002c94 	.word	0x20002c94

0800d510 <__malloc_unlock>:
 800d510:	4801      	ldr	r0, [pc, #4]	@ (800d518 <__malloc_unlock+0x8>)
 800d512:	f001 b835 	b.w	800e580 <__retarget_lock_release_recursive>
 800d516:	bf00      	nop
 800d518:	20002c94 	.word	0x20002c94

0800d51c <__cvt>:
 800d51c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d520:	ec57 6b10 	vmov	r6, r7, d0
 800d524:	2f00      	cmp	r7, #0
 800d526:	460c      	mov	r4, r1
 800d528:	4619      	mov	r1, r3
 800d52a:	463b      	mov	r3, r7
 800d52c:	bfbb      	ittet	lt
 800d52e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d532:	461f      	movlt	r7, r3
 800d534:	2300      	movge	r3, #0
 800d536:	232d      	movlt	r3, #45	@ 0x2d
 800d538:	700b      	strb	r3, [r1, #0]
 800d53a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d53c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d540:	4691      	mov	r9, r2
 800d542:	f023 0820 	bic.w	r8, r3, #32
 800d546:	bfbc      	itt	lt
 800d548:	4632      	movlt	r2, r6
 800d54a:	4616      	movlt	r6, r2
 800d54c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d550:	d005      	beq.n	800d55e <__cvt+0x42>
 800d552:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d556:	d100      	bne.n	800d55a <__cvt+0x3e>
 800d558:	3401      	adds	r4, #1
 800d55a:	2102      	movs	r1, #2
 800d55c:	e000      	b.n	800d560 <__cvt+0x44>
 800d55e:	2103      	movs	r1, #3
 800d560:	ab03      	add	r3, sp, #12
 800d562:	9301      	str	r3, [sp, #4]
 800d564:	ab02      	add	r3, sp, #8
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	ec47 6b10 	vmov	d0, r6, r7
 800d56c:	4653      	mov	r3, sl
 800d56e:	4622      	mov	r2, r4
 800d570:	f001 f896 	bl	800e6a0 <_dtoa_r>
 800d574:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d578:	4605      	mov	r5, r0
 800d57a:	d119      	bne.n	800d5b0 <__cvt+0x94>
 800d57c:	f019 0f01 	tst.w	r9, #1
 800d580:	d00e      	beq.n	800d5a0 <__cvt+0x84>
 800d582:	eb00 0904 	add.w	r9, r0, r4
 800d586:	2200      	movs	r2, #0
 800d588:	2300      	movs	r3, #0
 800d58a:	4630      	mov	r0, r6
 800d58c:	4639      	mov	r1, r7
 800d58e:	f7f3 fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d592:	b108      	cbz	r0, 800d598 <__cvt+0x7c>
 800d594:	f8cd 900c 	str.w	r9, [sp, #12]
 800d598:	2230      	movs	r2, #48	@ 0x30
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	454b      	cmp	r3, r9
 800d59e:	d31e      	bcc.n	800d5de <__cvt+0xc2>
 800d5a0:	9b03      	ldr	r3, [sp, #12]
 800d5a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5a4:	1b5b      	subs	r3, r3, r5
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	6013      	str	r3, [r2, #0]
 800d5aa:	b004      	add	sp, #16
 800d5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d5b4:	eb00 0904 	add.w	r9, r0, r4
 800d5b8:	d1e5      	bne.n	800d586 <__cvt+0x6a>
 800d5ba:	7803      	ldrb	r3, [r0, #0]
 800d5bc:	2b30      	cmp	r3, #48	@ 0x30
 800d5be:	d10a      	bne.n	800d5d6 <__cvt+0xba>
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	4639      	mov	r1, r7
 800d5c8:	f7f3 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5cc:	b918      	cbnz	r0, 800d5d6 <__cvt+0xba>
 800d5ce:	f1c4 0401 	rsb	r4, r4, #1
 800d5d2:	f8ca 4000 	str.w	r4, [sl]
 800d5d6:	f8da 3000 	ldr.w	r3, [sl]
 800d5da:	4499      	add	r9, r3
 800d5dc:	e7d3      	b.n	800d586 <__cvt+0x6a>
 800d5de:	1c59      	adds	r1, r3, #1
 800d5e0:	9103      	str	r1, [sp, #12]
 800d5e2:	701a      	strb	r2, [r3, #0]
 800d5e4:	e7d9      	b.n	800d59a <__cvt+0x7e>

0800d5e6 <__exponent>:
 800d5e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	bfba      	itte	lt
 800d5ec:	4249      	neglt	r1, r1
 800d5ee:	232d      	movlt	r3, #45	@ 0x2d
 800d5f0:	232b      	movge	r3, #43	@ 0x2b
 800d5f2:	2909      	cmp	r1, #9
 800d5f4:	7002      	strb	r2, [r0, #0]
 800d5f6:	7043      	strb	r3, [r0, #1]
 800d5f8:	dd29      	ble.n	800d64e <__exponent+0x68>
 800d5fa:	f10d 0307 	add.w	r3, sp, #7
 800d5fe:	461d      	mov	r5, r3
 800d600:	270a      	movs	r7, #10
 800d602:	461a      	mov	r2, r3
 800d604:	fbb1 f6f7 	udiv	r6, r1, r7
 800d608:	fb07 1416 	mls	r4, r7, r6, r1
 800d60c:	3430      	adds	r4, #48	@ 0x30
 800d60e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d612:	460c      	mov	r4, r1
 800d614:	2c63      	cmp	r4, #99	@ 0x63
 800d616:	f103 33ff 	add.w	r3, r3, #4294967295
 800d61a:	4631      	mov	r1, r6
 800d61c:	dcf1      	bgt.n	800d602 <__exponent+0x1c>
 800d61e:	3130      	adds	r1, #48	@ 0x30
 800d620:	1e94      	subs	r4, r2, #2
 800d622:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d626:	1c41      	adds	r1, r0, #1
 800d628:	4623      	mov	r3, r4
 800d62a:	42ab      	cmp	r3, r5
 800d62c:	d30a      	bcc.n	800d644 <__exponent+0x5e>
 800d62e:	f10d 0309 	add.w	r3, sp, #9
 800d632:	1a9b      	subs	r3, r3, r2
 800d634:	42ac      	cmp	r4, r5
 800d636:	bf88      	it	hi
 800d638:	2300      	movhi	r3, #0
 800d63a:	3302      	adds	r3, #2
 800d63c:	4403      	add	r3, r0
 800d63e:	1a18      	subs	r0, r3, r0
 800d640:	b003      	add	sp, #12
 800d642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d644:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d648:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d64c:	e7ed      	b.n	800d62a <__exponent+0x44>
 800d64e:	2330      	movs	r3, #48	@ 0x30
 800d650:	3130      	adds	r1, #48	@ 0x30
 800d652:	7083      	strb	r3, [r0, #2]
 800d654:	70c1      	strb	r1, [r0, #3]
 800d656:	1d03      	adds	r3, r0, #4
 800d658:	e7f1      	b.n	800d63e <__exponent+0x58>
	...

0800d65c <_printf_float>:
 800d65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	b08d      	sub	sp, #52	@ 0x34
 800d662:	460c      	mov	r4, r1
 800d664:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d668:	4616      	mov	r6, r2
 800d66a:	461f      	mov	r7, r3
 800d66c:	4605      	mov	r5, r0
 800d66e:	f000 ff01 	bl	800e474 <_localeconv_r>
 800d672:	6803      	ldr	r3, [r0, #0]
 800d674:	9304      	str	r3, [sp, #16]
 800d676:	4618      	mov	r0, r3
 800d678:	f7f2 fdfa 	bl	8000270 <strlen>
 800d67c:	2300      	movs	r3, #0
 800d67e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d680:	f8d8 3000 	ldr.w	r3, [r8]
 800d684:	9005      	str	r0, [sp, #20]
 800d686:	3307      	adds	r3, #7
 800d688:	f023 0307 	bic.w	r3, r3, #7
 800d68c:	f103 0208 	add.w	r2, r3, #8
 800d690:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d694:	f8d4 b000 	ldr.w	fp, [r4]
 800d698:	f8c8 2000 	str.w	r2, [r8]
 800d69c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d6a4:	9307      	str	r3, [sp, #28]
 800d6a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d6aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d6ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6b2:	4b9c      	ldr	r3, [pc, #624]	@ (800d924 <_printf_float+0x2c8>)
 800d6b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b8:	f7f3 fa38 	bl	8000b2c <__aeabi_dcmpun>
 800d6bc:	bb70      	cbnz	r0, 800d71c <_printf_float+0xc0>
 800d6be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6c2:	4b98      	ldr	r3, [pc, #608]	@ (800d924 <_printf_float+0x2c8>)
 800d6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c8:	f7f3 fa12 	bl	8000af0 <__aeabi_dcmple>
 800d6cc:	bb30      	cbnz	r0, 800d71c <_printf_float+0xc0>
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	4640      	mov	r0, r8
 800d6d4:	4649      	mov	r1, r9
 800d6d6:	f7f3 fa01 	bl	8000adc <__aeabi_dcmplt>
 800d6da:	b110      	cbz	r0, 800d6e2 <_printf_float+0x86>
 800d6dc:	232d      	movs	r3, #45	@ 0x2d
 800d6de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6e2:	4a91      	ldr	r2, [pc, #580]	@ (800d928 <_printf_float+0x2cc>)
 800d6e4:	4b91      	ldr	r3, [pc, #580]	@ (800d92c <_printf_float+0x2d0>)
 800d6e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d6ea:	bf94      	ite	ls
 800d6ec:	4690      	movls	r8, r2
 800d6ee:	4698      	movhi	r8, r3
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	6123      	str	r3, [r4, #16]
 800d6f4:	f02b 0304 	bic.w	r3, fp, #4
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	f04f 0900 	mov.w	r9, #0
 800d6fe:	9700      	str	r7, [sp, #0]
 800d700:	4633      	mov	r3, r6
 800d702:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d704:	4621      	mov	r1, r4
 800d706:	4628      	mov	r0, r5
 800d708:	f000 f9d2 	bl	800dab0 <_printf_common>
 800d70c:	3001      	adds	r0, #1
 800d70e:	f040 808d 	bne.w	800d82c <_printf_float+0x1d0>
 800d712:	f04f 30ff 	mov.w	r0, #4294967295
 800d716:	b00d      	add	sp, #52	@ 0x34
 800d718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d71c:	4642      	mov	r2, r8
 800d71e:	464b      	mov	r3, r9
 800d720:	4640      	mov	r0, r8
 800d722:	4649      	mov	r1, r9
 800d724:	f7f3 fa02 	bl	8000b2c <__aeabi_dcmpun>
 800d728:	b140      	cbz	r0, 800d73c <_printf_float+0xe0>
 800d72a:	464b      	mov	r3, r9
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	bfbc      	itt	lt
 800d730:	232d      	movlt	r3, #45	@ 0x2d
 800d732:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d736:	4a7e      	ldr	r2, [pc, #504]	@ (800d930 <_printf_float+0x2d4>)
 800d738:	4b7e      	ldr	r3, [pc, #504]	@ (800d934 <_printf_float+0x2d8>)
 800d73a:	e7d4      	b.n	800d6e6 <_printf_float+0x8a>
 800d73c:	6863      	ldr	r3, [r4, #4]
 800d73e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d742:	9206      	str	r2, [sp, #24]
 800d744:	1c5a      	adds	r2, r3, #1
 800d746:	d13b      	bne.n	800d7c0 <_printf_float+0x164>
 800d748:	2306      	movs	r3, #6
 800d74a:	6063      	str	r3, [r4, #4]
 800d74c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d750:	2300      	movs	r3, #0
 800d752:	6022      	str	r2, [r4, #0]
 800d754:	9303      	str	r3, [sp, #12]
 800d756:	ab0a      	add	r3, sp, #40	@ 0x28
 800d758:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d75c:	ab09      	add	r3, sp, #36	@ 0x24
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	6861      	ldr	r1, [r4, #4]
 800d762:	ec49 8b10 	vmov	d0, r8, r9
 800d766:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d76a:	4628      	mov	r0, r5
 800d76c:	f7ff fed6 	bl	800d51c <__cvt>
 800d770:	9b06      	ldr	r3, [sp, #24]
 800d772:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d774:	2b47      	cmp	r3, #71	@ 0x47
 800d776:	4680      	mov	r8, r0
 800d778:	d129      	bne.n	800d7ce <_printf_float+0x172>
 800d77a:	1cc8      	adds	r0, r1, #3
 800d77c:	db02      	blt.n	800d784 <_printf_float+0x128>
 800d77e:	6863      	ldr	r3, [r4, #4]
 800d780:	4299      	cmp	r1, r3
 800d782:	dd41      	ble.n	800d808 <_printf_float+0x1ac>
 800d784:	f1aa 0a02 	sub.w	sl, sl, #2
 800d788:	fa5f fa8a 	uxtb.w	sl, sl
 800d78c:	3901      	subs	r1, #1
 800d78e:	4652      	mov	r2, sl
 800d790:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d794:	9109      	str	r1, [sp, #36]	@ 0x24
 800d796:	f7ff ff26 	bl	800d5e6 <__exponent>
 800d79a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d79c:	1813      	adds	r3, r2, r0
 800d79e:	2a01      	cmp	r2, #1
 800d7a0:	4681      	mov	r9, r0
 800d7a2:	6123      	str	r3, [r4, #16]
 800d7a4:	dc02      	bgt.n	800d7ac <_printf_float+0x150>
 800d7a6:	6822      	ldr	r2, [r4, #0]
 800d7a8:	07d2      	lsls	r2, r2, #31
 800d7aa:	d501      	bpl.n	800d7b0 <_printf_float+0x154>
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	6123      	str	r3, [r4, #16]
 800d7b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0a2      	beq.n	800d6fe <_printf_float+0xa2>
 800d7b8:	232d      	movs	r3, #45	@ 0x2d
 800d7ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7be:	e79e      	b.n	800d6fe <_printf_float+0xa2>
 800d7c0:	9a06      	ldr	r2, [sp, #24]
 800d7c2:	2a47      	cmp	r2, #71	@ 0x47
 800d7c4:	d1c2      	bne.n	800d74c <_printf_float+0xf0>
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d1c0      	bne.n	800d74c <_printf_float+0xf0>
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e7bd      	b.n	800d74a <_printf_float+0xee>
 800d7ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7d2:	d9db      	bls.n	800d78c <_printf_float+0x130>
 800d7d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d7d8:	d118      	bne.n	800d80c <_printf_float+0x1b0>
 800d7da:	2900      	cmp	r1, #0
 800d7dc:	6863      	ldr	r3, [r4, #4]
 800d7de:	dd0b      	ble.n	800d7f8 <_printf_float+0x19c>
 800d7e0:	6121      	str	r1, [r4, #16]
 800d7e2:	b913      	cbnz	r3, 800d7ea <_printf_float+0x18e>
 800d7e4:	6822      	ldr	r2, [r4, #0]
 800d7e6:	07d0      	lsls	r0, r2, #31
 800d7e8:	d502      	bpl.n	800d7f0 <_printf_float+0x194>
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	440b      	add	r3, r1
 800d7ee:	6123      	str	r3, [r4, #16]
 800d7f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d7f2:	f04f 0900 	mov.w	r9, #0
 800d7f6:	e7db      	b.n	800d7b0 <_printf_float+0x154>
 800d7f8:	b913      	cbnz	r3, 800d800 <_printf_float+0x1a4>
 800d7fa:	6822      	ldr	r2, [r4, #0]
 800d7fc:	07d2      	lsls	r2, r2, #31
 800d7fe:	d501      	bpl.n	800d804 <_printf_float+0x1a8>
 800d800:	3302      	adds	r3, #2
 800d802:	e7f4      	b.n	800d7ee <_printf_float+0x192>
 800d804:	2301      	movs	r3, #1
 800d806:	e7f2      	b.n	800d7ee <_printf_float+0x192>
 800d808:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d80c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d80e:	4299      	cmp	r1, r3
 800d810:	db05      	blt.n	800d81e <_printf_float+0x1c2>
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	6121      	str	r1, [r4, #16]
 800d816:	07d8      	lsls	r0, r3, #31
 800d818:	d5ea      	bpl.n	800d7f0 <_printf_float+0x194>
 800d81a:	1c4b      	adds	r3, r1, #1
 800d81c:	e7e7      	b.n	800d7ee <_printf_float+0x192>
 800d81e:	2900      	cmp	r1, #0
 800d820:	bfd4      	ite	le
 800d822:	f1c1 0202 	rsble	r2, r1, #2
 800d826:	2201      	movgt	r2, #1
 800d828:	4413      	add	r3, r2
 800d82a:	e7e0      	b.n	800d7ee <_printf_float+0x192>
 800d82c:	6823      	ldr	r3, [r4, #0]
 800d82e:	055a      	lsls	r2, r3, #21
 800d830:	d407      	bmi.n	800d842 <_printf_float+0x1e6>
 800d832:	6923      	ldr	r3, [r4, #16]
 800d834:	4642      	mov	r2, r8
 800d836:	4631      	mov	r1, r6
 800d838:	4628      	mov	r0, r5
 800d83a:	47b8      	blx	r7
 800d83c:	3001      	adds	r0, #1
 800d83e:	d12b      	bne.n	800d898 <_printf_float+0x23c>
 800d840:	e767      	b.n	800d712 <_printf_float+0xb6>
 800d842:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d846:	f240 80dd 	bls.w	800da04 <_printf_float+0x3a8>
 800d84a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d84e:	2200      	movs	r2, #0
 800d850:	2300      	movs	r3, #0
 800d852:	f7f3 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 800d856:	2800      	cmp	r0, #0
 800d858:	d033      	beq.n	800d8c2 <_printf_float+0x266>
 800d85a:	4a37      	ldr	r2, [pc, #220]	@ (800d938 <_printf_float+0x2dc>)
 800d85c:	2301      	movs	r3, #1
 800d85e:	4631      	mov	r1, r6
 800d860:	4628      	mov	r0, r5
 800d862:	47b8      	blx	r7
 800d864:	3001      	adds	r0, #1
 800d866:	f43f af54 	beq.w	800d712 <_printf_float+0xb6>
 800d86a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d86e:	4543      	cmp	r3, r8
 800d870:	db02      	blt.n	800d878 <_printf_float+0x21c>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	07d8      	lsls	r0, r3, #31
 800d876:	d50f      	bpl.n	800d898 <_printf_float+0x23c>
 800d878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d87c:	4631      	mov	r1, r6
 800d87e:	4628      	mov	r0, r5
 800d880:	47b8      	blx	r7
 800d882:	3001      	adds	r0, #1
 800d884:	f43f af45 	beq.w	800d712 <_printf_float+0xb6>
 800d888:	f04f 0900 	mov.w	r9, #0
 800d88c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d890:	f104 0a1a 	add.w	sl, r4, #26
 800d894:	45c8      	cmp	r8, r9
 800d896:	dc09      	bgt.n	800d8ac <_printf_float+0x250>
 800d898:	6823      	ldr	r3, [r4, #0]
 800d89a:	079b      	lsls	r3, r3, #30
 800d89c:	f100 8103 	bmi.w	800daa6 <_printf_float+0x44a>
 800d8a0:	68e0      	ldr	r0, [r4, #12]
 800d8a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8a4:	4298      	cmp	r0, r3
 800d8a6:	bfb8      	it	lt
 800d8a8:	4618      	movlt	r0, r3
 800d8aa:	e734      	b.n	800d716 <_printf_float+0xba>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	4652      	mov	r2, sl
 800d8b0:	4631      	mov	r1, r6
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	47b8      	blx	r7
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	f43f af2b 	beq.w	800d712 <_printf_float+0xb6>
 800d8bc:	f109 0901 	add.w	r9, r9, #1
 800d8c0:	e7e8      	b.n	800d894 <_printf_float+0x238>
 800d8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	dc39      	bgt.n	800d93c <_printf_float+0x2e0>
 800d8c8:	4a1b      	ldr	r2, [pc, #108]	@ (800d938 <_printf_float+0x2dc>)
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	4631      	mov	r1, r6
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	47b8      	blx	r7
 800d8d2:	3001      	adds	r0, #1
 800d8d4:	f43f af1d 	beq.w	800d712 <_printf_float+0xb6>
 800d8d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d8dc:	ea59 0303 	orrs.w	r3, r9, r3
 800d8e0:	d102      	bne.n	800d8e8 <_printf_float+0x28c>
 800d8e2:	6823      	ldr	r3, [r4, #0]
 800d8e4:	07d9      	lsls	r1, r3, #31
 800d8e6:	d5d7      	bpl.n	800d898 <_printf_float+0x23c>
 800d8e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8ec:	4631      	mov	r1, r6
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	47b8      	blx	r7
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	f43f af0d 	beq.w	800d712 <_printf_float+0xb6>
 800d8f8:	f04f 0a00 	mov.w	sl, #0
 800d8fc:	f104 0b1a 	add.w	fp, r4, #26
 800d900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d902:	425b      	negs	r3, r3
 800d904:	4553      	cmp	r3, sl
 800d906:	dc01      	bgt.n	800d90c <_printf_float+0x2b0>
 800d908:	464b      	mov	r3, r9
 800d90a:	e793      	b.n	800d834 <_printf_float+0x1d8>
 800d90c:	2301      	movs	r3, #1
 800d90e:	465a      	mov	r2, fp
 800d910:	4631      	mov	r1, r6
 800d912:	4628      	mov	r0, r5
 800d914:	47b8      	blx	r7
 800d916:	3001      	adds	r0, #1
 800d918:	f43f aefb 	beq.w	800d712 <_printf_float+0xb6>
 800d91c:	f10a 0a01 	add.w	sl, sl, #1
 800d920:	e7ee      	b.n	800d900 <_printf_float+0x2a4>
 800d922:	bf00      	nop
 800d924:	7fefffff 	.word	0x7fefffff
 800d928:	0801231c 	.word	0x0801231c
 800d92c:	08012320 	.word	0x08012320
 800d930:	08012324 	.word	0x08012324
 800d934:	08012328 	.word	0x08012328
 800d938:	0801232c 	.word	0x0801232c
 800d93c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d93e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d942:	4553      	cmp	r3, sl
 800d944:	bfa8      	it	ge
 800d946:	4653      	movge	r3, sl
 800d948:	2b00      	cmp	r3, #0
 800d94a:	4699      	mov	r9, r3
 800d94c:	dc36      	bgt.n	800d9bc <_printf_float+0x360>
 800d94e:	f04f 0b00 	mov.w	fp, #0
 800d952:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d956:	f104 021a 	add.w	r2, r4, #26
 800d95a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d95c:	9306      	str	r3, [sp, #24]
 800d95e:	eba3 0309 	sub.w	r3, r3, r9
 800d962:	455b      	cmp	r3, fp
 800d964:	dc31      	bgt.n	800d9ca <_printf_float+0x36e>
 800d966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d968:	459a      	cmp	sl, r3
 800d96a:	dc3a      	bgt.n	800d9e2 <_printf_float+0x386>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	07da      	lsls	r2, r3, #31
 800d970:	d437      	bmi.n	800d9e2 <_printf_float+0x386>
 800d972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d974:	ebaa 0903 	sub.w	r9, sl, r3
 800d978:	9b06      	ldr	r3, [sp, #24]
 800d97a:	ebaa 0303 	sub.w	r3, sl, r3
 800d97e:	4599      	cmp	r9, r3
 800d980:	bfa8      	it	ge
 800d982:	4699      	movge	r9, r3
 800d984:	f1b9 0f00 	cmp.w	r9, #0
 800d988:	dc33      	bgt.n	800d9f2 <_printf_float+0x396>
 800d98a:	f04f 0800 	mov.w	r8, #0
 800d98e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d992:	f104 0b1a 	add.w	fp, r4, #26
 800d996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d998:	ebaa 0303 	sub.w	r3, sl, r3
 800d99c:	eba3 0309 	sub.w	r3, r3, r9
 800d9a0:	4543      	cmp	r3, r8
 800d9a2:	f77f af79 	ble.w	800d898 <_printf_float+0x23c>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	465a      	mov	r2, fp
 800d9aa:	4631      	mov	r1, r6
 800d9ac:	4628      	mov	r0, r5
 800d9ae:	47b8      	blx	r7
 800d9b0:	3001      	adds	r0, #1
 800d9b2:	f43f aeae 	beq.w	800d712 <_printf_float+0xb6>
 800d9b6:	f108 0801 	add.w	r8, r8, #1
 800d9ba:	e7ec      	b.n	800d996 <_printf_float+0x33a>
 800d9bc:	4642      	mov	r2, r8
 800d9be:	4631      	mov	r1, r6
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	47b8      	blx	r7
 800d9c4:	3001      	adds	r0, #1
 800d9c6:	d1c2      	bne.n	800d94e <_printf_float+0x2f2>
 800d9c8:	e6a3      	b.n	800d712 <_printf_float+0xb6>
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	4631      	mov	r1, r6
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	9206      	str	r2, [sp, #24]
 800d9d2:	47b8      	blx	r7
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	f43f ae9c 	beq.w	800d712 <_printf_float+0xb6>
 800d9da:	9a06      	ldr	r2, [sp, #24]
 800d9dc:	f10b 0b01 	add.w	fp, fp, #1
 800d9e0:	e7bb      	b.n	800d95a <_printf_float+0x2fe>
 800d9e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	47b8      	blx	r7
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	d1c0      	bne.n	800d972 <_printf_float+0x316>
 800d9f0:	e68f      	b.n	800d712 <_printf_float+0xb6>
 800d9f2:	9a06      	ldr	r2, [sp, #24]
 800d9f4:	464b      	mov	r3, r9
 800d9f6:	4442      	add	r2, r8
 800d9f8:	4631      	mov	r1, r6
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	47b8      	blx	r7
 800d9fe:	3001      	adds	r0, #1
 800da00:	d1c3      	bne.n	800d98a <_printf_float+0x32e>
 800da02:	e686      	b.n	800d712 <_printf_float+0xb6>
 800da04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da08:	f1ba 0f01 	cmp.w	sl, #1
 800da0c:	dc01      	bgt.n	800da12 <_printf_float+0x3b6>
 800da0e:	07db      	lsls	r3, r3, #31
 800da10:	d536      	bpl.n	800da80 <_printf_float+0x424>
 800da12:	2301      	movs	r3, #1
 800da14:	4642      	mov	r2, r8
 800da16:	4631      	mov	r1, r6
 800da18:	4628      	mov	r0, r5
 800da1a:	47b8      	blx	r7
 800da1c:	3001      	adds	r0, #1
 800da1e:	f43f ae78 	beq.w	800d712 <_printf_float+0xb6>
 800da22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da26:	4631      	mov	r1, r6
 800da28:	4628      	mov	r0, r5
 800da2a:	47b8      	blx	r7
 800da2c:	3001      	adds	r0, #1
 800da2e:	f43f ae70 	beq.w	800d712 <_printf_float+0xb6>
 800da32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800da36:	2200      	movs	r2, #0
 800da38:	2300      	movs	r3, #0
 800da3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da3e:	f7f3 f843 	bl	8000ac8 <__aeabi_dcmpeq>
 800da42:	b9c0      	cbnz	r0, 800da76 <_printf_float+0x41a>
 800da44:	4653      	mov	r3, sl
 800da46:	f108 0201 	add.w	r2, r8, #1
 800da4a:	4631      	mov	r1, r6
 800da4c:	4628      	mov	r0, r5
 800da4e:	47b8      	blx	r7
 800da50:	3001      	adds	r0, #1
 800da52:	d10c      	bne.n	800da6e <_printf_float+0x412>
 800da54:	e65d      	b.n	800d712 <_printf_float+0xb6>
 800da56:	2301      	movs	r3, #1
 800da58:	465a      	mov	r2, fp
 800da5a:	4631      	mov	r1, r6
 800da5c:	4628      	mov	r0, r5
 800da5e:	47b8      	blx	r7
 800da60:	3001      	adds	r0, #1
 800da62:	f43f ae56 	beq.w	800d712 <_printf_float+0xb6>
 800da66:	f108 0801 	add.w	r8, r8, #1
 800da6a:	45d0      	cmp	r8, sl
 800da6c:	dbf3      	blt.n	800da56 <_printf_float+0x3fa>
 800da6e:	464b      	mov	r3, r9
 800da70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da74:	e6df      	b.n	800d836 <_printf_float+0x1da>
 800da76:	f04f 0800 	mov.w	r8, #0
 800da7a:	f104 0b1a 	add.w	fp, r4, #26
 800da7e:	e7f4      	b.n	800da6a <_printf_float+0x40e>
 800da80:	2301      	movs	r3, #1
 800da82:	4642      	mov	r2, r8
 800da84:	e7e1      	b.n	800da4a <_printf_float+0x3ee>
 800da86:	2301      	movs	r3, #1
 800da88:	464a      	mov	r2, r9
 800da8a:	4631      	mov	r1, r6
 800da8c:	4628      	mov	r0, r5
 800da8e:	47b8      	blx	r7
 800da90:	3001      	adds	r0, #1
 800da92:	f43f ae3e 	beq.w	800d712 <_printf_float+0xb6>
 800da96:	f108 0801 	add.w	r8, r8, #1
 800da9a:	68e3      	ldr	r3, [r4, #12]
 800da9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800da9e:	1a5b      	subs	r3, r3, r1
 800daa0:	4543      	cmp	r3, r8
 800daa2:	dcf0      	bgt.n	800da86 <_printf_float+0x42a>
 800daa4:	e6fc      	b.n	800d8a0 <_printf_float+0x244>
 800daa6:	f04f 0800 	mov.w	r8, #0
 800daaa:	f104 0919 	add.w	r9, r4, #25
 800daae:	e7f4      	b.n	800da9a <_printf_float+0x43e>

0800dab0 <_printf_common>:
 800dab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab4:	4616      	mov	r6, r2
 800dab6:	4698      	mov	r8, r3
 800dab8:	688a      	ldr	r2, [r1, #8]
 800daba:	690b      	ldr	r3, [r1, #16]
 800dabc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dac0:	4293      	cmp	r3, r2
 800dac2:	bfb8      	it	lt
 800dac4:	4613      	movlt	r3, r2
 800dac6:	6033      	str	r3, [r6, #0]
 800dac8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dacc:	4607      	mov	r7, r0
 800dace:	460c      	mov	r4, r1
 800dad0:	b10a      	cbz	r2, 800dad6 <_printf_common+0x26>
 800dad2:	3301      	adds	r3, #1
 800dad4:	6033      	str	r3, [r6, #0]
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	0699      	lsls	r1, r3, #26
 800dada:	bf42      	ittt	mi
 800dadc:	6833      	ldrmi	r3, [r6, #0]
 800dade:	3302      	addmi	r3, #2
 800dae0:	6033      	strmi	r3, [r6, #0]
 800dae2:	6825      	ldr	r5, [r4, #0]
 800dae4:	f015 0506 	ands.w	r5, r5, #6
 800dae8:	d106      	bne.n	800daf8 <_printf_common+0x48>
 800daea:	f104 0a19 	add.w	sl, r4, #25
 800daee:	68e3      	ldr	r3, [r4, #12]
 800daf0:	6832      	ldr	r2, [r6, #0]
 800daf2:	1a9b      	subs	r3, r3, r2
 800daf4:	42ab      	cmp	r3, r5
 800daf6:	dc26      	bgt.n	800db46 <_printf_common+0x96>
 800daf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dafc:	6822      	ldr	r2, [r4, #0]
 800dafe:	3b00      	subs	r3, #0
 800db00:	bf18      	it	ne
 800db02:	2301      	movne	r3, #1
 800db04:	0692      	lsls	r2, r2, #26
 800db06:	d42b      	bmi.n	800db60 <_printf_common+0xb0>
 800db08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db0c:	4641      	mov	r1, r8
 800db0e:	4638      	mov	r0, r7
 800db10:	47c8      	blx	r9
 800db12:	3001      	adds	r0, #1
 800db14:	d01e      	beq.n	800db54 <_printf_common+0xa4>
 800db16:	6823      	ldr	r3, [r4, #0]
 800db18:	6922      	ldr	r2, [r4, #16]
 800db1a:	f003 0306 	and.w	r3, r3, #6
 800db1e:	2b04      	cmp	r3, #4
 800db20:	bf02      	ittt	eq
 800db22:	68e5      	ldreq	r5, [r4, #12]
 800db24:	6833      	ldreq	r3, [r6, #0]
 800db26:	1aed      	subeq	r5, r5, r3
 800db28:	68a3      	ldr	r3, [r4, #8]
 800db2a:	bf0c      	ite	eq
 800db2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db30:	2500      	movne	r5, #0
 800db32:	4293      	cmp	r3, r2
 800db34:	bfc4      	itt	gt
 800db36:	1a9b      	subgt	r3, r3, r2
 800db38:	18ed      	addgt	r5, r5, r3
 800db3a:	2600      	movs	r6, #0
 800db3c:	341a      	adds	r4, #26
 800db3e:	42b5      	cmp	r5, r6
 800db40:	d11a      	bne.n	800db78 <_printf_common+0xc8>
 800db42:	2000      	movs	r0, #0
 800db44:	e008      	b.n	800db58 <_printf_common+0xa8>
 800db46:	2301      	movs	r3, #1
 800db48:	4652      	mov	r2, sl
 800db4a:	4641      	mov	r1, r8
 800db4c:	4638      	mov	r0, r7
 800db4e:	47c8      	blx	r9
 800db50:	3001      	adds	r0, #1
 800db52:	d103      	bne.n	800db5c <_printf_common+0xac>
 800db54:	f04f 30ff 	mov.w	r0, #4294967295
 800db58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db5c:	3501      	adds	r5, #1
 800db5e:	e7c6      	b.n	800daee <_printf_common+0x3e>
 800db60:	18e1      	adds	r1, r4, r3
 800db62:	1c5a      	adds	r2, r3, #1
 800db64:	2030      	movs	r0, #48	@ 0x30
 800db66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db6a:	4422      	add	r2, r4
 800db6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db74:	3302      	adds	r3, #2
 800db76:	e7c7      	b.n	800db08 <_printf_common+0x58>
 800db78:	2301      	movs	r3, #1
 800db7a:	4622      	mov	r2, r4
 800db7c:	4641      	mov	r1, r8
 800db7e:	4638      	mov	r0, r7
 800db80:	47c8      	blx	r9
 800db82:	3001      	adds	r0, #1
 800db84:	d0e6      	beq.n	800db54 <_printf_common+0xa4>
 800db86:	3601      	adds	r6, #1
 800db88:	e7d9      	b.n	800db3e <_printf_common+0x8e>
	...

0800db8c <_printf_i>:
 800db8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db90:	7e0f      	ldrb	r7, [r1, #24]
 800db92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800db94:	2f78      	cmp	r7, #120	@ 0x78
 800db96:	4691      	mov	r9, r2
 800db98:	4680      	mov	r8, r0
 800db9a:	460c      	mov	r4, r1
 800db9c:	469a      	mov	sl, r3
 800db9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dba2:	d807      	bhi.n	800dbb4 <_printf_i+0x28>
 800dba4:	2f62      	cmp	r7, #98	@ 0x62
 800dba6:	d80a      	bhi.n	800dbbe <_printf_i+0x32>
 800dba8:	2f00      	cmp	r7, #0
 800dbaa:	f000 80d2 	beq.w	800dd52 <_printf_i+0x1c6>
 800dbae:	2f58      	cmp	r7, #88	@ 0x58
 800dbb0:	f000 80b9 	beq.w	800dd26 <_printf_i+0x19a>
 800dbb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dbbc:	e03a      	b.n	800dc34 <_printf_i+0xa8>
 800dbbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dbc2:	2b15      	cmp	r3, #21
 800dbc4:	d8f6      	bhi.n	800dbb4 <_printf_i+0x28>
 800dbc6:	a101      	add	r1, pc, #4	@ (adr r1, 800dbcc <_printf_i+0x40>)
 800dbc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbcc:	0800dc25 	.word	0x0800dc25
 800dbd0:	0800dc39 	.word	0x0800dc39
 800dbd4:	0800dbb5 	.word	0x0800dbb5
 800dbd8:	0800dbb5 	.word	0x0800dbb5
 800dbdc:	0800dbb5 	.word	0x0800dbb5
 800dbe0:	0800dbb5 	.word	0x0800dbb5
 800dbe4:	0800dc39 	.word	0x0800dc39
 800dbe8:	0800dbb5 	.word	0x0800dbb5
 800dbec:	0800dbb5 	.word	0x0800dbb5
 800dbf0:	0800dbb5 	.word	0x0800dbb5
 800dbf4:	0800dbb5 	.word	0x0800dbb5
 800dbf8:	0800dd39 	.word	0x0800dd39
 800dbfc:	0800dc63 	.word	0x0800dc63
 800dc00:	0800dcf3 	.word	0x0800dcf3
 800dc04:	0800dbb5 	.word	0x0800dbb5
 800dc08:	0800dbb5 	.word	0x0800dbb5
 800dc0c:	0800dd5b 	.word	0x0800dd5b
 800dc10:	0800dbb5 	.word	0x0800dbb5
 800dc14:	0800dc63 	.word	0x0800dc63
 800dc18:	0800dbb5 	.word	0x0800dbb5
 800dc1c:	0800dbb5 	.word	0x0800dbb5
 800dc20:	0800dcfb 	.word	0x0800dcfb
 800dc24:	6833      	ldr	r3, [r6, #0]
 800dc26:	1d1a      	adds	r2, r3, #4
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	6032      	str	r2, [r6, #0]
 800dc2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc34:	2301      	movs	r3, #1
 800dc36:	e09d      	b.n	800dd74 <_printf_i+0x1e8>
 800dc38:	6833      	ldr	r3, [r6, #0]
 800dc3a:	6820      	ldr	r0, [r4, #0]
 800dc3c:	1d19      	adds	r1, r3, #4
 800dc3e:	6031      	str	r1, [r6, #0]
 800dc40:	0606      	lsls	r6, r0, #24
 800dc42:	d501      	bpl.n	800dc48 <_printf_i+0xbc>
 800dc44:	681d      	ldr	r5, [r3, #0]
 800dc46:	e003      	b.n	800dc50 <_printf_i+0xc4>
 800dc48:	0645      	lsls	r5, r0, #25
 800dc4a:	d5fb      	bpl.n	800dc44 <_printf_i+0xb8>
 800dc4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc50:	2d00      	cmp	r5, #0
 800dc52:	da03      	bge.n	800dc5c <_printf_i+0xd0>
 800dc54:	232d      	movs	r3, #45	@ 0x2d
 800dc56:	426d      	negs	r5, r5
 800dc58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc5c:	4859      	ldr	r0, [pc, #356]	@ (800ddc4 <_printf_i+0x238>)
 800dc5e:	230a      	movs	r3, #10
 800dc60:	e011      	b.n	800dc86 <_printf_i+0xfa>
 800dc62:	6821      	ldr	r1, [r4, #0]
 800dc64:	6833      	ldr	r3, [r6, #0]
 800dc66:	0608      	lsls	r0, r1, #24
 800dc68:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc6c:	d402      	bmi.n	800dc74 <_printf_i+0xe8>
 800dc6e:	0649      	lsls	r1, r1, #25
 800dc70:	bf48      	it	mi
 800dc72:	b2ad      	uxthmi	r5, r5
 800dc74:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc76:	4853      	ldr	r0, [pc, #332]	@ (800ddc4 <_printf_i+0x238>)
 800dc78:	6033      	str	r3, [r6, #0]
 800dc7a:	bf14      	ite	ne
 800dc7c:	230a      	movne	r3, #10
 800dc7e:	2308      	moveq	r3, #8
 800dc80:	2100      	movs	r1, #0
 800dc82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc86:	6866      	ldr	r6, [r4, #4]
 800dc88:	60a6      	str	r6, [r4, #8]
 800dc8a:	2e00      	cmp	r6, #0
 800dc8c:	bfa2      	ittt	ge
 800dc8e:	6821      	ldrge	r1, [r4, #0]
 800dc90:	f021 0104 	bicge.w	r1, r1, #4
 800dc94:	6021      	strge	r1, [r4, #0]
 800dc96:	b90d      	cbnz	r5, 800dc9c <_printf_i+0x110>
 800dc98:	2e00      	cmp	r6, #0
 800dc9a:	d04b      	beq.n	800dd34 <_printf_i+0x1a8>
 800dc9c:	4616      	mov	r6, r2
 800dc9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800dca2:	fb03 5711 	mls	r7, r3, r1, r5
 800dca6:	5dc7      	ldrb	r7, [r0, r7]
 800dca8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dcac:	462f      	mov	r7, r5
 800dcae:	42bb      	cmp	r3, r7
 800dcb0:	460d      	mov	r5, r1
 800dcb2:	d9f4      	bls.n	800dc9e <_printf_i+0x112>
 800dcb4:	2b08      	cmp	r3, #8
 800dcb6:	d10b      	bne.n	800dcd0 <_printf_i+0x144>
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	07df      	lsls	r7, r3, #31
 800dcbc:	d508      	bpl.n	800dcd0 <_printf_i+0x144>
 800dcbe:	6923      	ldr	r3, [r4, #16]
 800dcc0:	6861      	ldr	r1, [r4, #4]
 800dcc2:	4299      	cmp	r1, r3
 800dcc4:	bfde      	ittt	le
 800dcc6:	2330      	movle	r3, #48	@ 0x30
 800dcc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dccc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dcd0:	1b92      	subs	r2, r2, r6
 800dcd2:	6122      	str	r2, [r4, #16]
 800dcd4:	f8cd a000 	str.w	sl, [sp]
 800dcd8:	464b      	mov	r3, r9
 800dcda:	aa03      	add	r2, sp, #12
 800dcdc:	4621      	mov	r1, r4
 800dcde:	4640      	mov	r0, r8
 800dce0:	f7ff fee6 	bl	800dab0 <_printf_common>
 800dce4:	3001      	adds	r0, #1
 800dce6:	d14a      	bne.n	800dd7e <_printf_i+0x1f2>
 800dce8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcec:	b004      	add	sp, #16
 800dcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcf2:	6823      	ldr	r3, [r4, #0]
 800dcf4:	f043 0320 	orr.w	r3, r3, #32
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	4833      	ldr	r0, [pc, #204]	@ (800ddc8 <_printf_i+0x23c>)
 800dcfc:	2778      	movs	r7, #120	@ 0x78
 800dcfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd02:	6823      	ldr	r3, [r4, #0]
 800dd04:	6831      	ldr	r1, [r6, #0]
 800dd06:	061f      	lsls	r7, r3, #24
 800dd08:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd0c:	d402      	bmi.n	800dd14 <_printf_i+0x188>
 800dd0e:	065f      	lsls	r7, r3, #25
 800dd10:	bf48      	it	mi
 800dd12:	b2ad      	uxthmi	r5, r5
 800dd14:	6031      	str	r1, [r6, #0]
 800dd16:	07d9      	lsls	r1, r3, #31
 800dd18:	bf44      	itt	mi
 800dd1a:	f043 0320 	orrmi.w	r3, r3, #32
 800dd1e:	6023      	strmi	r3, [r4, #0]
 800dd20:	b11d      	cbz	r5, 800dd2a <_printf_i+0x19e>
 800dd22:	2310      	movs	r3, #16
 800dd24:	e7ac      	b.n	800dc80 <_printf_i+0xf4>
 800dd26:	4827      	ldr	r0, [pc, #156]	@ (800ddc4 <_printf_i+0x238>)
 800dd28:	e7e9      	b.n	800dcfe <_printf_i+0x172>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	f023 0320 	bic.w	r3, r3, #32
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	e7f6      	b.n	800dd22 <_printf_i+0x196>
 800dd34:	4616      	mov	r6, r2
 800dd36:	e7bd      	b.n	800dcb4 <_printf_i+0x128>
 800dd38:	6833      	ldr	r3, [r6, #0]
 800dd3a:	6825      	ldr	r5, [r4, #0]
 800dd3c:	6961      	ldr	r1, [r4, #20]
 800dd3e:	1d18      	adds	r0, r3, #4
 800dd40:	6030      	str	r0, [r6, #0]
 800dd42:	062e      	lsls	r6, r5, #24
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	d501      	bpl.n	800dd4c <_printf_i+0x1c0>
 800dd48:	6019      	str	r1, [r3, #0]
 800dd4a:	e002      	b.n	800dd52 <_printf_i+0x1c6>
 800dd4c:	0668      	lsls	r0, r5, #25
 800dd4e:	d5fb      	bpl.n	800dd48 <_printf_i+0x1bc>
 800dd50:	8019      	strh	r1, [r3, #0]
 800dd52:	2300      	movs	r3, #0
 800dd54:	6123      	str	r3, [r4, #16]
 800dd56:	4616      	mov	r6, r2
 800dd58:	e7bc      	b.n	800dcd4 <_printf_i+0x148>
 800dd5a:	6833      	ldr	r3, [r6, #0]
 800dd5c:	1d1a      	adds	r2, r3, #4
 800dd5e:	6032      	str	r2, [r6, #0]
 800dd60:	681e      	ldr	r6, [r3, #0]
 800dd62:	6862      	ldr	r2, [r4, #4]
 800dd64:	2100      	movs	r1, #0
 800dd66:	4630      	mov	r0, r6
 800dd68:	f7f2 fa32 	bl	80001d0 <memchr>
 800dd6c:	b108      	cbz	r0, 800dd72 <_printf_i+0x1e6>
 800dd6e:	1b80      	subs	r0, r0, r6
 800dd70:	6060      	str	r0, [r4, #4]
 800dd72:	6863      	ldr	r3, [r4, #4]
 800dd74:	6123      	str	r3, [r4, #16]
 800dd76:	2300      	movs	r3, #0
 800dd78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd7c:	e7aa      	b.n	800dcd4 <_printf_i+0x148>
 800dd7e:	6923      	ldr	r3, [r4, #16]
 800dd80:	4632      	mov	r2, r6
 800dd82:	4649      	mov	r1, r9
 800dd84:	4640      	mov	r0, r8
 800dd86:	47d0      	blx	sl
 800dd88:	3001      	adds	r0, #1
 800dd8a:	d0ad      	beq.n	800dce8 <_printf_i+0x15c>
 800dd8c:	6823      	ldr	r3, [r4, #0]
 800dd8e:	079b      	lsls	r3, r3, #30
 800dd90:	d413      	bmi.n	800ddba <_printf_i+0x22e>
 800dd92:	68e0      	ldr	r0, [r4, #12]
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	4298      	cmp	r0, r3
 800dd98:	bfb8      	it	lt
 800dd9a:	4618      	movlt	r0, r3
 800dd9c:	e7a6      	b.n	800dcec <_printf_i+0x160>
 800dd9e:	2301      	movs	r3, #1
 800dda0:	4632      	mov	r2, r6
 800dda2:	4649      	mov	r1, r9
 800dda4:	4640      	mov	r0, r8
 800dda6:	47d0      	blx	sl
 800dda8:	3001      	adds	r0, #1
 800ddaa:	d09d      	beq.n	800dce8 <_printf_i+0x15c>
 800ddac:	3501      	adds	r5, #1
 800ddae:	68e3      	ldr	r3, [r4, #12]
 800ddb0:	9903      	ldr	r1, [sp, #12]
 800ddb2:	1a5b      	subs	r3, r3, r1
 800ddb4:	42ab      	cmp	r3, r5
 800ddb6:	dcf2      	bgt.n	800dd9e <_printf_i+0x212>
 800ddb8:	e7eb      	b.n	800dd92 <_printf_i+0x206>
 800ddba:	2500      	movs	r5, #0
 800ddbc:	f104 0619 	add.w	r6, r4, #25
 800ddc0:	e7f5      	b.n	800ddae <_printf_i+0x222>
 800ddc2:	bf00      	nop
 800ddc4:	0801232e 	.word	0x0801232e
 800ddc8:	0801233f 	.word	0x0801233f

0800ddcc <_scanf_float>:
 800ddcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd0:	b087      	sub	sp, #28
 800ddd2:	4617      	mov	r7, r2
 800ddd4:	9303      	str	r3, [sp, #12]
 800ddd6:	688b      	ldr	r3, [r1, #8]
 800ddd8:	1e5a      	subs	r2, r3, #1
 800ddda:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ddde:	bf81      	itttt	hi
 800dde0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dde4:	eb03 0b05 	addhi.w	fp, r3, r5
 800dde8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ddec:	608b      	strhi	r3, [r1, #8]
 800ddee:	680b      	ldr	r3, [r1, #0]
 800ddf0:	460a      	mov	r2, r1
 800ddf2:	f04f 0500 	mov.w	r5, #0
 800ddf6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ddfa:	f842 3b1c 	str.w	r3, [r2], #28
 800ddfe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de02:	4680      	mov	r8, r0
 800de04:	460c      	mov	r4, r1
 800de06:	bf98      	it	ls
 800de08:	f04f 0b00 	movls.w	fp, #0
 800de0c:	9201      	str	r2, [sp, #4]
 800de0e:	4616      	mov	r6, r2
 800de10:	46aa      	mov	sl, r5
 800de12:	46a9      	mov	r9, r5
 800de14:	9502      	str	r5, [sp, #8]
 800de16:	68a2      	ldr	r2, [r4, #8]
 800de18:	b152      	cbz	r2, 800de30 <_scanf_float+0x64>
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	2b4e      	cmp	r3, #78	@ 0x4e
 800de20:	d864      	bhi.n	800deec <_scanf_float+0x120>
 800de22:	2b40      	cmp	r3, #64	@ 0x40
 800de24:	d83c      	bhi.n	800dea0 <_scanf_float+0xd4>
 800de26:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800de2a:	b2c8      	uxtb	r0, r1
 800de2c:	280e      	cmp	r0, #14
 800de2e:	d93a      	bls.n	800dea6 <_scanf_float+0xda>
 800de30:	f1b9 0f00 	cmp.w	r9, #0
 800de34:	d003      	beq.n	800de3e <_scanf_float+0x72>
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de3c:	6023      	str	r3, [r4, #0]
 800de3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de42:	f1ba 0f01 	cmp.w	sl, #1
 800de46:	f200 8117 	bhi.w	800e078 <_scanf_float+0x2ac>
 800de4a:	9b01      	ldr	r3, [sp, #4]
 800de4c:	429e      	cmp	r6, r3
 800de4e:	f200 8108 	bhi.w	800e062 <_scanf_float+0x296>
 800de52:	2001      	movs	r0, #1
 800de54:	b007      	add	sp, #28
 800de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800de5e:	2a0d      	cmp	r2, #13
 800de60:	d8e6      	bhi.n	800de30 <_scanf_float+0x64>
 800de62:	a101      	add	r1, pc, #4	@ (adr r1, 800de68 <_scanf_float+0x9c>)
 800de64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de68:	0800dfaf 	.word	0x0800dfaf
 800de6c:	0800de31 	.word	0x0800de31
 800de70:	0800de31 	.word	0x0800de31
 800de74:	0800de31 	.word	0x0800de31
 800de78:	0800e00f 	.word	0x0800e00f
 800de7c:	0800dfe7 	.word	0x0800dfe7
 800de80:	0800de31 	.word	0x0800de31
 800de84:	0800de31 	.word	0x0800de31
 800de88:	0800dfbd 	.word	0x0800dfbd
 800de8c:	0800de31 	.word	0x0800de31
 800de90:	0800de31 	.word	0x0800de31
 800de94:	0800de31 	.word	0x0800de31
 800de98:	0800de31 	.word	0x0800de31
 800de9c:	0800df75 	.word	0x0800df75
 800dea0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800dea4:	e7db      	b.n	800de5e <_scanf_float+0x92>
 800dea6:	290e      	cmp	r1, #14
 800dea8:	d8c2      	bhi.n	800de30 <_scanf_float+0x64>
 800deaa:	a001      	add	r0, pc, #4	@ (adr r0, 800deb0 <_scanf_float+0xe4>)
 800deac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800deb0:	0800df65 	.word	0x0800df65
 800deb4:	0800de31 	.word	0x0800de31
 800deb8:	0800df65 	.word	0x0800df65
 800debc:	0800dffb 	.word	0x0800dffb
 800dec0:	0800de31 	.word	0x0800de31
 800dec4:	0800df0d 	.word	0x0800df0d
 800dec8:	0800df4b 	.word	0x0800df4b
 800decc:	0800df4b 	.word	0x0800df4b
 800ded0:	0800df4b 	.word	0x0800df4b
 800ded4:	0800df4b 	.word	0x0800df4b
 800ded8:	0800df4b 	.word	0x0800df4b
 800dedc:	0800df4b 	.word	0x0800df4b
 800dee0:	0800df4b 	.word	0x0800df4b
 800dee4:	0800df4b 	.word	0x0800df4b
 800dee8:	0800df4b 	.word	0x0800df4b
 800deec:	2b6e      	cmp	r3, #110	@ 0x6e
 800deee:	d809      	bhi.n	800df04 <_scanf_float+0x138>
 800def0:	2b60      	cmp	r3, #96	@ 0x60
 800def2:	d8b2      	bhi.n	800de5a <_scanf_float+0x8e>
 800def4:	2b54      	cmp	r3, #84	@ 0x54
 800def6:	d07b      	beq.n	800dff0 <_scanf_float+0x224>
 800def8:	2b59      	cmp	r3, #89	@ 0x59
 800defa:	d199      	bne.n	800de30 <_scanf_float+0x64>
 800defc:	2d07      	cmp	r5, #7
 800defe:	d197      	bne.n	800de30 <_scanf_float+0x64>
 800df00:	2508      	movs	r5, #8
 800df02:	e02c      	b.n	800df5e <_scanf_float+0x192>
 800df04:	2b74      	cmp	r3, #116	@ 0x74
 800df06:	d073      	beq.n	800dff0 <_scanf_float+0x224>
 800df08:	2b79      	cmp	r3, #121	@ 0x79
 800df0a:	e7f6      	b.n	800defa <_scanf_float+0x12e>
 800df0c:	6821      	ldr	r1, [r4, #0]
 800df0e:	05c8      	lsls	r0, r1, #23
 800df10:	d51b      	bpl.n	800df4a <_scanf_float+0x17e>
 800df12:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800df16:	6021      	str	r1, [r4, #0]
 800df18:	f109 0901 	add.w	r9, r9, #1
 800df1c:	f1bb 0f00 	cmp.w	fp, #0
 800df20:	d003      	beq.n	800df2a <_scanf_float+0x15e>
 800df22:	3201      	adds	r2, #1
 800df24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800df28:	60a2      	str	r2, [r4, #8]
 800df2a:	68a3      	ldr	r3, [r4, #8]
 800df2c:	3b01      	subs	r3, #1
 800df2e:	60a3      	str	r3, [r4, #8]
 800df30:	6923      	ldr	r3, [r4, #16]
 800df32:	3301      	adds	r3, #1
 800df34:	6123      	str	r3, [r4, #16]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	3b01      	subs	r3, #1
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	607b      	str	r3, [r7, #4]
 800df3e:	f340 8087 	ble.w	800e050 <_scanf_float+0x284>
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	e765      	b.n	800de16 <_scanf_float+0x4a>
 800df4a:	eb1a 0105 	adds.w	r1, sl, r5
 800df4e:	f47f af6f 	bne.w	800de30 <_scanf_float+0x64>
 800df52:	6822      	ldr	r2, [r4, #0]
 800df54:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800df58:	6022      	str	r2, [r4, #0]
 800df5a:	460d      	mov	r5, r1
 800df5c:	468a      	mov	sl, r1
 800df5e:	f806 3b01 	strb.w	r3, [r6], #1
 800df62:	e7e2      	b.n	800df2a <_scanf_float+0x15e>
 800df64:	6822      	ldr	r2, [r4, #0]
 800df66:	0610      	lsls	r0, r2, #24
 800df68:	f57f af62 	bpl.w	800de30 <_scanf_float+0x64>
 800df6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800df70:	6022      	str	r2, [r4, #0]
 800df72:	e7f4      	b.n	800df5e <_scanf_float+0x192>
 800df74:	f1ba 0f00 	cmp.w	sl, #0
 800df78:	d10e      	bne.n	800df98 <_scanf_float+0x1cc>
 800df7a:	f1b9 0f00 	cmp.w	r9, #0
 800df7e:	d10e      	bne.n	800df9e <_scanf_float+0x1d2>
 800df80:	6822      	ldr	r2, [r4, #0]
 800df82:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800df86:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800df8a:	d108      	bne.n	800df9e <_scanf_float+0x1d2>
 800df8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800df90:	6022      	str	r2, [r4, #0]
 800df92:	f04f 0a01 	mov.w	sl, #1
 800df96:	e7e2      	b.n	800df5e <_scanf_float+0x192>
 800df98:	f1ba 0f02 	cmp.w	sl, #2
 800df9c:	d055      	beq.n	800e04a <_scanf_float+0x27e>
 800df9e:	2d01      	cmp	r5, #1
 800dfa0:	d002      	beq.n	800dfa8 <_scanf_float+0x1dc>
 800dfa2:	2d04      	cmp	r5, #4
 800dfa4:	f47f af44 	bne.w	800de30 <_scanf_float+0x64>
 800dfa8:	3501      	adds	r5, #1
 800dfaa:	b2ed      	uxtb	r5, r5
 800dfac:	e7d7      	b.n	800df5e <_scanf_float+0x192>
 800dfae:	f1ba 0f01 	cmp.w	sl, #1
 800dfb2:	f47f af3d 	bne.w	800de30 <_scanf_float+0x64>
 800dfb6:	f04f 0a02 	mov.w	sl, #2
 800dfba:	e7d0      	b.n	800df5e <_scanf_float+0x192>
 800dfbc:	b97d      	cbnz	r5, 800dfde <_scanf_float+0x212>
 800dfbe:	f1b9 0f00 	cmp.w	r9, #0
 800dfc2:	f47f af38 	bne.w	800de36 <_scanf_float+0x6a>
 800dfc6:	6822      	ldr	r2, [r4, #0]
 800dfc8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800dfcc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800dfd0:	f040 8108 	bne.w	800e1e4 <_scanf_float+0x418>
 800dfd4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800dfd8:	6022      	str	r2, [r4, #0]
 800dfda:	2501      	movs	r5, #1
 800dfdc:	e7bf      	b.n	800df5e <_scanf_float+0x192>
 800dfde:	2d03      	cmp	r5, #3
 800dfe0:	d0e2      	beq.n	800dfa8 <_scanf_float+0x1dc>
 800dfe2:	2d05      	cmp	r5, #5
 800dfe4:	e7de      	b.n	800dfa4 <_scanf_float+0x1d8>
 800dfe6:	2d02      	cmp	r5, #2
 800dfe8:	f47f af22 	bne.w	800de30 <_scanf_float+0x64>
 800dfec:	2503      	movs	r5, #3
 800dfee:	e7b6      	b.n	800df5e <_scanf_float+0x192>
 800dff0:	2d06      	cmp	r5, #6
 800dff2:	f47f af1d 	bne.w	800de30 <_scanf_float+0x64>
 800dff6:	2507      	movs	r5, #7
 800dff8:	e7b1      	b.n	800df5e <_scanf_float+0x192>
 800dffa:	6822      	ldr	r2, [r4, #0]
 800dffc:	0591      	lsls	r1, r2, #22
 800dffe:	f57f af17 	bpl.w	800de30 <_scanf_float+0x64>
 800e002:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e006:	6022      	str	r2, [r4, #0]
 800e008:	f8cd 9008 	str.w	r9, [sp, #8]
 800e00c:	e7a7      	b.n	800df5e <_scanf_float+0x192>
 800e00e:	6822      	ldr	r2, [r4, #0]
 800e010:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e014:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e018:	d006      	beq.n	800e028 <_scanf_float+0x25c>
 800e01a:	0550      	lsls	r0, r2, #21
 800e01c:	f57f af08 	bpl.w	800de30 <_scanf_float+0x64>
 800e020:	f1b9 0f00 	cmp.w	r9, #0
 800e024:	f000 80de 	beq.w	800e1e4 <_scanf_float+0x418>
 800e028:	0591      	lsls	r1, r2, #22
 800e02a:	bf58      	it	pl
 800e02c:	9902      	ldrpl	r1, [sp, #8]
 800e02e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e032:	bf58      	it	pl
 800e034:	eba9 0101 	subpl.w	r1, r9, r1
 800e038:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e03c:	bf58      	it	pl
 800e03e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e042:	6022      	str	r2, [r4, #0]
 800e044:	f04f 0900 	mov.w	r9, #0
 800e048:	e789      	b.n	800df5e <_scanf_float+0x192>
 800e04a:	f04f 0a03 	mov.w	sl, #3
 800e04e:	e786      	b.n	800df5e <_scanf_float+0x192>
 800e050:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e054:	4639      	mov	r1, r7
 800e056:	4640      	mov	r0, r8
 800e058:	4798      	blx	r3
 800e05a:	2800      	cmp	r0, #0
 800e05c:	f43f aedb 	beq.w	800de16 <_scanf_float+0x4a>
 800e060:	e6e6      	b.n	800de30 <_scanf_float+0x64>
 800e062:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e06a:	463a      	mov	r2, r7
 800e06c:	4640      	mov	r0, r8
 800e06e:	4798      	blx	r3
 800e070:	6923      	ldr	r3, [r4, #16]
 800e072:	3b01      	subs	r3, #1
 800e074:	6123      	str	r3, [r4, #16]
 800e076:	e6e8      	b.n	800de4a <_scanf_float+0x7e>
 800e078:	1e6b      	subs	r3, r5, #1
 800e07a:	2b06      	cmp	r3, #6
 800e07c:	d824      	bhi.n	800e0c8 <_scanf_float+0x2fc>
 800e07e:	2d02      	cmp	r5, #2
 800e080:	d836      	bhi.n	800e0f0 <_scanf_float+0x324>
 800e082:	9b01      	ldr	r3, [sp, #4]
 800e084:	429e      	cmp	r6, r3
 800e086:	f67f aee4 	bls.w	800de52 <_scanf_float+0x86>
 800e08a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e08e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e092:	463a      	mov	r2, r7
 800e094:	4640      	mov	r0, r8
 800e096:	4798      	blx	r3
 800e098:	6923      	ldr	r3, [r4, #16]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	6123      	str	r3, [r4, #16]
 800e09e:	e7f0      	b.n	800e082 <_scanf_float+0x2b6>
 800e0a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e0a8:	463a      	mov	r2, r7
 800e0aa:	4640      	mov	r0, r8
 800e0ac:	4798      	blx	r3
 800e0ae:	6923      	ldr	r3, [r4, #16]
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	6123      	str	r3, [r4, #16]
 800e0b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0b8:	fa5f fa8a 	uxtb.w	sl, sl
 800e0bc:	f1ba 0f02 	cmp.w	sl, #2
 800e0c0:	d1ee      	bne.n	800e0a0 <_scanf_float+0x2d4>
 800e0c2:	3d03      	subs	r5, #3
 800e0c4:	b2ed      	uxtb	r5, r5
 800e0c6:	1b76      	subs	r6, r6, r5
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	05da      	lsls	r2, r3, #23
 800e0cc:	d530      	bpl.n	800e130 <_scanf_float+0x364>
 800e0ce:	055b      	lsls	r3, r3, #21
 800e0d0:	d511      	bpl.n	800e0f6 <_scanf_float+0x32a>
 800e0d2:	9b01      	ldr	r3, [sp, #4]
 800e0d4:	429e      	cmp	r6, r3
 800e0d6:	f67f aebc 	bls.w	800de52 <_scanf_float+0x86>
 800e0da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e0de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0e2:	463a      	mov	r2, r7
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	4798      	blx	r3
 800e0e8:	6923      	ldr	r3, [r4, #16]
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	6123      	str	r3, [r4, #16]
 800e0ee:	e7f0      	b.n	800e0d2 <_scanf_float+0x306>
 800e0f0:	46aa      	mov	sl, r5
 800e0f2:	46b3      	mov	fp, r6
 800e0f4:	e7de      	b.n	800e0b4 <_scanf_float+0x2e8>
 800e0f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e0fa:	6923      	ldr	r3, [r4, #16]
 800e0fc:	2965      	cmp	r1, #101	@ 0x65
 800e0fe:	f103 33ff 	add.w	r3, r3, #4294967295
 800e102:	f106 35ff 	add.w	r5, r6, #4294967295
 800e106:	6123      	str	r3, [r4, #16]
 800e108:	d00c      	beq.n	800e124 <_scanf_float+0x358>
 800e10a:	2945      	cmp	r1, #69	@ 0x45
 800e10c:	d00a      	beq.n	800e124 <_scanf_float+0x358>
 800e10e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e112:	463a      	mov	r2, r7
 800e114:	4640      	mov	r0, r8
 800e116:	4798      	blx	r3
 800e118:	6923      	ldr	r3, [r4, #16]
 800e11a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e11e:	3b01      	subs	r3, #1
 800e120:	1eb5      	subs	r5, r6, #2
 800e122:	6123      	str	r3, [r4, #16]
 800e124:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e128:	463a      	mov	r2, r7
 800e12a:	4640      	mov	r0, r8
 800e12c:	4798      	blx	r3
 800e12e:	462e      	mov	r6, r5
 800e130:	6822      	ldr	r2, [r4, #0]
 800e132:	f012 0210 	ands.w	r2, r2, #16
 800e136:	d001      	beq.n	800e13c <_scanf_float+0x370>
 800e138:	2000      	movs	r0, #0
 800e13a:	e68b      	b.n	800de54 <_scanf_float+0x88>
 800e13c:	7032      	strb	r2, [r6, #0]
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e144:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e148:	d11c      	bne.n	800e184 <_scanf_float+0x3b8>
 800e14a:	9b02      	ldr	r3, [sp, #8]
 800e14c:	454b      	cmp	r3, r9
 800e14e:	eba3 0209 	sub.w	r2, r3, r9
 800e152:	d123      	bne.n	800e19c <_scanf_float+0x3d0>
 800e154:	9901      	ldr	r1, [sp, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	4640      	mov	r0, r8
 800e15a:	f002 fb65 	bl	8010828 <_strtod_r>
 800e15e:	9b03      	ldr	r3, [sp, #12]
 800e160:	6821      	ldr	r1, [r4, #0]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f011 0f02 	tst.w	r1, #2
 800e168:	ec57 6b10 	vmov	r6, r7, d0
 800e16c:	f103 0204 	add.w	r2, r3, #4
 800e170:	d01f      	beq.n	800e1b2 <_scanf_float+0x3e6>
 800e172:	9903      	ldr	r1, [sp, #12]
 800e174:	600a      	str	r2, [r1, #0]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	e9c3 6700 	strd	r6, r7, [r3]
 800e17c:	68e3      	ldr	r3, [r4, #12]
 800e17e:	3301      	adds	r3, #1
 800e180:	60e3      	str	r3, [r4, #12]
 800e182:	e7d9      	b.n	800e138 <_scanf_float+0x36c>
 800e184:	9b04      	ldr	r3, [sp, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d0e4      	beq.n	800e154 <_scanf_float+0x388>
 800e18a:	9905      	ldr	r1, [sp, #20]
 800e18c:	230a      	movs	r3, #10
 800e18e:	3101      	adds	r1, #1
 800e190:	4640      	mov	r0, r8
 800e192:	f002 fbc9 	bl	8010928 <_strtol_r>
 800e196:	9b04      	ldr	r3, [sp, #16]
 800e198:	9e05      	ldr	r6, [sp, #20]
 800e19a:	1ac2      	subs	r2, r0, r3
 800e19c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e1a0:	429e      	cmp	r6, r3
 800e1a2:	bf28      	it	cs
 800e1a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e1a8:	4910      	ldr	r1, [pc, #64]	@ (800e1ec <_scanf_float+0x420>)
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	f000 f8f6 	bl	800e39c <siprintf>
 800e1b0:	e7d0      	b.n	800e154 <_scanf_float+0x388>
 800e1b2:	f011 0f04 	tst.w	r1, #4
 800e1b6:	9903      	ldr	r1, [sp, #12]
 800e1b8:	600a      	str	r2, [r1, #0]
 800e1ba:	d1dc      	bne.n	800e176 <_scanf_float+0x3aa>
 800e1bc:	681d      	ldr	r5, [r3, #0]
 800e1be:	4632      	mov	r2, r6
 800e1c0:	463b      	mov	r3, r7
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	4639      	mov	r1, r7
 800e1c6:	f7f2 fcb1 	bl	8000b2c <__aeabi_dcmpun>
 800e1ca:	b128      	cbz	r0, 800e1d8 <_scanf_float+0x40c>
 800e1cc:	4808      	ldr	r0, [pc, #32]	@ (800e1f0 <_scanf_float+0x424>)
 800e1ce:	f000 f9d9 	bl	800e584 <nanf>
 800e1d2:	ed85 0a00 	vstr	s0, [r5]
 800e1d6:	e7d1      	b.n	800e17c <_scanf_float+0x3b0>
 800e1d8:	4630      	mov	r0, r6
 800e1da:	4639      	mov	r1, r7
 800e1dc:	f7f2 fd04 	bl	8000be8 <__aeabi_d2f>
 800e1e0:	6028      	str	r0, [r5, #0]
 800e1e2:	e7cb      	b.n	800e17c <_scanf_float+0x3b0>
 800e1e4:	f04f 0900 	mov.w	r9, #0
 800e1e8:	e629      	b.n	800de3e <_scanf_float+0x72>
 800e1ea:	bf00      	nop
 800e1ec:	08012350 	.word	0x08012350
 800e1f0:	080126e5 	.word	0x080126e5

0800e1f4 <std>:
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	b510      	push	{r4, lr}
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	e9c0 3300 	strd	r3, r3, [r0]
 800e1fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e202:	6083      	str	r3, [r0, #8]
 800e204:	8181      	strh	r1, [r0, #12]
 800e206:	6643      	str	r3, [r0, #100]	@ 0x64
 800e208:	81c2      	strh	r2, [r0, #14]
 800e20a:	6183      	str	r3, [r0, #24]
 800e20c:	4619      	mov	r1, r3
 800e20e:	2208      	movs	r2, #8
 800e210:	305c      	adds	r0, #92	@ 0x5c
 800e212:	f000 f926 	bl	800e462 <memset>
 800e216:	4b0d      	ldr	r3, [pc, #52]	@ (800e24c <std+0x58>)
 800e218:	6263      	str	r3, [r4, #36]	@ 0x24
 800e21a:	4b0d      	ldr	r3, [pc, #52]	@ (800e250 <std+0x5c>)
 800e21c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e21e:	4b0d      	ldr	r3, [pc, #52]	@ (800e254 <std+0x60>)
 800e220:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e222:	4b0d      	ldr	r3, [pc, #52]	@ (800e258 <std+0x64>)
 800e224:	6323      	str	r3, [r4, #48]	@ 0x30
 800e226:	4b0d      	ldr	r3, [pc, #52]	@ (800e25c <std+0x68>)
 800e228:	6224      	str	r4, [r4, #32]
 800e22a:	429c      	cmp	r4, r3
 800e22c:	d006      	beq.n	800e23c <std+0x48>
 800e22e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e232:	4294      	cmp	r4, r2
 800e234:	d002      	beq.n	800e23c <std+0x48>
 800e236:	33d0      	adds	r3, #208	@ 0xd0
 800e238:	429c      	cmp	r4, r3
 800e23a:	d105      	bne.n	800e248 <std+0x54>
 800e23c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e244:	f000 b99a 	b.w	800e57c <__retarget_lock_init_recursive>
 800e248:	bd10      	pop	{r4, pc}
 800e24a:	bf00      	nop
 800e24c:	0800e3dd 	.word	0x0800e3dd
 800e250:	0800e3ff 	.word	0x0800e3ff
 800e254:	0800e437 	.word	0x0800e437
 800e258:	0800e45b 	.word	0x0800e45b
 800e25c:	20002b54 	.word	0x20002b54

0800e260 <stdio_exit_handler>:
 800e260:	4a02      	ldr	r2, [pc, #8]	@ (800e26c <stdio_exit_handler+0xc>)
 800e262:	4903      	ldr	r1, [pc, #12]	@ (800e270 <stdio_exit_handler+0x10>)
 800e264:	4803      	ldr	r0, [pc, #12]	@ (800e274 <stdio_exit_handler+0x14>)
 800e266:	f000 b869 	b.w	800e33c <_fwalk_sglue>
 800e26a:	bf00      	nop
 800e26c:	20000028 	.word	0x20000028
 800e270:	08010f69 	.word	0x08010f69
 800e274:	20000038 	.word	0x20000038

0800e278 <cleanup_stdio>:
 800e278:	6841      	ldr	r1, [r0, #4]
 800e27a:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ac <cleanup_stdio+0x34>)
 800e27c:	4299      	cmp	r1, r3
 800e27e:	b510      	push	{r4, lr}
 800e280:	4604      	mov	r4, r0
 800e282:	d001      	beq.n	800e288 <cleanup_stdio+0x10>
 800e284:	f002 fe70 	bl	8010f68 <_fflush_r>
 800e288:	68a1      	ldr	r1, [r4, #8]
 800e28a:	4b09      	ldr	r3, [pc, #36]	@ (800e2b0 <cleanup_stdio+0x38>)
 800e28c:	4299      	cmp	r1, r3
 800e28e:	d002      	beq.n	800e296 <cleanup_stdio+0x1e>
 800e290:	4620      	mov	r0, r4
 800e292:	f002 fe69 	bl	8010f68 <_fflush_r>
 800e296:	68e1      	ldr	r1, [r4, #12]
 800e298:	4b06      	ldr	r3, [pc, #24]	@ (800e2b4 <cleanup_stdio+0x3c>)
 800e29a:	4299      	cmp	r1, r3
 800e29c:	d004      	beq.n	800e2a8 <cleanup_stdio+0x30>
 800e29e:	4620      	mov	r0, r4
 800e2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2a4:	f002 be60 	b.w	8010f68 <_fflush_r>
 800e2a8:	bd10      	pop	{r4, pc}
 800e2aa:	bf00      	nop
 800e2ac:	20002b54 	.word	0x20002b54
 800e2b0:	20002bbc 	.word	0x20002bbc
 800e2b4:	20002c24 	.word	0x20002c24

0800e2b8 <global_stdio_init.part.0>:
 800e2b8:	b510      	push	{r4, lr}
 800e2ba:	4b0b      	ldr	r3, [pc, #44]	@ (800e2e8 <global_stdio_init.part.0+0x30>)
 800e2bc:	4c0b      	ldr	r4, [pc, #44]	@ (800e2ec <global_stdio_init.part.0+0x34>)
 800e2be:	4a0c      	ldr	r2, [pc, #48]	@ (800e2f0 <global_stdio_init.part.0+0x38>)
 800e2c0:	601a      	str	r2, [r3, #0]
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	2104      	movs	r1, #4
 800e2c8:	f7ff ff94 	bl	800e1f4 <std>
 800e2cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	2109      	movs	r1, #9
 800e2d4:	f7ff ff8e 	bl	800e1f4 <std>
 800e2d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e2dc:	2202      	movs	r2, #2
 800e2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2e2:	2112      	movs	r1, #18
 800e2e4:	f7ff bf86 	b.w	800e1f4 <std>
 800e2e8:	20002c8c 	.word	0x20002c8c
 800e2ec:	20002b54 	.word	0x20002b54
 800e2f0:	0800e261 	.word	0x0800e261

0800e2f4 <__sfp_lock_acquire>:
 800e2f4:	4801      	ldr	r0, [pc, #4]	@ (800e2fc <__sfp_lock_acquire+0x8>)
 800e2f6:	f000 b942 	b.w	800e57e <__retarget_lock_acquire_recursive>
 800e2fa:	bf00      	nop
 800e2fc:	20002c95 	.word	0x20002c95

0800e300 <__sfp_lock_release>:
 800e300:	4801      	ldr	r0, [pc, #4]	@ (800e308 <__sfp_lock_release+0x8>)
 800e302:	f000 b93d 	b.w	800e580 <__retarget_lock_release_recursive>
 800e306:	bf00      	nop
 800e308:	20002c95 	.word	0x20002c95

0800e30c <__sinit>:
 800e30c:	b510      	push	{r4, lr}
 800e30e:	4604      	mov	r4, r0
 800e310:	f7ff fff0 	bl	800e2f4 <__sfp_lock_acquire>
 800e314:	6a23      	ldr	r3, [r4, #32]
 800e316:	b11b      	cbz	r3, 800e320 <__sinit+0x14>
 800e318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e31c:	f7ff bff0 	b.w	800e300 <__sfp_lock_release>
 800e320:	4b04      	ldr	r3, [pc, #16]	@ (800e334 <__sinit+0x28>)
 800e322:	6223      	str	r3, [r4, #32]
 800e324:	4b04      	ldr	r3, [pc, #16]	@ (800e338 <__sinit+0x2c>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1f5      	bne.n	800e318 <__sinit+0xc>
 800e32c:	f7ff ffc4 	bl	800e2b8 <global_stdio_init.part.0>
 800e330:	e7f2      	b.n	800e318 <__sinit+0xc>
 800e332:	bf00      	nop
 800e334:	0800e279 	.word	0x0800e279
 800e338:	20002c8c 	.word	0x20002c8c

0800e33c <_fwalk_sglue>:
 800e33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e340:	4607      	mov	r7, r0
 800e342:	4688      	mov	r8, r1
 800e344:	4614      	mov	r4, r2
 800e346:	2600      	movs	r6, #0
 800e348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e34c:	f1b9 0901 	subs.w	r9, r9, #1
 800e350:	d505      	bpl.n	800e35e <_fwalk_sglue+0x22>
 800e352:	6824      	ldr	r4, [r4, #0]
 800e354:	2c00      	cmp	r4, #0
 800e356:	d1f7      	bne.n	800e348 <_fwalk_sglue+0xc>
 800e358:	4630      	mov	r0, r6
 800e35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e35e:	89ab      	ldrh	r3, [r5, #12]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d907      	bls.n	800e374 <_fwalk_sglue+0x38>
 800e364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e368:	3301      	adds	r3, #1
 800e36a:	d003      	beq.n	800e374 <_fwalk_sglue+0x38>
 800e36c:	4629      	mov	r1, r5
 800e36e:	4638      	mov	r0, r7
 800e370:	47c0      	blx	r8
 800e372:	4306      	orrs	r6, r0
 800e374:	3568      	adds	r5, #104	@ 0x68
 800e376:	e7e9      	b.n	800e34c <_fwalk_sglue+0x10>

0800e378 <iprintf>:
 800e378:	b40f      	push	{r0, r1, r2, r3}
 800e37a:	b507      	push	{r0, r1, r2, lr}
 800e37c:	4906      	ldr	r1, [pc, #24]	@ (800e398 <iprintf+0x20>)
 800e37e:	ab04      	add	r3, sp, #16
 800e380:	6808      	ldr	r0, [r1, #0]
 800e382:	f853 2b04 	ldr.w	r2, [r3], #4
 800e386:	6881      	ldr	r1, [r0, #8]
 800e388:	9301      	str	r3, [sp, #4]
 800e38a:	f002 fc51 	bl	8010c30 <_vfiprintf_r>
 800e38e:	b003      	add	sp, #12
 800e390:	f85d eb04 	ldr.w	lr, [sp], #4
 800e394:	b004      	add	sp, #16
 800e396:	4770      	bx	lr
 800e398:	20000034 	.word	0x20000034

0800e39c <siprintf>:
 800e39c:	b40e      	push	{r1, r2, r3}
 800e39e:	b500      	push	{lr}
 800e3a0:	b09c      	sub	sp, #112	@ 0x70
 800e3a2:	ab1d      	add	r3, sp, #116	@ 0x74
 800e3a4:	9002      	str	r0, [sp, #8]
 800e3a6:	9006      	str	r0, [sp, #24]
 800e3a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e3ac:	4809      	ldr	r0, [pc, #36]	@ (800e3d4 <siprintf+0x38>)
 800e3ae:	9107      	str	r1, [sp, #28]
 800e3b0:	9104      	str	r1, [sp, #16]
 800e3b2:	4909      	ldr	r1, [pc, #36]	@ (800e3d8 <siprintf+0x3c>)
 800e3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3b8:	9105      	str	r1, [sp, #20]
 800e3ba:	6800      	ldr	r0, [r0, #0]
 800e3bc:	9301      	str	r3, [sp, #4]
 800e3be:	a902      	add	r1, sp, #8
 800e3c0:	f002 fb10 	bl	80109e4 <_svfiprintf_r>
 800e3c4:	9b02      	ldr	r3, [sp, #8]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	701a      	strb	r2, [r3, #0]
 800e3ca:	b01c      	add	sp, #112	@ 0x70
 800e3cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3d0:	b003      	add	sp, #12
 800e3d2:	4770      	bx	lr
 800e3d4:	20000034 	.word	0x20000034
 800e3d8:	ffff0208 	.word	0xffff0208

0800e3dc <__sread>:
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	460c      	mov	r4, r1
 800e3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e4:	f000 f86c 	bl	800e4c0 <_read_r>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	bfab      	itete	ge
 800e3ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e3ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e3f0:	181b      	addge	r3, r3, r0
 800e3f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e3f6:	bfac      	ite	ge
 800e3f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e3fa:	81a3      	strhlt	r3, [r4, #12]
 800e3fc:	bd10      	pop	{r4, pc}

0800e3fe <__swrite>:
 800e3fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e402:	461f      	mov	r7, r3
 800e404:	898b      	ldrh	r3, [r1, #12]
 800e406:	05db      	lsls	r3, r3, #23
 800e408:	4605      	mov	r5, r0
 800e40a:	460c      	mov	r4, r1
 800e40c:	4616      	mov	r6, r2
 800e40e:	d505      	bpl.n	800e41c <__swrite+0x1e>
 800e410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e414:	2302      	movs	r3, #2
 800e416:	2200      	movs	r2, #0
 800e418:	f000 f840 	bl	800e49c <_lseek_r>
 800e41c:	89a3      	ldrh	r3, [r4, #12]
 800e41e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e422:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e426:	81a3      	strh	r3, [r4, #12]
 800e428:	4632      	mov	r2, r6
 800e42a:	463b      	mov	r3, r7
 800e42c:	4628      	mov	r0, r5
 800e42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e432:	f000 b867 	b.w	800e504 <_write_r>

0800e436 <__sseek>:
 800e436:	b510      	push	{r4, lr}
 800e438:	460c      	mov	r4, r1
 800e43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e43e:	f000 f82d 	bl	800e49c <_lseek_r>
 800e442:	1c43      	adds	r3, r0, #1
 800e444:	89a3      	ldrh	r3, [r4, #12]
 800e446:	bf15      	itete	ne
 800e448:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e44a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e44e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e452:	81a3      	strheq	r3, [r4, #12]
 800e454:	bf18      	it	ne
 800e456:	81a3      	strhne	r3, [r4, #12]
 800e458:	bd10      	pop	{r4, pc}

0800e45a <__sclose>:
 800e45a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e45e:	f000 b80d 	b.w	800e47c <_close_r>

0800e462 <memset>:
 800e462:	4402      	add	r2, r0
 800e464:	4603      	mov	r3, r0
 800e466:	4293      	cmp	r3, r2
 800e468:	d100      	bne.n	800e46c <memset+0xa>
 800e46a:	4770      	bx	lr
 800e46c:	f803 1b01 	strb.w	r1, [r3], #1
 800e470:	e7f9      	b.n	800e466 <memset+0x4>
	...

0800e474 <_localeconv_r>:
 800e474:	4800      	ldr	r0, [pc, #0]	@ (800e478 <_localeconv_r+0x4>)
 800e476:	4770      	bx	lr
 800e478:	20000174 	.word	0x20000174

0800e47c <_close_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4d06      	ldr	r5, [pc, #24]	@ (800e498 <_close_r+0x1c>)
 800e480:	2300      	movs	r3, #0
 800e482:	4604      	mov	r4, r0
 800e484:	4608      	mov	r0, r1
 800e486:	602b      	str	r3, [r5, #0]
 800e488:	f7f5 fb9c 	bl	8003bc4 <_close>
 800e48c:	1c43      	adds	r3, r0, #1
 800e48e:	d102      	bne.n	800e496 <_close_r+0x1a>
 800e490:	682b      	ldr	r3, [r5, #0]
 800e492:	b103      	cbz	r3, 800e496 <_close_r+0x1a>
 800e494:	6023      	str	r3, [r4, #0]
 800e496:	bd38      	pop	{r3, r4, r5, pc}
 800e498:	20002c90 	.word	0x20002c90

0800e49c <_lseek_r>:
 800e49c:	b538      	push	{r3, r4, r5, lr}
 800e49e:	4d07      	ldr	r5, [pc, #28]	@ (800e4bc <_lseek_r+0x20>)
 800e4a0:	4604      	mov	r4, r0
 800e4a2:	4608      	mov	r0, r1
 800e4a4:	4611      	mov	r1, r2
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	602a      	str	r2, [r5, #0]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	f7f5 fbb1 	bl	8003c12 <_lseek>
 800e4b0:	1c43      	adds	r3, r0, #1
 800e4b2:	d102      	bne.n	800e4ba <_lseek_r+0x1e>
 800e4b4:	682b      	ldr	r3, [r5, #0]
 800e4b6:	b103      	cbz	r3, 800e4ba <_lseek_r+0x1e>
 800e4b8:	6023      	str	r3, [r4, #0]
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}
 800e4bc:	20002c90 	.word	0x20002c90

0800e4c0 <_read_r>:
 800e4c0:	b538      	push	{r3, r4, r5, lr}
 800e4c2:	4d07      	ldr	r5, [pc, #28]	@ (800e4e0 <_read_r+0x20>)
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	4608      	mov	r0, r1
 800e4c8:	4611      	mov	r1, r2
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	602a      	str	r2, [r5, #0]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	f7f5 fb3f 	bl	8003b52 <_read>
 800e4d4:	1c43      	adds	r3, r0, #1
 800e4d6:	d102      	bne.n	800e4de <_read_r+0x1e>
 800e4d8:	682b      	ldr	r3, [r5, #0]
 800e4da:	b103      	cbz	r3, 800e4de <_read_r+0x1e>
 800e4dc:	6023      	str	r3, [r4, #0]
 800e4de:	bd38      	pop	{r3, r4, r5, pc}
 800e4e0:	20002c90 	.word	0x20002c90

0800e4e4 <_sbrk_r>:
 800e4e4:	b538      	push	{r3, r4, r5, lr}
 800e4e6:	4d06      	ldr	r5, [pc, #24]	@ (800e500 <_sbrk_r+0x1c>)
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	4604      	mov	r4, r0
 800e4ec:	4608      	mov	r0, r1
 800e4ee:	602b      	str	r3, [r5, #0]
 800e4f0:	f7f5 fb9c 	bl	8003c2c <_sbrk>
 800e4f4:	1c43      	adds	r3, r0, #1
 800e4f6:	d102      	bne.n	800e4fe <_sbrk_r+0x1a>
 800e4f8:	682b      	ldr	r3, [r5, #0]
 800e4fa:	b103      	cbz	r3, 800e4fe <_sbrk_r+0x1a>
 800e4fc:	6023      	str	r3, [r4, #0]
 800e4fe:	bd38      	pop	{r3, r4, r5, pc}
 800e500:	20002c90 	.word	0x20002c90

0800e504 <_write_r>:
 800e504:	b538      	push	{r3, r4, r5, lr}
 800e506:	4d07      	ldr	r5, [pc, #28]	@ (800e524 <_write_r+0x20>)
 800e508:	4604      	mov	r4, r0
 800e50a:	4608      	mov	r0, r1
 800e50c:	4611      	mov	r1, r2
 800e50e:	2200      	movs	r2, #0
 800e510:	602a      	str	r2, [r5, #0]
 800e512:	461a      	mov	r2, r3
 800e514:	f7f5 fb3a 	bl	8003b8c <_write>
 800e518:	1c43      	adds	r3, r0, #1
 800e51a:	d102      	bne.n	800e522 <_write_r+0x1e>
 800e51c:	682b      	ldr	r3, [r5, #0]
 800e51e:	b103      	cbz	r3, 800e522 <_write_r+0x1e>
 800e520:	6023      	str	r3, [r4, #0]
 800e522:	bd38      	pop	{r3, r4, r5, pc}
 800e524:	20002c90 	.word	0x20002c90

0800e528 <__errno>:
 800e528:	4b01      	ldr	r3, [pc, #4]	@ (800e530 <__errno+0x8>)
 800e52a:	6818      	ldr	r0, [r3, #0]
 800e52c:	4770      	bx	lr
 800e52e:	bf00      	nop
 800e530:	20000034 	.word	0x20000034

0800e534 <__libc_init_array>:
 800e534:	b570      	push	{r4, r5, r6, lr}
 800e536:	4d0d      	ldr	r5, [pc, #52]	@ (800e56c <__libc_init_array+0x38>)
 800e538:	4c0d      	ldr	r4, [pc, #52]	@ (800e570 <__libc_init_array+0x3c>)
 800e53a:	1b64      	subs	r4, r4, r5
 800e53c:	10a4      	asrs	r4, r4, #2
 800e53e:	2600      	movs	r6, #0
 800e540:	42a6      	cmp	r6, r4
 800e542:	d109      	bne.n	800e558 <__libc_init_array+0x24>
 800e544:	4d0b      	ldr	r5, [pc, #44]	@ (800e574 <__libc_init_array+0x40>)
 800e546:	4c0c      	ldr	r4, [pc, #48]	@ (800e578 <__libc_init_array+0x44>)
 800e548:	f003 fbb6 	bl	8011cb8 <_init>
 800e54c:	1b64      	subs	r4, r4, r5
 800e54e:	10a4      	asrs	r4, r4, #2
 800e550:	2600      	movs	r6, #0
 800e552:	42a6      	cmp	r6, r4
 800e554:	d105      	bne.n	800e562 <__libc_init_array+0x2e>
 800e556:	bd70      	pop	{r4, r5, r6, pc}
 800e558:	f855 3b04 	ldr.w	r3, [r5], #4
 800e55c:	4798      	blx	r3
 800e55e:	3601      	adds	r6, #1
 800e560:	e7ee      	b.n	800e540 <__libc_init_array+0xc>
 800e562:	f855 3b04 	ldr.w	r3, [r5], #4
 800e566:	4798      	blx	r3
 800e568:	3601      	adds	r6, #1
 800e56a:	e7f2      	b.n	800e552 <__libc_init_array+0x1e>
 800e56c:	08012750 	.word	0x08012750
 800e570:	08012750 	.word	0x08012750
 800e574:	08012750 	.word	0x08012750
 800e578:	08012754 	.word	0x08012754

0800e57c <__retarget_lock_init_recursive>:
 800e57c:	4770      	bx	lr

0800e57e <__retarget_lock_acquire_recursive>:
 800e57e:	4770      	bx	lr

0800e580 <__retarget_lock_release_recursive>:
 800e580:	4770      	bx	lr
	...

0800e584 <nanf>:
 800e584:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e58c <nanf+0x8>
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	7fc00000 	.word	0x7fc00000

0800e590 <quorem>:
 800e590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e594:	6903      	ldr	r3, [r0, #16]
 800e596:	690c      	ldr	r4, [r1, #16]
 800e598:	42a3      	cmp	r3, r4
 800e59a:	4607      	mov	r7, r0
 800e59c:	db7e      	blt.n	800e69c <quorem+0x10c>
 800e59e:	3c01      	subs	r4, #1
 800e5a0:	f101 0814 	add.w	r8, r1, #20
 800e5a4:	00a3      	lsls	r3, r4, #2
 800e5a6:	f100 0514 	add.w	r5, r0, #20
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5b0:	9301      	str	r3, [sp, #4]
 800e5b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e5b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e5c2:	fbb2 f6f3 	udiv	r6, r2, r3
 800e5c6:	d32e      	bcc.n	800e626 <quorem+0x96>
 800e5c8:	f04f 0a00 	mov.w	sl, #0
 800e5cc:	46c4      	mov	ip, r8
 800e5ce:	46ae      	mov	lr, r5
 800e5d0:	46d3      	mov	fp, sl
 800e5d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e5d6:	b298      	uxth	r0, r3
 800e5d8:	fb06 a000 	mla	r0, r6, r0, sl
 800e5dc:	0c02      	lsrs	r2, r0, #16
 800e5de:	0c1b      	lsrs	r3, r3, #16
 800e5e0:	fb06 2303 	mla	r3, r6, r3, r2
 800e5e4:	f8de 2000 	ldr.w	r2, [lr]
 800e5e8:	b280      	uxth	r0, r0
 800e5ea:	b292      	uxth	r2, r2
 800e5ec:	1a12      	subs	r2, r2, r0
 800e5ee:	445a      	add	r2, fp
 800e5f0:	f8de 0000 	ldr.w	r0, [lr]
 800e5f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e5fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e602:	b292      	uxth	r2, r2
 800e604:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e608:	45e1      	cmp	r9, ip
 800e60a:	f84e 2b04 	str.w	r2, [lr], #4
 800e60e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e612:	d2de      	bcs.n	800e5d2 <quorem+0x42>
 800e614:	9b00      	ldr	r3, [sp, #0]
 800e616:	58eb      	ldr	r3, [r5, r3]
 800e618:	b92b      	cbnz	r3, 800e626 <quorem+0x96>
 800e61a:	9b01      	ldr	r3, [sp, #4]
 800e61c:	3b04      	subs	r3, #4
 800e61e:	429d      	cmp	r5, r3
 800e620:	461a      	mov	r2, r3
 800e622:	d32f      	bcc.n	800e684 <quorem+0xf4>
 800e624:	613c      	str	r4, [r7, #16]
 800e626:	4638      	mov	r0, r7
 800e628:	f001 f90c 	bl	800f844 <__mcmp>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	db25      	blt.n	800e67c <quorem+0xec>
 800e630:	4629      	mov	r1, r5
 800e632:	2000      	movs	r0, #0
 800e634:	f858 2b04 	ldr.w	r2, [r8], #4
 800e638:	f8d1 c000 	ldr.w	ip, [r1]
 800e63c:	fa1f fe82 	uxth.w	lr, r2
 800e640:	fa1f f38c 	uxth.w	r3, ip
 800e644:	eba3 030e 	sub.w	r3, r3, lr
 800e648:	4403      	add	r3, r0
 800e64a:	0c12      	lsrs	r2, r2, #16
 800e64c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e650:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e654:	b29b      	uxth	r3, r3
 800e656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e65a:	45c1      	cmp	r9, r8
 800e65c:	f841 3b04 	str.w	r3, [r1], #4
 800e660:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e664:	d2e6      	bcs.n	800e634 <quorem+0xa4>
 800e666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e66e:	b922      	cbnz	r2, 800e67a <quorem+0xea>
 800e670:	3b04      	subs	r3, #4
 800e672:	429d      	cmp	r5, r3
 800e674:	461a      	mov	r2, r3
 800e676:	d30b      	bcc.n	800e690 <quorem+0x100>
 800e678:	613c      	str	r4, [r7, #16]
 800e67a:	3601      	adds	r6, #1
 800e67c:	4630      	mov	r0, r6
 800e67e:	b003      	add	sp, #12
 800e680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e684:	6812      	ldr	r2, [r2, #0]
 800e686:	3b04      	subs	r3, #4
 800e688:	2a00      	cmp	r2, #0
 800e68a:	d1cb      	bne.n	800e624 <quorem+0x94>
 800e68c:	3c01      	subs	r4, #1
 800e68e:	e7c6      	b.n	800e61e <quorem+0x8e>
 800e690:	6812      	ldr	r2, [r2, #0]
 800e692:	3b04      	subs	r3, #4
 800e694:	2a00      	cmp	r2, #0
 800e696:	d1ef      	bne.n	800e678 <quorem+0xe8>
 800e698:	3c01      	subs	r4, #1
 800e69a:	e7ea      	b.n	800e672 <quorem+0xe2>
 800e69c:	2000      	movs	r0, #0
 800e69e:	e7ee      	b.n	800e67e <quorem+0xee>

0800e6a0 <_dtoa_r>:
 800e6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a4:	69c7      	ldr	r7, [r0, #28]
 800e6a6:	b099      	sub	sp, #100	@ 0x64
 800e6a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e6ac:	ec55 4b10 	vmov	r4, r5, d0
 800e6b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e6b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800e6b4:	4683      	mov	fp, r0
 800e6b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e6ba:	b97f      	cbnz	r7, 800e6dc <_dtoa_r+0x3c>
 800e6bc:	2010      	movs	r0, #16
 800e6be:	f7fe fe6f 	bl	800d3a0 <malloc>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800e6c8:	b920      	cbnz	r0, 800e6d4 <_dtoa_r+0x34>
 800e6ca:	4ba7      	ldr	r3, [pc, #668]	@ (800e968 <_dtoa_r+0x2c8>)
 800e6cc:	21ef      	movs	r1, #239	@ 0xef
 800e6ce:	48a7      	ldr	r0, [pc, #668]	@ (800e96c <_dtoa_r+0x2cc>)
 800e6d0:	f002 fd4a 	bl	8011168 <__assert_func>
 800e6d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e6d8:	6007      	str	r7, [r0, #0]
 800e6da:	60c7      	str	r7, [r0, #12]
 800e6dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e6e0:	6819      	ldr	r1, [r3, #0]
 800e6e2:	b159      	cbz	r1, 800e6fc <_dtoa_r+0x5c>
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	604a      	str	r2, [r1, #4]
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	4093      	lsls	r3, r2
 800e6ec:	608b      	str	r3, [r1, #8]
 800e6ee:	4658      	mov	r0, fp
 800e6f0:	f000 fe24 	bl	800f33c <_Bfree>
 800e6f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	601a      	str	r2, [r3, #0]
 800e6fc:	1e2b      	subs	r3, r5, #0
 800e6fe:	bfb9      	ittee	lt
 800e700:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e704:	9303      	strlt	r3, [sp, #12]
 800e706:	2300      	movge	r3, #0
 800e708:	6033      	strge	r3, [r6, #0]
 800e70a:	9f03      	ldr	r7, [sp, #12]
 800e70c:	4b98      	ldr	r3, [pc, #608]	@ (800e970 <_dtoa_r+0x2d0>)
 800e70e:	bfbc      	itt	lt
 800e710:	2201      	movlt	r2, #1
 800e712:	6032      	strlt	r2, [r6, #0]
 800e714:	43bb      	bics	r3, r7
 800e716:	d112      	bne.n	800e73e <_dtoa_r+0x9e>
 800e718:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e71a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e71e:	6013      	str	r3, [r2, #0]
 800e720:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e724:	4323      	orrs	r3, r4
 800e726:	f000 854d 	beq.w	800f1c4 <_dtoa_r+0xb24>
 800e72a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e72c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e984 <_dtoa_r+0x2e4>
 800e730:	2b00      	cmp	r3, #0
 800e732:	f000 854f 	beq.w	800f1d4 <_dtoa_r+0xb34>
 800e736:	f10a 0303 	add.w	r3, sl, #3
 800e73a:	f000 bd49 	b.w	800f1d0 <_dtoa_r+0xb30>
 800e73e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e742:	2200      	movs	r2, #0
 800e744:	ec51 0b17 	vmov	r0, r1, d7
 800e748:	2300      	movs	r3, #0
 800e74a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e74e:	f7f2 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e752:	4680      	mov	r8, r0
 800e754:	b158      	cbz	r0, 800e76e <_dtoa_r+0xce>
 800e756:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e758:	2301      	movs	r3, #1
 800e75a:	6013      	str	r3, [r2, #0]
 800e75c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e75e:	b113      	cbz	r3, 800e766 <_dtoa_r+0xc6>
 800e760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e762:	4b84      	ldr	r3, [pc, #528]	@ (800e974 <_dtoa_r+0x2d4>)
 800e764:	6013      	str	r3, [r2, #0]
 800e766:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e988 <_dtoa_r+0x2e8>
 800e76a:	f000 bd33 	b.w	800f1d4 <_dtoa_r+0xb34>
 800e76e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e772:	aa16      	add	r2, sp, #88	@ 0x58
 800e774:	a917      	add	r1, sp, #92	@ 0x5c
 800e776:	4658      	mov	r0, fp
 800e778:	f001 f984 	bl	800fa84 <__d2b>
 800e77c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e780:	4681      	mov	r9, r0
 800e782:	2e00      	cmp	r6, #0
 800e784:	d077      	beq.n	800e876 <_dtoa_r+0x1d6>
 800e786:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e788:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e794:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e798:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e79c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	4b74      	ldr	r3, [pc, #464]	@ (800e978 <_dtoa_r+0x2d8>)
 800e7a6:	f7f1 fd6f 	bl	8000288 <__aeabi_dsub>
 800e7aa:	a369      	add	r3, pc, #420	@ (adr r3, 800e950 <_dtoa_r+0x2b0>)
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	f7f1 ff22 	bl	80005f8 <__aeabi_dmul>
 800e7b4:	a368      	add	r3, pc, #416	@ (adr r3, 800e958 <_dtoa_r+0x2b8>)
 800e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ba:	f7f1 fd67 	bl	800028c <__adddf3>
 800e7be:	4604      	mov	r4, r0
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	460d      	mov	r5, r1
 800e7c4:	f7f1 feae 	bl	8000524 <__aeabi_i2d>
 800e7c8:	a365      	add	r3, pc, #404	@ (adr r3, 800e960 <_dtoa_r+0x2c0>)
 800e7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ce:	f7f1 ff13 	bl	80005f8 <__aeabi_dmul>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	4629      	mov	r1, r5
 800e7da:	f7f1 fd57 	bl	800028c <__adddf3>
 800e7de:	4604      	mov	r4, r0
 800e7e0:	460d      	mov	r5, r1
 800e7e2:	f7f2 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	4607      	mov	r7, r0
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	f7f2 f974 	bl	8000adc <__aeabi_dcmplt>
 800e7f4:	b140      	cbz	r0, 800e808 <_dtoa_r+0x168>
 800e7f6:	4638      	mov	r0, r7
 800e7f8:	f7f1 fe94 	bl	8000524 <__aeabi_i2d>
 800e7fc:	4622      	mov	r2, r4
 800e7fe:	462b      	mov	r3, r5
 800e800:	f7f2 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 800e804:	b900      	cbnz	r0, 800e808 <_dtoa_r+0x168>
 800e806:	3f01      	subs	r7, #1
 800e808:	2f16      	cmp	r7, #22
 800e80a:	d851      	bhi.n	800e8b0 <_dtoa_r+0x210>
 800e80c:	4b5b      	ldr	r3, [pc, #364]	@ (800e97c <_dtoa_r+0x2dc>)
 800e80e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e81a:	f7f2 f95f 	bl	8000adc <__aeabi_dcmplt>
 800e81e:	2800      	cmp	r0, #0
 800e820:	d048      	beq.n	800e8b4 <_dtoa_r+0x214>
 800e822:	3f01      	subs	r7, #1
 800e824:	2300      	movs	r3, #0
 800e826:	9312      	str	r3, [sp, #72]	@ 0x48
 800e828:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e82a:	1b9b      	subs	r3, r3, r6
 800e82c:	1e5a      	subs	r2, r3, #1
 800e82e:	bf44      	itt	mi
 800e830:	f1c3 0801 	rsbmi	r8, r3, #1
 800e834:	2300      	movmi	r3, #0
 800e836:	9208      	str	r2, [sp, #32]
 800e838:	bf54      	ite	pl
 800e83a:	f04f 0800 	movpl.w	r8, #0
 800e83e:	9308      	strmi	r3, [sp, #32]
 800e840:	2f00      	cmp	r7, #0
 800e842:	db39      	blt.n	800e8b8 <_dtoa_r+0x218>
 800e844:	9b08      	ldr	r3, [sp, #32]
 800e846:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e848:	443b      	add	r3, r7
 800e84a:	9308      	str	r3, [sp, #32]
 800e84c:	2300      	movs	r3, #0
 800e84e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e852:	2b09      	cmp	r3, #9
 800e854:	d864      	bhi.n	800e920 <_dtoa_r+0x280>
 800e856:	2b05      	cmp	r3, #5
 800e858:	bfc4      	itt	gt
 800e85a:	3b04      	subgt	r3, #4
 800e85c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e860:	f1a3 0302 	sub.w	r3, r3, #2
 800e864:	bfcc      	ite	gt
 800e866:	2400      	movgt	r4, #0
 800e868:	2401      	movle	r4, #1
 800e86a:	2b03      	cmp	r3, #3
 800e86c:	d863      	bhi.n	800e936 <_dtoa_r+0x296>
 800e86e:	e8df f003 	tbb	[pc, r3]
 800e872:	372a      	.short	0x372a
 800e874:	5535      	.short	0x5535
 800e876:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e87a:	441e      	add	r6, r3
 800e87c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e880:	2b20      	cmp	r3, #32
 800e882:	bfc1      	itttt	gt
 800e884:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e888:	409f      	lslgt	r7, r3
 800e88a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e88e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e892:	bfd6      	itet	le
 800e894:	f1c3 0320 	rsble	r3, r3, #32
 800e898:	ea47 0003 	orrgt.w	r0, r7, r3
 800e89c:	fa04 f003 	lslle.w	r0, r4, r3
 800e8a0:	f7f1 fe30 	bl	8000504 <__aeabi_ui2d>
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e8aa:	3e01      	subs	r6, #1
 800e8ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800e8ae:	e777      	b.n	800e7a0 <_dtoa_r+0x100>
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e7b8      	b.n	800e826 <_dtoa_r+0x186>
 800e8b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e8b6:	e7b7      	b.n	800e828 <_dtoa_r+0x188>
 800e8b8:	427b      	negs	r3, r7
 800e8ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8bc:	2300      	movs	r3, #0
 800e8be:	eba8 0807 	sub.w	r8, r8, r7
 800e8c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e8c4:	e7c4      	b.n	800e850 <_dtoa_r+0x1b0>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	dc35      	bgt.n	800e93c <_dtoa_r+0x29c>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	9307      	str	r3, [sp, #28]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8da:	e00b      	b.n	800e8f4 <_dtoa_r+0x254>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e7f3      	b.n	800e8c8 <_dtoa_r+0x228>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e8e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e8e6:	18fb      	adds	r3, r7, r3
 800e8e8:	9300      	str	r3, [sp, #0]
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	9307      	str	r3, [sp, #28]
 800e8f0:	bfb8      	it	lt
 800e8f2:	2301      	movlt	r3, #1
 800e8f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	2204      	movs	r2, #4
 800e8fc:	f102 0514 	add.w	r5, r2, #20
 800e900:	429d      	cmp	r5, r3
 800e902:	d91f      	bls.n	800e944 <_dtoa_r+0x2a4>
 800e904:	6041      	str	r1, [r0, #4]
 800e906:	4658      	mov	r0, fp
 800e908:	f000 fcd8 	bl	800f2bc <_Balloc>
 800e90c:	4682      	mov	sl, r0
 800e90e:	2800      	cmp	r0, #0
 800e910:	d13c      	bne.n	800e98c <_dtoa_r+0x2ec>
 800e912:	4b1b      	ldr	r3, [pc, #108]	@ (800e980 <_dtoa_r+0x2e0>)
 800e914:	4602      	mov	r2, r0
 800e916:	f240 11af 	movw	r1, #431	@ 0x1af
 800e91a:	e6d8      	b.n	800e6ce <_dtoa_r+0x2e>
 800e91c:	2301      	movs	r3, #1
 800e91e:	e7e0      	b.n	800e8e2 <_dtoa_r+0x242>
 800e920:	2401      	movs	r4, #1
 800e922:	2300      	movs	r3, #0
 800e924:	9309      	str	r3, [sp, #36]	@ 0x24
 800e926:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e928:	f04f 33ff 	mov.w	r3, #4294967295
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	9307      	str	r3, [sp, #28]
 800e930:	2200      	movs	r2, #0
 800e932:	2312      	movs	r3, #18
 800e934:	e7d0      	b.n	800e8d8 <_dtoa_r+0x238>
 800e936:	2301      	movs	r3, #1
 800e938:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e93a:	e7f5      	b.n	800e928 <_dtoa_r+0x288>
 800e93c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	9307      	str	r3, [sp, #28]
 800e942:	e7d7      	b.n	800e8f4 <_dtoa_r+0x254>
 800e944:	3101      	adds	r1, #1
 800e946:	0052      	lsls	r2, r2, #1
 800e948:	e7d8      	b.n	800e8fc <_dtoa_r+0x25c>
 800e94a:	bf00      	nop
 800e94c:	f3af 8000 	nop.w
 800e950:	636f4361 	.word	0x636f4361
 800e954:	3fd287a7 	.word	0x3fd287a7
 800e958:	8b60c8b3 	.word	0x8b60c8b3
 800e95c:	3fc68a28 	.word	0x3fc68a28
 800e960:	509f79fb 	.word	0x509f79fb
 800e964:	3fd34413 	.word	0x3fd34413
 800e968:	08012362 	.word	0x08012362
 800e96c:	08012379 	.word	0x08012379
 800e970:	7ff00000 	.word	0x7ff00000
 800e974:	0801232d 	.word	0x0801232d
 800e978:	3ff80000 	.word	0x3ff80000
 800e97c:	08012470 	.word	0x08012470
 800e980:	080123d1 	.word	0x080123d1
 800e984:	0801235e 	.word	0x0801235e
 800e988:	0801232c 	.word	0x0801232c
 800e98c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e990:	6018      	str	r0, [r3, #0]
 800e992:	9b07      	ldr	r3, [sp, #28]
 800e994:	2b0e      	cmp	r3, #14
 800e996:	f200 80a4 	bhi.w	800eae2 <_dtoa_r+0x442>
 800e99a:	2c00      	cmp	r4, #0
 800e99c:	f000 80a1 	beq.w	800eae2 <_dtoa_r+0x442>
 800e9a0:	2f00      	cmp	r7, #0
 800e9a2:	dd33      	ble.n	800ea0c <_dtoa_r+0x36c>
 800e9a4:	4bad      	ldr	r3, [pc, #692]	@ (800ec5c <_dtoa_r+0x5bc>)
 800e9a6:	f007 020f 	and.w	r2, r7, #15
 800e9aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9ae:	ed93 7b00 	vldr	d7, [r3]
 800e9b2:	05f8      	lsls	r0, r7, #23
 800e9b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e9b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e9bc:	d516      	bpl.n	800e9ec <_dtoa_r+0x34c>
 800e9be:	4ba8      	ldr	r3, [pc, #672]	@ (800ec60 <_dtoa_r+0x5c0>)
 800e9c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9c8:	f7f1 ff40 	bl	800084c <__aeabi_ddiv>
 800e9cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9d0:	f004 040f 	and.w	r4, r4, #15
 800e9d4:	2603      	movs	r6, #3
 800e9d6:	4da2      	ldr	r5, [pc, #648]	@ (800ec60 <_dtoa_r+0x5c0>)
 800e9d8:	b954      	cbnz	r4, 800e9f0 <_dtoa_r+0x350>
 800e9da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9e2:	f7f1 ff33 	bl	800084c <__aeabi_ddiv>
 800e9e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9ea:	e028      	b.n	800ea3e <_dtoa_r+0x39e>
 800e9ec:	2602      	movs	r6, #2
 800e9ee:	e7f2      	b.n	800e9d6 <_dtoa_r+0x336>
 800e9f0:	07e1      	lsls	r1, r4, #31
 800e9f2:	d508      	bpl.n	800ea06 <_dtoa_r+0x366>
 800e9f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e9fc:	f7f1 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ea00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea04:	3601      	adds	r6, #1
 800ea06:	1064      	asrs	r4, r4, #1
 800ea08:	3508      	adds	r5, #8
 800ea0a:	e7e5      	b.n	800e9d8 <_dtoa_r+0x338>
 800ea0c:	f000 80d2 	beq.w	800ebb4 <_dtoa_r+0x514>
 800ea10:	427c      	negs	r4, r7
 800ea12:	4b92      	ldr	r3, [pc, #584]	@ (800ec5c <_dtoa_r+0x5bc>)
 800ea14:	4d92      	ldr	r5, [pc, #584]	@ (800ec60 <_dtoa_r+0x5c0>)
 800ea16:	f004 020f 	and.w	r2, r4, #15
 800ea1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea26:	f7f1 fde7 	bl	80005f8 <__aeabi_dmul>
 800ea2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea2e:	1124      	asrs	r4, r4, #4
 800ea30:	2300      	movs	r3, #0
 800ea32:	2602      	movs	r6, #2
 800ea34:	2c00      	cmp	r4, #0
 800ea36:	f040 80b2 	bne.w	800eb9e <_dtoa_r+0x4fe>
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1d3      	bne.n	800e9e6 <_dtoa_r+0x346>
 800ea3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f000 80b7 	beq.w	800ebb8 <_dtoa_r+0x518>
 800ea4a:	4b86      	ldr	r3, [pc, #536]	@ (800ec64 <_dtoa_r+0x5c4>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7f2 f843 	bl	8000adc <__aeabi_dcmplt>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	f000 80ae 	beq.w	800ebb8 <_dtoa_r+0x518>
 800ea5c:	9b07      	ldr	r3, [sp, #28]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	f000 80aa 	beq.w	800ebb8 <_dtoa_r+0x518>
 800ea64:	9b00      	ldr	r3, [sp, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	dd37      	ble.n	800eada <_dtoa_r+0x43a>
 800ea6a:	1e7b      	subs	r3, r7, #1
 800ea6c:	9304      	str	r3, [sp, #16]
 800ea6e:	4620      	mov	r0, r4
 800ea70:	4b7d      	ldr	r3, [pc, #500]	@ (800ec68 <_dtoa_r+0x5c8>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	4629      	mov	r1, r5
 800ea76:	f7f1 fdbf 	bl	80005f8 <__aeabi_dmul>
 800ea7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea7e:	9c00      	ldr	r4, [sp, #0]
 800ea80:	3601      	adds	r6, #1
 800ea82:	4630      	mov	r0, r6
 800ea84:	f7f1 fd4e 	bl	8000524 <__aeabi_i2d>
 800ea88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ea8c:	f7f1 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ea90:	4b76      	ldr	r3, [pc, #472]	@ (800ec6c <_dtoa_r+0x5cc>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	f7f1 fbfa 	bl	800028c <__adddf3>
 800ea98:	4605      	mov	r5, r0
 800ea9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ea9e:	2c00      	cmp	r4, #0
 800eaa0:	f040 808d 	bne.w	800ebbe <_dtoa_r+0x51e>
 800eaa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaa8:	4b71      	ldr	r3, [pc, #452]	@ (800ec70 <_dtoa_r+0x5d0>)
 800eaaa:	2200      	movs	r2, #0
 800eaac:	f7f1 fbec 	bl	8000288 <__aeabi_dsub>
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eab8:	462a      	mov	r2, r5
 800eaba:	4633      	mov	r3, r6
 800eabc:	f7f2 f82c 	bl	8000b18 <__aeabi_dcmpgt>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	f040 828b 	bne.w	800efdc <_dtoa_r+0x93c>
 800eac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaca:	462a      	mov	r2, r5
 800eacc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ead0:	f7f2 f804 	bl	8000adc <__aeabi_dcmplt>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	f040 8128 	bne.w	800ed2a <_dtoa_r+0x68a>
 800eada:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800eade:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800eae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f2c0 815a 	blt.w	800ed9e <_dtoa_r+0x6fe>
 800eaea:	2f0e      	cmp	r7, #14
 800eaec:	f300 8157 	bgt.w	800ed9e <_dtoa_r+0x6fe>
 800eaf0:	4b5a      	ldr	r3, [pc, #360]	@ (800ec5c <_dtoa_r+0x5bc>)
 800eaf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eaf6:	ed93 7b00 	vldr	d7, [r3]
 800eafa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	ed8d 7b00 	vstr	d7, [sp]
 800eb02:	da03      	bge.n	800eb0c <_dtoa_r+0x46c>
 800eb04:	9b07      	ldr	r3, [sp, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	f340 8101 	ble.w	800ed0e <_dtoa_r+0x66e>
 800eb0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800eb10:	4656      	mov	r6, sl
 800eb12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb16:	4620      	mov	r0, r4
 800eb18:	4629      	mov	r1, r5
 800eb1a:	f7f1 fe97 	bl	800084c <__aeabi_ddiv>
 800eb1e:	f7f2 f81b 	bl	8000b58 <__aeabi_d2iz>
 800eb22:	4680      	mov	r8, r0
 800eb24:	f7f1 fcfe 	bl	8000524 <__aeabi_i2d>
 800eb28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb2c:	f7f1 fd64 	bl	80005f8 <__aeabi_dmul>
 800eb30:	4602      	mov	r2, r0
 800eb32:	460b      	mov	r3, r1
 800eb34:	4620      	mov	r0, r4
 800eb36:	4629      	mov	r1, r5
 800eb38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eb3c:	f7f1 fba4 	bl	8000288 <__aeabi_dsub>
 800eb40:	f806 4b01 	strb.w	r4, [r6], #1
 800eb44:	9d07      	ldr	r5, [sp, #28]
 800eb46:	eba6 040a 	sub.w	r4, r6, sl
 800eb4a:	42a5      	cmp	r5, r4
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	460b      	mov	r3, r1
 800eb50:	f040 8117 	bne.w	800ed82 <_dtoa_r+0x6e2>
 800eb54:	f7f1 fb9a 	bl	800028c <__adddf3>
 800eb58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	460d      	mov	r5, r1
 800eb60:	f7f1 ffda 	bl	8000b18 <__aeabi_dcmpgt>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	f040 80f9 	bne.w	800ed5c <_dtoa_r+0x6bc>
 800eb6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb6e:	4620      	mov	r0, r4
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f1 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb76:	b118      	cbz	r0, 800eb80 <_dtoa_r+0x4e0>
 800eb78:	f018 0f01 	tst.w	r8, #1
 800eb7c:	f040 80ee 	bne.w	800ed5c <_dtoa_r+0x6bc>
 800eb80:	4649      	mov	r1, r9
 800eb82:	4658      	mov	r0, fp
 800eb84:	f000 fbda 	bl	800f33c <_Bfree>
 800eb88:	2300      	movs	r3, #0
 800eb8a:	7033      	strb	r3, [r6, #0]
 800eb8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb8e:	3701      	adds	r7, #1
 800eb90:	601f      	str	r7, [r3, #0]
 800eb92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	f000 831d 	beq.w	800f1d4 <_dtoa_r+0xb34>
 800eb9a:	601e      	str	r6, [r3, #0]
 800eb9c:	e31a      	b.n	800f1d4 <_dtoa_r+0xb34>
 800eb9e:	07e2      	lsls	r2, r4, #31
 800eba0:	d505      	bpl.n	800ebae <_dtoa_r+0x50e>
 800eba2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eba6:	f7f1 fd27 	bl	80005f8 <__aeabi_dmul>
 800ebaa:	3601      	adds	r6, #1
 800ebac:	2301      	movs	r3, #1
 800ebae:	1064      	asrs	r4, r4, #1
 800ebb0:	3508      	adds	r5, #8
 800ebb2:	e73f      	b.n	800ea34 <_dtoa_r+0x394>
 800ebb4:	2602      	movs	r6, #2
 800ebb6:	e742      	b.n	800ea3e <_dtoa_r+0x39e>
 800ebb8:	9c07      	ldr	r4, [sp, #28]
 800ebba:	9704      	str	r7, [sp, #16]
 800ebbc:	e761      	b.n	800ea82 <_dtoa_r+0x3e2>
 800ebbe:	4b27      	ldr	r3, [pc, #156]	@ (800ec5c <_dtoa_r+0x5bc>)
 800ebc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ebc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ebc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ebca:	4454      	add	r4, sl
 800ebcc:	2900      	cmp	r1, #0
 800ebce:	d053      	beq.n	800ec78 <_dtoa_r+0x5d8>
 800ebd0:	4928      	ldr	r1, [pc, #160]	@ (800ec74 <_dtoa_r+0x5d4>)
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	f7f1 fe3a 	bl	800084c <__aeabi_ddiv>
 800ebd8:	4633      	mov	r3, r6
 800ebda:	462a      	mov	r2, r5
 800ebdc:	f7f1 fb54 	bl	8000288 <__aeabi_dsub>
 800ebe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ebe4:	4656      	mov	r6, sl
 800ebe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebea:	f7f1 ffb5 	bl	8000b58 <__aeabi_d2iz>
 800ebee:	4605      	mov	r5, r0
 800ebf0:	f7f1 fc98 	bl	8000524 <__aeabi_i2d>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebfc:	f7f1 fb44 	bl	8000288 <__aeabi_dsub>
 800ec00:	3530      	adds	r5, #48	@ 0x30
 800ec02:	4602      	mov	r2, r0
 800ec04:	460b      	mov	r3, r1
 800ec06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ec0a:	f806 5b01 	strb.w	r5, [r6], #1
 800ec0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec12:	f7f1 ff63 	bl	8000adc <__aeabi_dcmplt>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d171      	bne.n	800ecfe <_dtoa_r+0x65e>
 800ec1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec1e:	4911      	ldr	r1, [pc, #68]	@ (800ec64 <_dtoa_r+0x5c4>)
 800ec20:	2000      	movs	r0, #0
 800ec22:	f7f1 fb31 	bl	8000288 <__aeabi_dsub>
 800ec26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec2a:	f7f1 ff57 	bl	8000adc <__aeabi_dcmplt>
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	f040 8095 	bne.w	800ed5e <_dtoa_r+0x6be>
 800ec34:	42a6      	cmp	r6, r4
 800ec36:	f43f af50 	beq.w	800eada <_dtoa_r+0x43a>
 800ec3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ec3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ec68 <_dtoa_r+0x5c8>)
 800ec40:	2200      	movs	r2, #0
 800ec42:	f7f1 fcd9 	bl	80005f8 <__aeabi_dmul>
 800ec46:	4b08      	ldr	r3, [pc, #32]	@ (800ec68 <_dtoa_r+0x5c8>)
 800ec48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec52:	f7f1 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ec56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec5a:	e7c4      	b.n	800ebe6 <_dtoa_r+0x546>
 800ec5c:	08012470 	.word	0x08012470
 800ec60:	08012448 	.word	0x08012448
 800ec64:	3ff00000 	.word	0x3ff00000
 800ec68:	40240000 	.word	0x40240000
 800ec6c:	401c0000 	.word	0x401c0000
 800ec70:	40140000 	.word	0x40140000
 800ec74:	3fe00000 	.word	0x3fe00000
 800ec78:	4631      	mov	r1, r6
 800ec7a:	4628      	mov	r0, r5
 800ec7c:	f7f1 fcbc 	bl	80005f8 <__aeabi_dmul>
 800ec80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ec84:	9415      	str	r4, [sp, #84]	@ 0x54
 800ec86:	4656      	mov	r6, sl
 800ec88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec8c:	f7f1 ff64 	bl	8000b58 <__aeabi_d2iz>
 800ec90:	4605      	mov	r5, r0
 800ec92:	f7f1 fc47 	bl	8000524 <__aeabi_i2d>
 800ec96:	4602      	mov	r2, r0
 800ec98:	460b      	mov	r3, r1
 800ec9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec9e:	f7f1 faf3 	bl	8000288 <__aeabi_dsub>
 800eca2:	3530      	adds	r5, #48	@ 0x30
 800eca4:	f806 5b01 	strb.w	r5, [r6], #1
 800eca8:	4602      	mov	r2, r0
 800ecaa:	460b      	mov	r3, r1
 800ecac:	42a6      	cmp	r6, r4
 800ecae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecb2:	f04f 0200 	mov.w	r2, #0
 800ecb6:	d124      	bne.n	800ed02 <_dtoa_r+0x662>
 800ecb8:	4bac      	ldr	r3, [pc, #688]	@ (800ef6c <_dtoa_r+0x8cc>)
 800ecba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ecbe:	f7f1 fae5 	bl	800028c <__adddf3>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecca:	f7f1 ff25 	bl	8000b18 <__aeabi_dcmpgt>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	d145      	bne.n	800ed5e <_dtoa_r+0x6be>
 800ecd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ecd6:	49a5      	ldr	r1, [pc, #660]	@ (800ef6c <_dtoa_r+0x8cc>)
 800ecd8:	2000      	movs	r0, #0
 800ecda:	f7f1 fad5 	bl	8000288 <__aeabi_dsub>
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ece6:	f7f1 fef9 	bl	8000adc <__aeabi_dcmplt>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	f43f aef5 	beq.w	800eada <_dtoa_r+0x43a>
 800ecf0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ecf2:	1e73      	subs	r3, r6, #1
 800ecf4:	9315      	str	r3, [sp, #84]	@ 0x54
 800ecf6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ecfa:	2b30      	cmp	r3, #48	@ 0x30
 800ecfc:	d0f8      	beq.n	800ecf0 <_dtoa_r+0x650>
 800ecfe:	9f04      	ldr	r7, [sp, #16]
 800ed00:	e73e      	b.n	800eb80 <_dtoa_r+0x4e0>
 800ed02:	4b9b      	ldr	r3, [pc, #620]	@ (800ef70 <_dtoa_r+0x8d0>)
 800ed04:	f7f1 fc78 	bl	80005f8 <__aeabi_dmul>
 800ed08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed0c:	e7bc      	b.n	800ec88 <_dtoa_r+0x5e8>
 800ed0e:	d10c      	bne.n	800ed2a <_dtoa_r+0x68a>
 800ed10:	4b98      	ldr	r3, [pc, #608]	@ (800ef74 <_dtoa_r+0x8d4>)
 800ed12:	2200      	movs	r2, #0
 800ed14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed18:	f7f1 fc6e 	bl	80005f8 <__aeabi_dmul>
 800ed1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed20:	f7f1 fef0 	bl	8000b04 <__aeabi_dcmpge>
 800ed24:	2800      	cmp	r0, #0
 800ed26:	f000 8157 	beq.w	800efd8 <_dtoa_r+0x938>
 800ed2a:	2400      	movs	r4, #0
 800ed2c:	4625      	mov	r5, r4
 800ed2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ed30:	43db      	mvns	r3, r3
 800ed32:	9304      	str	r3, [sp, #16]
 800ed34:	4656      	mov	r6, sl
 800ed36:	2700      	movs	r7, #0
 800ed38:	4621      	mov	r1, r4
 800ed3a:	4658      	mov	r0, fp
 800ed3c:	f000 fafe 	bl	800f33c <_Bfree>
 800ed40:	2d00      	cmp	r5, #0
 800ed42:	d0dc      	beq.n	800ecfe <_dtoa_r+0x65e>
 800ed44:	b12f      	cbz	r7, 800ed52 <_dtoa_r+0x6b2>
 800ed46:	42af      	cmp	r7, r5
 800ed48:	d003      	beq.n	800ed52 <_dtoa_r+0x6b2>
 800ed4a:	4639      	mov	r1, r7
 800ed4c:	4658      	mov	r0, fp
 800ed4e:	f000 faf5 	bl	800f33c <_Bfree>
 800ed52:	4629      	mov	r1, r5
 800ed54:	4658      	mov	r0, fp
 800ed56:	f000 faf1 	bl	800f33c <_Bfree>
 800ed5a:	e7d0      	b.n	800ecfe <_dtoa_r+0x65e>
 800ed5c:	9704      	str	r7, [sp, #16]
 800ed5e:	4633      	mov	r3, r6
 800ed60:	461e      	mov	r6, r3
 800ed62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed66:	2a39      	cmp	r2, #57	@ 0x39
 800ed68:	d107      	bne.n	800ed7a <_dtoa_r+0x6da>
 800ed6a:	459a      	cmp	sl, r3
 800ed6c:	d1f8      	bne.n	800ed60 <_dtoa_r+0x6c0>
 800ed6e:	9a04      	ldr	r2, [sp, #16]
 800ed70:	3201      	adds	r2, #1
 800ed72:	9204      	str	r2, [sp, #16]
 800ed74:	2230      	movs	r2, #48	@ 0x30
 800ed76:	f88a 2000 	strb.w	r2, [sl]
 800ed7a:	781a      	ldrb	r2, [r3, #0]
 800ed7c:	3201      	adds	r2, #1
 800ed7e:	701a      	strb	r2, [r3, #0]
 800ed80:	e7bd      	b.n	800ecfe <_dtoa_r+0x65e>
 800ed82:	4b7b      	ldr	r3, [pc, #492]	@ (800ef70 <_dtoa_r+0x8d0>)
 800ed84:	2200      	movs	r2, #0
 800ed86:	f7f1 fc37 	bl	80005f8 <__aeabi_dmul>
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	4604      	mov	r4, r0
 800ed90:	460d      	mov	r5, r1
 800ed92:	f7f1 fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	f43f aebb 	beq.w	800eb12 <_dtoa_r+0x472>
 800ed9c:	e6f0      	b.n	800eb80 <_dtoa_r+0x4e0>
 800ed9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eda0:	2a00      	cmp	r2, #0
 800eda2:	f000 80db 	beq.w	800ef5c <_dtoa_r+0x8bc>
 800eda6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eda8:	2a01      	cmp	r2, #1
 800edaa:	f300 80bf 	bgt.w	800ef2c <_dtoa_r+0x88c>
 800edae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800edb0:	2a00      	cmp	r2, #0
 800edb2:	f000 80b7 	beq.w	800ef24 <_dtoa_r+0x884>
 800edb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800edba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800edbc:	4646      	mov	r6, r8
 800edbe:	9a08      	ldr	r2, [sp, #32]
 800edc0:	2101      	movs	r1, #1
 800edc2:	441a      	add	r2, r3
 800edc4:	4658      	mov	r0, fp
 800edc6:	4498      	add	r8, r3
 800edc8:	9208      	str	r2, [sp, #32]
 800edca:	f000 fbb5 	bl	800f538 <__i2b>
 800edce:	4605      	mov	r5, r0
 800edd0:	b15e      	cbz	r6, 800edea <_dtoa_r+0x74a>
 800edd2:	9b08      	ldr	r3, [sp, #32]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	dd08      	ble.n	800edea <_dtoa_r+0x74a>
 800edd8:	42b3      	cmp	r3, r6
 800edda:	9a08      	ldr	r2, [sp, #32]
 800eddc:	bfa8      	it	ge
 800edde:	4633      	movge	r3, r6
 800ede0:	eba8 0803 	sub.w	r8, r8, r3
 800ede4:	1af6      	subs	r6, r6, r3
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	9308      	str	r3, [sp, #32]
 800edea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edec:	b1f3      	cbz	r3, 800ee2c <_dtoa_r+0x78c>
 800edee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	f000 80b7 	beq.w	800ef64 <_dtoa_r+0x8c4>
 800edf6:	b18c      	cbz	r4, 800ee1c <_dtoa_r+0x77c>
 800edf8:	4629      	mov	r1, r5
 800edfa:	4622      	mov	r2, r4
 800edfc:	4658      	mov	r0, fp
 800edfe:	f000 fc5b 	bl	800f6b8 <__pow5mult>
 800ee02:	464a      	mov	r2, r9
 800ee04:	4601      	mov	r1, r0
 800ee06:	4605      	mov	r5, r0
 800ee08:	4658      	mov	r0, fp
 800ee0a:	f000 fbab 	bl	800f564 <__multiply>
 800ee0e:	4649      	mov	r1, r9
 800ee10:	9004      	str	r0, [sp, #16]
 800ee12:	4658      	mov	r0, fp
 800ee14:	f000 fa92 	bl	800f33c <_Bfree>
 800ee18:	9b04      	ldr	r3, [sp, #16]
 800ee1a:	4699      	mov	r9, r3
 800ee1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee1e:	1b1a      	subs	r2, r3, r4
 800ee20:	d004      	beq.n	800ee2c <_dtoa_r+0x78c>
 800ee22:	4649      	mov	r1, r9
 800ee24:	4658      	mov	r0, fp
 800ee26:	f000 fc47 	bl	800f6b8 <__pow5mult>
 800ee2a:	4681      	mov	r9, r0
 800ee2c:	2101      	movs	r1, #1
 800ee2e:	4658      	mov	r0, fp
 800ee30:	f000 fb82 	bl	800f538 <__i2b>
 800ee34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee36:	4604      	mov	r4, r0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 81cf 	beq.w	800f1dc <_dtoa_r+0xb3c>
 800ee3e:	461a      	mov	r2, r3
 800ee40:	4601      	mov	r1, r0
 800ee42:	4658      	mov	r0, fp
 800ee44:	f000 fc38 	bl	800f6b8 <__pow5mult>
 800ee48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee4a:	2b01      	cmp	r3, #1
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	f300 8095 	bgt.w	800ef7c <_dtoa_r+0x8dc>
 800ee52:	9b02      	ldr	r3, [sp, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f040 8087 	bne.w	800ef68 <_dtoa_r+0x8c8>
 800ee5a:	9b03      	ldr	r3, [sp, #12]
 800ee5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	f040 8089 	bne.w	800ef78 <_dtoa_r+0x8d8>
 800ee66:	9b03      	ldr	r3, [sp, #12]
 800ee68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ee6c:	0d1b      	lsrs	r3, r3, #20
 800ee6e:	051b      	lsls	r3, r3, #20
 800ee70:	b12b      	cbz	r3, 800ee7e <_dtoa_r+0x7de>
 800ee72:	9b08      	ldr	r3, [sp, #32]
 800ee74:	3301      	adds	r3, #1
 800ee76:	9308      	str	r3, [sp, #32]
 800ee78:	f108 0801 	add.w	r8, r8, #1
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f000 81b0 	beq.w	800f1e8 <_dtoa_r+0xb48>
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee8e:	6918      	ldr	r0, [r3, #16]
 800ee90:	f000 fb06 	bl	800f4a0 <__hi0bits>
 800ee94:	f1c0 0020 	rsb	r0, r0, #32
 800ee98:	9b08      	ldr	r3, [sp, #32]
 800ee9a:	4418      	add	r0, r3
 800ee9c:	f010 001f 	ands.w	r0, r0, #31
 800eea0:	d077      	beq.n	800ef92 <_dtoa_r+0x8f2>
 800eea2:	f1c0 0320 	rsb	r3, r0, #32
 800eea6:	2b04      	cmp	r3, #4
 800eea8:	dd6b      	ble.n	800ef82 <_dtoa_r+0x8e2>
 800eeaa:	9b08      	ldr	r3, [sp, #32]
 800eeac:	f1c0 001c 	rsb	r0, r0, #28
 800eeb0:	4403      	add	r3, r0
 800eeb2:	4480      	add	r8, r0
 800eeb4:	4406      	add	r6, r0
 800eeb6:	9308      	str	r3, [sp, #32]
 800eeb8:	f1b8 0f00 	cmp.w	r8, #0
 800eebc:	dd05      	ble.n	800eeca <_dtoa_r+0x82a>
 800eebe:	4649      	mov	r1, r9
 800eec0:	4642      	mov	r2, r8
 800eec2:	4658      	mov	r0, fp
 800eec4:	f000 fc52 	bl	800f76c <__lshift>
 800eec8:	4681      	mov	r9, r0
 800eeca:	9b08      	ldr	r3, [sp, #32]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	dd05      	ble.n	800eedc <_dtoa_r+0x83c>
 800eed0:	4621      	mov	r1, r4
 800eed2:	461a      	mov	r2, r3
 800eed4:	4658      	mov	r0, fp
 800eed6:	f000 fc49 	bl	800f76c <__lshift>
 800eeda:	4604      	mov	r4, r0
 800eedc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d059      	beq.n	800ef96 <_dtoa_r+0x8f6>
 800eee2:	4621      	mov	r1, r4
 800eee4:	4648      	mov	r0, r9
 800eee6:	f000 fcad 	bl	800f844 <__mcmp>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	da53      	bge.n	800ef96 <_dtoa_r+0x8f6>
 800eeee:	1e7b      	subs	r3, r7, #1
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	4649      	mov	r1, r9
 800eef4:	2300      	movs	r3, #0
 800eef6:	220a      	movs	r2, #10
 800eef8:	4658      	mov	r0, fp
 800eefa:	f000 fa41 	bl	800f380 <__multadd>
 800eefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef00:	4681      	mov	r9, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f000 8172 	beq.w	800f1ec <_dtoa_r+0xb4c>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	220a      	movs	r2, #10
 800ef0e:	4658      	mov	r0, fp
 800ef10:	f000 fa36 	bl	800f380 <__multadd>
 800ef14:	9b00      	ldr	r3, [sp, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	4605      	mov	r5, r0
 800ef1a:	dc67      	bgt.n	800efec <_dtoa_r+0x94c>
 800ef1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	dc41      	bgt.n	800efa6 <_dtoa_r+0x906>
 800ef22:	e063      	b.n	800efec <_dtoa_r+0x94c>
 800ef24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ef26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ef2a:	e746      	b.n	800edba <_dtoa_r+0x71a>
 800ef2c:	9b07      	ldr	r3, [sp, #28]
 800ef2e:	1e5c      	subs	r4, r3, #1
 800ef30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef32:	42a3      	cmp	r3, r4
 800ef34:	bfbf      	itttt	lt
 800ef36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ef38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ef3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ef3c:	1ae3      	sublt	r3, r4, r3
 800ef3e:	bfb4      	ite	lt
 800ef40:	18d2      	addlt	r2, r2, r3
 800ef42:	1b1c      	subge	r4, r3, r4
 800ef44:	9b07      	ldr	r3, [sp, #28]
 800ef46:	bfbc      	itt	lt
 800ef48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ef4a:	2400      	movlt	r4, #0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	bfb5      	itete	lt
 800ef50:	eba8 0603 	sublt.w	r6, r8, r3
 800ef54:	9b07      	ldrge	r3, [sp, #28]
 800ef56:	2300      	movlt	r3, #0
 800ef58:	4646      	movge	r6, r8
 800ef5a:	e730      	b.n	800edbe <_dtoa_r+0x71e>
 800ef5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ef5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ef60:	4646      	mov	r6, r8
 800ef62:	e735      	b.n	800edd0 <_dtoa_r+0x730>
 800ef64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ef66:	e75c      	b.n	800ee22 <_dtoa_r+0x782>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	e788      	b.n	800ee7e <_dtoa_r+0x7de>
 800ef6c:	3fe00000 	.word	0x3fe00000
 800ef70:	40240000 	.word	0x40240000
 800ef74:	40140000 	.word	0x40140000
 800ef78:	9b02      	ldr	r3, [sp, #8]
 800ef7a:	e780      	b.n	800ee7e <_dtoa_r+0x7de>
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef80:	e782      	b.n	800ee88 <_dtoa_r+0x7e8>
 800ef82:	d099      	beq.n	800eeb8 <_dtoa_r+0x818>
 800ef84:	9a08      	ldr	r2, [sp, #32]
 800ef86:	331c      	adds	r3, #28
 800ef88:	441a      	add	r2, r3
 800ef8a:	4498      	add	r8, r3
 800ef8c:	441e      	add	r6, r3
 800ef8e:	9208      	str	r2, [sp, #32]
 800ef90:	e792      	b.n	800eeb8 <_dtoa_r+0x818>
 800ef92:	4603      	mov	r3, r0
 800ef94:	e7f6      	b.n	800ef84 <_dtoa_r+0x8e4>
 800ef96:	9b07      	ldr	r3, [sp, #28]
 800ef98:	9704      	str	r7, [sp, #16]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	dc20      	bgt.n	800efe0 <_dtoa_r+0x940>
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	dd1e      	ble.n	800efe4 <_dtoa_r+0x944>
 800efa6:	9b00      	ldr	r3, [sp, #0]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f47f aec0 	bne.w	800ed2e <_dtoa_r+0x68e>
 800efae:	4621      	mov	r1, r4
 800efb0:	2205      	movs	r2, #5
 800efb2:	4658      	mov	r0, fp
 800efb4:	f000 f9e4 	bl	800f380 <__multadd>
 800efb8:	4601      	mov	r1, r0
 800efba:	4604      	mov	r4, r0
 800efbc:	4648      	mov	r0, r9
 800efbe:	f000 fc41 	bl	800f844 <__mcmp>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	f77f aeb3 	ble.w	800ed2e <_dtoa_r+0x68e>
 800efc8:	4656      	mov	r6, sl
 800efca:	2331      	movs	r3, #49	@ 0x31
 800efcc:	f806 3b01 	strb.w	r3, [r6], #1
 800efd0:	9b04      	ldr	r3, [sp, #16]
 800efd2:	3301      	adds	r3, #1
 800efd4:	9304      	str	r3, [sp, #16]
 800efd6:	e6ae      	b.n	800ed36 <_dtoa_r+0x696>
 800efd8:	9c07      	ldr	r4, [sp, #28]
 800efda:	9704      	str	r7, [sp, #16]
 800efdc:	4625      	mov	r5, r4
 800efde:	e7f3      	b.n	800efc8 <_dtoa_r+0x928>
 800efe0:	9b07      	ldr	r3, [sp, #28]
 800efe2:	9300      	str	r3, [sp, #0]
 800efe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	f000 8104 	beq.w	800f1f4 <_dtoa_r+0xb54>
 800efec:	2e00      	cmp	r6, #0
 800efee:	dd05      	ble.n	800effc <_dtoa_r+0x95c>
 800eff0:	4629      	mov	r1, r5
 800eff2:	4632      	mov	r2, r6
 800eff4:	4658      	mov	r0, fp
 800eff6:	f000 fbb9 	bl	800f76c <__lshift>
 800effa:	4605      	mov	r5, r0
 800effc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800effe:	2b00      	cmp	r3, #0
 800f000:	d05a      	beq.n	800f0b8 <_dtoa_r+0xa18>
 800f002:	6869      	ldr	r1, [r5, #4]
 800f004:	4658      	mov	r0, fp
 800f006:	f000 f959 	bl	800f2bc <_Balloc>
 800f00a:	4606      	mov	r6, r0
 800f00c:	b928      	cbnz	r0, 800f01a <_dtoa_r+0x97a>
 800f00e:	4b84      	ldr	r3, [pc, #528]	@ (800f220 <_dtoa_r+0xb80>)
 800f010:	4602      	mov	r2, r0
 800f012:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f016:	f7ff bb5a 	b.w	800e6ce <_dtoa_r+0x2e>
 800f01a:	692a      	ldr	r2, [r5, #16]
 800f01c:	3202      	adds	r2, #2
 800f01e:	0092      	lsls	r2, r2, #2
 800f020:	f105 010c 	add.w	r1, r5, #12
 800f024:	300c      	adds	r0, #12
 800f026:	f002 f887 	bl	8011138 <memcpy>
 800f02a:	2201      	movs	r2, #1
 800f02c:	4631      	mov	r1, r6
 800f02e:	4658      	mov	r0, fp
 800f030:	f000 fb9c 	bl	800f76c <__lshift>
 800f034:	f10a 0301 	add.w	r3, sl, #1
 800f038:	9307      	str	r3, [sp, #28]
 800f03a:	9b00      	ldr	r3, [sp, #0]
 800f03c:	4453      	add	r3, sl
 800f03e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f040:	9b02      	ldr	r3, [sp, #8]
 800f042:	f003 0301 	and.w	r3, r3, #1
 800f046:	462f      	mov	r7, r5
 800f048:	930a      	str	r3, [sp, #40]	@ 0x28
 800f04a:	4605      	mov	r5, r0
 800f04c:	9b07      	ldr	r3, [sp, #28]
 800f04e:	4621      	mov	r1, r4
 800f050:	3b01      	subs	r3, #1
 800f052:	4648      	mov	r0, r9
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	f7ff fa9b 	bl	800e590 <quorem>
 800f05a:	4639      	mov	r1, r7
 800f05c:	9002      	str	r0, [sp, #8]
 800f05e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f062:	4648      	mov	r0, r9
 800f064:	f000 fbee 	bl	800f844 <__mcmp>
 800f068:	462a      	mov	r2, r5
 800f06a:	9008      	str	r0, [sp, #32]
 800f06c:	4621      	mov	r1, r4
 800f06e:	4658      	mov	r0, fp
 800f070:	f000 fc04 	bl	800f87c <__mdiff>
 800f074:	68c2      	ldr	r2, [r0, #12]
 800f076:	4606      	mov	r6, r0
 800f078:	bb02      	cbnz	r2, 800f0bc <_dtoa_r+0xa1c>
 800f07a:	4601      	mov	r1, r0
 800f07c:	4648      	mov	r0, r9
 800f07e:	f000 fbe1 	bl	800f844 <__mcmp>
 800f082:	4602      	mov	r2, r0
 800f084:	4631      	mov	r1, r6
 800f086:	4658      	mov	r0, fp
 800f088:	920e      	str	r2, [sp, #56]	@ 0x38
 800f08a:	f000 f957 	bl	800f33c <_Bfree>
 800f08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f090:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f092:	9e07      	ldr	r6, [sp, #28]
 800f094:	ea43 0102 	orr.w	r1, r3, r2
 800f098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f09a:	4319      	orrs	r1, r3
 800f09c:	d110      	bne.n	800f0c0 <_dtoa_r+0xa20>
 800f09e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f0a2:	d029      	beq.n	800f0f8 <_dtoa_r+0xa58>
 800f0a4:	9b08      	ldr	r3, [sp, #32]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	dd02      	ble.n	800f0b0 <_dtoa_r+0xa10>
 800f0aa:	9b02      	ldr	r3, [sp, #8]
 800f0ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f0b0:	9b00      	ldr	r3, [sp, #0]
 800f0b2:	f883 8000 	strb.w	r8, [r3]
 800f0b6:	e63f      	b.n	800ed38 <_dtoa_r+0x698>
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	e7bb      	b.n	800f034 <_dtoa_r+0x994>
 800f0bc:	2201      	movs	r2, #1
 800f0be:	e7e1      	b.n	800f084 <_dtoa_r+0x9e4>
 800f0c0:	9b08      	ldr	r3, [sp, #32]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	db04      	blt.n	800f0d0 <_dtoa_r+0xa30>
 800f0c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f0c8:	430b      	orrs	r3, r1
 800f0ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f0cc:	430b      	orrs	r3, r1
 800f0ce:	d120      	bne.n	800f112 <_dtoa_r+0xa72>
 800f0d0:	2a00      	cmp	r2, #0
 800f0d2:	dded      	ble.n	800f0b0 <_dtoa_r+0xa10>
 800f0d4:	4649      	mov	r1, r9
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	4658      	mov	r0, fp
 800f0da:	f000 fb47 	bl	800f76c <__lshift>
 800f0de:	4621      	mov	r1, r4
 800f0e0:	4681      	mov	r9, r0
 800f0e2:	f000 fbaf 	bl	800f844 <__mcmp>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	dc03      	bgt.n	800f0f2 <_dtoa_r+0xa52>
 800f0ea:	d1e1      	bne.n	800f0b0 <_dtoa_r+0xa10>
 800f0ec:	f018 0f01 	tst.w	r8, #1
 800f0f0:	d0de      	beq.n	800f0b0 <_dtoa_r+0xa10>
 800f0f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f0f6:	d1d8      	bne.n	800f0aa <_dtoa_r+0xa0a>
 800f0f8:	9a00      	ldr	r2, [sp, #0]
 800f0fa:	2339      	movs	r3, #57	@ 0x39
 800f0fc:	7013      	strb	r3, [r2, #0]
 800f0fe:	4633      	mov	r3, r6
 800f100:	461e      	mov	r6, r3
 800f102:	3b01      	subs	r3, #1
 800f104:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f108:	2a39      	cmp	r2, #57	@ 0x39
 800f10a:	d052      	beq.n	800f1b2 <_dtoa_r+0xb12>
 800f10c:	3201      	adds	r2, #1
 800f10e:	701a      	strb	r2, [r3, #0]
 800f110:	e612      	b.n	800ed38 <_dtoa_r+0x698>
 800f112:	2a00      	cmp	r2, #0
 800f114:	dd07      	ble.n	800f126 <_dtoa_r+0xa86>
 800f116:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f11a:	d0ed      	beq.n	800f0f8 <_dtoa_r+0xa58>
 800f11c:	9a00      	ldr	r2, [sp, #0]
 800f11e:	f108 0301 	add.w	r3, r8, #1
 800f122:	7013      	strb	r3, [r2, #0]
 800f124:	e608      	b.n	800ed38 <_dtoa_r+0x698>
 800f126:	9b07      	ldr	r3, [sp, #28]
 800f128:	9a07      	ldr	r2, [sp, #28]
 800f12a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f12e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f130:	4293      	cmp	r3, r2
 800f132:	d028      	beq.n	800f186 <_dtoa_r+0xae6>
 800f134:	4649      	mov	r1, r9
 800f136:	2300      	movs	r3, #0
 800f138:	220a      	movs	r2, #10
 800f13a:	4658      	mov	r0, fp
 800f13c:	f000 f920 	bl	800f380 <__multadd>
 800f140:	42af      	cmp	r7, r5
 800f142:	4681      	mov	r9, r0
 800f144:	f04f 0300 	mov.w	r3, #0
 800f148:	f04f 020a 	mov.w	r2, #10
 800f14c:	4639      	mov	r1, r7
 800f14e:	4658      	mov	r0, fp
 800f150:	d107      	bne.n	800f162 <_dtoa_r+0xac2>
 800f152:	f000 f915 	bl	800f380 <__multadd>
 800f156:	4607      	mov	r7, r0
 800f158:	4605      	mov	r5, r0
 800f15a:	9b07      	ldr	r3, [sp, #28]
 800f15c:	3301      	adds	r3, #1
 800f15e:	9307      	str	r3, [sp, #28]
 800f160:	e774      	b.n	800f04c <_dtoa_r+0x9ac>
 800f162:	f000 f90d 	bl	800f380 <__multadd>
 800f166:	4629      	mov	r1, r5
 800f168:	4607      	mov	r7, r0
 800f16a:	2300      	movs	r3, #0
 800f16c:	220a      	movs	r2, #10
 800f16e:	4658      	mov	r0, fp
 800f170:	f000 f906 	bl	800f380 <__multadd>
 800f174:	4605      	mov	r5, r0
 800f176:	e7f0      	b.n	800f15a <_dtoa_r+0xaba>
 800f178:	9b00      	ldr	r3, [sp, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	bfcc      	ite	gt
 800f17e:	461e      	movgt	r6, r3
 800f180:	2601      	movle	r6, #1
 800f182:	4456      	add	r6, sl
 800f184:	2700      	movs	r7, #0
 800f186:	4649      	mov	r1, r9
 800f188:	2201      	movs	r2, #1
 800f18a:	4658      	mov	r0, fp
 800f18c:	f000 faee 	bl	800f76c <__lshift>
 800f190:	4621      	mov	r1, r4
 800f192:	4681      	mov	r9, r0
 800f194:	f000 fb56 	bl	800f844 <__mcmp>
 800f198:	2800      	cmp	r0, #0
 800f19a:	dcb0      	bgt.n	800f0fe <_dtoa_r+0xa5e>
 800f19c:	d102      	bne.n	800f1a4 <_dtoa_r+0xb04>
 800f19e:	f018 0f01 	tst.w	r8, #1
 800f1a2:	d1ac      	bne.n	800f0fe <_dtoa_r+0xa5e>
 800f1a4:	4633      	mov	r3, r6
 800f1a6:	461e      	mov	r6, r3
 800f1a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1ac:	2a30      	cmp	r2, #48	@ 0x30
 800f1ae:	d0fa      	beq.n	800f1a6 <_dtoa_r+0xb06>
 800f1b0:	e5c2      	b.n	800ed38 <_dtoa_r+0x698>
 800f1b2:	459a      	cmp	sl, r3
 800f1b4:	d1a4      	bne.n	800f100 <_dtoa_r+0xa60>
 800f1b6:	9b04      	ldr	r3, [sp, #16]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	9304      	str	r3, [sp, #16]
 800f1bc:	2331      	movs	r3, #49	@ 0x31
 800f1be:	f88a 3000 	strb.w	r3, [sl]
 800f1c2:	e5b9      	b.n	800ed38 <_dtoa_r+0x698>
 800f1c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f1c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f224 <_dtoa_r+0xb84>
 800f1ca:	b11b      	cbz	r3, 800f1d4 <_dtoa_r+0xb34>
 800f1cc:	f10a 0308 	add.w	r3, sl, #8
 800f1d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f1d2:	6013      	str	r3, [r2, #0]
 800f1d4:	4650      	mov	r0, sl
 800f1d6:	b019      	add	sp, #100	@ 0x64
 800f1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	f77f ae37 	ble.w	800ee52 <_dtoa_r+0x7b2>
 800f1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1e8:	2001      	movs	r0, #1
 800f1ea:	e655      	b.n	800ee98 <_dtoa_r+0x7f8>
 800f1ec:	9b00      	ldr	r3, [sp, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f77f aed6 	ble.w	800efa0 <_dtoa_r+0x900>
 800f1f4:	4656      	mov	r6, sl
 800f1f6:	4621      	mov	r1, r4
 800f1f8:	4648      	mov	r0, r9
 800f1fa:	f7ff f9c9 	bl	800e590 <quorem>
 800f1fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f202:	f806 8b01 	strb.w	r8, [r6], #1
 800f206:	9b00      	ldr	r3, [sp, #0]
 800f208:	eba6 020a 	sub.w	r2, r6, sl
 800f20c:	4293      	cmp	r3, r2
 800f20e:	ddb3      	ble.n	800f178 <_dtoa_r+0xad8>
 800f210:	4649      	mov	r1, r9
 800f212:	2300      	movs	r3, #0
 800f214:	220a      	movs	r2, #10
 800f216:	4658      	mov	r0, fp
 800f218:	f000 f8b2 	bl	800f380 <__multadd>
 800f21c:	4681      	mov	r9, r0
 800f21e:	e7ea      	b.n	800f1f6 <_dtoa_r+0xb56>
 800f220:	080123d1 	.word	0x080123d1
 800f224:	08012355 	.word	0x08012355

0800f228 <_free_r>:
 800f228:	b538      	push	{r3, r4, r5, lr}
 800f22a:	4605      	mov	r5, r0
 800f22c:	2900      	cmp	r1, #0
 800f22e:	d041      	beq.n	800f2b4 <_free_r+0x8c>
 800f230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f234:	1f0c      	subs	r4, r1, #4
 800f236:	2b00      	cmp	r3, #0
 800f238:	bfb8      	it	lt
 800f23a:	18e4      	addlt	r4, r4, r3
 800f23c:	f7fe f962 	bl	800d504 <__malloc_lock>
 800f240:	4a1d      	ldr	r2, [pc, #116]	@ (800f2b8 <_free_r+0x90>)
 800f242:	6813      	ldr	r3, [r2, #0]
 800f244:	b933      	cbnz	r3, 800f254 <_free_r+0x2c>
 800f246:	6063      	str	r3, [r4, #4]
 800f248:	6014      	str	r4, [r2, #0]
 800f24a:	4628      	mov	r0, r5
 800f24c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f250:	f7fe b95e 	b.w	800d510 <__malloc_unlock>
 800f254:	42a3      	cmp	r3, r4
 800f256:	d908      	bls.n	800f26a <_free_r+0x42>
 800f258:	6820      	ldr	r0, [r4, #0]
 800f25a:	1821      	adds	r1, r4, r0
 800f25c:	428b      	cmp	r3, r1
 800f25e:	bf01      	itttt	eq
 800f260:	6819      	ldreq	r1, [r3, #0]
 800f262:	685b      	ldreq	r3, [r3, #4]
 800f264:	1809      	addeq	r1, r1, r0
 800f266:	6021      	streq	r1, [r4, #0]
 800f268:	e7ed      	b.n	800f246 <_free_r+0x1e>
 800f26a:	461a      	mov	r2, r3
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	b10b      	cbz	r3, 800f274 <_free_r+0x4c>
 800f270:	42a3      	cmp	r3, r4
 800f272:	d9fa      	bls.n	800f26a <_free_r+0x42>
 800f274:	6811      	ldr	r1, [r2, #0]
 800f276:	1850      	adds	r0, r2, r1
 800f278:	42a0      	cmp	r0, r4
 800f27a:	d10b      	bne.n	800f294 <_free_r+0x6c>
 800f27c:	6820      	ldr	r0, [r4, #0]
 800f27e:	4401      	add	r1, r0
 800f280:	1850      	adds	r0, r2, r1
 800f282:	4283      	cmp	r3, r0
 800f284:	6011      	str	r1, [r2, #0]
 800f286:	d1e0      	bne.n	800f24a <_free_r+0x22>
 800f288:	6818      	ldr	r0, [r3, #0]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	6053      	str	r3, [r2, #4]
 800f28e:	4408      	add	r0, r1
 800f290:	6010      	str	r0, [r2, #0]
 800f292:	e7da      	b.n	800f24a <_free_r+0x22>
 800f294:	d902      	bls.n	800f29c <_free_r+0x74>
 800f296:	230c      	movs	r3, #12
 800f298:	602b      	str	r3, [r5, #0]
 800f29a:	e7d6      	b.n	800f24a <_free_r+0x22>
 800f29c:	6820      	ldr	r0, [r4, #0]
 800f29e:	1821      	adds	r1, r4, r0
 800f2a0:	428b      	cmp	r3, r1
 800f2a2:	bf04      	itt	eq
 800f2a4:	6819      	ldreq	r1, [r3, #0]
 800f2a6:	685b      	ldreq	r3, [r3, #4]
 800f2a8:	6063      	str	r3, [r4, #4]
 800f2aa:	bf04      	itt	eq
 800f2ac:	1809      	addeq	r1, r1, r0
 800f2ae:	6021      	streq	r1, [r4, #0]
 800f2b0:	6054      	str	r4, [r2, #4]
 800f2b2:	e7ca      	b.n	800f24a <_free_r+0x22>
 800f2b4:	bd38      	pop	{r3, r4, r5, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20002b50 	.word	0x20002b50

0800f2bc <_Balloc>:
 800f2bc:	b570      	push	{r4, r5, r6, lr}
 800f2be:	69c6      	ldr	r6, [r0, #28]
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	460d      	mov	r5, r1
 800f2c4:	b976      	cbnz	r6, 800f2e4 <_Balloc+0x28>
 800f2c6:	2010      	movs	r0, #16
 800f2c8:	f7fe f86a 	bl	800d3a0 <malloc>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	61e0      	str	r0, [r4, #28]
 800f2d0:	b920      	cbnz	r0, 800f2dc <_Balloc+0x20>
 800f2d2:	4b18      	ldr	r3, [pc, #96]	@ (800f334 <_Balloc+0x78>)
 800f2d4:	4818      	ldr	r0, [pc, #96]	@ (800f338 <_Balloc+0x7c>)
 800f2d6:	216b      	movs	r1, #107	@ 0x6b
 800f2d8:	f001 ff46 	bl	8011168 <__assert_func>
 800f2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f2e0:	6006      	str	r6, [r0, #0]
 800f2e2:	60c6      	str	r6, [r0, #12]
 800f2e4:	69e6      	ldr	r6, [r4, #28]
 800f2e6:	68f3      	ldr	r3, [r6, #12]
 800f2e8:	b183      	cbz	r3, 800f30c <_Balloc+0x50>
 800f2ea:	69e3      	ldr	r3, [r4, #28]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2f2:	b9b8      	cbnz	r0, 800f324 <_Balloc+0x68>
 800f2f4:	2101      	movs	r1, #1
 800f2f6:	fa01 f605 	lsl.w	r6, r1, r5
 800f2fa:	1d72      	adds	r2, r6, #5
 800f2fc:	0092      	lsls	r2, r2, #2
 800f2fe:	4620      	mov	r0, r4
 800f300:	f001 ff50 	bl	80111a4 <_calloc_r>
 800f304:	b160      	cbz	r0, 800f320 <_Balloc+0x64>
 800f306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f30a:	e00e      	b.n	800f32a <_Balloc+0x6e>
 800f30c:	2221      	movs	r2, #33	@ 0x21
 800f30e:	2104      	movs	r1, #4
 800f310:	4620      	mov	r0, r4
 800f312:	f001 ff47 	bl	80111a4 <_calloc_r>
 800f316:	69e3      	ldr	r3, [r4, #28]
 800f318:	60f0      	str	r0, [r6, #12]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1e4      	bne.n	800f2ea <_Balloc+0x2e>
 800f320:	2000      	movs	r0, #0
 800f322:	bd70      	pop	{r4, r5, r6, pc}
 800f324:	6802      	ldr	r2, [r0, #0]
 800f326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f32a:	2300      	movs	r3, #0
 800f32c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f330:	e7f7      	b.n	800f322 <_Balloc+0x66>
 800f332:	bf00      	nop
 800f334:	08012362 	.word	0x08012362
 800f338:	080123e2 	.word	0x080123e2

0800f33c <_Bfree>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	69c6      	ldr	r6, [r0, #28]
 800f340:	4605      	mov	r5, r0
 800f342:	460c      	mov	r4, r1
 800f344:	b976      	cbnz	r6, 800f364 <_Bfree+0x28>
 800f346:	2010      	movs	r0, #16
 800f348:	f7fe f82a 	bl	800d3a0 <malloc>
 800f34c:	4602      	mov	r2, r0
 800f34e:	61e8      	str	r0, [r5, #28]
 800f350:	b920      	cbnz	r0, 800f35c <_Bfree+0x20>
 800f352:	4b09      	ldr	r3, [pc, #36]	@ (800f378 <_Bfree+0x3c>)
 800f354:	4809      	ldr	r0, [pc, #36]	@ (800f37c <_Bfree+0x40>)
 800f356:	218f      	movs	r1, #143	@ 0x8f
 800f358:	f001 ff06 	bl	8011168 <__assert_func>
 800f35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f360:	6006      	str	r6, [r0, #0]
 800f362:	60c6      	str	r6, [r0, #12]
 800f364:	b13c      	cbz	r4, 800f376 <_Bfree+0x3a>
 800f366:	69eb      	ldr	r3, [r5, #28]
 800f368:	6862      	ldr	r2, [r4, #4]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f370:	6021      	str	r1, [r4, #0]
 800f372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f376:	bd70      	pop	{r4, r5, r6, pc}
 800f378:	08012362 	.word	0x08012362
 800f37c:	080123e2 	.word	0x080123e2

0800f380 <__multadd>:
 800f380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f384:	690d      	ldr	r5, [r1, #16]
 800f386:	4607      	mov	r7, r0
 800f388:	460c      	mov	r4, r1
 800f38a:	461e      	mov	r6, r3
 800f38c:	f101 0c14 	add.w	ip, r1, #20
 800f390:	2000      	movs	r0, #0
 800f392:	f8dc 3000 	ldr.w	r3, [ip]
 800f396:	b299      	uxth	r1, r3
 800f398:	fb02 6101 	mla	r1, r2, r1, r6
 800f39c:	0c1e      	lsrs	r6, r3, #16
 800f39e:	0c0b      	lsrs	r3, r1, #16
 800f3a0:	fb02 3306 	mla	r3, r2, r6, r3
 800f3a4:	b289      	uxth	r1, r1
 800f3a6:	3001      	adds	r0, #1
 800f3a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f3ac:	4285      	cmp	r5, r0
 800f3ae:	f84c 1b04 	str.w	r1, [ip], #4
 800f3b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f3b6:	dcec      	bgt.n	800f392 <__multadd+0x12>
 800f3b8:	b30e      	cbz	r6, 800f3fe <__multadd+0x7e>
 800f3ba:	68a3      	ldr	r3, [r4, #8]
 800f3bc:	42ab      	cmp	r3, r5
 800f3be:	dc19      	bgt.n	800f3f4 <__multadd+0x74>
 800f3c0:	6861      	ldr	r1, [r4, #4]
 800f3c2:	4638      	mov	r0, r7
 800f3c4:	3101      	adds	r1, #1
 800f3c6:	f7ff ff79 	bl	800f2bc <_Balloc>
 800f3ca:	4680      	mov	r8, r0
 800f3cc:	b928      	cbnz	r0, 800f3da <__multadd+0x5a>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	4b0c      	ldr	r3, [pc, #48]	@ (800f404 <__multadd+0x84>)
 800f3d2:	480d      	ldr	r0, [pc, #52]	@ (800f408 <__multadd+0x88>)
 800f3d4:	21ba      	movs	r1, #186	@ 0xba
 800f3d6:	f001 fec7 	bl	8011168 <__assert_func>
 800f3da:	6922      	ldr	r2, [r4, #16]
 800f3dc:	3202      	adds	r2, #2
 800f3de:	f104 010c 	add.w	r1, r4, #12
 800f3e2:	0092      	lsls	r2, r2, #2
 800f3e4:	300c      	adds	r0, #12
 800f3e6:	f001 fea7 	bl	8011138 <memcpy>
 800f3ea:	4621      	mov	r1, r4
 800f3ec:	4638      	mov	r0, r7
 800f3ee:	f7ff ffa5 	bl	800f33c <_Bfree>
 800f3f2:	4644      	mov	r4, r8
 800f3f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f3f8:	3501      	adds	r5, #1
 800f3fa:	615e      	str	r6, [r3, #20]
 800f3fc:	6125      	str	r5, [r4, #16]
 800f3fe:	4620      	mov	r0, r4
 800f400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f404:	080123d1 	.word	0x080123d1
 800f408:	080123e2 	.word	0x080123e2

0800f40c <__s2b>:
 800f40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f410:	460c      	mov	r4, r1
 800f412:	4615      	mov	r5, r2
 800f414:	461f      	mov	r7, r3
 800f416:	2209      	movs	r2, #9
 800f418:	3308      	adds	r3, #8
 800f41a:	4606      	mov	r6, r0
 800f41c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f420:	2100      	movs	r1, #0
 800f422:	2201      	movs	r2, #1
 800f424:	429a      	cmp	r2, r3
 800f426:	db09      	blt.n	800f43c <__s2b+0x30>
 800f428:	4630      	mov	r0, r6
 800f42a:	f7ff ff47 	bl	800f2bc <_Balloc>
 800f42e:	b940      	cbnz	r0, 800f442 <__s2b+0x36>
 800f430:	4602      	mov	r2, r0
 800f432:	4b19      	ldr	r3, [pc, #100]	@ (800f498 <__s2b+0x8c>)
 800f434:	4819      	ldr	r0, [pc, #100]	@ (800f49c <__s2b+0x90>)
 800f436:	21d3      	movs	r1, #211	@ 0xd3
 800f438:	f001 fe96 	bl	8011168 <__assert_func>
 800f43c:	0052      	lsls	r2, r2, #1
 800f43e:	3101      	adds	r1, #1
 800f440:	e7f0      	b.n	800f424 <__s2b+0x18>
 800f442:	9b08      	ldr	r3, [sp, #32]
 800f444:	6143      	str	r3, [r0, #20]
 800f446:	2d09      	cmp	r5, #9
 800f448:	f04f 0301 	mov.w	r3, #1
 800f44c:	6103      	str	r3, [r0, #16]
 800f44e:	dd16      	ble.n	800f47e <__s2b+0x72>
 800f450:	f104 0909 	add.w	r9, r4, #9
 800f454:	46c8      	mov	r8, r9
 800f456:	442c      	add	r4, r5
 800f458:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f45c:	4601      	mov	r1, r0
 800f45e:	3b30      	subs	r3, #48	@ 0x30
 800f460:	220a      	movs	r2, #10
 800f462:	4630      	mov	r0, r6
 800f464:	f7ff ff8c 	bl	800f380 <__multadd>
 800f468:	45a0      	cmp	r8, r4
 800f46a:	d1f5      	bne.n	800f458 <__s2b+0x4c>
 800f46c:	f1a5 0408 	sub.w	r4, r5, #8
 800f470:	444c      	add	r4, r9
 800f472:	1b2d      	subs	r5, r5, r4
 800f474:	1963      	adds	r3, r4, r5
 800f476:	42bb      	cmp	r3, r7
 800f478:	db04      	blt.n	800f484 <__s2b+0x78>
 800f47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f47e:	340a      	adds	r4, #10
 800f480:	2509      	movs	r5, #9
 800f482:	e7f6      	b.n	800f472 <__s2b+0x66>
 800f484:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f488:	4601      	mov	r1, r0
 800f48a:	3b30      	subs	r3, #48	@ 0x30
 800f48c:	220a      	movs	r2, #10
 800f48e:	4630      	mov	r0, r6
 800f490:	f7ff ff76 	bl	800f380 <__multadd>
 800f494:	e7ee      	b.n	800f474 <__s2b+0x68>
 800f496:	bf00      	nop
 800f498:	080123d1 	.word	0x080123d1
 800f49c:	080123e2 	.word	0x080123e2

0800f4a0 <__hi0bits>:
 800f4a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	bf36      	itet	cc
 800f4a8:	0403      	lslcc	r3, r0, #16
 800f4aa:	2000      	movcs	r0, #0
 800f4ac:	2010      	movcc	r0, #16
 800f4ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f4b2:	bf3c      	itt	cc
 800f4b4:	021b      	lslcc	r3, r3, #8
 800f4b6:	3008      	addcc	r0, #8
 800f4b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4bc:	bf3c      	itt	cc
 800f4be:	011b      	lslcc	r3, r3, #4
 800f4c0:	3004      	addcc	r0, #4
 800f4c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4c6:	bf3c      	itt	cc
 800f4c8:	009b      	lslcc	r3, r3, #2
 800f4ca:	3002      	addcc	r0, #2
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	db05      	blt.n	800f4dc <__hi0bits+0x3c>
 800f4d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f4d4:	f100 0001 	add.w	r0, r0, #1
 800f4d8:	bf08      	it	eq
 800f4da:	2020      	moveq	r0, #32
 800f4dc:	4770      	bx	lr

0800f4de <__lo0bits>:
 800f4de:	6803      	ldr	r3, [r0, #0]
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	f013 0007 	ands.w	r0, r3, #7
 800f4e6:	d00b      	beq.n	800f500 <__lo0bits+0x22>
 800f4e8:	07d9      	lsls	r1, r3, #31
 800f4ea:	d421      	bmi.n	800f530 <__lo0bits+0x52>
 800f4ec:	0798      	lsls	r0, r3, #30
 800f4ee:	bf49      	itett	mi
 800f4f0:	085b      	lsrmi	r3, r3, #1
 800f4f2:	089b      	lsrpl	r3, r3, #2
 800f4f4:	2001      	movmi	r0, #1
 800f4f6:	6013      	strmi	r3, [r2, #0]
 800f4f8:	bf5c      	itt	pl
 800f4fa:	6013      	strpl	r3, [r2, #0]
 800f4fc:	2002      	movpl	r0, #2
 800f4fe:	4770      	bx	lr
 800f500:	b299      	uxth	r1, r3
 800f502:	b909      	cbnz	r1, 800f508 <__lo0bits+0x2a>
 800f504:	0c1b      	lsrs	r3, r3, #16
 800f506:	2010      	movs	r0, #16
 800f508:	b2d9      	uxtb	r1, r3
 800f50a:	b909      	cbnz	r1, 800f510 <__lo0bits+0x32>
 800f50c:	3008      	adds	r0, #8
 800f50e:	0a1b      	lsrs	r3, r3, #8
 800f510:	0719      	lsls	r1, r3, #28
 800f512:	bf04      	itt	eq
 800f514:	091b      	lsreq	r3, r3, #4
 800f516:	3004      	addeq	r0, #4
 800f518:	0799      	lsls	r1, r3, #30
 800f51a:	bf04      	itt	eq
 800f51c:	089b      	lsreq	r3, r3, #2
 800f51e:	3002      	addeq	r0, #2
 800f520:	07d9      	lsls	r1, r3, #31
 800f522:	d403      	bmi.n	800f52c <__lo0bits+0x4e>
 800f524:	085b      	lsrs	r3, r3, #1
 800f526:	f100 0001 	add.w	r0, r0, #1
 800f52a:	d003      	beq.n	800f534 <__lo0bits+0x56>
 800f52c:	6013      	str	r3, [r2, #0]
 800f52e:	4770      	bx	lr
 800f530:	2000      	movs	r0, #0
 800f532:	4770      	bx	lr
 800f534:	2020      	movs	r0, #32
 800f536:	4770      	bx	lr

0800f538 <__i2b>:
 800f538:	b510      	push	{r4, lr}
 800f53a:	460c      	mov	r4, r1
 800f53c:	2101      	movs	r1, #1
 800f53e:	f7ff febd 	bl	800f2bc <_Balloc>
 800f542:	4602      	mov	r2, r0
 800f544:	b928      	cbnz	r0, 800f552 <__i2b+0x1a>
 800f546:	4b05      	ldr	r3, [pc, #20]	@ (800f55c <__i2b+0x24>)
 800f548:	4805      	ldr	r0, [pc, #20]	@ (800f560 <__i2b+0x28>)
 800f54a:	f240 1145 	movw	r1, #325	@ 0x145
 800f54e:	f001 fe0b 	bl	8011168 <__assert_func>
 800f552:	2301      	movs	r3, #1
 800f554:	6144      	str	r4, [r0, #20]
 800f556:	6103      	str	r3, [r0, #16]
 800f558:	bd10      	pop	{r4, pc}
 800f55a:	bf00      	nop
 800f55c:	080123d1 	.word	0x080123d1
 800f560:	080123e2 	.word	0x080123e2

0800f564 <__multiply>:
 800f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f568:	4614      	mov	r4, r2
 800f56a:	690a      	ldr	r2, [r1, #16]
 800f56c:	6923      	ldr	r3, [r4, #16]
 800f56e:	429a      	cmp	r2, r3
 800f570:	bfa8      	it	ge
 800f572:	4623      	movge	r3, r4
 800f574:	460f      	mov	r7, r1
 800f576:	bfa4      	itt	ge
 800f578:	460c      	movge	r4, r1
 800f57a:	461f      	movge	r7, r3
 800f57c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f580:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f584:	68a3      	ldr	r3, [r4, #8]
 800f586:	6861      	ldr	r1, [r4, #4]
 800f588:	eb0a 0609 	add.w	r6, sl, r9
 800f58c:	42b3      	cmp	r3, r6
 800f58e:	b085      	sub	sp, #20
 800f590:	bfb8      	it	lt
 800f592:	3101      	addlt	r1, #1
 800f594:	f7ff fe92 	bl	800f2bc <_Balloc>
 800f598:	b930      	cbnz	r0, 800f5a8 <__multiply+0x44>
 800f59a:	4602      	mov	r2, r0
 800f59c:	4b44      	ldr	r3, [pc, #272]	@ (800f6b0 <__multiply+0x14c>)
 800f59e:	4845      	ldr	r0, [pc, #276]	@ (800f6b4 <__multiply+0x150>)
 800f5a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f5a4:	f001 fde0 	bl	8011168 <__assert_func>
 800f5a8:	f100 0514 	add.w	r5, r0, #20
 800f5ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5b0:	462b      	mov	r3, r5
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	4543      	cmp	r3, r8
 800f5b6:	d321      	bcc.n	800f5fc <__multiply+0x98>
 800f5b8:	f107 0114 	add.w	r1, r7, #20
 800f5bc:	f104 0214 	add.w	r2, r4, #20
 800f5c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f5c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f5c8:	9302      	str	r3, [sp, #8]
 800f5ca:	1b13      	subs	r3, r2, r4
 800f5cc:	3b15      	subs	r3, #21
 800f5ce:	f023 0303 	bic.w	r3, r3, #3
 800f5d2:	3304      	adds	r3, #4
 800f5d4:	f104 0715 	add.w	r7, r4, #21
 800f5d8:	42ba      	cmp	r2, r7
 800f5da:	bf38      	it	cc
 800f5dc:	2304      	movcc	r3, #4
 800f5de:	9301      	str	r3, [sp, #4]
 800f5e0:	9b02      	ldr	r3, [sp, #8]
 800f5e2:	9103      	str	r1, [sp, #12]
 800f5e4:	428b      	cmp	r3, r1
 800f5e6:	d80c      	bhi.n	800f602 <__multiply+0x9e>
 800f5e8:	2e00      	cmp	r6, #0
 800f5ea:	dd03      	ble.n	800f5f4 <__multiply+0x90>
 800f5ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d05b      	beq.n	800f6ac <__multiply+0x148>
 800f5f4:	6106      	str	r6, [r0, #16]
 800f5f6:	b005      	add	sp, #20
 800f5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5fc:	f843 2b04 	str.w	r2, [r3], #4
 800f600:	e7d8      	b.n	800f5b4 <__multiply+0x50>
 800f602:	f8b1 a000 	ldrh.w	sl, [r1]
 800f606:	f1ba 0f00 	cmp.w	sl, #0
 800f60a:	d024      	beq.n	800f656 <__multiply+0xf2>
 800f60c:	f104 0e14 	add.w	lr, r4, #20
 800f610:	46a9      	mov	r9, r5
 800f612:	f04f 0c00 	mov.w	ip, #0
 800f616:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f61a:	f8d9 3000 	ldr.w	r3, [r9]
 800f61e:	fa1f fb87 	uxth.w	fp, r7
 800f622:	b29b      	uxth	r3, r3
 800f624:	fb0a 330b 	mla	r3, sl, fp, r3
 800f628:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f62c:	f8d9 7000 	ldr.w	r7, [r9]
 800f630:	4463      	add	r3, ip
 800f632:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f636:	fb0a c70b 	mla	r7, sl, fp, ip
 800f63a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f63e:	b29b      	uxth	r3, r3
 800f640:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f644:	4572      	cmp	r2, lr
 800f646:	f849 3b04 	str.w	r3, [r9], #4
 800f64a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f64e:	d8e2      	bhi.n	800f616 <__multiply+0xb2>
 800f650:	9b01      	ldr	r3, [sp, #4]
 800f652:	f845 c003 	str.w	ip, [r5, r3]
 800f656:	9b03      	ldr	r3, [sp, #12]
 800f658:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f65c:	3104      	adds	r1, #4
 800f65e:	f1b9 0f00 	cmp.w	r9, #0
 800f662:	d021      	beq.n	800f6a8 <__multiply+0x144>
 800f664:	682b      	ldr	r3, [r5, #0]
 800f666:	f104 0c14 	add.w	ip, r4, #20
 800f66a:	46ae      	mov	lr, r5
 800f66c:	f04f 0a00 	mov.w	sl, #0
 800f670:	f8bc b000 	ldrh.w	fp, [ip]
 800f674:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f678:	fb09 770b 	mla	r7, r9, fp, r7
 800f67c:	4457      	add	r7, sl
 800f67e:	b29b      	uxth	r3, r3
 800f680:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f684:	f84e 3b04 	str.w	r3, [lr], #4
 800f688:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f68c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f690:	f8be 3000 	ldrh.w	r3, [lr]
 800f694:	fb09 330a 	mla	r3, r9, sl, r3
 800f698:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f69c:	4562      	cmp	r2, ip
 800f69e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6a2:	d8e5      	bhi.n	800f670 <__multiply+0x10c>
 800f6a4:	9f01      	ldr	r7, [sp, #4]
 800f6a6:	51eb      	str	r3, [r5, r7]
 800f6a8:	3504      	adds	r5, #4
 800f6aa:	e799      	b.n	800f5e0 <__multiply+0x7c>
 800f6ac:	3e01      	subs	r6, #1
 800f6ae:	e79b      	b.n	800f5e8 <__multiply+0x84>
 800f6b0:	080123d1 	.word	0x080123d1
 800f6b4:	080123e2 	.word	0x080123e2

0800f6b8 <__pow5mult>:
 800f6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6bc:	4615      	mov	r5, r2
 800f6be:	f012 0203 	ands.w	r2, r2, #3
 800f6c2:	4607      	mov	r7, r0
 800f6c4:	460e      	mov	r6, r1
 800f6c6:	d007      	beq.n	800f6d8 <__pow5mult+0x20>
 800f6c8:	4c25      	ldr	r4, [pc, #148]	@ (800f760 <__pow5mult+0xa8>)
 800f6ca:	3a01      	subs	r2, #1
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6d2:	f7ff fe55 	bl	800f380 <__multadd>
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	10ad      	asrs	r5, r5, #2
 800f6da:	d03d      	beq.n	800f758 <__pow5mult+0xa0>
 800f6dc:	69fc      	ldr	r4, [r7, #28]
 800f6de:	b97c      	cbnz	r4, 800f700 <__pow5mult+0x48>
 800f6e0:	2010      	movs	r0, #16
 800f6e2:	f7fd fe5d 	bl	800d3a0 <malloc>
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	61f8      	str	r0, [r7, #28]
 800f6ea:	b928      	cbnz	r0, 800f6f8 <__pow5mult+0x40>
 800f6ec:	4b1d      	ldr	r3, [pc, #116]	@ (800f764 <__pow5mult+0xac>)
 800f6ee:	481e      	ldr	r0, [pc, #120]	@ (800f768 <__pow5mult+0xb0>)
 800f6f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f6f4:	f001 fd38 	bl	8011168 <__assert_func>
 800f6f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6fc:	6004      	str	r4, [r0, #0]
 800f6fe:	60c4      	str	r4, [r0, #12]
 800f700:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f708:	b94c      	cbnz	r4, 800f71e <__pow5mult+0x66>
 800f70a:	f240 2171 	movw	r1, #625	@ 0x271
 800f70e:	4638      	mov	r0, r7
 800f710:	f7ff ff12 	bl	800f538 <__i2b>
 800f714:	2300      	movs	r3, #0
 800f716:	f8c8 0008 	str.w	r0, [r8, #8]
 800f71a:	4604      	mov	r4, r0
 800f71c:	6003      	str	r3, [r0, #0]
 800f71e:	f04f 0900 	mov.w	r9, #0
 800f722:	07eb      	lsls	r3, r5, #31
 800f724:	d50a      	bpl.n	800f73c <__pow5mult+0x84>
 800f726:	4631      	mov	r1, r6
 800f728:	4622      	mov	r2, r4
 800f72a:	4638      	mov	r0, r7
 800f72c:	f7ff ff1a 	bl	800f564 <__multiply>
 800f730:	4631      	mov	r1, r6
 800f732:	4680      	mov	r8, r0
 800f734:	4638      	mov	r0, r7
 800f736:	f7ff fe01 	bl	800f33c <_Bfree>
 800f73a:	4646      	mov	r6, r8
 800f73c:	106d      	asrs	r5, r5, #1
 800f73e:	d00b      	beq.n	800f758 <__pow5mult+0xa0>
 800f740:	6820      	ldr	r0, [r4, #0]
 800f742:	b938      	cbnz	r0, 800f754 <__pow5mult+0x9c>
 800f744:	4622      	mov	r2, r4
 800f746:	4621      	mov	r1, r4
 800f748:	4638      	mov	r0, r7
 800f74a:	f7ff ff0b 	bl	800f564 <__multiply>
 800f74e:	6020      	str	r0, [r4, #0]
 800f750:	f8c0 9000 	str.w	r9, [r0]
 800f754:	4604      	mov	r4, r0
 800f756:	e7e4      	b.n	800f722 <__pow5mult+0x6a>
 800f758:	4630      	mov	r0, r6
 800f75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f75e:	bf00      	nop
 800f760:	0801243c 	.word	0x0801243c
 800f764:	08012362 	.word	0x08012362
 800f768:	080123e2 	.word	0x080123e2

0800f76c <__lshift>:
 800f76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f770:	460c      	mov	r4, r1
 800f772:	6849      	ldr	r1, [r1, #4]
 800f774:	6923      	ldr	r3, [r4, #16]
 800f776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f77a:	68a3      	ldr	r3, [r4, #8]
 800f77c:	4607      	mov	r7, r0
 800f77e:	4691      	mov	r9, r2
 800f780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f784:	f108 0601 	add.w	r6, r8, #1
 800f788:	42b3      	cmp	r3, r6
 800f78a:	db0b      	blt.n	800f7a4 <__lshift+0x38>
 800f78c:	4638      	mov	r0, r7
 800f78e:	f7ff fd95 	bl	800f2bc <_Balloc>
 800f792:	4605      	mov	r5, r0
 800f794:	b948      	cbnz	r0, 800f7aa <__lshift+0x3e>
 800f796:	4602      	mov	r2, r0
 800f798:	4b28      	ldr	r3, [pc, #160]	@ (800f83c <__lshift+0xd0>)
 800f79a:	4829      	ldr	r0, [pc, #164]	@ (800f840 <__lshift+0xd4>)
 800f79c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f7a0:	f001 fce2 	bl	8011168 <__assert_func>
 800f7a4:	3101      	adds	r1, #1
 800f7a6:	005b      	lsls	r3, r3, #1
 800f7a8:	e7ee      	b.n	800f788 <__lshift+0x1c>
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f100 0114 	add.w	r1, r0, #20
 800f7b0:	f100 0210 	add.w	r2, r0, #16
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	4553      	cmp	r3, sl
 800f7b8:	db33      	blt.n	800f822 <__lshift+0xb6>
 800f7ba:	6920      	ldr	r0, [r4, #16]
 800f7bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7c0:	f104 0314 	add.w	r3, r4, #20
 800f7c4:	f019 091f 	ands.w	r9, r9, #31
 800f7c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f7d0:	d02b      	beq.n	800f82a <__lshift+0xbe>
 800f7d2:	f1c9 0e20 	rsb	lr, r9, #32
 800f7d6:	468a      	mov	sl, r1
 800f7d8:	2200      	movs	r2, #0
 800f7da:	6818      	ldr	r0, [r3, #0]
 800f7dc:	fa00 f009 	lsl.w	r0, r0, r9
 800f7e0:	4310      	orrs	r0, r2
 800f7e2:	f84a 0b04 	str.w	r0, [sl], #4
 800f7e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7ea:	459c      	cmp	ip, r3
 800f7ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7f0:	d8f3      	bhi.n	800f7da <__lshift+0x6e>
 800f7f2:	ebac 0304 	sub.w	r3, ip, r4
 800f7f6:	3b15      	subs	r3, #21
 800f7f8:	f023 0303 	bic.w	r3, r3, #3
 800f7fc:	3304      	adds	r3, #4
 800f7fe:	f104 0015 	add.w	r0, r4, #21
 800f802:	4584      	cmp	ip, r0
 800f804:	bf38      	it	cc
 800f806:	2304      	movcc	r3, #4
 800f808:	50ca      	str	r2, [r1, r3]
 800f80a:	b10a      	cbz	r2, 800f810 <__lshift+0xa4>
 800f80c:	f108 0602 	add.w	r6, r8, #2
 800f810:	3e01      	subs	r6, #1
 800f812:	4638      	mov	r0, r7
 800f814:	612e      	str	r6, [r5, #16]
 800f816:	4621      	mov	r1, r4
 800f818:	f7ff fd90 	bl	800f33c <_Bfree>
 800f81c:	4628      	mov	r0, r5
 800f81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f822:	f842 0f04 	str.w	r0, [r2, #4]!
 800f826:	3301      	adds	r3, #1
 800f828:	e7c5      	b.n	800f7b6 <__lshift+0x4a>
 800f82a:	3904      	subs	r1, #4
 800f82c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f830:	f841 2f04 	str.w	r2, [r1, #4]!
 800f834:	459c      	cmp	ip, r3
 800f836:	d8f9      	bhi.n	800f82c <__lshift+0xc0>
 800f838:	e7ea      	b.n	800f810 <__lshift+0xa4>
 800f83a:	bf00      	nop
 800f83c:	080123d1 	.word	0x080123d1
 800f840:	080123e2 	.word	0x080123e2

0800f844 <__mcmp>:
 800f844:	690a      	ldr	r2, [r1, #16]
 800f846:	4603      	mov	r3, r0
 800f848:	6900      	ldr	r0, [r0, #16]
 800f84a:	1a80      	subs	r0, r0, r2
 800f84c:	b530      	push	{r4, r5, lr}
 800f84e:	d10e      	bne.n	800f86e <__mcmp+0x2a>
 800f850:	3314      	adds	r3, #20
 800f852:	3114      	adds	r1, #20
 800f854:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f858:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f85c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f864:	4295      	cmp	r5, r2
 800f866:	d003      	beq.n	800f870 <__mcmp+0x2c>
 800f868:	d205      	bcs.n	800f876 <__mcmp+0x32>
 800f86a:	f04f 30ff 	mov.w	r0, #4294967295
 800f86e:	bd30      	pop	{r4, r5, pc}
 800f870:	42a3      	cmp	r3, r4
 800f872:	d3f3      	bcc.n	800f85c <__mcmp+0x18>
 800f874:	e7fb      	b.n	800f86e <__mcmp+0x2a>
 800f876:	2001      	movs	r0, #1
 800f878:	e7f9      	b.n	800f86e <__mcmp+0x2a>
	...

0800f87c <__mdiff>:
 800f87c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f880:	4689      	mov	r9, r1
 800f882:	4606      	mov	r6, r0
 800f884:	4611      	mov	r1, r2
 800f886:	4648      	mov	r0, r9
 800f888:	4614      	mov	r4, r2
 800f88a:	f7ff ffdb 	bl	800f844 <__mcmp>
 800f88e:	1e05      	subs	r5, r0, #0
 800f890:	d112      	bne.n	800f8b8 <__mdiff+0x3c>
 800f892:	4629      	mov	r1, r5
 800f894:	4630      	mov	r0, r6
 800f896:	f7ff fd11 	bl	800f2bc <_Balloc>
 800f89a:	4602      	mov	r2, r0
 800f89c:	b928      	cbnz	r0, 800f8aa <__mdiff+0x2e>
 800f89e:	4b3f      	ldr	r3, [pc, #252]	@ (800f99c <__mdiff+0x120>)
 800f8a0:	f240 2137 	movw	r1, #567	@ 0x237
 800f8a4:	483e      	ldr	r0, [pc, #248]	@ (800f9a0 <__mdiff+0x124>)
 800f8a6:	f001 fc5f 	bl	8011168 <__assert_func>
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	b003      	add	sp, #12
 800f8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b8:	bfbc      	itt	lt
 800f8ba:	464b      	movlt	r3, r9
 800f8bc:	46a1      	movlt	r9, r4
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f8c4:	bfba      	itte	lt
 800f8c6:	461c      	movlt	r4, r3
 800f8c8:	2501      	movlt	r5, #1
 800f8ca:	2500      	movge	r5, #0
 800f8cc:	f7ff fcf6 	bl	800f2bc <_Balloc>
 800f8d0:	4602      	mov	r2, r0
 800f8d2:	b918      	cbnz	r0, 800f8dc <__mdiff+0x60>
 800f8d4:	4b31      	ldr	r3, [pc, #196]	@ (800f99c <__mdiff+0x120>)
 800f8d6:	f240 2145 	movw	r1, #581	@ 0x245
 800f8da:	e7e3      	b.n	800f8a4 <__mdiff+0x28>
 800f8dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f8e0:	6926      	ldr	r6, [r4, #16]
 800f8e2:	60c5      	str	r5, [r0, #12]
 800f8e4:	f109 0310 	add.w	r3, r9, #16
 800f8e8:	f109 0514 	add.w	r5, r9, #20
 800f8ec:	f104 0e14 	add.w	lr, r4, #20
 800f8f0:	f100 0b14 	add.w	fp, r0, #20
 800f8f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f8f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f8fc:	9301      	str	r3, [sp, #4]
 800f8fe:	46d9      	mov	r9, fp
 800f900:	f04f 0c00 	mov.w	ip, #0
 800f904:	9b01      	ldr	r3, [sp, #4]
 800f906:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f90a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f90e:	9301      	str	r3, [sp, #4]
 800f910:	fa1f f38a 	uxth.w	r3, sl
 800f914:	4619      	mov	r1, r3
 800f916:	b283      	uxth	r3, r0
 800f918:	1acb      	subs	r3, r1, r3
 800f91a:	0c00      	lsrs	r0, r0, #16
 800f91c:	4463      	add	r3, ip
 800f91e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f922:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f926:	b29b      	uxth	r3, r3
 800f928:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f92c:	4576      	cmp	r6, lr
 800f92e:	f849 3b04 	str.w	r3, [r9], #4
 800f932:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f936:	d8e5      	bhi.n	800f904 <__mdiff+0x88>
 800f938:	1b33      	subs	r3, r6, r4
 800f93a:	3b15      	subs	r3, #21
 800f93c:	f023 0303 	bic.w	r3, r3, #3
 800f940:	3415      	adds	r4, #21
 800f942:	3304      	adds	r3, #4
 800f944:	42a6      	cmp	r6, r4
 800f946:	bf38      	it	cc
 800f948:	2304      	movcc	r3, #4
 800f94a:	441d      	add	r5, r3
 800f94c:	445b      	add	r3, fp
 800f94e:	461e      	mov	r6, r3
 800f950:	462c      	mov	r4, r5
 800f952:	4544      	cmp	r4, r8
 800f954:	d30e      	bcc.n	800f974 <__mdiff+0xf8>
 800f956:	f108 0103 	add.w	r1, r8, #3
 800f95a:	1b49      	subs	r1, r1, r5
 800f95c:	f021 0103 	bic.w	r1, r1, #3
 800f960:	3d03      	subs	r5, #3
 800f962:	45a8      	cmp	r8, r5
 800f964:	bf38      	it	cc
 800f966:	2100      	movcc	r1, #0
 800f968:	440b      	add	r3, r1
 800f96a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f96e:	b191      	cbz	r1, 800f996 <__mdiff+0x11a>
 800f970:	6117      	str	r7, [r2, #16]
 800f972:	e79d      	b.n	800f8b0 <__mdiff+0x34>
 800f974:	f854 1b04 	ldr.w	r1, [r4], #4
 800f978:	46e6      	mov	lr, ip
 800f97a:	0c08      	lsrs	r0, r1, #16
 800f97c:	fa1c fc81 	uxtah	ip, ip, r1
 800f980:	4471      	add	r1, lr
 800f982:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f986:	b289      	uxth	r1, r1
 800f988:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f98c:	f846 1b04 	str.w	r1, [r6], #4
 800f990:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f994:	e7dd      	b.n	800f952 <__mdiff+0xd6>
 800f996:	3f01      	subs	r7, #1
 800f998:	e7e7      	b.n	800f96a <__mdiff+0xee>
 800f99a:	bf00      	nop
 800f99c:	080123d1 	.word	0x080123d1
 800f9a0:	080123e2 	.word	0x080123e2

0800f9a4 <__ulp>:
 800f9a4:	b082      	sub	sp, #8
 800f9a6:	ed8d 0b00 	vstr	d0, [sp]
 800f9aa:	9a01      	ldr	r2, [sp, #4]
 800f9ac:	4b0f      	ldr	r3, [pc, #60]	@ (800f9ec <__ulp+0x48>)
 800f9ae:	4013      	ands	r3, r2
 800f9b0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	dc08      	bgt.n	800f9ca <__ulp+0x26>
 800f9b8:	425b      	negs	r3, r3
 800f9ba:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f9be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f9c2:	da04      	bge.n	800f9ce <__ulp+0x2a>
 800f9c4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f9c8:	4113      	asrs	r3, r2
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	e008      	b.n	800f9e0 <__ulp+0x3c>
 800f9ce:	f1a2 0314 	sub.w	r3, r2, #20
 800f9d2:	2b1e      	cmp	r3, #30
 800f9d4:	bfda      	itte	le
 800f9d6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f9da:	40da      	lsrle	r2, r3
 800f9dc:	2201      	movgt	r2, #1
 800f9de:	2300      	movs	r3, #0
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	ec41 0b10 	vmov	d0, r0, r1
 800f9e8:	b002      	add	sp, #8
 800f9ea:	4770      	bx	lr
 800f9ec:	7ff00000 	.word	0x7ff00000

0800f9f0 <__b2d>:
 800f9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9f4:	6906      	ldr	r6, [r0, #16]
 800f9f6:	f100 0814 	add.w	r8, r0, #20
 800f9fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f9fe:	1f37      	subs	r7, r6, #4
 800fa00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fa04:	4610      	mov	r0, r2
 800fa06:	f7ff fd4b 	bl	800f4a0 <__hi0bits>
 800fa0a:	f1c0 0320 	rsb	r3, r0, #32
 800fa0e:	280a      	cmp	r0, #10
 800fa10:	600b      	str	r3, [r1, #0]
 800fa12:	491b      	ldr	r1, [pc, #108]	@ (800fa80 <__b2d+0x90>)
 800fa14:	dc15      	bgt.n	800fa42 <__b2d+0x52>
 800fa16:	f1c0 0c0b 	rsb	ip, r0, #11
 800fa1a:	fa22 f30c 	lsr.w	r3, r2, ip
 800fa1e:	45b8      	cmp	r8, r7
 800fa20:	ea43 0501 	orr.w	r5, r3, r1
 800fa24:	bf34      	ite	cc
 800fa26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa2a:	2300      	movcs	r3, #0
 800fa2c:	3015      	adds	r0, #21
 800fa2e:	fa02 f000 	lsl.w	r0, r2, r0
 800fa32:	fa23 f30c 	lsr.w	r3, r3, ip
 800fa36:	4303      	orrs	r3, r0
 800fa38:	461c      	mov	r4, r3
 800fa3a:	ec45 4b10 	vmov	d0, r4, r5
 800fa3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa42:	45b8      	cmp	r8, r7
 800fa44:	bf3a      	itte	cc
 800fa46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800fa4a:	f1a6 0708 	subcc.w	r7, r6, #8
 800fa4e:	2300      	movcs	r3, #0
 800fa50:	380b      	subs	r0, #11
 800fa52:	d012      	beq.n	800fa7a <__b2d+0x8a>
 800fa54:	f1c0 0120 	rsb	r1, r0, #32
 800fa58:	fa23 f401 	lsr.w	r4, r3, r1
 800fa5c:	4082      	lsls	r2, r0
 800fa5e:	4322      	orrs	r2, r4
 800fa60:	4547      	cmp	r7, r8
 800fa62:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800fa66:	bf8c      	ite	hi
 800fa68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800fa6c:	2200      	movls	r2, #0
 800fa6e:	4083      	lsls	r3, r0
 800fa70:	40ca      	lsrs	r2, r1
 800fa72:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800fa76:	4313      	orrs	r3, r2
 800fa78:	e7de      	b.n	800fa38 <__b2d+0x48>
 800fa7a:	ea42 0501 	orr.w	r5, r2, r1
 800fa7e:	e7db      	b.n	800fa38 <__b2d+0x48>
 800fa80:	3ff00000 	.word	0x3ff00000

0800fa84 <__d2b>:
 800fa84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa88:	460f      	mov	r7, r1
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	ec59 8b10 	vmov	r8, r9, d0
 800fa90:	4616      	mov	r6, r2
 800fa92:	f7ff fc13 	bl	800f2bc <_Balloc>
 800fa96:	4604      	mov	r4, r0
 800fa98:	b930      	cbnz	r0, 800faa8 <__d2b+0x24>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	4b23      	ldr	r3, [pc, #140]	@ (800fb2c <__d2b+0xa8>)
 800fa9e:	4824      	ldr	r0, [pc, #144]	@ (800fb30 <__d2b+0xac>)
 800faa0:	f240 310f 	movw	r1, #783	@ 0x30f
 800faa4:	f001 fb60 	bl	8011168 <__assert_func>
 800faa8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800faac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fab0:	b10d      	cbz	r5, 800fab6 <__d2b+0x32>
 800fab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fab6:	9301      	str	r3, [sp, #4]
 800fab8:	f1b8 0300 	subs.w	r3, r8, #0
 800fabc:	d023      	beq.n	800fb06 <__d2b+0x82>
 800fabe:	4668      	mov	r0, sp
 800fac0:	9300      	str	r3, [sp, #0]
 800fac2:	f7ff fd0c 	bl	800f4de <__lo0bits>
 800fac6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800faca:	b1d0      	cbz	r0, 800fb02 <__d2b+0x7e>
 800facc:	f1c0 0320 	rsb	r3, r0, #32
 800fad0:	fa02 f303 	lsl.w	r3, r2, r3
 800fad4:	430b      	orrs	r3, r1
 800fad6:	40c2      	lsrs	r2, r0
 800fad8:	6163      	str	r3, [r4, #20]
 800fada:	9201      	str	r2, [sp, #4]
 800fadc:	9b01      	ldr	r3, [sp, #4]
 800fade:	61a3      	str	r3, [r4, #24]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	bf0c      	ite	eq
 800fae4:	2201      	moveq	r2, #1
 800fae6:	2202      	movne	r2, #2
 800fae8:	6122      	str	r2, [r4, #16]
 800faea:	b1a5      	cbz	r5, 800fb16 <__d2b+0x92>
 800faec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800faf0:	4405      	add	r5, r0
 800faf2:	603d      	str	r5, [r7, #0]
 800faf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800faf8:	6030      	str	r0, [r6, #0]
 800fafa:	4620      	mov	r0, r4
 800fafc:	b003      	add	sp, #12
 800fafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb02:	6161      	str	r1, [r4, #20]
 800fb04:	e7ea      	b.n	800fadc <__d2b+0x58>
 800fb06:	a801      	add	r0, sp, #4
 800fb08:	f7ff fce9 	bl	800f4de <__lo0bits>
 800fb0c:	9b01      	ldr	r3, [sp, #4]
 800fb0e:	6163      	str	r3, [r4, #20]
 800fb10:	3020      	adds	r0, #32
 800fb12:	2201      	movs	r2, #1
 800fb14:	e7e8      	b.n	800fae8 <__d2b+0x64>
 800fb16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb1e:	6038      	str	r0, [r7, #0]
 800fb20:	6918      	ldr	r0, [r3, #16]
 800fb22:	f7ff fcbd 	bl	800f4a0 <__hi0bits>
 800fb26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb2a:	e7e5      	b.n	800faf8 <__d2b+0x74>
 800fb2c:	080123d1 	.word	0x080123d1
 800fb30:	080123e2 	.word	0x080123e2

0800fb34 <__ratio>:
 800fb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb38:	b085      	sub	sp, #20
 800fb3a:	e9cd 1000 	strd	r1, r0, [sp]
 800fb3e:	a902      	add	r1, sp, #8
 800fb40:	f7ff ff56 	bl	800f9f0 <__b2d>
 800fb44:	9800      	ldr	r0, [sp, #0]
 800fb46:	a903      	add	r1, sp, #12
 800fb48:	ec55 4b10 	vmov	r4, r5, d0
 800fb4c:	f7ff ff50 	bl	800f9f0 <__b2d>
 800fb50:	9b01      	ldr	r3, [sp, #4]
 800fb52:	6919      	ldr	r1, [r3, #16]
 800fb54:	9b00      	ldr	r3, [sp, #0]
 800fb56:	691b      	ldr	r3, [r3, #16]
 800fb58:	1ac9      	subs	r1, r1, r3
 800fb5a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fb5e:	1a9b      	subs	r3, r3, r2
 800fb60:	ec5b ab10 	vmov	sl, fp, d0
 800fb64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	bfce      	itee	gt
 800fb6c:	462a      	movgt	r2, r5
 800fb6e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb72:	465a      	movle	r2, fp
 800fb74:	462f      	mov	r7, r5
 800fb76:	46d9      	mov	r9, fp
 800fb78:	bfcc      	ite	gt
 800fb7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb7e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fb82:	464b      	mov	r3, r9
 800fb84:	4652      	mov	r2, sl
 800fb86:	4620      	mov	r0, r4
 800fb88:	4639      	mov	r1, r7
 800fb8a:	f7f0 fe5f 	bl	800084c <__aeabi_ddiv>
 800fb8e:	ec41 0b10 	vmov	d0, r0, r1
 800fb92:	b005      	add	sp, #20
 800fb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb98 <__copybits>:
 800fb98:	3901      	subs	r1, #1
 800fb9a:	b570      	push	{r4, r5, r6, lr}
 800fb9c:	1149      	asrs	r1, r1, #5
 800fb9e:	6914      	ldr	r4, [r2, #16]
 800fba0:	3101      	adds	r1, #1
 800fba2:	f102 0314 	add.w	r3, r2, #20
 800fba6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fbaa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fbae:	1f05      	subs	r5, r0, #4
 800fbb0:	42a3      	cmp	r3, r4
 800fbb2:	d30c      	bcc.n	800fbce <__copybits+0x36>
 800fbb4:	1aa3      	subs	r3, r4, r2
 800fbb6:	3b11      	subs	r3, #17
 800fbb8:	f023 0303 	bic.w	r3, r3, #3
 800fbbc:	3211      	adds	r2, #17
 800fbbe:	42a2      	cmp	r2, r4
 800fbc0:	bf88      	it	hi
 800fbc2:	2300      	movhi	r3, #0
 800fbc4:	4418      	add	r0, r3
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	4288      	cmp	r0, r1
 800fbca:	d305      	bcc.n	800fbd8 <__copybits+0x40>
 800fbcc:	bd70      	pop	{r4, r5, r6, pc}
 800fbce:	f853 6b04 	ldr.w	r6, [r3], #4
 800fbd2:	f845 6f04 	str.w	r6, [r5, #4]!
 800fbd6:	e7eb      	b.n	800fbb0 <__copybits+0x18>
 800fbd8:	f840 3b04 	str.w	r3, [r0], #4
 800fbdc:	e7f4      	b.n	800fbc8 <__copybits+0x30>

0800fbde <__any_on>:
 800fbde:	f100 0214 	add.w	r2, r0, #20
 800fbe2:	6900      	ldr	r0, [r0, #16]
 800fbe4:	114b      	asrs	r3, r1, #5
 800fbe6:	4298      	cmp	r0, r3
 800fbe8:	b510      	push	{r4, lr}
 800fbea:	db11      	blt.n	800fc10 <__any_on+0x32>
 800fbec:	dd0a      	ble.n	800fc04 <__any_on+0x26>
 800fbee:	f011 011f 	ands.w	r1, r1, #31
 800fbf2:	d007      	beq.n	800fc04 <__any_on+0x26>
 800fbf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fbf8:	fa24 f001 	lsr.w	r0, r4, r1
 800fbfc:	fa00 f101 	lsl.w	r1, r0, r1
 800fc00:	428c      	cmp	r4, r1
 800fc02:	d10b      	bne.n	800fc1c <__any_on+0x3e>
 800fc04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d803      	bhi.n	800fc14 <__any_on+0x36>
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	bd10      	pop	{r4, pc}
 800fc10:	4603      	mov	r3, r0
 800fc12:	e7f7      	b.n	800fc04 <__any_on+0x26>
 800fc14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fc18:	2900      	cmp	r1, #0
 800fc1a:	d0f5      	beq.n	800fc08 <__any_on+0x2a>
 800fc1c:	2001      	movs	r0, #1
 800fc1e:	e7f6      	b.n	800fc0e <__any_on+0x30>

0800fc20 <sulp>:
 800fc20:	b570      	push	{r4, r5, r6, lr}
 800fc22:	4604      	mov	r4, r0
 800fc24:	460d      	mov	r5, r1
 800fc26:	ec45 4b10 	vmov	d0, r4, r5
 800fc2a:	4616      	mov	r6, r2
 800fc2c:	f7ff feba 	bl	800f9a4 <__ulp>
 800fc30:	ec51 0b10 	vmov	r0, r1, d0
 800fc34:	b17e      	cbz	r6, 800fc56 <sulp+0x36>
 800fc36:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fc3a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	dd09      	ble.n	800fc56 <sulp+0x36>
 800fc42:	051b      	lsls	r3, r3, #20
 800fc44:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800fc48:	2400      	movs	r4, #0
 800fc4a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800fc4e:	4622      	mov	r2, r4
 800fc50:	462b      	mov	r3, r5
 800fc52:	f7f0 fcd1 	bl	80005f8 <__aeabi_dmul>
 800fc56:	ec41 0b10 	vmov	d0, r0, r1
 800fc5a:	bd70      	pop	{r4, r5, r6, pc}
 800fc5c:	0000      	movs	r0, r0
	...

0800fc60 <_strtod_l>:
 800fc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc64:	b09f      	sub	sp, #124	@ 0x7c
 800fc66:	460c      	mov	r4, r1
 800fc68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800fc6e:	9005      	str	r0, [sp, #20]
 800fc70:	f04f 0a00 	mov.w	sl, #0
 800fc74:	f04f 0b00 	mov.w	fp, #0
 800fc78:	460a      	mov	r2, r1
 800fc7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fc7c:	7811      	ldrb	r1, [r2, #0]
 800fc7e:	292b      	cmp	r1, #43	@ 0x2b
 800fc80:	d04a      	beq.n	800fd18 <_strtod_l+0xb8>
 800fc82:	d838      	bhi.n	800fcf6 <_strtod_l+0x96>
 800fc84:	290d      	cmp	r1, #13
 800fc86:	d832      	bhi.n	800fcee <_strtod_l+0x8e>
 800fc88:	2908      	cmp	r1, #8
 800fc8a:	d832      	bhi.n	800fcf2 <_strtod_l+0x92>
 800fc8c:	2900      	cmp	r1, #0
 800fc8e:	d03b      	beq.n	800fd08 <_strtod_l+0xa8>
 800fc90:	2200      	movs	r2, #0
 800fc92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fc94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800fc96:	782a      	ldrb	r2, [r5, #0]
 800fc98:	2a30      	cmp	r2, #48	@ 0x30
 800fc9a:	f040 80b3 	bne.w	800fe04 <_strtod_l+0x1a4>
 800fc9e:	786a      	ldrb	r2, [r5, #1]
 800fca0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fca4:	2a58      	cmp	r2, #88	@ 0x58
 800fca6:	d16e      	bne.n	800fd86 <_strtod_l+0x126>
 800fca8:	9302      	str	r3, [sp, #8]
 800fcaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcac:	9301      	str	r3, [sp, #4]
 800fcae:	ab1a      	add	r3, sp, #104	@ 0x68
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	4a8e      	ldr	r2, [pc, #568]	@ (800feec <_strtod_l+0x28c>)
 800fcb4:	9805      	ldr	r0, [sp, #20]
 800fcb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800fcb8:	a919      	add	r1, sp, #100	@ 0x64
 800fcba:	f001 faef 	bl	801129c <__gethex>
 800fcbe:	f010 060f 	ands.w	r6, r0, #15
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	d005      	beq.n	800fcd2 <_strtod_l+0x72>
 800fcc6:	2e06      	cmp	r6, #6
 800fcc8:	d128      	bne.n	800fd1c <_strtod_l+0xbc>
 800fcca:	3501      	adds	r5, #1
 800fccc:	2300      	movs	r3, #0
 800fcce:	9519      	str	r5, [sp, #100]	@ 0x64
 800fcd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fcd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f040 858e 	bne.w	80107f6 <_strtod_l+0xb96>
 800fcda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fcdc:	b1cb      	cbz	r3, 800fd12 <_strtod_l+0xb2>
 800fcde:	4652      	mov	r2, sl
 800fce0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800fce4:	ec43 2b10 	vmov	d0, r2, r3
 800fce8:	b01f      	add	sp, #124	@ 0x7c
 800fcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcee:	2920      	cmp	r1, #32
 800fcf0:	d1ce      	bne.n	800fc90 <_strtod_l+0x30>
 800fcf2:	3201      	adds	r2, #1
 800fcf4:	e7c1      	b.n	800fc7a <_strtod_l+0x1a>
 800fcf6:	292d      	cmp	r1, #45	@ 0x2d
 800fcf8:	d1ca      	bne.n	800fc90 <_strtod_l+0x30>
 800fcfa:	2101      	movs	r1, #1
 800fcfc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fcfe:	1c51      	adds	r1, r2, #1
 800fd00:	9119      	str	r1, [sp, #100]	@ 0x64
 800fd02:	7852      	ldrb	r2, [r2, #1]
 800fd04:	2a00      	cmp	r2, #0
 800fd06:	d1c5      	bne.n	800fc94 <_strtod_l+0x34>
 800fd08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f040 8570 	bne.w	80107f2 <_strtod_l+0xb92>
 800fd12:	4652      	mov	r2, sl
 800fd14:	465b      	mov	r3, fp
 800fd16:	e7e5      	b.n	800fce4 <_strtod_l+0x84>
 800fd18:	2100      	movs	r1, #0
 800fd1a:	e7ef      	b.n	800fcfc <_strtod_l+0x9c>
 800fd1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fd1e:	b13a      	cbz	r2, 800fd30 <_strtod_l+0xd0>
 800fd20:	2135      	movs	r1, #53	@ 0x35
 800fd22:	a81c      	add	r0, sp, #112	@ 0x70
 800fd24:	f7ff ff38 	bl	800fb98 <__copybits>
 800fd28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd2a:	9805      	ldr	r0, [sp, #20]
 800fd2c:	f7ff fb06 	bl	800f33c <_Bfree>
 800fd30:	3e01      	subs	r6, #1
 800fd32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800fd34:	2e04      	cmp	r6, #4
 800fd36:	d806      	bhi.n	800fd46 <_strtod_l+0xe6>
 800fd38:	e8df f006 	tbb	[pc, r6]
 800fd3c:	201d0314 	.word	0x201d0314
 800fd40:	14          	.byte	0x14
 800fd41:	00          	.byte	0x00
 800fd42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800fd46:	05e1      	lsls	r1, r4, #23
 800fd48:	bf48      	it	mi
 800fd4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800fd4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fd52:	0d1b      	lsrs	r3, r3, #20
 800fd54:	051b      	lsls	r3, r3, #20
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1bb      	bne.n	800fcd2 <_strtod_l+0x72>
 800fd5a:	f7fe fbe5 	bl	800e528 <__errno>
 800fd5e:	2322      	movs	r3, #34	@ 0x22
 800fd60:	6003      	str	r3, [r0, #0]
 800fd62:	e7b6      	b.n	800fcd2 <_strtod_l+0x72>
 800fd64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800fd68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800fd6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800fd70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fd74:	e7e7      	b.n	800fd46 <_strtod_l+0xe6>
 800fd76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800fef4 <_strtod_l+0x294>
 800fd7a:	e7e4      	b.n	800fd46 <_strtod_l+0xe6>
 800fd7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800fd80:	f04f 3aff 	mov.w	sl, #4294967295
 800fd84:	e7df      	b.n	800fd46 <_strtod_l+0xe6>
 800fd86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd88:	1c5a      	adds	r2, r3, #1
 800fd8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800fd8c:	785b      	ldrb	r3, [r3, #1]
 800fd8e:	2b30      	cmp	r3, #48	@ 0x30
 800fd90:	d0f9      	beq.n	800fd86 <_strtod_l+0x126>
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d09d      	beq.n	800fcd2 <_strtod_l+0x72>
 800fd96:	2301      	movs	r3, #1
 800fd98:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800fd9e:	2300      	movs	r3, #0
 800fda0:	9308      	str	r3, [sp, #32]
 800fda2:	930a      	str	r3, [sp, #40]	@ 0x28
 800fda4:	461f      	mov	r7, r3
 800fda6:	220a      	movs	r2, #10
 800fda8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800fdaa:	7805      	ldrb	r5, [r0, #0]
 800fdac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800fdb0:	b2d9      	uxtb	r1, r3
 800fdb2:	2909      	cmp	r1, #9
 800fdb4:	d928      	bls.n	800fe08 <_strtod_l+0x1a8>
 800fdb6:	494e      	ldr	r1, [pc, #312]	@ (800fef0 <_strtod_l+0x290>)
 800fdb8:	2201      	movs	r2, #1
 800fdba:	f001 f9ab 	bl	8011114 <strncmp>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d032      	beq.n	800fe28 <_strtod_l+0x1c8>
 800fdc2:	2000      	movs	r0, #0
 800fdc4:	462a      	mov	r2, r5
 800fdc6:	4681      	mov	r9, r0
 800fdc8:	463d      	mov	r5, r7
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2a65      	cmp	r2, #101	@ 0x65
 800fdce:	d001      	beq.n	800fdd4 <_strtod_l+0x174>
 800fdd0:	2a45      	cmp	r2, #69	@ 0x45
 800fdd2:	d114      	bne.n	800fdfe <_strtod_l+0x19e>
 800fdd4:	b91d      	cbnz	r5, 800fdde <_strtod_l+0x17e>
 800fdd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdd8:	4302      	orrs	r2, r0
 800fdda:	d095      	beq.n	800fd08 <_strtod_l+0xa8>
 800fddc:	2500      	movs	r5, #0
 800fdde:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800fde0:	1c62      	adds	r2, r4, #1
 800fde2:	9219      	str	r2, [sp, #100]	@ 0x64
 800fde4:	7862      	ldrb	r2, [r4, #1]
 800fde6:	2a2b      	cmp	r2, #43	@ 0x2b
 800fde8:	d077      	beq.n	800feda <_strtod_l+0x27a>
 800fdea:	2a2d      	cmp	r2, #45	@ 0x2d
 800fdec:	d07b      	beq.n	800fee6 <_strtod_l+0x286>
 800fdee:	f04f 0c00 	mov.w	ip, #0
 800fdf2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800fdf6:	2909      	cmp	r1, #9
 800fdf8:	f240 8082 	bls.w	800ff00 <_strtod_l+0x2a0>
 800fdfc:	9419      	str	r4, [sp, #100]	@ 0x64
 800fdfe:	f04f 0800 	mov.w	r8, #0
 800fe02:	e0a2      	b.n	800ff4a <_strtod_l+0x2ea>
 800fe04:	2300      	movs	r3, #0
 800fe06:	e7c7      	b.n	800fd98 <_strtod_l+0x138>
 800fe08:	2f08      	cmp	r7, #8
 800fe0a:	bfd5      	itete	le
 800fe0c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800fe0e:	9908      	ldrgt	r1, [sp, #32]
 800fe10:	fb02 3301 	mlale	r3, r2, r1, r3
 800fe14:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fe18:	f100 0001 	add.w	r0, r0, #1
 800fe1c:	bfd4      	ite	le
 800fe1e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800fe20:	9308      	strgt	r3, [sp, #32]
 800fe22:	3701      	adds	r7, #1
 800fe24:	9019      	str	r0, [sp, #100]	@ 0x64
 800fe26:	e7bf      	b.n	800fda8 <_strtod_l+0x148>
 800fe28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe2a:	1c5a      	adds	r2, r3, #1
 800fe2c:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe2e:	785a      	ldrb	r2, [r3, #1]
 800fe30:	b37f      	cbz	r7, 800fe92 <_strtod_l+0x232>
 800fe32:	4681      	mov	r9, r0
 800fe34:	463d      	mov	r5, r7
 800fe36:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800fe3a:	2b09      	cmp	r3, #9
 800fe3c:	d912      	bls.n	800fe64 <_strtod_l+0x204>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	e7c4      	b.n	800fdcc <_strtod_l+0x16c>
 800fe42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe44:	1c5a      	adds	r2, r3, #1
 800fe46:	9219      	str	r2, [sp, #100]	@ 0x64
 800fe48:	785a      	ldrb	r2, [r3, #1]
 800fe4a:	3001      	adds	r0, #1
 800fe4c:	2a30      	cmp	r2, #48	@ 0x30
 800fe4e:	d0f8      	beq.n	800fe42 <_strtod_l+0x1e2>
 800fe50:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800fe54:	2b08      	cmp	r3, #8
 800fe56:	f200 84d3 	bhi.w	8010800 <_strtod_l+0xba0>
 800fe5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fe5c:	930c      	str	r3, [sp, #48]	@ 0x30
 800fe5e:	4681      	mov	r9, r0
 800fe60:	2000      	movs	r0, #0
 800fe62:	4605      	mov	r5, r0
 800fe64:	3a30      	subs	r2, #48	@ 0x30
 800fe66:	f100 0301 	add.w	r3, r0, #1
 800fe6a:	d02a      	beq.n	800fec2 <_strtod_l+0x262>
 800fe6c:	4499      	add	r9, r3
 800fe6e:	eb00 0c05 	add.w	ip, r0, r5
 800fe72:	462b      	mov	r3, r5
 800fe74:	210a      	movs	r1, #10
 800fe76:	4563      	cmp	r3, ip
 800fe78:	d10d      	bne.n	800fe96 <_strtod_l+0x236>
 800fe7a:	1c69      	adds	r1, r5, #1
 800fe7c:	4401      	add	r1, r0
 800fe7e:	4428      	add	r0, r5
 800fe80:	2808      	cmp	r0, #8
 800fe82:	dc16      	bgt.n	800feb2 <_strtod_l+0x252>
 800fe84:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fe86:	230a      	movs	r3, #10
 800fe88:	fb03 2300 	mla	r3, r3, r0, r2
 800fe8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800fe8e:	2300      	movs	r3, #0
 800fe90:	e018      	b.n	800fec4 <_strtod_l+0x264>
 800fe92:	4638      	mov	r0, r7
 800fe94:	e7da      	b.n	800fe4c <_strtod_l+0x1ec>
 800fe96:	2b08      	cmp	r3, #8
 800fe98:	f103 0301 	add.w	r3, r3, #1
 800fe9c:	dc03      	bgt.n	800fea6 <_strtod_l+0x246>
 800fe9e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fea0:	434e      	muls	r6, r1
 800fea2:	960a      	str	r6, [sp, #40]	@ 0x28
 800fea4:	e7e7      	b.n	800fe76 <_strtod_l+0x216>
 800fea6:	2b10      	cmp	r3, #16
 800fea8:	bfde      	ittt	le
 800feaa:	9e08      	ldrle	r6, [sp, #32]
 800feac:	434e      	mulle	r6, r1
 800feae:	9608      	strle	r6, [sp, #32]
 800feb0:	e7e1      	b.n	800fe76 <_strtod_l+0x216>
 800feb2:	280f      	cmp	r0, #15
 800feb4:	dceb      	bgt.n	800fe8e <_strtod_l+0x22e>
 800feb6:	9808      	ldr	r0, [sp, #32]
 800feb8:	230a      	movs	r3, #10
 800feba:	fb03 2300 	mla	r3, r3, r0, r2
 800febe:	9308      	str	r3, [sp, #32]
 800fec0:	e7e5      	b.n	800fe8e <_strtod_l+0x22e>
 800fec2:	4629      	mov	r1, r5
 800fec4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fec6:	1c50      	adds	r0, r2, #1
 800fec8:	9019      	str	r0, [sp, #100]	@ 0x64
 800feca:	7852      	ldrb	r2, [r2, #1]
 800fecc:	4618      	mov	r0, r3
 800fece:	460d      	mov	r5, r1
 800fed0:	e7b1      	b.n	800fe36 <_strtod_l+0x1d6>
 800fed2:	f04f 0900 	mov.w	r9, #0
 800fed6:	2301      	movs	r3, #1
 800fed8:	e77d      	b.n	800fdd6 <_strtod_l+0x176>
 800feda:	f04f 0c00 	mov.w	ip, #0
 800fede:	1ca2      	adds	r2, r4, #2
 800fee0:	9219      	str	r2, [sp, #100]	@ 0x64
 800fee2:	78a2      	ldrb	r2, [r4, #2]
 800fee4:	e785      	b.n	800fdf2 <_strtod_l+0x192>
 800fee6:	f04f 0c01 	mov.w	ip, #1
 800feea:	e7f8      	b.n	800fede <_strtod_l+0x27e>
 800feec:	08012550 	.word	0x08012550
 800fef0:	08012538 	.word	0x08012538
 800fef4:	7ff00000 	.word	0x7ff00000
 800fef8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fefa:	1c51      	adds	r1, r2, #1
 800fefc:	9119      	str	r1, [sp, #100]	@ 0x64
 800fefe:	7852      	ldrb	r2, [r2, #1]
 800ff00:	2a30      	cmp	r2, #48	@ 0x30
 800ff02:	d0f9      	beq.n	800fef8 <_strtod_l+0x298>
 800ff04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ff08:	2908      	cmp	r1, #8
 800ff0a:	f63f af78 	bhi.w	800fdfe <_strtod_l+0x19e>
 800ff0e:	3a30      	subs	r2, #48	@ 0x30
 800ff10:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff14:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ff16:	f04f 080a 	mov.w	r8, #10
 800ff1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ff1c:	1c56      	adds	r6, r2, #1
 800ff1e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ff20:	7852      	ldrb	r2, [r2, #1]
 800ff22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ff26:	f1be 0f09 	cmp.w	lr, #9
 800ff2a:	d939      	bls.n	800ffa0 <_strtod_l+0x340>
 800ff2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ff2e:	1a76      	subs	r6, r6, r1
 800ff30:	2e08      	cmp	r6, #8
 800ff32:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ff36:	dc03      	bgt.n	800ff40 <_strtod_l+0x2e0>
 800ff38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ff3a:	4588      	cmp	r8, r1
 800ff3c:	bfa8      	it	ge
 800ff3e:	4688      	movge	r8, r1
 800ff40:	f1bc 0f00 	cmp.w	ip, #0
 800ff44:	d001      	beq.n	800ff4a <_strtod_l+0x2ea>
 800ff46:	f1c8 0800 	rsb	r8, r8, #0
 800ff4a:	2d00      	cmp	r5, #0
 800ff4c:	d14e      	bne.n	800ffec <_strtod_l+0x38c>
 800ff4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff50:	4308      	orrs	r0, r1
 800ff52:	f47f aebe 	bne.w	800fcd2 <_strtod_l+0x72>
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	f47f aed6 	bne.w	800fd08 <_strtod_l+0xa8>
 800ff5c:	2a69      	cmp	r2, #105	@ 0x69
 800ff5e:	d028      	beq.n	800ffb2 <_strtod_l+0x352>
 800ff60:	dc25      	bgt.n	800ffae <_strtod_l+0x34e>
 800ff62:	2a49      	cmp	r2, #73	@ 0x49
 800ff64:	d025      	beq.n	800ffb2 <_strtod_l+0x352>
 800ff66:	2a4e      	cmp	r2, #78	@ 0x4e
 800ff68:	f47f aece 	bne.w	800fd08 <_strtod_l+0xa8>
 800ff6c:	499b      	ldr	r1, [pc, #620]	@ (80101dc <_strtod_l+0x57c>)
 800ff6e:	a819      	add	r0, sp, #100	@ 0x64
 800ff70:	f001 fbb6 	bl	80116e0 <__match>
 800ff74:	2800      	cmp	r0, #0
 800ff76:	f43f aec7 	beq.w	800fd08 <_strtod_l+0xa8>
 800ff7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ff7c:	781b      	ldrb	r3, [r3, #0]
 800ff7e:	2b28      	cmp	r3, #40	@ 0x28
 800ff80:	d12e      	bne.n	800ffe0 <_strtod_l+0x380>
 800ff82:	4997      	ldr	r1, [pc, #604]	@ (80101e0 <_strtod_l+0x580>)
 800ff84:	aa1c      	add	r2, sp, #112	@ 0x70
 800ff86:	a819      	add	r0, sp, #100	@ 0x64
 800ff88:	f001 fbbe 	bl	8011708 <__hexnan>
 800ff8c:	2805      	cmp	r0, #5
 800ff8e:	d127      	bne.n	800ffe0 <_strtod_l+0x380>
 800ff90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ff92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ff96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ff9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ff9e:	e698      	b.n	800fcd2 <_strtod_l+0x72>
 800ffa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ffa2:	fb08 2101 	mla	r1, r8, r1, r2
 800ffa6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ffaa:	920e      	str	r2, [sp, #56]	@ 0x38
 800ffac:	e7b5      	b.n	800ff1a <_strtod_l+0x2ba>
 800ffae:	2a6e      	cmp	r2, #110	@ 0x6e
 800ffb0:	e7da      	b.n	800ff68 <_strtod_l+0x308>
 800ffb2:	498c      	ldr	r1, [pc, #560]	@ (80101e4 <_strtod_l+0x584>)
 800ffb4:	a819      	add	r0, sp, #100	@ 0x64
 800ffb6:	f001 fb93 	bl	80116e0 <__match>
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	f43f aea4 	beq.w	800fd08 <_strtod_l+0xa8>
 800ffc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffc2:	4989      	ldr	r1, [pc, #548]	@ (80101e8 <_strtod_l+0x588>)
 800ffc4:	3b01      	subs	r3, #1
 800ffc6:	a819      	add	r0, sp, #100	@ 0x64
 800ffc8:	9319      	str	r3, [sp, #100]	@ 0x64
 800ffca:	f001 fb89 	bl	80116e0 <__match>
 800ffce:	b910      	cbnz	r0, 800ffd6 <_strtod_l+0x376>
 800ffd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	9319      	str	r3, [sp, #100]	@ 0x64
 800ffd6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80101f8 <_strtod_l+0x598>
 800ffda:	f04f 0a00 	mov.w	sl, #0
 800ffde:	e678      	b.n	800fcd2 <_strtod_l+0x72>
 800ffe0:	4882      	ldr	r0, [pc, #520]	@ (80101ec <_strtod_l+0x58c>)
 800ffe2:	f001 f8b9 	bl	8011158 <nan>
 800ffe6:	ec5b ab10 	vmov	sl, fp, d0
 800ffea:	e672      	b.n	800fcd2 <_strtod_l+0x72>
 800ffec:	eba8 0309 	sub.w	r3, r8, r9
 800fff0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fff2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fff4:	2f00      	cmp	r7, #0
 800fff6:	bf08      	it	eq
 800fff8:	462f      	moveq	r7, r5
 800fffa:	2d10      	cmp	r5, #16
 800fffc:	462c      	mov	r4, r5
 800fffe:	bfa8      	it	ge
 8010000:	2410      	movge	r4, #16
 8010002:	f7f0 fa7f 	bl	8000504 <__aeabi_ui2d>
 8010006:	2d09      	cmp	r5, #9
 8010008:	4682      	mov	sl, r0
 801000a:	468b      	mov	fp, r1
 801000c:	dc13      	bgt.n	8010036 <_strtod_l+0x3d6>
 801000e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010010:	2b00      	cmp	r3, #0
 8010012:	f43f ae5e 	beq.w	800fcd2 <_strtod_l+0x72>
 8010016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010018:	dd78      	ble.n	801010c <_strtod_l+0x4ac>
 801001a:	2b16      	cmp	r3, #22
 801001c:	dc5f      	bgt.n	80100de <_strtod_l+0x47e>
 801001e:	4974      	ldr	r1, [pc, #464]	@ (80101f0 <_strtod_l+0x590>)
 8010020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010024:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010028:	4652      	mov	r2, sl
 801002a:	465b      	mov	r3, fp
 801002c:	f7f0 fae4 	bl	80005f8 <__aeabi_dmul>
 8010030:	4682      	mov	sl, r0
 8010032:	468b      	mov	fp, r1
 8010034:	e64d      	b.n	800fcd2 <_strtod_l+0x72>
 8010036:	4b6e      	ldr	r3, [pc, #440]	@ (80101f0 <_strtod_l+0x590>)
 8010038:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801003c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010040:	f7f0 fada 	bl	80005f8 <__aeabi_dmul>
 8010044:	4682      	mov	sl, r0
 8010046:	9808      	ldr	r0, [sp, #32]
 8010048:	468b      	mov	fp, r1
 801004a:	f7f0 fa5b 	bl	8000504 <__aeabi_ui2d>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4650      	mov	r0, sl
 8010054:	4659      	mov	r1, fp
 8010056:	f7f0 f919 	bl	800028c <__adddf3>
 801005a:	2d0f      	cmp	r5, #15
 801005c:	4682      	mov	sl, r0
 801005e:	468b      	mov	fp, r1
 8010060:	ddd5      	ble.n	801000e <_strtod_l+0x3ae>
 8010062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010064:	1b2c      	subs	r4, r5, r4
 8010066:	441c      	add	r4, r3
 8010068:	2c00      	cmp	r4, #0
 801006a:	f340 8096 	ble.w	801019a <_strtod_l+0x53a>
 801006e:	f014 030f 	ands.w	r3, r4, #15
 8010072:	d00a      	beq.n	801008a <_strtod_l+0x42a>
 8010074:	495e      	ldr	r1, [pc, #376]	@ (80101f0 <_strtod_l+0x590>)
 8010076:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801007a:	4652      	mov	r2, sl
 801007c:	465b      	mov	r3, fp
 801007e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010082:	f7f0 fab9 	bl	80005f8 <__aeabi_dmul>
 8010086:	4682      	mov	sl, r0
 8010088:	468b      	mov	fp, r1
 801008a:	f034 040f 	bics.w	r4, r4, #15
 801008e:	d073      	beq.n	8010178 <_strtod_l+0x518>
 8010090:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010094:	dd48      	ble.n	8010128 <_strtod_l+0x4c8>
 8010096:	2400      	movs	r4, #0
 8010098:	46a0      	mov	r8, r4
 801009a:	940a      	str	r4, [sp, #40]	@ 0x28
 801009c:	46a1      	mov	r9, r4
 801009e:	9a05      	ldr	r2, [sp, #20]
 80100a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80101f8 <_strtod_l+0x598>
 80100a4:	2322      	movs	r3, #34	@ 0x22
 80100a6:	6013      	str	r3, [r2, #0]
 80100a8:	f04f 0a00 	mov.w	sl, #0
 80100ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f43f ae0f 	beq.w	800fcd2 <_strtod_l+0x72>
 80100b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80100b6:	9805      	ldr	r0, [sp, #20]
 80100b8:	f7ff f940 	bl	800f33c <_Bfree>
 80100bc:	9805      	ldr	r0, [sp, #20]
 80100be:	4649      	mov	r1, r9
 80100c0:	f7ff f93c 	bl	800f33c <_Bfree>
 80100c4:	9805      	ldr	r0, [sp, #20]
 80100c6:	4641      	mov	r1, r8
 80100c8:	f7ff f938 	bl	800f33c <_Bfree>
 80100cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80100ce:	9805      	ldr	r0, [sp, #20]
 80100d0:	f7ff f934 	bl	800f33c <_Bfree>
 80100d4:	9805      	ldr	r0, [sp, #20]
 80100d6:	4621      	mov	r1, r4
 80100d8:	f7ff f930 	bl	800f33c <_Bfree>
 80100dc:	e5f9      	b.n	800fcd2 <_strtod_l+0x72>
 80100de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80100e4:	4293      	cmp	r3, r2
 80100e6:	dbbc      	blt.n	8010062 <_strtod_l+0x402>
 80100e8:	4c41      	ldr	r4, [pc, #260]	@ (80101f0 <_strtod_l+0x590>)
 80100ea:	f1c5 050f 	rsb	r5, r5, #15
 80100ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80100f2:	4652      	mov	r2, sl
 80100f4:	465b      	mov	r3, fp
 80100f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100fa:	f7f0 fa7d 	bl	80005f8 <__aeabi_dmul>
 80100fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010100:	1b5d      	subs	r5, r3, r5
 8010102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010106:	e9d4 2300 	ldrd	r2, r3, [r4]
 801010a:	e78f      	b.n	801002c <_strtod_l+0x3cc>
 801010c:	3316      	adds	r3, #22
 801010e:	dba8      	blt.n	8010062 <_strtod_l+0x402>
 8010110:	4b37      	ldr	r3, [pc, #220]	@ (80101f0 <_strtod_l+0x590>)
 8010112:	eba9 0808 	sub.w	r8, r9, r8
 8010116:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801011a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801011e:	4650      	mov	r0, sl
 8010120:	4659      	mov	r1, fp
 8010122:	f7f0 fb93 	bl	800084c <__aeabi_ddiv>
 8010126:	e783      	b.n	8010030 <_strtod_l+0x3d0>
 8010128:	4b32      	ldr	r3, [pc, #200]	@ (80101f4 <_strtod_l+0x594>)
 801012a:	9308      	str	r3, [sp, #32]
 801012c:	2300      	movs	r3, #0
 801012e:	1124      	asrs	r4, r4, #4
 8010130:	4650      	mov	r0, sl
 8010132:	4659      	mov	r1, fp
 8010134:	461e      	mov	r6, r3
 8010136:	2c01      	cmp	r4, #1
 8010138:	dc21      	bgt.n	801017e <_strtod_l+0x51e>
 801013a:	b10b      	cbz	r3, 8010140 <_strtod_l+0x4e0>
 801013c:	4682      	mov	sl, r0
 801013e:	468b      	mov	fp, r1
 8010140:	492c      	ldr	r1, [pc, #176]	@ (80101f4 <_strtod_l+0x594>)
 8010142:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010146:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801014a:	4652      	mov	r2, sl
 801014c:	465b      	mov	r3, fp
 801014e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010152:	f7f0 fa51 	bl	80005f8 <__aeabi_dmul>
 8010156:	4b28      	ldr	r3, [pc, #160]	@ (80101f8 <_strtod_l+0x598>)
 8010158:	460a      	mov	r2, r1
 801015a:	400b      	ands	r3, r1
 801015c:	4927      	ldr	r1, [pc, #156]	@ (80101fc <_strtod_l+0x59c>)
 801015e:	428b      	cmp	r3, r1
 8010160:	4682      	mov	sl, r0
 8010162:	d898      	bhi.n	8010096 <_strtod_l+0x436>
 8010164:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010168:	428b      	cmp	r3, r1
 801016a:	bf86      	itte	hi
 801016c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8010200 <_strtod_l+0x5a0>
 8010170:	f04f 3aff 	movhi.w	sl, #4294967295
 8010174:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010178:	2300      	movs	r3, #0
 801017a:	9308      	str	r3, [sp, #32]
 801017c:	e07a      	b.n	8010274 <_strtod_l+0x614>
 801017e:	07e2      	lsls	r2, r4, #31
 8010180:	d505      	bpl.n	801018e <_strtod_l+0x52e>
 8010182:	9b08      	ldr	r3, [sp, #32]
 8010184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010188:	f7f0 fa36 	bl	80005f8 <__aeabi_dmul>
 801018c:	2301      	movs	r3, #1
 801018e:	9a08      	ldr	r2, [sp, #32]
 8010190:	3208      	adds	r2, #8
 8010192:	3601      	adds	r6, #1
 8010194:	1064      	asrs	r4, r4, #1
 8010196:	9208      	str	r2, [sp, #32]
 8010198:	e7cd      	b.n	8010136 <_strtod_l+0x4d6>
 801019a:	d0ed      	beq.n	8010178 <_strtod_l+0x518>
 801019c:	4264      	negs	r4, r4
 801019e:	f014 020f 	ands.w	r2, r4, #15
 80101a2:	d00a      	beq.n	80101ba <_strtod_l+0x55a>
 80101a4:	4b12      	ldr	r3, [pc, #72]	@ (80101f0 <_strtod_l+0x590>)
 80101a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101aa:	4650      	mov	r0, sl
 80101ac:	4659      	mov	r1, fp
 80101ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101b2:	f7f0 fb4b 	bl	800084c <__aeabi_ddiv>
 80101b6:	4682      	mov	sl, r0
 80101b8:	468b      	mov	fp, r1
 80101ba:	1124      	asrs	r4, r4, #4
 80101bc:	d0dc      	beq.n	8010178 <_strtod_l+0x518>
 80101be:	2c1f      	cmp	r4, #31
 80101c0:	dd20      	ble.n	8010204 <_strtod_l+0x5a4>
 80101c2:	2400      	movs	r4, #0
 80101c4:	46a0      	mov	r8, r4
 80101c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80101c8:	46a1      	mov	r9, r4
 80101ca:	9a05      	ldr	r2, [sp, #20]
 80101cc:	2322      	movs	r3, #34	@ 0x22
 80101ce:	f04f 0a00 	mov.w	sl, #0
 80101d2:	f04f 0b00 	mov.w	fp, #0
 80101d6:	6013      	str	r3, [r2, #0]
 80101d8:	e768      	b.n	80100ac <_strtod_l+0x44c>
 80101da:	bf00      	nop
 80101dc:	08012329 	.word	0x08012329
 80101e0:	0801253c 	.word	0x0801253c
 80101e4:	08012321 	.word	0x08012321
 80101e8:	08012358 	.word	0x08012358
 80101ec:	080126e5 	.word	0x080126e5
 80101f0:	08012470 	.word	0x08012470
 80101f4:	08012448 	.word	0x08012448
 80101f8:	7ff00000 	.word	0x7ff00000
 80101fc:	7ca00000 	.word	0x7ca00000
 8010200:	7fefffff 	.word	0x7fefffff
 8010204:	f014 0310 	ands.w	r3, r4, #16
 8010208:	bf18      	it	ne
 801020a:	236a      	movne	r3, #106	@ 0x6a
 801020c:	4ea9      	ldr	r6, [pc, #676]	@ (80104b4 <_strtod_l+0x854>)
 801020e:	9308      	str	r3, [sp, #32]
 8010210:	4650      	mov	r0, sl
 8010212:	4659      	mov	r1, fp
 8010214:	2300      	movs	r3, #0
 8010216:	07e2      	lsls	r2, r4, #31
 8010218:	d504      	bpl.n	8010224 <_strtod_l+0x5c4>
 801021a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801021e:	f7f0 f9eb 	bl	80005f8 <__aeabi_dmul>
 8010222:	2301      	movs	r3, #1
 8010224:	1064      	asrs	r4, r4, #1
 8010226:	f106 0608 	add.w	r6, r6, #8
 801022a:	d1f4      	bne.n	8010216 <_strtod_l+0x5b6>
 801022c:	b10b      	cbz	r3, 8010232 <_strtod_l+0x5d2>
 801022e:	4682      	mov	sl, r0
 8010230:	468b      	mov	fp, r1
 8010232:	9b08      	ldr	r3, [sp, #32]
 8010234:	b1b3      	cbz	r3, 8010264 <_strtod_l+0x604>
 8010236:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801023a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801023e:	2b00      	cmp	r3, #0
 8010240:	4659      	mov	r1, fp
 8010242:	dd0f      	ble.n	8010264 <_strtod_l+0x604>
 8010244:	2b1f      	cmp	r3, #31
 8010246:	dd55      	ble.n	80102f4 <_strtod_l+0x694>
 8010248:	2b34      	cmp	r3, #52	@ 0x34
 801024a:	bfde      	ittt	le
 801024c:	f04f 33ff 	movle.w	r3, #4294967295
 8010250:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010254:	4093      	lslle	r3, r2
 8010256:	f04f 0a00 	mov.w	sl, #0
 801025a:	bfcc      	ite	gt
 801025c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010260:	ea03 0b01 	andle.w	fp, r3, r1
 8010264:	2200      	movs	r2, #0
 8010266:	2300      	movs	r3, #0
 8010268:	4650      	mov	r0, sl
 801026a:	4659      	mov	r1, fp
 801026c:	f7f0 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010270:	2800      	cmp	r0, #0
 8010272:	d1a6      	bne.n	80101c2 <_strtod_l+0x562>
 8010274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010276:	9300      	str	r3, [sp, #0]
 8010278:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801027a:	9805      	ldr	r0, [sp, #20]
 801027c:	462b      	mov	r3, r5
 801027e:	463a      	mov	r2, r7
 8010280:	f7ff f8c4 	bl	800f40c <__s2b>
 8010284:	900a      	str	r0, [sp, #40]	@ 0x28
 8010286:	2800      	cmp	r0, #0
 8010288:	f43f af05 	beq.w	8010096 <_strtod_l+0x436>
 801028c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801028e:	2a00      	cmp	r2, #0
 8010290:	eba9 0308 	sub.w	r3, r9, r8
 8010294:	bfa8      	it	ge
 8010296:	2300      	movge	r3, #0
 8010298:	9312      	str	r3, [sp, #72]	@ 0x48
 801029a:	2400      	movs	r4, #0
 801029c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80102a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80102a2:	46a0      	mov	r8, r4
 80102a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102a6:	9805      	ldr	r0, [sp, #20]
 80102a8:	6859      	ldr	r1, [r3, #4]
 80102aa:	f7ff f807 	bl	800f2bc <_Balloc>
 80102ae:	4681      	mov	r9, r0
 80102b0:	2800      	cmp	r0, #0
 80102b2:	f43f aef4 	beq.w	801009e <_strtod_l+0x43e>
 80102b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102b8:	691a      	ldr	r2, [r3, #16]
 80102ba:	3202      	adds	r2, #2
 80102bc:	f103 010c 	add.w	r1, r3, #12
 80102c0:	0092      	lsls	r2, r2, #2
 80102c2:	300c      	adds	r0, #12
 80102c4:	f000 ff38 	bl	8011138 <memcpy>
 80102c8:	ec4b ab10 	vmov	d0, sl, fp
 80102cc:	9805      	ldr	r0, [sp, #20]
 80102ce:	aa1c      	add	r2, sp, #112	@ 0x70
 80102d0:	a91b      	add	r1, sp, #108	@ 0x6c
 80102d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80102d6:	f7ff fbd5 	bl	800fa84 <__d2b>
 80102da:	901a      	str	r0, [sp, #104]	@ 0x68
 80102dc:	2800      	cmp	r0, #0
 80102de:	f43f aede 	beq.w	801009e <_strtod_l+0x43e>
 80102e2:	9805      	ldr	r0, [sp, #20]
 80102e4:	2101      	movs	r1, #1
 80102e6:	f7ff f927 	bl	800f538 <__i2b>
 80102ea:	4680      	mov	r8, r0
 80102ec:	b948      	cbnz	r0, 8010302 <_strtod_l+0x6a2>
 80102ee:	f04f 0800 	mov.w	r8, #0
 80102f2:	e6d4      	b.n	801009e <_strtod_l+0x43e>
 80102f4:	f04f 32ff 	mov.w	r2, #4294967295
 80102f8:	fa02 f303 	lsl.w	r3, r2, r3
 80102fc:	ea03 0a0a 	and.w	sl, r3, sl
 8010300:	e7b0      	b.n	8010264 <_strtod_l+0x604>
 8010302:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010304:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010306:	2d00      	cmp	r5, #0
 8010308:	bfab      	itete	ge
 801030a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801030c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801030e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010310:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010312:	bfac      	ite	ge
 8010314:	18ef      	addge	r7, r5, r3
 8010316:	1b5e      	sublt	r6, r3, r5
 8010318:	9b08      	ldr	r3, [sp, #32]
 801031a:	1aed      	subs	r5, r5, r3
 801031c:	4415      	add	r5, r2
 801031e:	4b66      	ldr	r3, [pc, #408]	@ (80104b8 <_strtod_l+0x858>)
 8010320:	3d01      	subs	r5, #1
 8010322:	429d      	cmp	r5, r3
 8010324:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010328:	da50      	bge.n	80103cc <_strtod_l+0x76c>
 801032a:	1b5b      	subs	r3, r3, r5
 801032c:	2b1f      	cmp	r3, #31
 801032e:	eba2 0203 	sub.w	r2, r2, r3
 8010332:	f04f 0101 	mov.w	r1, #1
 8010336:	dc3d      	bgt.n	80103b4 <_strtod_l+0x754>
 8010338:	fa01 f303 	lsl.w	r3, r1, r3
 801033c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801033e:	2300      	movs	r3, #0
 8010340:	9310      	str	r3, [sp, #64]	@ 0x40
 8010342:	18bd      	adds	r5, r7, r2
 8010344:	9b08      	ldr	r3, [sp, #32]
 8010346:	42af      	cmp	r7, r5
 8010348:	4416      	add	r6, r2
 801034a:	441e      	add	r6, r3
 801034c:	463b      	mov	r3, r7
 801034e:	bfa8      	it	ge
 8010350:	462b      	movge	r3, r5
 8010352:	42b3      	cmp	r3, r6
 8010354:	bfa8      	it	ge
 8010356:	4633      	movge	r3, r6
 8010358:	2b00      	cmp	r3, #0
 801035a:	bfc2      	ittt	gt
 801035c:	1aed      	subgt	r5, r5, r3
 801035e:	1af6      	subgt	r6, r6, r3
 8010360:	1aff      	subgt	r7, r7, r3
 8010362:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010364:	2b00      	cmp	r3, #0
 8010366:	dd16      	ble.n	8010396 <_strtod_l+0x736>
 8010368:	4641      	mov	r1, r8
 801036a:	9805      	ldr	r0, [sp, #20]
 801036c:	461a      	mov	r2, r3
 801036e:	f7ff f9a3 	bl	800f6b8 <__pow5mult>
 8010372:	4680      	mov	r8, r0
 8010374:	2800      	cmp	r0, #0
 8010376:	d0ba      	beq.n	80102ee <_strtod_l+0x68e>
 8010378:	4601      	mov	r1, r0
 801037a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801037c:	9805      	ldr	r0, [sp, #20]
 801037e:	f7ff f8f1 	bl	800f564 <__multiply>
 8010382:	900e      	str	r0, [sp, #56]	@ 0x38
 8010384:	2800      	cmp	r0, #0
 8010386:	f43f ae8a 	beq.w	801009e <_strtod_l+0x43e>
 801038a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801038c:	9805      	ldr	r0, [sp, #20]
 801038e:	f7fe ffd5 	bl	800f33c <_Bfree>
 8010392:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010394:	931a      	str	r3, [sp, #104]	@ 0x68
 8010396:	2d00      	cmp	r5, #0
 8010398:	dc1d      	bgt.n	80103d6 <_strtod_l+0x776>
 801039a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039c:	2b00      	cmp	r3, #0
 801039e:	dd23      	ble.n	80103e8 <_strtod_l+0x788>
 80103a0:	4649      	mov	r1, r9
 80103a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80103a4:	9805      	ldr	r0, [sp, #20]
 80103a6:	f7ff f987 	bl	800f6b8 <__pow5mult>
 80103aa:	4681      	mov	r9, r0
 80103ac:	b9e0      	cbnz	r0, 80103e8 <_strtod_l+0x788>
 80103ae:	f04f 0900 	mov.w	r9, #0
 80103b2:	e674      	b.n	801009e <_strtod_l+0x43e>
 80103b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80103b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80103bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80103c0:	35e2      	adds	r5, #226	@ 0xe2
 80103c2:	fa01 f305 	lsl.w	r3, r1, r5
 80103c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80103c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80103ca:	e7ba      	b.n	8010342 <_strtod_l+0x6e2>
 80103cc:	2300      	movs	r3, #0
 80103ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80103d0:	2301      	movs	r3, #1
 80103d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80103d4:	e7b5      	b.n	8010342 <_strtod_l+0x6e2>
 80103d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80103d8:	9805      	ldr	r0, [sp, #20]
 80103da:	462a      	mov	r2, r5
 80103dc:	f7ff f9c6 	bl	800f76c <__lshift>
 80103e0:	901a      	str	r0, [sp, #104]	@ 0x68
 80103e2:	2800      	cmp	r0, #0
 80103e4:	d1d9      	bne.n	801039a <_strtod_l+0x73a>
 80103e6:	e65a      	b.n	801009e <_strtod_l+0x43e>
 80103e8:	2e00      	cmp	r6, #0
 80103ea:	dd07      	ble.n	80103fc <_strtod_l+0x79c>
 80103ec:	4649      	mov	r1, r9
 80103ee:	9805      	ldr	r0, [sp, #20]
 80103f0:	4632      	mov	r2, r6
 80103f2:	f7ff f9bb 	bl	800f76c <__lshift>
 80103f6:	4681      	mov	r9, r0
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d0d8      	beq.n	80103ae <_strtod_l+0x74e>
 80103fc:	2f00      	cmp	r7, #0
 80103fe:	dd08      	ble.n	8010412 <_strtod_l+0x7b2>
 8010400:	4641      	mov	r1, r8
 8010402:	9805      	ldr	r0, [sp, #20]
 8010404:	463a      	mov	r2, r7
 8010406:	f7ff f9b1 	bl	800f76c <__lshift>
 801040a:	4680      	mov	r8, r0
 801040c:	2800      	cmp	r0, #0
 801040e:	f43f ae46 	beq.w	801009e <_strtod_l+0x43e>
 8010412:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010414:	9805      	ldr	r0, [sp, #20]
 8010416:	464a      	mov	r2, r9
 8010418:	f7ff fa30 	bl	800f87c <__mdiff>
 801041c:	4604      	mov	r4, r0
 801041e:	2800      	cmp	r0, #0
 8010420:	f43f ae3d 	beq.w	801009e <_strtod_l+0x43e>
 8010424:	68c3      	ldr	r3, [r0, #12]
 8010426:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010428:	2300      	movs	r3, #0
 801042a:	60c3      	str	r3, [r0, #12]
 801042c:	4641      	mov	r1, r8
 801042e:	f7ff fa09 	bl	800f844 <__mcmp>
 8010432:	2800      	cmp	r0, #0
 8010434:	da46      	bge.n	80104c4 <_strtod_l+0x864>
 8010436:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010438:	ea53 030a 	orrs.w	r3, r3, sl
 801043c:	d16c      	bne.n	8010518 <_strtod_l+0x8b8>
 801043e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010442:	2b00      	cmp	r3, #0
 8010444:	d168      	bne.n	8010518 <_strtod_l+0x8b8>
 8010446:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801044a:	0d1b      	lsrs	r3, r3, #20
 801044c:	051b      	lsls	r3, r3, #20
 801044e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010452:	d961      	bls.n	8010518 <_strtod_l+0x8b8>
 8010454:	6963      	ldr	r3, [r4, #20]
 8010456:	b913      	cbnz	r3, 801045e <_strtod_l+0x7fe>
 8010458:	6923      	ldr	r3, [r4, #16]
 801045a:	2b01      	cmp	r3, #1
 801045c:	dd5c      	ble.n	8010518 <_strtod_l+0x8b8>
 801045e:	4621      	mov	r1, r4
 8010460:	2201      	movs	r2, #1
 8010462:	9805      	ldr	r0, [sp, #20]
 8010464:	f7ff f982 	bl	800f76c <__lshift>
 8010468:	4641      	mov	r1, r8
 801046a:	4604      	mov	r4, r0
 801046c:	f7ff f9ea 	bl	800f844 <__mcmp>
 8010470:	2800      	cmp	r0, #0
 8010472:	dd51      	ble.n	8010518 <_strtod_l+0x8b8>
 8010474:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010478:	9a08      	ldr	r2, [sp, #32]
 801047a:	0d1b      	lsrs	r3, r3, #20
 801047c:	051b      	lsls	r3, r3, #20
 801047e:	2a00      	cmp	r2, #0
 8010480:	d06b      	beq.n	801055a <_strtod_l+0x8fa>
 8010482:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010486:	d868      	bhi.n	801055a <_strtod_l+0x8fa>
 8010488:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801048c:	f67f ae9d 	bls.w	80101ca <_strtod_l+0x56a>
 8010490:	4b0a      	ldr	r3, [pc, #40]	@ (80104bc <_strtod_l+0x85c>)
 8010492:	4650      	mov	r0, sl
 8010494:	4659      	mov	r1, fp
 8010496:	2200      	movs	r2, #0
 8010498:	f7f0 f8ae 	bl	80005f8 <__aeabi_dmul>
 801049c:	4b08      	ldr	r3, [pc, #32]	@ (80104c0 <_strtod_l+0x860>)
 801049e:	400b      	ands	r3, r1
 80104a0:	4682      	mov	sl, r0
 80104a2:	468b      	mov	fp, r1
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	f47f ae05 	bne.w	80100b4 <_strtod_l+0x454>
 80104aa:	9a05      	ldr	r2, [sp, #20]
 80104ac:	2322      	movs	r3, #34	@ 0x22
 80104ae:	6013      	str	r3, [r2, #0]
 80104b0:	e600      	b.n	80100b4 <_strtod_l+0x454>
 80104b2:	bf00      	nop
 80104b4:	08012568 	.word	0x08012568
 80104b8:	fffffc02 	.word	0xfffffc02
 80104bc:	39500000 	.word	0x39500000
 80104c0:	7ff00000 	.word	0x7ff00000
 80104c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80104c8:	d165      	bne.n	8010596 <_strtod_l+0x936>
 80104ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80104cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104d0:	b35a      	cbz	r2, 801052a <_strtod_l+0x8ca>
 80104d2:	4a9f      	ldr	r2, [pc, #636]	@ (8010750 <_strtod_l+0xaf0>)
 80104d4:	4293      	cmp	r3, r2
 80104d6:	d12b      	bne.n	8010530 <_strtod_l+0x8d0>
 80104d8:	9b08      	ldr	r3, [sp, #32]
 80104da:	4651      	mov	r1, sl
 80104dc:	b303      	cbz	r3, 8010520 <_strtod_l+0x8c0>
 80104de:	4b9d      	ldr	r3, [pc, #628]	@ (8010754 <_strtod_l+0xaf4>)
 80104e0:	465a      	mov	r2, fp
 80104e2:	4013      	ands	r3, r2
 80104e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80104e8:	f04f 32ff 	mov.w	r2, #4294967295
 80104ec:	d81b      	bhi.n	8010526 <_strtod_l+0x8c6>
 80104ee:	0d1b      	lsrs	r3, r3, #20
 80104f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80104f4:	fa02 f303 	lsl.w	r3, r2, r3
 80104f8:	4299      	cmp	r1, r3
 80104fa:	d119      	bne.n	8010530 <_strtod_l+0x8d0>
 80104fc:	4b96      	ldr	r3, [pc, #600]	@ (8010758 <_strtod_l+0xaf8>)
 80104fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010500:	429a      	cmp	r2, r3
 8010502:	d102      	bne.n	801050a <_strtod_l+0x8aa>
 8010504:	3101      	adds	r1, #1
 8010506:	f43f adca 	beq.w	801009e <_strtod_l+0x43e>
 801050a:	4b92      	ldr	r3, [pc, #584]	@ (8010754 <_strtod_l+0xaf4>)
 801050c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801050e:	401a      	ands	r2, r3
 8010510:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8010514:	f04f 0a00 	mov.w	sl, #0
 8010518:	9b08      	ldr	r3, [sp, #32]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d1b8      	bne.n	8010490 <_strtod_l+0x830>
 801051e:	e5c9      	b.n	80100b4 <_strtod_l+0x454>
 8010520:	f04f 33ff 	mov.w	r3, #4294967295
 8010524:	e7e8      	b.n	80104f8 <_strtod_l+0x898>
 8010526:	4613      	mov	r3, r2
 8010528:	e7e6      	b.n	80104f8 <_strtod_l+0x898>
 801052a:	ea53 030a 	orrs.w	r3, r3, sl
 801052e:	d0a1      	beq.n	8010474 <_strtod_l+0x814>
 8010530:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010532:	b1db      	cbz	r3, 801056c <_strtod_l+0x90c>
 8010534:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010536:	4213      	tst	r3, r2
 8010538:	d0ee      	beq.n	8010518 <_strtod_l+0x8b8>
 801053a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801053c:	9a08      	ldr	r2, [sp, #32]
 801053e:	4650      	mov	r0, sl
 8010540:	4659      	mov	r1, fp
 8010542:	b1bb      	cbz	r3, 8010574 <_strtod_l+0x914>
 8010544:	f7ff fb6c 	bl	800fc20 <sulp>
 8010548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801054c:	ec53 2b10 	vmov	r2, r3, d0
 8010550:	f7ef fe9c 	bl	800028c <__adddf3>
 8010554:	4682      	mov	sl, r0
 8010556:	468b      	mov	fp, r1
 8010558:	e7de      	b.n	8010518 <_strtod_l+0x8b8>
 801055a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801055e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010562:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010566:	f04f 3aff 	mov.w	sl, #4294967295
 801056a:	e7d5      	b.n	8010518 <_strtod_l+0x8b8>
 801056c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801056e:	ea13 0f0a 	tst.w	r3, sl
 8010572:	e7e1      	b.n	8010538 <_strtod_l+0x8d8>
 8010574:	f7ff fb54 	bl	800fc20 <sulp>
 8010578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801057c:	ec53 2b10 	vmov	r2, r3, d0
 8010580:	f7ef fe82 	bl	8000288 <__aeabi_dsub>
 8010584:	2200      	movs	r2, #0
 8010586:	2300      	movs	r3, #0
 8010588:	4682      	mov	sl, r0
 801058a:	468b      	mov	fp, r1
 801058c:	f7f0 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010590:	2800      	cmp	r0, #0
 8010592:	d0c1      	beq.n	8010518 <_strtod_l+0x8b8>
 8010594:	e619      	b.n	80101ca <_strtod_l+0x56a>
 8010596:	4641      	mov	r1, r8
 8010598:	4620      	mov	r0, r4
 801059a:	f7ff facb 	bl	800fb34 <__ratio>
 801059e:	ec57 6b10 	vmov	r6, r7, d0
 80105a2:	2200      	movs	r2, #0
 80105a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80105a8:	4630      	mov	r0, r6
 80105aa:	4639      	mov	r1, r7
 80105ac:	f7f0 faa0 	bl	8000af0 <__aeabi_dcmple>
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d06f      	beq.n	8010694 <_strtod_l+0xa34>
 80105b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d17a      	bne.n	80106b0 <_strtod_l+0xa50>
 80105ba:	f1ba 0f00 	cmp.w	sl, #0
 80105be:	d158      	bne.n	8010672 <_strtod_l+0xa12>
 80105c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d15a      	bne.n	8010680 <_strtod_l+0xa20>
 80105ca:	4b64      	ldr	r3, [pc, #400]	@ (801075c <_strtod_l+0xafc>)
 80105cc:	2200      	movs	r2, #0
 80105ce:	4630      	mov	r0, r6
 80105d0:	4639      	mov	r1, r7
 80105d2:	f7f0 fa83 	bl	8000adc <__aeabi_dcmplt>
 80105d6:	2800      	cmp	r0, #0
 80105d8:	d159      	bne.n	801068e <_strtod_l+0xa2e>
 80105da:	4630      	mov	r0, r6
 80105dc:	4639      	mov	r1, r7
 80105de:	4b60      	ldr	r3, [pc, #384]	@ (8010760 <_strtod_l+0xb00>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	f7f0 f809 	bl	80005f8 <__aeabi_dmul>
 80105e6:	4606      	mov	r6, r0
 80105e8:	460f      	mov	r7, r1
 80105ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80105ee:	9606      	str	r6, [sp, #24]
 80105f0:	9307      	str	r3, [sp, #28]
 80105f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80105f6:	4d57      	ldr	r5, [pc, #348]	@ (8010754 <_strtod_l+0xaf4>)
 80105f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80105fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80105fe:	401d      	ands	r5, r3
 8010600:	4b58      	ldr	r3, [pc, #352]	@ (8010764 <_strtod_l+0xb04>)
 8010602:	429d      	cmp	r5, r3
 8010604:	f040 80b2 	bne.w	801076c <_strtod_l+0xb0c>
 8010608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801060a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801060e:	ec4b ab10 	vmov	d0, sl, fp
 8010612:	f7ff f9c7 	bl	800f9a4 <__ulp>
 8010616:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801061a:	ec51 0b10 	vmov	r0, r1, d0
 801061e:	f7ef ffeb 	bl	80005f8 <__aeabi_dmul>
 8010622:	4652      	mov	r2, sl
 8010624:	465b      	mov	r3, fp
 8010626:	f7ef fe31 	bl	800028c <__adddf3>
 801062a:	460b      	mov	r3, r1
 801062c:	4949      	ldr	r1, [pc, #292]	@ (8010754 <_strtod_l+0xaf4>)
 801062e:	4a4e      	ldr	r2, [pc, #312]	@ (8010768 <_strtod_l+0xb08>)
 8010630:	4019      	ands	r1, r3
 8010632:	4291      	cmp	r1, r2
 8010634:	4682      	mov	sl, r0
 8010636:	d942      	bls.n	80106be <_strtod_l+0xa5e>
 8010638:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801063a:	4b47      	ldr	r3, [pc, #284]	@ (8010758 <_strtod_l+0xaf8>)
 801063c:	429a      	cmp	r2, r3
 801063e:	d103      	bne.n	8010648 <_strtod_l+0x9e8>
 8010640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010642:	3301      	adds	r3, #1
 8010644:	f43f ad2b 	beq.w	801009e <_strtod_l+0x43e>
 8010648:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010758 <_strtod_l+0xaf8>
 801064c:	f04f 3aff 	mov.w	sl, #4294967295
 8010650:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010652:	9805      	ldr	r0, [sp, #20]
 8010654:	f7fe fe72 	bl	800f33c <_Bfree>
 8010658:	9805      	ldr	r0, [sp, #20]
 801065a:	4649      	mov	r1, r9
 801065c:	f7fe fe6e 	bl	800f33c <_Bfree>
 8010660:	9805      	ldr	r0, [sp, #20]
 8010662:	4641      	mov	r1, r8
 8010664:	f7fe fe6a 	bl	800f33c <_Bfree>
 8010668:	9805      	ldr	r0, [sp, #20]
 801066a:	4621      	mov	r1, r4
 801066c:	f7fe fe66 	bl	800f33c <_Bfree>
 8010670:	e618      	b.n	80102a4 <_strtod_l+0x644>
 8010672:	f1ba 0f01 	cmp.w	sl, #1
 8010676:	d103      	bne.n	8010680 <_strtod_l+0xa20>
 8010678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801067a:	2b00      	cmp	r3, #0
 801067c:	f43f ada5 	beq.w	80101ca <_strtod_l+0x56a>
 8010680:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010730 <_strtod_l+0xad0>
 8010684:	4f35      	ldr	r7, [pc, #212]	@ (801075c <_strtod_l+0xafc>)
 8010686:	ed8d 7b06 	vstr	d7, [sp, #24]
 801068a:	2600      	movs	r6, #0
 801068c:	e7b1      	b.n	80105f2 <_strtod_l+0x992>
 801068e:	4f34      	ldr	r7, [pc, #208]	@ (8010760 <_strtod_l+0xb00>)
 8010690:	2600      	movs	r6, #0
 8010692:	e7aa      	b.n	80105ea <_strtod_l+0x98a>
 8010694:	4b32      	ldr	r3, [pc, #200]	@ (8010760 <_strtod_l+0xb00>)
 8010696:	4630      	mov	r0, r6
 8010698:	4639      	mov	r1, r7
 801069a:	2200      	movs	r2, #0
 801069c:	f7ef ffac 	bl	80005f8 <__aeabi_dmul>
 80106a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106a2:	4606      	mov	r6, r0
 80106a4:	460f      	mov	r7, r1
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d09f      	beq.n	80105ea <_strtod_l+0x98a>
 80106aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80106ae:	e7a0      	b.n	80105f2 <_strtod_l+0x992>
 80106b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010738 <_strtod_l+0xad8>
 80106b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80106b8:	ec57 6b17 	vmov	r6, r7, d7
 80106bc:	e799      	b.n	80105f2 <_strtod_l+0x992>
 80106be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80106c2:	9b08      	ldr	r3, [sp, #32]
 80106c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d1c1      	bne.n	8010650 <_strtod_l+0x9f0>
 80106cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80106d0:	0d1b      	lsrs	r3, r3, #20
 80106d2:	051b      	lsls	r3, r3, #20
 80106d4:	429d      	cmp	r5, r3
 80106d6:	d1bb      	bne.n	8010650 <_strtod_l+0x9f0>
 80106d8:	4630      	mov	r0, r6
 80106da:	4639      	mov	r1, r7
 80106dc:	f7f0 faec 	bl	8000cb8 <__aeabi_d2lz>
 80106e0:	f7ef ff5c 	bl	800059c <__aeabi_l2d>
 80106e4:	4602      	mov	r2, r0
 80106e6:	460b      	mov	r3, r1
 80106e8:	4630      	mov	r0, r6
 80106ea:	4639      	mov	r1, r7
 80106ec:	f7ef fdcc 	bl	8000288 <__aeabi_dsub>
 80106f0:	460b      	mov	r3, r1
 80106f2:	4602      	mov	r2, r0
 80106f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80106f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80106fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106fe:	ea46 060a 	orr.w	r6, r6, sl
 8010702:	431e      	orrs	r6, r3
 8010704:	d06f      	beq.n	80107e6 <_strtod_l+0xb86>
 8010706:	a30e      	add	r3, pc, #56	@ (adr r3, 8010740 <_strtod_l+0xae0>)
 8010708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070c:	f7f0 f9e6 	bl	8000adc <__aeabi_dcmplt>
 8010710:	2800      	cmp	r0, #0
 8010712:	f47f accf 	bne.w	80100b4 <_strtod_l+0x454>
 8010716:	a30c      	add	r3, pc, #48	@ (adr r3, 8010748 <_strtod_l+0xae8>)
 8010718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010720:	f7f0 f9fa 	bl	8000b18 <__aeabi_dcmpgt>
 8010724:	2800      	cmp	r0, #0
 8010726:	d093      	beq.n	8010650 <_strtod_l+0x9f0>
 8010728:	e4c4      	b.n	80100b4 <_strtod_l+0x454>
 801072a:	bf00      	nop
 801072c:	f3af 8000 	nop.w
 8010730:	00000000 	.word	0x00000000
 8010734:	bff00000 	.word	0xbff00000
 8010738:	00000000 	.word	0x00000000
 801073c:	3ff00000 	.word	0x3ff00000
 8010740:	94a03595 	.word	0x94a03595
 8010744:	3fdfffff 	.word	0x3fdfffff
 8010748:	35afe535 	.word	0x35afe535
 801074c:	3fe00000 	.word	0x3fe00000
 8010750:	000fffff 	.word	0x000fffff
 8010754:	7ff00000 	.word	0x7ff00000
 8010758:	7fefffff 	.word	0x7fefffff
 801075c:	3ff00000 	.word	0x3ff00000
 8010760:	3fe00000 	.word	0x3fe00000
 8010764:	7fe00000 	.word	0x7fe00000
 8010768:	7c9fffff 	.word	0x7c9fffff
 801076c:	9b08      	ldr	r3, [sp, #32]
 801076e:	b323      	cbz	r3, 80107ba <_strtod_l+0xb5a>
 8010770:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8010774:	d821      	bhi.n	80107ba <_strtod_l+0xb5a>
 8010776:	a328      	add	r3, pc, #160	@ (adr r3, 8010818 <_strtod_l+0xbb8>)
 8010778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077c:	4630      	mov	r0, r6
 801077e:	4639      	mov	r1, r7
 8010780:	f7f0 f9b6 	bl	8000af0 <__aeabi_dcmple>
 8010784:	b1a0      	cbz	r0, 80107b0 <_strtod_l+0xb50>
 8010786:	4639      	mov	r1, r7
 8010788:	4630      	mov	r0, r6
 801078a:	f7f0 fa0d 	bl	8000ba8 <__aeabi_d2uiz>
 801078e:	2801      	cmp	r0, #1
 8010790:	bf38      	it	cc
 8010792:	2001      	movcc	r0, #1
 8010794:	f7ef feb6 	bl	8000504 <__aeabi_ui2d>
 8010798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801079a:	4606      	mov	r6, r0
 801079c:	460f      	mov	r7, r1
 801079e:	b9fb      	cbnz	r3, 80107e0 <_strtod_l+0xb80>
 80107a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80107a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80107a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80107a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80107ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80107b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80107b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80107b6:	1b5b      	subs	r3, r3, r5
 80107b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80107ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80107be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80107c2:	f7ff f8ef 	bl	800f9a4 <__ulp>
 80107c6:	4650      	mov	r0, sl
 80107c8:	ec53 2b10 	vmov	r2, r3, d0
 80107cc:	4659      	mov	r1, fp
 80107ce:	f7ef ff13 	bl	80005f8 <__aeabi_dmul>
 80107d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80107d6:	f7ef fd59 	bl	800028c <__adddf3>
 80107da:	4682      	mov	sl, r0
 80107dc:	468b      	mov	fp, r1
 80107de:	e770      	b.n	80106c2 <_strtod_l+0xa62>
 80107e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80107e4:	e7e0      	b.n	80107a8 <_strtod_l+0xb48>
 80107e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8010820 <_strtod_l+0xbc0>)
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	f7f0 f976 	bl	8000adc <__aeabi_dcmplt>
 80107f0:	e798      	b.n	8010724 <_strtod_l+0xac4>
 80107f2:	2300      	movs	r3, #0
 80107f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80107f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80107fa:	6013      	str	r3, [r2, #0]
 80107fc:	f7ff ba6d 	b.w	800fcda <_strtod_l+0x7a>
 8010800:	2a65      	cmp	r2, #101	@ 0x65
 8010802:	f43f ab66 	beq.w	800fed2 <_strtod_l+0x272>
 8010806:	2a45      	cmp	r2, #69	@ 0x45
 8010808:	f43f ab63 	beq.w	800fed2 <_strtod_l+0x272>
 801080c:	2301      	movs	r3, #1
 801080e:	f7ff bb9e 	b.w	800ff4e <_strtod_l+0x2ee>
 8010812:	bf00      	nop
 8010814:	f3af 8000 	nop.w
 8010818:	ffc00000 	.word	0xffc00000
 801081c:	41dfffff 	.word	0x41dfffff
 8010820:	94a03595 	.word	0x94a03595
 8010824:	3fcfffff 	.word	0x3fcfffff

08010828 <_strtod_r>:
 8010828:	4b01      	ldr	r3, [pc, #4]	@ (8010830 <_strtod_r+0x8>)
 801082a:	f7ff ba19 	b.w	800fc60 <_strtod_l>
 801082e:	bf00      	nop
 8010830:	20000084 	.word	0x20000084

08010834 <_strtol_l.constprop.0>:
 8010834:	2b24      	cmp	r3, #36	@ 0x24
 8010836:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801083a:	4686      	mov	lr, r0
 801083c:	4690      	mov	r8, r2
 801083e:	d801      	bhi.n	8010844 <_strtol_l.constprop.0+0x10>
 8010840:	2b01      	cmp	r3, #1
 8010842:	d106      	bne.n	8010852 <_strtol_l.constprop.0+0x1e>
 8010844:	f7fd fe70 	bl	800e528 <__errno>
 8010848:	2316      	movs	r3, #22
 801084a:	6003      	str	r3, [r0, #0]
 801084c:	2000      	movs	r0, #0
 801084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010852:	4834      	ldr	r0, [pc, #208]	@ (8010924 <_strtol_l.constprop.0+0xf0>)
 8010854:	460d      	mov	r5, r1
 8010856:	462a      	mov	r2, r5
 8010858:	f815 4b01 	ldrb.w	r4, [r5], #1
 801085c:	5d06      	ldrb	r6, [r0, r4]
 801085e:	f016 0608 	ands.w	r6, r6, #8
 8010862:	d1f8      	bne.n	8010856 <_strtol_l.constprop.0+0x22>
 8010864:	2c2d      	cmp	r4, #45	@ 0x2d
 8010866:	d12d      	bne.n	80108c4 <_strtol_l.constprop.0+0x90>
 8010868:	782c      	ldrb	r4, [r5, #0]
 801086a:	2601      	movs	r6, #1
 801086c:	1c95      	adds	r5, r2, #2
 801086e:	f033 0210 	bics.w	r2, r3, #16
 8010872:	d109      	bne.n	8010888 <_strtol_l.constprop.0+0x54>
 8010874:	2c30      	cmp	r4, #48	@ 0x30
 8010876:	d12a      	bne.n	80108ce <_strtol_l.constprop.0+0x9a>
 8010878:	782a      	ldrb	r2, [r5, #0]
 801087a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801087e:	2a58      	cmp	r2, #88	@ 0x58
 8010880:	d125      	bne.n	80108ce <_strtol_l.constprop.0+0x9a>
 8010882:	786c      	ldrb	r4, [r5, #1]
 8010884:	2310      	movs	r3, #16
 8010886:	3502      	adds	r5, #2
 8010888:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801088c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010890:	2200      	movs	r2, #0
 8010892:	fbbc f9f3 	udiv	r9, ip, r3
 8010896:	4610      	mov	r0, r2
 8010898:	fb03 ca19 	mls	sl, r3, r9, ip
 801089c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80108a0:	2f09      	cmp	r7, #9
 80108a2:	d81b      	bhi.n	80108dc <_strtol_l.constprop.0+0xa8>
 80108a4:	463c      	mov	r4, r7
 80108a6:	42a3      	cmp	r3, r4
 80108a8:	dd27      	ble.n	80108fa <_strtol_l.constprop.0+0xc6>
 80108aa:	1c57      	adds	r7, r2, #1
 80108ac:	d007      	beq.n	80108be <_strtol_l.constprop.0+0x8a>
 80108ae:	4581      	cmp	r9, r0
 80108b0:	d320      	bcc.n	80108f4 <_strtol_l.constprop.0+0xc0>
 80108b2:	d101      	bne.n	80108b8 <_strtol_l.constprop.0+0x84>
 80108b4:	45a2      	cmp	sl, r4
 80108b6:	db1d      	blt.n	80108f4 <_strtol_l.constprop.0+0xc0>
 80108b8:	fb00 4003 	mla	r0, r0, r3, r4
 80108bc:	2201      	movs	r2, #1
 80108be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80108c2:	e7eb      	b.n	801089c <_strtol_l.constprop.0+0x68>
 80108c4:	2c2b      	cmp	r4, #43	@ 0x2b
 80108c6:	bf04      	itt	eq
 80108c8:	782c      	ldrbeq	r4, [r5, #0]
 80108ca:	1c95      	addeq	r5, r2, #2
 80108cc:	e7cf      	b.n	801086e <_strtol_l.constprop.0+0x3a>
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d1da      	bne.n	8010888 <_strtol_l.constprop.0+0x54>
 80108d2:	2c30      	cmp	r4, #48	@ 0x30
 80108d4:	bf0c      	ite	eq
 80108d6:	2308      	moveq	r3, #8
 80108d8:	230a      	movne	r3, #10
 80108da:	e7d5      	b.n	8010888 <_strtol_l.constprop.0+0x54>
 80108dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80108e0:	2f19      	cmp	r7, #25
 80108e2:	d801      	bhi.n	80108e8 <_strtol_l.constprop.0+0xb4>
 80108e4:	3c37      	subs	r4, #55	@ 0x37
 80108e6:	e7de      	b.n	80108a6 <_strtol_l.constprop.0+0x72>
 80108e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80108ec:	2f19      	cmp	r7, #25
 80108ee:	d804      	bhi.n	80108fa <_strtol_l.constprop.0+0xc6>
 80108f0:	3c57      	subs	r4, #87	@ 0x57
 80108f2:	e7d8      	b.n	80108a6 <_strtol_l.constprop.0+0x72>
 80108f4:	f04f 32ff 	mov.w	r2, #4294967295
 80108f8:	e7e1      	b.n	80108be <_strtol_l.constprop.0+0x8a>
 80108fa:	1c53      	adds	r3, r2, #1
 80108fc:	d108      	bne.n	8010910 <_strtol_l.constprop.0+0xdc>
 80108fe:	2322      	movs	r3, #34	@ 0x22
 8010900:	f8ce 3000 	str.w	r3, [lr]
 8010904:	4660      	mov	r0, ip
 8010906:	f1b8 0f00 	cmp.w	r8, #0
 801090a:	d0a0      	beq.n	801084e <_strtol_l.constprop.0+0x1a>
 801090c:	1e69      	subs	r1, r5, #1
 801090e:	e006      	b.n	801091e <_strtol_l.constprop.0+0xea>
 8010910:	b106      	cbz	r6, 8010914 <_strtol_l.constprop.0+0xe0>
 8010912:	4240      	negs	r0, r0
 8010914:	f1b8 0f00 	cmp.w	r8, #0
 8010918:	d099      	beq.n	801084e <_strtol_l.constprop.0+0x1a>
 801091a:	2a00      	cmp	r2, #0
 801091c:	d1f6      	bne.n	801090c <_strtol_l.constprop.0+0xd8>
 801091e:	f8c8 1000 	str.w	r1, [r8]
 8010922:	e794      	b.n	801084e <_strtol_l.constprop.0+0x1a>
 8010924:	08012591 	.word	0x08012591

08010928 <_strtol_r>:
 8010928:	f7ff bf84 	b.w	8010834 <_strtol_l.constprop.0>

0801092c <__ssputs_r>:
 801092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010930:	688e      	ldr	r6, [r1, #8]
 8010932:	461f      	mov	r7, r3
 8010934:	42be      	cmp	r6, r7
 8010936:	680b      	ldr	r3, [r1, #0]
 8010938:	4682      	mov	sl, r0
 801093a:	460c      	mov	r4, r1
 801093c:	4690      	mov	r8, r2
 801093e:	d82d      	bhi.n	801099c <__ssputs_r+0x70>
 8010940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010948:	d026      	beq.n	8010998 <__ssputs_r+0x6c>
 801094a:	6965      	ldr	r5, [r4, #20]
 801094c:	6909      	ldr	r1, [r1, #16]
 801094e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010952:	eba3 0901 	sub.w	r9, r3, r1
 8010956:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801095a:	1c7b      	adds	r3, r7, #1
 801095c:	444b      	add	r3, r9
 801095e:	106d      	asrs	r5, r5, #1
 8010960:	429d      	cmp	r5, r3
 8010962:	bf38      	it	cc
 8010964:	461d      	movcc	r5, r3
 8010966:	0553      	lsls	r3, r2, #21
 8010968:	d527      	bpl.n	80109ba <__ssputs_r+0x8e>
 801096a:	4629      	mov	r1, r5
 801096c:	f7fc fd4a 	bl	800d404 <_malloc_r>
 8010970:	4606      	mov	r6, r0
 8010972:	b360      	cbz	r0, 80109ce <__ssputs_r+0xa2>
 8010974:	6921      	ldr	r1, [r4, #16]
 8010976:	464a      	mov	r2, r9
 8010978:	f000 fbde 	bl	8011138 <memcpy>
 801097c:	89a3      	ldrh	r3, [r4, #12]
 801097e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010986:	81a3      	strh	r3, [r4, #12]
 8010988:	6126      	str	r6, [r4, #16]
 801098a:	6165      	str	r5, [r4, #20]
 801098c:	444e      	add	r6, r9
 801098e:	eba5 0509 	sub.w	r5, r5, r9
 8010992:	6026      	str	r6, [r4, #0]
 8010994:	60a5      	str	r5, [r4, #8]
 8010996:	463e      	mov	r6, r7
 8010998:	42be      	cmp	r6, r7
 801099a:	d900      	bls.n	801099e <__ssputs_r+0x72>
 801099c:	463e      	mov	r6, r7
 801099e:	6820      	ldr	r0, [r4, #0]
 80109a0:	4632      	mov	r2, r6
 80109a2:	4641      	mov	r1, r8
 80109a4:	f000 fb9c 	bl	80110e0 <memmove>
 80109a8:	68a3      	ldr	r3, [r4, #8]
 80109aa:	1b9b      	subs	r3, r3, r6
 80109ac:	60a3      	str	r3, [r4, #8]
 80109ae:	6823      	ldr	r3, [r4, #0]
 80109b0:	4433      	add	r3, r6
 80109b2:	6023      	str	r3, [r4, #0]
 80109b4:	2000      	movs	r0, #0
 80109b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ba:	462a      	mov	r2, r5
 80109bc:	f000 ff51 	bl	8011862 <_realloc_r>
 80109c0:	4606      	mov	r6, r0
 80109c2:	2800      	cmp	r0, #0
 80109c4:	d1e0      	bne.n	8010988 <__ssputs_r+0x5c>
 80109c6:	6921      	ldr	r1, [r4, #16]
 80109c8:	4650      	mov	r0, sl
 80109ca:	f7fe fc2d 	bl	800f228 <_free_r>
 80109ce:	230c      	movs	r3, #12
 80109d0:	f8ca 3000 	str.w	r3, [sl]
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80109da:	81a3      	strh	r3, [r4, #12]
 80109dc:	f04f 30ff 	mov.w	r0, #4294967295
 80109e0:	e7e9      	b.n	80109b6 <__ssputs_r+0x8a>
	...

080109e4 <_svfiprintf_r>:
 80109e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e8:	4698      	mov	r8, r3
 80109ea:	898b      	ldrh	r3, [r1, #12]
 80109ec:	061b      	lsls	r3, r3, #24
 80109ee:	b09d      	sub	sp, #116	@ 0x74
 80109f0:	4607      	mov	r7, r0
 80109f2:	460d      	mov	r5, r1
 80109f4:	4614      	mov	r4, r2
 80109f6:	d510      	bpl.n	8010a1a <_svfiprintf_r+0x36>
 80109f8:	690b      	ldr	r3, [r1, #16]
 80109fa:	b973      	cbnz	r3, 8010a1a <_svfiprintf_r+0x36>
 80109fc:	2140      	movs	r1, #64	@ 0x40
 80109fe:	f7fc fd01 	bl	800d404 <_malloc_r>
 8010a02:	6028      	str	r0, [r5, #0]
 8010a04:	6128      	str	r0, [r5, #16]
 8010a06:	b930      	cbnz	r0, 8010a16 <_svfiprintf_r+0x32>
 8010a08:	230c      	movs	r3, #12
 8010a0a:	603b      	str	r3, [r7, #0]
 8010a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a10:	b01d      	add	sp, #116	@ 0x74
 8010a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a16:	2340      	movs	r3, #64	@ 0x40
 8010a18:	616b      	str	r3, [r5, #20]
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a1e:	2320      	movs	r3, #32
 8010a20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010a24:	f8cd 800c 	str.w	r8, [sp, #12]
 8010a28:	2330      	movs	r3, #48	@ 0x30
 8010a2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010bc8 <_svfiprintf_r+0x1e4>
 8010a2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a32:	f04f 0901 	mov.w	r9, #1
 8010a36:	4623      	mov	r3, r4
 8010a38:	469a      	mov	sl, r3
 8010a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a3e:	b10a      	cbz	r2, 8010a44 <_svfiprintf_r+0x60>
 8010a40:	2a25      	cmp	r2, #37	@ 0x25
 8010a42:	d1f9      	bne.n	8010a38 <_svfiprintf_r+0x54>
 8010a44:	ebba 0b04 	subs.w	fp, sl, r4
 8010a48:	d00b      	beq.n	8010a62 <_svfiprintf_r+0x7e>
 8010a4a:	465b      	mov	r3, fp
 8010a4c:	4622      	mov	r2, r4
 8010a4e:	4629      	mov	r1, r5
 8010a50:	4638      	mov	r0, r7
 8010a52:	f7ff ff6b 	bl	801092c <__ssputs_r>
 8010a56:	3001      	adds	r0, #1
 8010a58:	f000 80a7 	beq.w	8010baa <_svfiprintf_r+0x1c6>
 8010a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a5e:	445a      	add	r2, fp
 8010a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a62:	f89a 3000 	ldrb.w	r3, [sl]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 809f 	beq.w	8010baa <_svfiprintf_r+0x1c6>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a76:	f10a 0a01 	add.w	sl, sl, #1
 8010a7a:	9304      	str	r3, [sp, #16]
 8010a7c:	9307      	str	r3, [sp, #28]
 8010a7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a82:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a84:	4654      	mov	r4, sl
 8010a86:	2205      	movs	r2, #5
 8010a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a8c:	484e      	ldr	r0, [pc, #312]	@ (8010bc8 <_svfiprintf_r+0x1e4>)
 8010a8e:	f7ef fb9f 	bl	80001d0 <memchr>
 8010a92:	9a04      	ldr	r2, [sp, #16]
 8010a94:	b9d8      	cbnz	r0, 8010ace <_svfiprintf_r+0xea>
 8010a96:	06d0      	lsls	r0, r2, #27
 8010a98:	bf44      	itt	mi
 8010a9a:	2320      	movmi	r3, #32
 8010a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010aa0:	0711      	lsls	r1, r2, #28
 8010aa2:	bf44      	itt	mi
 8010aa4:	232b      	movmi	r3, #43	@ 0x2b
 8010aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8010aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ab0:	d015      	beq.n	8010ade <_svfiprintf_r+0xfa>
 8010ab2:	9a07      	ldr	r2, [sp, #28]
 8010ab4:	4654      	mov	r4, sl
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	f04f 0c0a 	mov.w	ip, #10
 8010abc:	4621      	mov	r1, r4
 8010abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ac2:	3b30      	subs	r3, #48	@ 0x30
 8010ac4:	2b09      	cmp	r3, #9
 8010ac6:	d94b      	bls.n	8010b60 <_svfiprintf_r+0x17c>
 8010ac8:	b1b0      	cbz	r0, 8010af8 <_svfiprintf_r+0x114>
 8010aca:	9207      	str	r2, [sp, #28]
 8010acc:	e014      	b.n	8010af8 <_svfiprintf_r+0x114>
 8010ace:	eba0 0308 	sub.w	r3, r0, r8
 8010ad2:	fa09 f303 	lsl.w	r3, r9, r3
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	9304      	str	r3, [sp, #16]
 8010ada:	46a2      	mov	sl, r4
 8010adc:	e7d2      	b.n	8010a84 <_svfiprintf_r+0xa0>
 8010ade:	9b03      	ldr	r3, [sp, #12]
 8010ae0:	1d19      	adds	r1, r3, #4
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	9103      	str	r1, [sp, #12]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	bfbb      	ittet	lt
 8010aea:	425b      	neglt	r3, r3
 8010aec:	f042 0202 	orrlt.w	r2, r2, #2
 8010af0:	9307      	strge	r3, [sp, #28]
 8010af2:	9307      	strlt	r3, [sp, #28]
 8010af4:	bfb8      	it	lt
 8010af6:	9204      	strlt	r2, [sp, #16]
 8010af8:	7823      	ldrb	r3, [r4, #0]
 8010afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8010afc:	d10a      	bne.n	8010b14 <_svfiprintf_r+0x130>
 8010afe:	7863      	ldrb	r3, [r4, #1]
 8010b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b02:	d132      	bne.n	8010b6a <_svfiprintf_r+0x186>
 8010b04:	9b03      	ldr	r3, [sp, #12]
 8010b06:	1d1a      	adds	r2, r3, #4
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	9203      	str	r2, [sp, #12]
 8010b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010b10:	3402      	adds	r4, #2
 8010b12:	9305      	str	r3, [sp, #20]
 8010b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010bd8 <_svfiprintf_r+0x1f4>
 8010b18:	7821      	ldrb	r1, [r4, #0]
 8010b1a:	2203      	movs	r2, #3
 8010b1c:	4650      	mov	r0, sl
 8010b1e:	f7ef fb57 	bl	80001d0 <memchr>
 8010b22:	b138      	cbz	r0, 8010b34 <_svfiprintf_r+0x150>
 8010b24:	9b04      	ldr	r3, [sp, #16]
 8010b26:	eba0 000a 	sub.w	r0, r0, sl
 8010b2a:	2240      	movs	r2, #64	@ 0x40
 8010b2c:	4082      	lsls	r2, r0
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	3401      	adds	r4, #1
 8010b32:	9304      	str	r3, [sp, #16]
 8010b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b38:	4824      	ldr	r0, [pc, #144]	@ (8010bcc <_svfiprintf_r+0x1e8>)
 8010b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b3e:	2206      	movs	r2, #6
 8010b40:	f7ef fb46 	bl	80001d0 <memchr>
 8010b44:	2800      	cmp	r0, #0
 8010b46:	d036      	beq.n	8010bb6 <_svfiprintf_r+0x1d2>
 8010b48:	4b21      	ldr	r3, [pc, #132]	@ (8010bd0 <_svfiprintf_r+0x1ec>)
 8010b4a:	bb1b      	cbnz	r3, 8010b94 <_svfiprintf_r+0x1b0>
 8010b4c:	9b03      	ldr	r3, [sp, #12]
 8010b4e:	3307      	adds	r3, #7
 8010b50:	f023 0307 	bic.w	r3, r3, #7
 8010b54:	3308      	adds	r3, #8
 8010b56:	9303      	str	r3, [sp, #12]
 8010b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b5a:	4433      	add	r3, r6
 8010b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b5e:	e76a      	b.n	8010a36 <_svfiprintf_r+0x52>
 8010b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b64:	460c      	mov	r4, r1
 8010b66:	2001      	movs	r0, #1
 8010b68:	e7a8      	b.n	8010abc <_svfiprintf_r+0xd8>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	3401      	adds	r4, #1
 8010b6e:	9305      	str	r3, [sp, #20]
 8010b70:	4619      	mov	r1, r3
 8010b72:	f04f 0c0a 	mov.w	ip, #10
 8010b76:	4620      	mov	r0, r4
 8010b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b7c:	3a30      	subs	r2, #48	@ 0x30
 8010b7e:	2a09      	cmp	r2, #9
 8010b80:	d903      	bls.n	8010b8a <_svfiprintf_r+0x1a6>
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d0c6      	beq.n	8010b14 <_svfiprintf_r+0x130>
 8010b86:	9105      	str	r1, [sp, #20]
 8010b88:	e7c4      	b.n	8010b14 <_svfiprintf_r+0x130>
 8010b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b8e:	4604      	mov	r4, r0
 8010b90:	2301      	movs	r3, #1
 8010b92:	e7f0      	b.n	8010b76 <_svfiprintf_r+0x192>
 8010b94:	ab03      	add	r3, sp, #12
 8010b96:	9300      	str	r3, [sp, #0]
 8010b98:	462a      	mov	r2, r5
 8010b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8010bd4 <_svfiprintf_r+0x1f0>)
 8010b9c:	a904      	add	r1, sp, #16
 8010b9e:	4638      	mov	r0, r7
 8010ba0:	f7fc fd5c 	bl	800d65c <_printf_float>
 8010ba4:	1c42      	adds	r2, r0, #1
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	d1d6      	bne.n	8010b58 <_svfiprintf_r+0x174>
 8010baa:	89ab      	ldrh	r3, [r5, #12]
 8010bac:	065b      	lsls	r3, r3, #25
 8010bae:	f53f af2d 	bmi.w	8010a0c <_svfiprintf_r+0x28>
 8010bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010bb4:	e72c      	b.n	8010a10 <_svfiprintf_r+0x2c>
 8010bb6:	ab03      	add	r3, sp, #12
 8010bb8:	9300      	str	r3, [sp, #0]
 8010bba:	462a      	mov	r2, r5
 8010bbc:	4b05      	ldr	r3, [pc, #20]	@ (8010bd4 <_svfiprintf_r+0x1f0>)
 8010bbe:	a904      	add	r1, sp, #16
 8010bc0:	4638      	mov	r0, r7
 8010bc2:	f7fc ffe3 	bl	800db8c <_printf_i>
 8010bc6:	e7ed      	b.n	8010ba4 <_svfiprintf_r+0x1c0>
 8010bc8:	08012691 	.word	0x08012691
 8010bcc:	0801269b 	.word	0x0801269b
 8010bd0:	0800d65d 	.word	0x0800d65d
 8010bd4:	0801092d 	.word	0x0801092d
 8010bd8:	08012697 	.word	0x08012697

08010bdc <__sfputc_r>:
 8010bdc:	6893      	ldr	r3, [r2, #8]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	b410      	push	{r4}
 8010be4:	6093      	str	r3, [r2, #8]
 8010be6:	da08      	bge.n	8010bfa <__sfputc_r+0x1e>
 8010be8:	6994      	ldr	r4, [r2, #24]
 8010bea:	42a3      	cmp	r3, r4
 8010bec:	db01      	blt.n	8010bf2 <__sfputc_r+0x16>
 8010bee:	290a      	cmp	r1, #10
 8010bf0:	d103      	bne.n	8010bfa <__sfputc_r+0x1e>
 8010bf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bf6:	f000 b9df 	b.w	8010fb8 <__swbuf_r>
 8010bfa:	6813      	ldr	r3, [r2, #0]
 8010bfc:	1c58      	adds	r0, r3, #1
 8010bfe:	6010      	str	r0, [r2, #0]
 8010c00:	7019      	strb	r1, [r3, #0]
 8010c02:	4608      	mov	r0, r1
 8010c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <__sfputs_r>:
 8010c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	4614      	mov	r4, r2
 8010c12:	18d5      	adds	r5, r2, r3
 8010c14:	42ac      	cmp	r4, r5
 8010c16:	d101      	bne.n	8010c1c <__sfputs_r+0x12>
 8010c18:	2000      	movs	r0, #0
 8010c1a:	e007      	b.n	8010c2c <__sfputs_r+0x22>
 8010c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c20:	463a      	mov	r2, r7
 8010c22:	4630      	mov	r0, r6
 8010c24:	f7ff ffda 	bl	8010bdc <__sfputc_r>
 8010c28:	1c43      	adds	r3, r0, #1
 8010c2a:	d1f3      	bne.n	8010c14 <__sfputs_r+0xa>
 8010c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010c30 <_vfiprintf_r>:
 8010c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c34:	460d      	mov	r5, r1
 8010c36:	b09d      	sub	sp, #116	@ 0x74
 8010c38:	4614      	mov	r4, r2
 8010c3a:	4698      	mov	r8, r3
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	b118      	cbz	r0, 8010c48 <_vfiprintf_r+0x18>
 8010c40:	6a03      	ldr	r3, [r0, #32]
 8010c42:	b90b      	cbnz	r3, 8010c48 <_vfiprintf_r+0x18>
 8010c44:	f7fd fb62 	bl	800e30c <__sinit>
 8010c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c4a:	07d9      	lsls	r1, r3, #31
 8010c4c:	d405      	bmi.n	8010c5a <_vfiprintf_r+0x2a>
 8010c4e:	89ab      	ldrh	r3, [r5, #12]
 8010c50:	059a      	lsls	r2, r3, #22
 8010c52:	d402      	bmi.n	8010c5a <_vfiprintf_r+0x2a>
 8010c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c56:	f7fd fc92 	bl	800e57e <__retarget_lock_acquire_recursive>
 8010c5a:	89ab      	ldrh	r3, [r5, #12]
 8010c5c:	071b      	lsls	r3, r3, #28
 8010c5e:	d501      	bpl.n	8010c64 <_vfiprintf_r+0x34>
 8010c60:	692b      	ldr	r3, [r5, #16]
 8010c62:	b99b      	cbnz	r3, 8010c8c <_vfiprintf_r+0x5c>
 8010c64:	4629      	mov	r1, r5
 8010c66:	4630      	mov	r0, r6
 8010c68:	f000 f9e4 	bl	8011034 <__swsetup_r>
 8010c6c:	b170      	cbz	r0, 8010c8c <_vfiprintf_r+0x5c>
 8010c6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010c70:	07dc      	lsls	r4, r3, #31
 8010c72:	d504      	bpl.n	8010c7e <_vfiprintf_r+0x4e>
 8010c74:	f04f 30ff 	mov.w	r0, #4294967295
 8010c78:	b01d      	add	sp, #116	@ 0x74
 8010c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c7e:	89ab      	ldrh	r3, [r5, #12]
 8010c80:	0598      	lsls	r0, r3, #22
 8010c82:	d4f7      	bmi.n	8010c74 <_vfiprintf_r+0x44>
 8010c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010c86:	f7fd fc7b 	bl	800e580 <__retarget_lock_release_recursive>
 8010c8a:	e7f3      	b.n	8010c74 <_vfiprintf_r+0x44>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c90:	2320      	movs	r3, #32
 8010c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c9a:	2330      	movs	r3, #48	@ 0x30
 8010c9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010e4c <_vfiprintf_r+0x21c>
 8010ca0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ca4:	f04f 0901 	mov.w	r9, #1
 8010ca8:	4623      	mov	r3, r4
 8010caa:	469a      	mov	sl, r3
 8010cac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010cb0:	b10a      	cbz	r2, 8010cb6 <_vfiprintf_r+0x86>
 8010cb2:	2a25      	cmp	r2, #37	@ 0x25
 8010cb4:	d1f9      	bne.n	8010caa <_vfiprintf_r+0x7a>
 8010cb6:	ebba 0b04 	subs.w	fp, sl, r4
 8010cba:	d00b      	beq.n	8010cd4 <_vfiprintf_r+0xa4>
 8010cbc:	465b      	mov	r3, fp
 8010cbe:	4622      	mov	r2, r4
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	f7ff ffa1 	bl	8010c0a <__sfputs_r>
 8010cc8:	3001      	adds	r0, #1
 8010cca:	f000 80a7 	beq.w	8010e1c <_vfiprintf_r+0x1ec>
 8010cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010cd0:	445a      	add	r2, fp
 8010cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8010cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	f000 809f 	beq.w	8010e1c <_vfiprintf_r+0x1ec>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ce4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ce8:	f10a 0a01 	add.w	sl, sl, #1
 8010cec:	9304      	str	r3, [sp, #16]
 8010cee:	9307      	str	r3, [sp, #28]
 8010cf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010cf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8010cf6:	4654      	mov	r4, sl
 8010cf8:	2205      	movs	r2, #5
 8010cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cfe:	4853      	ldr	r0, [pc, #332]	@ (8010e4c <_vfiprintf_r+0x21c>)
 8010d00:	f7ef fa66 	bl	80001d0 <memchr>
 8010d04:	9a04      	ldr	r2, [sp, #16]
 8010d06:	b9d8      	cbnz	r0, 8010d40 <_vfiprintf_r+0x110>
 8010d08:	06d1      	lsls	r1, r2, #27
 8010d0a:	bf44      	itt	mi
 8010d0c:	2320      	movmi	r3, #32
 8010d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d12:	0713      	lsls	r3, r2, #28
 8010d14:	bf44      	itt	mi
 8010d16:	232b      	movmi	r3, #43	@ 0x2b
 8010d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010d1c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d20:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d22:	d015      	beq.n	8010d50 <_vfiprintf_r+0x120>
 8010d24:	9a07      	ldr	r2, [sp, #28]
 8010d26:	4654      	mov	r4, sl
 8010d28:	2000      	movs	r0, #0
 8010d2a:	f04f 0c0a 	mov.w	ip, #10
 8010d2e:	4621      	mov	r1, r4
 8010d30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d34:	3b30      	subs	r3, #48	@ 0x30
 8010d36:	2b09      	cmp	r3, #9
 8010d38:	d94b      	bls.n	8010dd2 <_vfiprintf_r+0x1a2>
 8010d3a:	b1b0      	cbz	r0, 8010d6a <_vfiprintf_r+0x13a>
 8010d3c:	9207      	str	r2, [sp, #28]
 8010d3e:	e014      	b.n	8010d6a <_vfiprintf_r+0x13a>
 8010d40:	eba0 0308 	sub.w	r3, r0, r8
 8010d44:	fa09 f303 	lsl.w	r3, r9, r3
 8010d48:	4313      	orrs	r3, r2
 8010d4a:	9304      	str	r3, [sp, #16]
 8010d4c:	46a2      	mov	sl, r4
 8010d4e:	e7d2      	b.n	8010cf6 <_vfiprintf_r+0xc6>
 8010d50:	9b03      	ldr	r3, [sp, #12]
 8010d52:	1d19      	adds	r1, r3, #4
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	9103      	str	r1, [sp, #12]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	bfbb      	ittet	lt
 8010d5c:	425b      	neglt	r3, r3
 8010d5e:	f042 0202 	orrlt.w	r2, r2, #2
 8010d62:	9307      	strge	r3, [sp, #28]
 8010d64:	9307      	strlt	r3, [sp, #28]
 8010d66:	bfb8      	it	lt
 8010d68:	9204      	strlt	r2, [sp, #16]
 8010d6a:	7823      	ldrb	r3, [r4, #0]
 8010d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8010d6e:	d10a      	bne.n	8010d86 <_vfiprintf_r+0x156>
 8010d70:	7863      	ldrb	r3, [r4, #1]
 8010d72:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d74:	d132      	bne.n	8010ddc <_vfiprintf_r+0x1ac>
 8010d76:	9b03      	ldr	r3, [sp, #12]
 8010d78:	1d1a      	adds	r2, r3, #4
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	9203      	str	r2, [sp, #12]
 8010d7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010d82:	3402      	adds	r4, #2
 8010d84:	9305      	str	r3, [sp, #20]
 8010d86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010e5c <_vfiprintf_r+0x22c>
 8010d8a:	7821      	ldrb	r1, [r4, #0]
 8010d8c:	2203      	movs	r2, #3
 8010d8e:	4650      	mov	r0, sl
 8010d90:	f7ef fa1e 	bl	80001d0 <memchr>
 8010d94:	b138      	cbz	r0, 8010da6 <_vfiprintf_r+0x176>
 8010d96:	9b04      	ldr	r3, [sp, #16]
 8010d98:	eba0 000a 	sub.w	r0, r0, sl
 8010d9c:	2240      	movs	r2, #64	@ 0x40
 8010d9e:	4082      	lsls	r2, r0
 8010da0:	4313      	orrs	r3, r2
 8010da2:	3401      	adds	r4, #1
 8010da4:	9304      	str	r3, [sp, #16]
 8010da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010daa:	4829      	ldr	r0, [pc, #164]	@ (8010e50 <_vfiprintf_r+0x220>)
 8010dac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010db0:	2206      	movs	r2, #6
 8010db2:	f7ef fa0d 	bl	80001d0 <memchr>
 8010db6:	2800      	cmp	r0, #0
 8010db8:	d03f      	beq.n	8010e3a <_vfiprintf_r+0x20a>
 8010dba:	4b26      	ldr	r3, [pc, #152]	@ (8010e54 <_vfiprintf_r+0x224>)
 8010dbc:	bb1b      	cbnz	r3, 8010e06 <_vfiprintf_r+0x1d6>
 8010dbe:	9b03      	ldr	r3, [sp, #12]
 8010dc0:	3307      	adds	r3, #7
 8010dc2:	f023 0307 	bic.w	r3, r3, #7
 8010dc6:	3308      	adds	r3, #8
 8010dc8:	9303      	str	r3, [sp, #12]
 8010dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010dcc:	443b      	add	r3, r7
 8010dce:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dd0:	e76a      	b.n	8010ca8 <_vfiprintf_r+0x78>
 8010dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dd6:	460c      	mov	r4, r1
 8010dd8:	2001      	movs	r0, #1
 8010dda:	e7a8      	b.n	8010d2e <_vfiprintf_r+0xfe>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	3401      	adds	r4, #1
 8010de0:	9305      	str	r3, [sp, #20]
 8010de2:	4619      	mov	r1, r3
 8010de4:	f04f 0c0a 	mov.w	ip, #10
 8010de8:	4620      	mov	r0, r4
 8010dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dee:	3a30      	subs	r2, #48	@ 0x30
 8010df0:	2a09      	cmp	r2, #9
 8010df2:	d903      	bls.n	8010dfc <_vfiprintf_r+0x1cc>
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d0c6      	beq.n	8010d86 <_vfiprintf_r+0x156>
 8010df8:	9105      	str	r1, [sp, #20]
 8010dfa:	e7c4      	b.n	8010d86 <_vfiprintf_r+0x156>
 8010dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e00:	4604      	mov	r4, r0
 8010e02:	2301      	movs	r3, #1
 8010e04:	e7f0      	b.n	8010de8 <_vfiprintf_r+0x1b8>
 8010e06:	ab03      	add	r3, sp, #12
 8010e08:	9300      	str	r3, [sp, #0]
 8010e0a:	462a      	mov	r2, r5
 8010e0c:	4b12      	ldr	r3, [pc, #72]	@ (8010e58 <_vfiprintf_r+0x228>)
 8010e0e:	a904      	add	r1, sp, #16
 8010e10:	4630      	mov	r0, r6
 8010e12:	f7fc fc23 	bl	800d65c <_printf_float>
 8010e16:	4607      	mov	r7, r0
 8010e18:	1c78      	adds	r0, r7, #1
 8010e1a:	d1d6      	bne.n	8010dca <_vfiprintf_r+0x19a>
 8010e1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e1e:	07d9      	lsls	r1, r3, #31
 8010e20:	d405      	bmi.n	8010e2e <_vfiprintf_r+0x1fe>
 8010e22:	89ab      	ldrh	r3, [r5, #12]
 8010e24:	059a      	lsls	r2, r3, #22
 8010e26:	d402      	bmi.n	8010e2e <_vfiprintf_r+0x1fe>
 8010e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e2a:	f7fd fba9 	bl	800e580 <__retarget_lock_release_recursive>
 8010e2e:	89ab      	ldrh	r3, [r5, #12]
 8010e30:	065b      	lsls	r3, r3, #25
 8010e32:	f53f af1f 	bmi.w	8010c74 <_vfiprintf_r+0x44>
 8010e36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010e38:	e71e      	b.n	8010c78 <_vfiprintf_r+0x48>
 8010e3a:	ab03      	add	r3, sp, #12
 8010e3c:	9300      	str	r3, [sp, #0]
 8010e3e:	462a      	mov	r2, r5
 8010e40:	4b05      	ldr	r3, [pc, #20]	@ (8010e58 <_vfiprintf_r+0x228>)
 8010e42:	a904      	add	r1, sp, #16
 8010e44:	4630      	mov	r0, r6
 8010e46:	f7fc fea1 	bl	800db8c <_printf_i>
 8010e4a:	e7e4      	b.n	8010e16 <_vfiprintf_r+0x1e6>
 8010e4c:	08012691 	.word	0x08012691
 8010e50:	0801269b 	.word	0x0801269b
 8010e54:	0800d65d 	.word	0x0800d65d
 8010e58:	08010c0b 	.word	0x08010c0b
 8010e5c:	08012697 	.word	0x08012697

08010e60 <__sflush_r>:
 8010e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e68:	0716      	lsls	r6, r2, #28
 8010e6a:	4605      	mov	r5, r0
 8010e6c:	460c      	mov	r4, r1
 8010e6e:	d454      	bmi.n	8010f1a <__sflush_r+0xba>
 8010e70:	684b      	ldr	r3, [r1, #4]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	dc02      	bgt.n	8010e7c <__sflush_r+0x1c>
 8010e76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	dd48      	ble.n	8010f0e <__sflush_r+0xae>
 8010e7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010e7e:	2e00      	cmp	r6, #0
 8010e80:	d045      	beq.n	8010f0e <__sflush_r+0xae>
 8010e82:	2300      	movs	r3, #0
 8010e84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010e88:	682f      	ldr	r7, [r5, #0]
 8010e8a:	6a21      	ldr	r1, [r4, #32]
 8010e8c:	602b      	str	r3, [r5, #0]
 8010e8e:	d030      	beq.n	8010ef2 <__sflush_r+0x92>
 8010e90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010e92:	89a3      	ldrh	r3, [r4, #12]
 8010e94:	0759      	lsls	r1, r3, #29
 8010e96:	d505      	bpl.n	8010ea4 <__sflush_r+0x44>
 8010e98:	6863      	ldr	r3, [r4, #4]
 8010e9a:	1ad2      	subs	r2, r2, r3
 8010e9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010e9e:	b10b      	cbz	r3, 8010ea4 <__sflush_r+0x44>
 8010ea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ea2:	1ad2      	subs	r2, r2, r3
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ea8:	6a21      	ldr	r1, [r4, #32]
 8010eaa:	4628      	mov	r0, r5
 8010eac:	47b0      	blx	r6
 8010eae:	1c43      	adds	r3, r0, #1
 8010eb0:	89a3      	ldrh	r3, [r4, #12]
 8010eb2:	d106      	bne.n	8010ec2 <__sflush_r+0x62>
 8010eb4:	6829      	ldr	r1, [r5, #0]
 8010eb6:	291d      	cmp	r1, #29
 8010eb8:	d82b      	bhi.n	8010f12 <__sflush_r+0xb2>
 8010eba:	4a2a      	ldr	r2, [pc, #168]	@ (8010f64 <__sflush_r+0x104>)
 8010ebc:	410a      	asrs	r2, r1
 8010ebe:	07d6      	lsls	r6, r2, #31
 8010ec0:	d427      	bmi.n	8010f12 <__sflush_r+0xb2>
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	6062      	str	r2, [r4, #4]
 8010ec6:	04d9      	lsls	r1, r3, #19
 8010ec8:	6922      	ldr	r2, [r4, #16]
 8010eca:	6022      	str	r2, [r4, #0]
 8010ecc:	d504      	bpl.n	8010ed8 <__sflush_r+0x78>
 8010ece:	1c42      	adds	r2, r0, #1
 8010ed0:	d101      	bne.n	8010ed6 <__sflush_r+0x76>
 8010ed2:	682b      	ldr	r3, [r5, #0]
 8010ed4:	b903      	cbnz	r3, 8010ed8 <__sflush_r+0x78>
 8010ed6:	6560      	str	r0, [r4, #84]	@ 0x54
 8010ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010eda:	602f      	str	r7, [r5, #0]
 8010edc:	b1b9      	cbz	r1, 8010f0e <__sflush_r+0xae>
 8010ede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ee2:	4299      	cmp	r1, r3
 8010ee4:	d002      	beq.n	8010eec <__sflush_r+0x8c>
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f7fe f99e 	bl	800f228 <_free_r>
 8010eec:	2300      	movs	r3, #0
 8010eee:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ef0:	e00d      	b.n	8010f0e <__sflush_r+0xae>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	47b0      	blx	r6
 8010ef8:	4602      	mov	r2, r0
 8010efa:	1c50      	adds	r0, r2, #1
 8010efc:	d1c9      	bne.n	8010e92 <__sflush_r+0x32>
 8010efe:	682b      	ldr	r3, [r5, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d0c6      	beq.n	8010e92 <__sflush_r+0x32>
 8010f04:	2b1d      	cmp	r3, #29
 8010f06:	d001      	beq.n	8010f0c <__sflush_r+0xac>
 8010f08:	2b16      	cmp	r3, #22
 8010f0a:	d11e      	bne.n	8010f4a <__sflush_r+0xea>
 8010f0c:	602f      	str	r7, [r5, #0]
 8010f0e:	2000      	movs	r0, #0
 8010f10:	e022      	b.n	8010f58 <__sflush_r+0xf8>
 8010f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f16:	b21b      	sxth	r3, r3
 8010f18:	e01b      	b.n	8010f52 <__sflush_r+0xf2>
 8010f1a:	690f      	ldr	r7, [r1, #16]
 8010f1c:	2f00      	cmp	r7, #0
 8010f1e:	d0f6      	beq.n	8010f0e <__sflush_r+0xae>
 8010f20:	0793      	lsls	r3, r2, #30
 8010f22:	680e      	ldr	r6, [r1, #0]
 8010f24:	bf08      	it	eq
 8010f26:	694b      	ldreq	r3, [r1, #20]
 8010f28:	600f      	str	r7, [r1, #0]
 8010f2a:	bf18      	it	ne
 8010f2c:	2300      	movne	r3, #0
 8010f2e:	eba6 0807 	sub.w	r8, r6, r7
 8010f32:	608b      	str	r3, [r1, #8]
 8010f34:	f1b8 0f00 	cmp.w	r8, #0
 8010f38:	dde9      	ble.n	8010f0e <__sflush_r+0xae>
 8010f3a:	6a21      	ldr	r1, [r4, #32]
 8010f3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010f3e:	4643      	mov	r3, r8
 8010f40:	463a      	mov	r2, r7
 8010f42:	4628      	mov	r0, r5
 8010f44:	47b0      	blx	r6
 8010f46:	2800      	cmp	r0, #0
 8010f48:	dc08      	bgt.n	8010f5c <__sflush_r+0xfc>
 8010f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010f52:	81a3      	strh	r3, [r4, #12]
 8010f54:	f04f 30ff 	mov.w	r0, #4294967295
 8010f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f5c:	4407      	add	r7, r0
 8010f5e:	eba8 0800 	sub.w	r8, r8, r0
 8010f62:	e7e7      	b.n	8010f34 <__sflush_r+0xd4>
 8010f64:	dfbffffe 	.word	0xdfbffffe

08010f68 <_fflush_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	690b      	ldr	r3, [r1, #16]
 8010f6c:	4605      	mov	r5, r0
 8010f6e:	460c      	mov	r4, r1
 8010f70:	b913      	cbnz	r3, 8010f78 <_fflush_r+0x10>
 8010f72:	2500      	movs	r5, #0
 8010f74:	4628      	mov	r0, r5
 8010f76:	bd38      	pop	{r3, r4, r5, pc}
 8010f78:	b118      	cbz	r0, 8010f82 <_fflush_r+0x1a>
 8010f7a:	6a03      	ldr	r3, [r0, #32]
 8010f7c:	b90b      	cbnz	r3, 8010f82 <_fflush_r+0x1a>
 8010f7e:	f7fd f9c5 	bl	800e30c <__sinit>
 8010f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d0f3      	beq.n	8010f72 <_fflush_r+0xa>
 8010f8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010f8c:	07d0      	lsls	r0, r2, #31
 8010f8e:	d404      	bmi.n	8010f9a <_fflush_r+0x32>
 8010f90:	0599      	lsls	r1, r3, #22
 8010f92:	d402      	bmi.n	8010f9a <_fflush_r+0x32>
 8010f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010f96:	f7fd faf2 	bl	800e57e <__retarget_lock_acquire_recursive>
 8010f9a:	4628      	mov	r0, r5
 8010f9c:	4621      	mov	r1, r4
 8010f9e:	f7ff ff5f 	bl	8010e60 <__sflush_r>
 8010fa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010fa4:	07da      	lsls	r2, r3, #31
 8010fa6:	4605      	mov	r5, r0
 8010fa8:	d4e4      	bmi.n	8010f74 <_fflush_r+0xc>
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	059b      	lsls	r3, r3, #22
 8010fae:	d4e1      	bmi.n	8010f74 <_fflush_r+0xc>
 8010fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010fb2:	f7fd fae5 	bl	800e580 <__retarget_lock_release_recursive>
 8010fb6:	e7dd      	b.n	8010f74 <_fflush_r+0xc>

08010fb8 <__swbuf_r>:
 8010fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fba:	460e      	mov	r6, r1
 8010fbc:	4614      	mov	r4, r2
 8010fbe:	4605      	mov	r5, r0
 8010fc0:	b118      	cbz	r0, 8010fca <__swbuf_r+0x12>
 8010fc2:	6a03      	ldr	r3, [r0, #32]
 8010fc4:	b90b      	cbnz	r3, 8010fca <__swbuf_r+0x12>
 8010fc6:	f7fd f9a1 	bl	800e30c <__sinit>
 8010fca:	69a3      	ldr	r3, [r4, #24]
 8010fcc:	60a3      	str	r3, [r4, #8]
 8010fce:	89a3      	ldrh	r3, [r4, #12]
 8010fd0:	071a      	lsls	r2, r3, #28
 8010fd2:	d501      	bpl.n	8010fd8 <__swbuf_r+0x20>
 8010fd4:	6923      	ldr	r3, [r4, #16]
 8010fd6:	b943      	cbnz	r3, 8010fea <__swbuf_r+0x32>
 8010fd8:	4621      	mov	r1, r4
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f000 f82a 	bl	8011034 <__swsetup_r>
 8010fe0:	b118      	cbz	r0, 8010fea <__swbuf_r+0x32>
 8010fe2:	f04f 37ff 	mov.w	r7, #4294967295
 8010fe6:	4638      	mov	r0, r7
 8010fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fea:	6823      	ldr	r3, [r4, #0]
 8010fec:	6922      	ldr	r2, [r4, #16]
 8010fee:	1a98      	subs	r0, r3, r2
 8010ff0:	6963      	ldr	r3, [r4, #20]
 8010ff2:	b2f6      	uxtb	r6, r6
 8010ff4:	4283      	cmp	r3, r0
 8010ff6:	4637      	mov	r7, r6
 8010ff8:	dc05      	bgt.n	8011006 <__swbuf_r+0x4e>
 8010ffa:	4621      	mov	r1, r4
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f7ff ffb3 	bl	8010f68 <_fflush_r>
 8011002:	2800      	cmp	r0, #0
 8011004:	d1ed      	bne.n	8010fe2 <__swbuf_r+0x2a>
 8011006:	68a3      	ldr	r3, [r4, #8]
 8011008:	3b01      	subs	r3, #1
 801100a:	60a3      	str	r3, [r4, #8]
 801100c:	6823      	ldr	r3, [r4, #0]
 801100e:	1c5a      	adds	r2, r3, #1
 8011010:	6022      	str	r2, [r4, #0]
 8011012:	701e      	strb	r6, [r3, #0]
 8011014:	6962      	ldr	r2, [r4, #20]
 8011016:	1c43      	adds	r3, r0, #1
 8011018:	429a      	cmp	r2, r3
 801101a:	d004      	beq.n	8011026 <__swbuf_r+0x6e>
 801101c:	89a3      	ldrh	r3, [r4, #12]
 801101e:	07db      	lsls	r3, r3, #31
 8011020:	d5e1      	bpl.n	8010fe6 <__swbuf_r+0x2e>
 8011022:	2e0a      	cmp	r6, #10
 8011024:	d1df      	bne.n	8010fe6 <__swbuf_r+0x2e>
 8011026:	4621      	mov	r1, r4
 8011028:	4628      	mov	r0, r5
 801102a:	f7ff ff9d 	bl	8010f68 <_fflush_r>
 801102e:	2800      	cmp	r0, #0
 8011030:	d0d9      	beq.n	8010fe6 <__swbuf_r+0x2e>
 8011032:	e7d6      	b.n	8010fe2 <__swbuf_r+0x2a>

08011034 <__swsetup_r>:
 8011034:	b538      	push	{r3, r4, r5, lr}
 8011036:	4b29      	ldr	r3, [pc, #164]	@ (80110dc <__swsetup_r+0xa8>)
 8011038:	4605      	mov	r5, r0
 801103a:	6818      	ldr	r0, [r3, #0]
 801103c:	460c      	mov	r4, r1
 801103e:	b118      	cbz	r0, 8011048 <__swsetup_r+0x14>
 8011040:	6a03      	ldr	r3, [r0, #32]
 8011042:	b90b      	cbnz	r3, 8011048 <__swsetup_r+0x14>
 8011044:	f7fd f962 	bl	800e30c <__sinit>
 8011048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801104c:	0719      	lsls	r1, r3, #28
 801104e:	d422      	bmi.n	8011096 <__swsetup_r+0x62>
 8011050:	06da      	lsls	r2, r3, #27
 8011052:	d407      	bmi.n	8011064 <__swsetup_r+0x30>
 8011054:	2209      	movs	r2, #9
 8011056:	602a      	str	r2, [r5, #0]
 8011058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801105c:	81a3      	strh	r3, [r4, #12]
 801105e:	f04f 30ff 	mov.w	r0, #4294967295
 8011062:	e033      	b.n	80110cc <__swsetup_r+0x98>
 8011064:	0758      	lsls	r0, r3, #29
 8011066:	d512      	bpl.n	801108e <__swsetup_r+0x5a>
 8011068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801106a:	b141      	cbz	r1, 801107e <__swsetup_r+0x4a>
 801106c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011070:	4299      	cmp	r1, r3
 8011072:	d002      	beq.n	801107a <__swsetup_r+0x46>
 8011074:	4628      	mov	r0, r5
 8011076:	f7fe f8d7 	bl	800f228 <_free_r>
 801107a:	2300      	movs	r3, #0
 801107c:	6363      	str	r3, [r4, #52]	@ 0x34
 801107e:	89a3      	ldrh	r3, [r4, #12]
 8011080:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011084:	81a3      	strh	r3, [r4, #12]
 8011086:	2300      	movs	r3, #0
 8011088:	6063      	str	r3, [r4, #4]
 801108a:	6923      	ldr	r3, [r4, #16]
 801108c:	6023      	str	r3, [r4, #0]
 801108e:	89a3      	ldrh	r3, [r4, #12]
 8011090:	f043 0308 	orr.w	r3, r3, #8
 8011094:	81a3      	strh	r3, [r4, #12]
 8011096:	6923      	ldr	r3, [r4, #16]
 8011098:	b94b      	cbnz	r3, 80110ae <__swsetup_r+0x7a>
 801109a:	89a3      	ldrh	r3, [r4, #12]
 801109c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80110a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110a4:	d003      	beq.n	80110ae <__swsetup_r+0x7a>
 80110a6:	4621      	mov	r1, r4
 80110a8:	4628      	mov	r0, r5
 80110aa:	f000 fc4d 	bl	8011948 <__smakebuf_r>
 80110ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110b2:	f013 0201 	ands.w	r2, r3, #1
 80110b6:	d00a      	beq.n	80110ce <__swsetup_r+0x9a>
 80110b8:	2200      	movs	r2, #0
 80110ba:	60a2      	str	r2, [r4, #8]
 80110bc:	6962      	ldr	r2, [r4, #20]
 80110be:	4252      	negs	r2, r2
 80110c0:	61a2      	str	r2, [r4, #24]
 80110c2:	6922      	ldr	r2, [r4, #16]
 80110c4:	b942      	cbnz	r2, 80110d8 <__swsetup_r+0xa4>
 80110c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80110ca:	d1c5      	bne.n	8011058 <__swsetup_r+0x24>
 80110cc:	bd38      	pop	{r3, r4, r5, pc}
 80110ce:	0799      	lsls	r1, r3, #30
 80110d0:	bf58      	it	pl
 80110d2:	6962      	ldrpl	r2, [r4, #20]
 80110d4:	60a2      	str	r2, [r4, #8]
 80110d6:	e7f4      	b.n	80110c2 <__swsetup_r+0x8e>
 80110d8:	2000      	movs	r0, #0
 80110da:	e7f7      	b.n	80110cc <__swsetup_r+0x98>
 80110dc:	20000034 	.word	0x20000034

080110e0 <memmove>:
 80110e0:	4288      	cmp	r0, r1
 80110e2:	b510      	push	{r4, lr}
 80110e4:	eb01 0402 	add.w	r4, r1, r2
 80110e8:	d902      	bls.n	80110f0 <memmove+0x10>
 80110ea:	4284      	cmp	r4, r0
 80110ec:	4623      	mov	r3, r4
 80110ee:	d807      	bhi.n	8011100 <memmove+0x20>
 80110f0:	1e43      	subs	r3, r0, #1
 80110f2:	42a1      	cmp	r1, r4
 80110f4:	d008      	beq.n	8011108 <memmove+0x28>
 80110f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110fe:	e7f8      	b.n	80110f2 <memmove+0x12>
 8011100:	4402      	add	r2, r0
 8011102:	4601      	mov	r1, r0
 8011104:	428a      	cmp	r2, r1
 8011106:	d100      	bne.n	801110a <memmove+0x2a>
 8011108:	bd10      	pop	{r4, pc}
 801110a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801110e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011112:	e7f7      	b.n	8011104 <memmove+0x24>

08011114 <strncmp>:
 8011114:	b510      	push	{r4, lr}
 8011116:	b16a      	cbz	r2, 8011134 <strncmp+0x20>
 8011118:	3901      	subs	r1, #1
 801111a:	1884      	adds	r4, r0, r2
 801111c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011120:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011124:	429a      	cmp	r2, r3
 8011126:	d103      	bne.n	8011130 <strncmp+0x1c>
 8011128:	42a0      	cmp	r0, r4
 801112a:	d001      	beq.n	8011130 <strncmp+0x1c>
 801112c:	2a00      	cmp	r2, #0
 801112e:	d1f5      	bne.n	801111c <strncmp+0x8>
 8011130:	1ad0      	subs	r0, r2, r3
 8011132:	bd10      	pop	{r4, pc}
 8011134:	4610      	mov	r0, r2
 8011136:	e7fc      	b.n	8011132 <strncmp+0x1e>

08011138 <memcpy>:
 8011138:	440a      	add	r2, r1
 801113a:	4291      	cmp	r1, r2
 801113c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011140:	d100      	bne.n	8011144 <memcpy+0xc>
 8011142:	4770      	bx	lr
 8011144:	b510      	push	{r4, lr}
 8011146:	f811 4b01 	ldrb.w	r4, [r1], #1
 801114a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801114e:	4291      	cmp	r1, r2
 8011150:	d1f9      	bne.n	8011146 <memcpy+0xe>
 8011152:	bd10      	pop	{r4, pc}
 8011154:	0000      	movs	r0, r0
	...

08011158 <nan>:
 8011158:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011160 <nan+0x8>
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	00000000 	.word	0x00000000
 8011164:	7ff80000 	.word	0x7ff80000

08011168 <__assert_func>:
 8011168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801116a:	4614      	mov	r4, r2
 801116c:	461a      	mov	r2, r3
 801116e:	4b09      	ldr	r3, [pc, #36]	@ (8011194 <__assert_func+0x2c>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4605      	mov	r5, r0
 8011174:	68d8      	ldr	r0, [r3, #12]
 8011176:	b954      	cbnz	r4, 801118e <__assert_func+0x26>
 8011178:	4b07      	ldr	r3, [pc, #28]	@ (8011198 <__assert_func+0x30>)
 801117a:	461c      	mov	r4, r3
 801117c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011180:	9100      	str	r1, [sp, #0]
 8011182:	462b      	mov	r3, r5
 8011184:	4905      	ldr	r1, [pc, #20]	@ (801119c <__assert_func+0x34>)
 8011186:	f000 fba7 	bl	80118d8 <fiprintf>
 801118a:	f000 fc3b 	bl	8011a04 <abort>
 801118e:	4b04      	ldr	r3, [pc, #16]	@ (80111a0 <__assert_func+0x38>)
 8011190:	e7f4      	b.n	801117c <__assert_func+0x14>
 8011192:	bf00      	nop
 8011194:	20000034 	.word	0x20000034
 8011198:	080126e5 	.word	0x080126e5
 801119c:	080126b7 	.word	0x080126b7
 80111a0:	080126aa 	.word	0x080126aa

080111a4 <_calloc_r>:
 80111a4:	b570      	push	{r4, r5, r6, lr}
 80111a6:	fba1 5402 	umull	r5, r4, r1, r2
 80111aa:	b93c      	cbnz	r4, 80111bc <_calloc_r+0x18>
 80111ac:	4629      	mov	r1, r5
 80111ae:	f7fc f929 	bl	800d404 <_malloc_r>
 80111b2:	4606      	mov	r6, r0
 80111b4:	b928      	cbnz	r0, 80111c2 <_calloc_r+0x1e>
 80111b6:	2600      	movs	r6, #0
 80111b8:	4630      	mov	r0, r6
 80111ba:	bd70      	pop	{r4, r5, r6, pc}
 80111bc:	220c      	movs	r2, #12
 80111be:	6002      	str	r2, [r0, #0]
 80111c0:	e7f9      	b.n	80111b6 <_calloc_r+0x12>
 80111c2:	462a      	mov	r2, r5
 80111c4:	4621      	mov	r1, r4
 80111c6:	f7fd f94c 	bl	800e462 <memset>
 80111ca:	e7f5      	b.n	80111b8 <_calloc_r+0x14>

080111cc <rshift>:
 80111cc:	6903      	ldr	r3, [r0, #16]
 80111ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80111d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80111da:	f100 0414 	add.w	r4, r0, #20
 80111de:	dd45      	ble.n	801126c <rshift+0xa0>
 80111e0:	f011 011f 	ands.w	r1, r1, #31
 80111e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80111e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80111ec:	d10c      	bne.n	8011208 <rshift+0x3c>
 80111ee:	f100 0710 	add.w	r7, r0, #16
 80111f2:	4629      	mov	r1, r5
 80111f4:	42b1      	cmp	r1, r6
 80111f6:	d334      	bcc.n	8011262 <rshift+0x96>
 80111f8:	1a9b      	subs	r3, r3, r2
 80111fa:	009b      	lsls	r3, r3, #2
 80111fc:	1eea      	subs	r2, r5, #3
 80111fe:	4296      	cmp	r6, r2
 8011200:	bf38      	it	cc
 8011202:	2300      	movcc	r3, #0
 8011204:	4423      	add	r3, r4
 8011206:	e015      	b.n	8011234 <rshift+0x68>
 8011208:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801120c:	f1c1 0820 	rsb	r8, r1, #32
 8011210:	40cf      	lsrs	r7, r1
 8011212:	f105 0e04 	add.w	lr, r5, #4
 8011216:	46a1      	mov	r9, r4
 8011218:	4576      	cmp	r6, lr
 801121a:	46f4      	mov	ip, lr
 801121c:	d815      	bhi.n	801124a <rshift+0x7e>
 801121e:	1a9a      	subs	r2, r3, r2
 8011220:	0092      	lsls	r2, r2, #2
 8011222:	3a04      	subs	r2, #4
 8011224:	3501      	adds	r5, #1
 8011226:	42ae      	cmp	r6, r5
 8011228:	bf38      	it	cc
 801122a:	2200      	movcc	r2, #0
 801122c:	18a3      	adds	r3, r4, r2
 801122e:	50a7      	str	r7, [r4, r2]
 8011230:	b107      	cbz	r7, 8011234 <rshift+0x68>
 8011232:	3304      	adds	r3, #4
 8011234:	1b1a      	subs	r2, r3, r4
 8011236:	42a3      	cmp	r3, r4
 8011238:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801123c:	bf08      	it	eq
 801123e:	2300      	moveq	r3, #0
 8011240:	6102      	str	r2, [r0, #16]
 8011242:	bf08      	it	eq
 8011244:	6143      	streq	r3, [r0, #20]
 8011246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801124a:	f8dc c000 	ldr.w	ip, [ip]
 801124e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011252:	ea4c 0707 	orr.w	r7, ip, r7
 8011256:	f849 7b04 	str.w	r7, [r9], #4
 801125a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801125e:	40cf      	lsrs	r7, r1
 8011260:	e7da      	b.n	8011218 <rshift+0x4c>
 8011262:	f851 cb04 	ldr.w	ip, [r1], #4
 8011266:	f847 cf04 	str.w	ip, [r7, #4]!
 801126a:	e7c3      	b.n	80111f4 <rshift+0x28>
 801126c:	4623      	mov	r3, r4
 801126e:	e7e1      	b.n	8011234 <rshift+0x68>

08011270 <__hexdig_fun>:
 8011270:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011274:	2b09      	cmp	r3, #9
 8011276:	d802      	bhi.n	801127e <__hexdig_fun+0xe>
 8011278:	3820      	subs	r0, #32
 801127a:	b2c0      	uxtb	r0, r0
 801127c:	4770      	bx	lr
 801127e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011282:	2b05      	cmp	r3, #5
 8011284:	d801      	bhi.n	801128a <__hexdig_fun+0x1a>
 8011286:	3847      	subs	r0, #71	@ 0x47
 8011288:	e7f7      	b.n	801127a <__hexdig_fun+0xa>
 801128a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801128e:	2b05      	cmp	r3, #5
 8011290:	d801      	bhi.n	8011296 <__hexdig_fun+0x26>
 8011292:	3827      	subs	r0, #39	@ 0x27
 8011294:	e7f1      	b.n	801127a <__hexdig_fun+0xa>
 8011296:	2000      	movs	r0, #0
 8011298:	4770      	bx	lr
	...

0801129c <__gethex>:
 801129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a0:	b085      	sub	sp, #20
 80112a2:	468a      	mov	sl, r1
 80112a4:	9302      	str	r3, [sp, #8]
 80112a6:	680b      	ldr	r3, [r1, #0]
 80112a8:	9001      	str	r0, [sp, #4]
 80112aa:	4690      	mov	r8, r2
 80112ac:	1c9c      	adds	r4, r3, #2
 80112ae:	46a1      	mov	r9, r4
 80112b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80112b4:	2830      	cmp	r0, #48	@ 0x30
 80112b6:	d0fa      	beq.n	80112ae <__gethex+0x12>
 80112b8:	eba9 0303 	sub.w	r3, r9, r3
 80112bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80112c0:	f7ff ffd6 	bl	8011270 <__hexdig_fun>
 80112c4:	4605      	mov	r5, r0
 80112c6:	2800      	cmp	r0, #0
 80112c8:	d168      	bne.n	801139c <__gethex+0x100>
 80112ca:	49a0      	ldr	r1, [pc, #640]	@ (801154c <__gethex+0x2b0>)
 80112cc:	2201      	movs	r2, #1
 80112ce:	4648      	mov	r0, r9
 80112d0:	f7ff ff20 	bl	8011114 <strncmp>
 80112d4:	4607      	mov	r7, r0
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d167      	bne.n	80113aa <__gethex+0x10e>
 80112da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80112de:	4626      	mov	r6, r4
 80112e0:	f7ff ffc6 	bl	8011270 <__hexdig_fun>
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d062      	beq.n	80113ae <__gethex+0x112>
 80112e8:	4623      	mov	r3, r4
 80112ea:	7818      	ldrb	r0, [r3, #0]
 80112ec:	2830      	cmp	r0, #48	@ 0x30
 80112ee:	4699      	mov	r9, r3
 80112f0:	f103 0301 	add.w	r3, r3, #1
 80112f4:	d0f9      	beq.n	80112ea <__gethex+0x4e>
 80112f6:	f7ff ffbb 	bl	8011270 <__hexdig_fun>
 80112fa:	fab0 f580 	clz	r5, r0
 80112fe:	096d      	lsrs	r5, r5, #5
 8011300:	f04f 0b01 	mov.w	fp, #1
 8011304:	464a      	mov	r2, r9
 8011306:	4616      	mov	r6, r2
 8011308:	3201      	adds	r2, #1
 801130a:	7830      	ldrb	r0, [r6, #0]
 801130c:	f7ff ffb0 	bl	8011270 <__hexdig_fun>
 8011310:	2800      	cmp	r0, #0
 8011312:	d1f8      	bne.n	8011306 <__gethex+0x6a>
 8011314:	498d      	ldr	r1, [pc, #564]	@ (801154c <__gethex+0x2b0>)
 8011316:	2201      	movs	r2, #1
 8011318:	4630      	mov	r0, r6
 801131a:	f7ff fefb 	bl	8011114 <strncmp>
 801131e:	2800      	cmp	r0, #0
 8011320:	d13f      	bne.n	80113a2 <__gethex+0x106>
 8011322:	b944      	cbnz	r4, 8011336 <__gethex+0x9a>
 8011324:	1c74      	adds	r4, r6, #1
 8011326:	4622      	mov	r2, r4
 8011328:	4616      	mov	r6, r2
 801132a:	3201      	adds	r2, #1
 801132c:	7830      	ldrb	r0, [r6, #0]
 801132e:	f7ff ff9f 	bl	8011270 <__hexdig_fun>
 8011332:	2800      	cmp	r0, #0
 8011334:	d1f8      	bne.n	8011328 <__gethex+0x8c>
 8011336:	1ba4      	subs	r4, r4, r6
 8011338:	00a7      	lsls	r7, r4, #2
 801133a:	7833      	ldrb	r3, [r6, #0]
 801133c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011340:	2b50      	cmp	r3, #80	@ 0x50
 8011342:	d13e      	bne.n	80113c2 <__gethex+0x126>
 8011344:	7873      	ldrb	r3, [r6, #1]
 8011346:	2b2b      	cmp	r3, #43	@ 0x2b
 8011348:	d033      	beq.n	80113b2 <__gethex+0x116>
 801134a:	2b2d      	cmp	r3, #45	@ 0x2d
 801134c:	d034      	beq.n	80113b8 <__gethex+0x11c>
 801134e:	1c71      	adds	r1, r6, #1
 8011350:	2400      	movs	r4, #0
 8011352:	7808      	ldrb	r0, [r1, #0]
 8011354:	f7ff ff8c 	bl	8011270 <__hexdig_fun>
 8011358:	1e43      	subs	r3, r0, #1
 801135a:	b2db      	uxtb	r3, r3
 801135c:	2b18      	cmp	r3, #24
 801135e:	d830      	bhi.n	80113c2 <__gethex+0x126>
 8011360:	f1a0 0210 	sub.w	r2, r0, #16
 8011364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011368:	f7ff ff82 	bl	8011270 <__hexdig_fun>
 801136c:	f100 3cff 	add.w	ip, r0, #4294967295
 8011370:	fa5f fc8c 	uxtb.w	ip, ip
 8011374:	f1bc 0f18 	cmp.w	ip, #24
 8011378:	f04f 030a 	mov.w	r3, #10
 801137c:	d91e      	bls.n	80113bc <__gethex+0x120>
 801137e:	b104      	cbz	r4, 8011382 <__gethex+0xe6>
 8011380:	4252      	negs	r2, r2
 8011382:	4417      	add	r7, r2
 8011384:	f8ca 1000 	str.w	r1, [sl]
 8011388:	b1ed      	cbz	r5, 80113c6 <__gethex+0x12a>
 801138a:	f1bb 0f00 	cmp.w	fp, #0
 801138e:	bf0c      	ite	eq
 8011390:	2506      	moveq	r5, #6
 8011392:	2500      	movne	r5, #0
 8011394:	4628      	mov	r0, r5
 8011396:	b005      	add	sp, #20
 8011398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801139c:	2500      	movs	r5, #0
 801139e:	462c      	mov	r4, r5
 80113a0:	e7b0      	b.n	8011304 <__gethex+0x68>
 80113a2:	2c00      	cmp	r4, #0
 80113a4:	d1c7      	bne.n	8011336 <__gethex+0x9a>
 80113a6:	4627      	mov	r7, r4
 80113a8:	e7c7      	b.n	801133a <__gethex+0x9e>
 80113aa:	464e      	mov	r6, r9
 80113ac:	462f      	mov	r7, r5
 80113ae:	2501      	movs	r5, #1
 80113b0:	e7c3      	b.n	801133a <__gethex+0x9e>
 80113b2:	2400      	movs	r4, #0
 80113b4:	1cb1      	adds	r1, r6, #2
 80113b6:	e7cc      	b.n	8011352 <__gethex+0xb6>
 80113b8:	2401      	movs	r4, #1
 80113ba:	e7fb      	b.n	80113b4 <__gethex+0x118>
 80113bc:	fb03 0002 	mla	r0, r3, r2, r0
 80113c0:	e7ce      	b.n	8011360 <__gethex+0xc4>
 80113c2:	4631      	mov	r1, r6
 80113c4:	e7de      	b.n	8011384 <__gethex+0xe8>
 80113c6:	eba6 0309 	sub.w	r3, r6, r9
 80113ca:	3b01      	subs	r3, #1
 80113cc:	4629      	mov	r1, r5
 80113ce:	2b07      	cmp	r3, #7
 80113d0:	dc0a      	bgt.n	80113e8 <__gethex+0x14c>
 80113d2:	9801      	ldr	r0, [sp, #4]
 80113d4:	f7fd ff72 	bl	800f2bc <_Balloc>
 80113d8:	4604      	mov	r4, r0
 80113da:	b940      	cbnz	r0, 80113ee <__gethex+0x152>
 80113dc:	4b5c      	ldr	r3, [pc, #368]	@ (8011550 <__gethex+0x2b4>)
 80113de:	4602      	mov	r2, r0
 80113e0:	21e4      	movs	r1, #228	@ 0xe4
 80113e2:	485c      	ldr	r0, [pc, #368]	@ (8011554 <__gethex+0x2b8>)
 80113e4:	f7ff fec0 	bl	8011168 <__assert_func>
 80113e8:	3101      	adds	r1, #1
 80113ea:	105b      	asrs	r3, r3, #1
 80113ec:	e7ef      	b.n	80113ce <__gethex+0x132>
 80113ee:	f100 0a14 	add.w	sl, r0, #20
 80113f2:	2300      	movs	r3, #0
 80113f4:	4655      	mov	r5, sl
 80113f6:	469b      	mov	fp, r3
 80113f8:	45b1      	cmp	r9, r6
 80113fa:	d337      	bcc.n	801146c <__gethex+0x1d0>
 80113fc:	f845 bb04 	str.w	fp, [r5], #4
 8011400:	eba5 050a 	sub.w	r5, r5, sl
 8011404:	10ad      	asrs	r5, r5, #2
 8011406:	6125      	str	r5, [r4, #16]
 8011408:	4658      	mov	r0, fp
 801140a:	f7fe f849 	bl	800f4a0 <__hi0bits>
 801140e:	016d      	lsls	r5, r5, #5
 8011410:	f8d8 6000 	ldr.w	r6, [r8]
 8011414:	1a2d      	subs	r5, r5, r0
 8011416:	42b5      	cmp	r5, r6
 8011418:	dd54      	ble.n	80114c4 <__gethex+0x228>
 801141a:	1bad      	subs	r5, r5, r6
 801141c:	4629      	mov	r1, r5
 801141e:	4620      	mov	r0, r4
 8011420:	f7fe fbdd 	bl	800fbde <__any_on>
 8011424:	4681      	mov	r9, r0
 8011426:	b178      	cbz	r0, 8011448 <__gethex+0x1ac>
 8011428:	1e6b      	subs	r3, r5, #1
 801142a:	1159      	asrs	r1, r3, #5
 801142c:	f003 021f 	and.w	r2, r3, #31
 8011430:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011434:	f04f 0901 	mov.w	r9, #1
 8011438:	fa09 f202 	lsl.w	r2, r9, r2
 801143c:	420a      	tst	r2, r1
 801143e:	d003      	beq.n	8011448 <__gethex+0x1ac>
 8011440:	454b      	cmp	r3, r9
 8011442:	dc36      	bgt.n	80114b2 <__gethex+0x216>
 8011444:	f04f 0902 	mov.w	r9, #2
 8011448:	4629      	mov	r1, r5
 801144a:	4620      	mov	r0, r4
 801144c:	f7ff febe 	bl	80111cc <rshift>
 8011450:	442f      	add	r7, r5
 8011452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011456:	42bb      	cmp	r3, r7
 8011458:	da42      	bge.n	80114e0 <__gethex+0x244>
 801145a:	9801      	ldr	r0, [sp, #4]
 801145c:	4621      	mov	r1, r4
 801145e:	f7fd ff6d 	bl	800f33c <_Bfree>
 8011462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011464:	2300      	movs	r3, #0
 8011466:	6013      	str	r3, [r2, #0]
 8011468:	25a3      	movs	r5, #163	@ 0xa3
 801146a:	e793      	b.n	8011394 <__gethex+0xf8>
 801146c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011470:	2a2e      	cmp	r2, #46	@ 0x2e
 8011472:	d012      	beq.n	801149a <__gethex+0x1fe>
 8011474:	2b20      	cmp	r3, #32
 8011476:	d104      	bne.n	8011482 <__gethex+0x1e6>
 8011478:	f845 bb04 	str.w	fp, [r5], #4
 801147c:	f04f 0b00 	mov.w	fp, #0
 8011480:	465b      	mov	r3, fp
 8011482:	7830      	ldrb	r0, [r6, #0]
 8011484:	9303      	str	r3, [sp, #12]
 8011486:	f7ff fef3 	bl	8011270 <__hexdig_fun>
 801148a:	9b03      	ldr	r3, [sp, #12]
 801148c:	f000 000f 	and.w	r0, r0, #15
 8011490:	4098      	lsls	r0, r3
 8011492:	ea4b 0b00 	orr.w	fp, fp, r0
 8011496:	3304      	adds	r3, #4
 8011498:	e7ae      	b.n	80113f8 <__gethex+0x15c>
 801149a:	45b1      	cmp	r9, r6
 801149c:	d8ea      	bhi.n	8011474 <__gethex+0x1d8>
 801149e:	492b      	ldr	r1, [pc, #172]	@ (801154c <__gethex+0x2b0>)
 80114a0:	9303      	str	r3, [sp, #12]
 80114a2:	2201      	movs	r2, #1
 80114a4:	4630      	mov	r0, r6
 80114a6:	f7ff fe35 	bl	8011114 <strncmp>
 80114aa:	9b03      	ldr	r3, [sp, #12]
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d1e1      	bne.n	8011474 <__gethex+0x1d8>
 80114b0:	e7a2      	b.n	80113f8 <__gethex+0x15c>
 80114b2:	1ea9      	subs	r1, r5, #2
 80114b4:	4620      	mov	r0, r4
 80114b6:	f7fe fb92 	bl	800fbde <__any_on>
 80114ba:	2800      	cmp	r0, #0
 80114bc:	d0c2      	beq.n	8011444 <__gethex+0x1a8>
 80114be:	f04f 0903 	mov.w	r9, #3
 80114c2:	e7c1      	b.n	8011448 <__gethex+0x1ac>
 80114c4:	da09      	bge.n	80114da <__gethex+0x23e>
 80114c6:	1b75      	subs	r5, r6, r5
 80114c8:	4621      	mov	r1, r4
 80114ca:	9801      	ldr	r0, [sp, #4]
 80114cc:	462a      	mov	r2, r5
 80114ce:	f7fe f94d 	bl	800f76c <__lshift>
 80114d2:	1b7f      	subs	r7, r7, r5
 80114d4:	4604      	mov	r4, r0
 80114d6:	f100 0a14 	add.w	sl, r0, #20
 80114da:	f04f 0900 	mov.w	r9, #0
 80114de:	e7b8      	b.n	8011452 <__gethex+0x1b6>
 80114e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80114e4:	42bd      	cmp	r5, r7
 80114e6:	dd6f      	ble.n	80115c8 <__gethex+0x32c>
 80114e8:	1bed      	subs	r5, r5, r7
 80114ea:	42ae      	cmp	r6, r5
 80114ec:	dc34      	bgt.n	8011558 <__gethex+0x2bc>
 80114ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80114f2:	2b02      	cmp	r3, #2
 80114f4:	d022      	beq.n	801153c <__gethex+0x2a0>
 80114f6:	2b03      	cmp	r3, #3
 80114f8:	d024      	beq.n	8011544 <__gethex+0x2a8>
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d115      	bne.n	801152a <__gethex+0x28e>
 80114fe:	42ae      	cmp	r6, r5
 8011500:	d113      	bne.n	801152a <__gethex+0x28e>
 8011502:	2e01      	cmp	r6, #1
 8011504:	d10b      	bne.n	801151e <__gethex+0x282>
 8011506:	9a02      	ldr	r2, [sp, #8]
 8011508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801150c:	6013      	str	r3, [r2, #0]
 801150e:	2301      	movs	r3, #1
 8011510:	6123      	str	r3, [r4, #16]
 8011512:	f8ca 3000 	str.w	r3, [sl]
 8011516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011518:	2562      	movs	r5, #98	@ 0x62
 801151a:	601c      	str	r4, [r3, #0]
 801151c:	e73a      	b.n	8011394 <__gethex+0xf8>
 801151e:	1e71      	subs	r1, r6, #1
 8011520:	4620      	mov	r0, r4
 8011522:	f7fe fb5c 	bl	800fbde <__any_on>
 8011526:	2800      	cmp	r0, #0
 8011528:	d1ed      	bne.n	8011506 <__gethex+0x26a>
 801152a:	9801      	ldr	r0, [sp, #4]
 801152c:	4621      	mov	r1, r4
 801152e:	f7fd ff05 	bl	800f33c <_Bfree>
 8011532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011534:	2300      	movs	r3, #0
 8011536:	6013      	str	r3, [r2, #0]
 8011538:	2550      	movs	r5, #80	@ 0x50
 801153a:	e72b      	b.n	8011394 <__gethex+0xf8>
 801153c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1f3      	bne.n	801152a <__gethex+0x28e>
 8011542:	e7e0      	b.n	8011506 <__gethex+0x26a>
 8011544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011546:	2b00      	cmp	r3, #0
 8011548:	d1dd      	bne.n	8011506 <__gethex+0x26a>
 801154a:	e7ee      	b.n	801152a <__gethex+0x28e>
 801154c:	08012538 	.word	0x08012538
 8011550:	080123d1 	.word	0x080123d1
 8011554:	080126e6 	.word	0x080126e6
 8011558:	1e6f      	subs	r7, r5, #1
 801155a:	f1b9 0f00 	cmp.w	r9, #0
 801155e:	d130      	bne.n	80115c2 <__gethex+0x326>
 8011560:	b127      	cbz	r7, 801156c <__gethex+0x2d0>
 8011562:	4639      	mov	r1, r7
 8011564:	4620      	mov	r0, r4
 8011566:	f7fe fb3a 	bl	800fbde <__any_on>
 801156a:	4681      	mov	r9, r0
 801156c:	117a      	asrs	r2, r7, #5
 801156e:	2301      	movs	r3, #1
 8011570:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8011574:	f007 071f 	and.w	r7, r7, #31
 8011578:	40bb      	lsls	r3, r7
 801157a:	4213      	tst	r3, r2
 801157c:	4629      	mov	r1, r5
 801157e:	4620      	mov	r0, r4
 8011580:	bf18      	it	ne
 8011582:	f049 0902 	orrne.w	r9, r9, #2
 8011586:	f7ff fe21 	bl	80111cc <rshift>
 801158a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801158e:	1b76      	subs	r6, r6, r5
 8011590:	2502      	movs	r5, #2
 8011592:	f1b9 0f00 	cmp.w	r9, #0
 8011596:	d047      	beq.n	8011628 <__gethex+0x38c>
 8011598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801159c:	2b02      	cmp	r3, #2
 801159e:	d015      	beq.n	80115cc <__gethex+0x330>
 80115a0:	2b03      	cmp	r3, #3
 80115a2:	d017      	beq.n	80115d4 <__gethex+0x338>
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d109      	bne.n	80115bc <__gethex+0x320>
 80115a8:	f019 0f02 	tst.w	r9, #2
 80115ac:	d006      	beq.n	80115bc <__gethex+0x320>
 80115ae:	f8da 3000 	ldr.w	r3, [sl]
 80115b2:	ea49 0903 	orr.w	r9, r9, r3
 80115b6:	f019 0f01 	tst.w	r9, #1
 80115ba:	d10e      	bne.n	80115da <__gethex+0x33e>
 80115bc:	f045 0510 	orr.w	r5, r5, #16
 80115c0:	e032      	b.n	8011628 <__gethex+0x38c>
 80115c2:	f04f 0901 	mov.w	r9, #1
 80115c6:	e7d1      	b.n	801156c <__gethex+0x2d0>
 80115c8:	2501      	movs	r5, #1
 80115ca:	e7e2      	b.n	8011592 <__gethex+0x2f6>
 80115cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115ce:	f1c3 0301 	rsb	r3, r3, #1
 80115d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80115d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d0f0      	beq.n	80115bc <__gethex+0x320>
 80115da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80115de:	f104 0314 	add.w	r3, r4, #20
 80115e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80115e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80115ea:	f04f 0c00 	mov.w	ip, #0
 80115ee:	4618      	mov	r0, r3
 80115f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80115f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80115f8:	d01b      	beq.n	8011632 <__gethex+0x396>
 80115fa:	3201      	adds	r2, #1
 80115fc:	6002      	str	r2, [r0, #0]
 80115fe:	2d02      	cmp	r5, #2
 8011600:	f104 0314 	add.w	r3, r4, #20
 8011604:	d13c      	bne.n	8011680 <__gethex+0x3e4>
 8011606:	f8d8 2000 	ldr.w	r2, [r8]
 801160a:	3a01      	subs	r2, #1
 801160c:	42b2      	cmp	r2, r6
 801160e:	d109      	bne.n	8011624 <__gethex+0x388>
 8011610:	1171      	asrs	r1, r6, #5
 8011612:	2201      	movs	r2, #1
 8011614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011618:	f006 061f 	and.w	r6, r6, #31
 801161c:	fa02 f606 	lsl.w	r6, r2, r6
 8011620:	421e      	tst	r6, r3
 8011622:	d13a      	bne.n	801169a <__gethex+0x3fe>
 8011624:	f045 0520 	orr.w	r5, r5, #32
 8011628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801162a:	601c      	str	r4, [r3, #0]
 801162c:	9b02      	ldr	r3, [sp, #8]
 801162e:	601f      	str	r7, [r3, #0]
 8011630:	e6b0      	b.n	8011394 <__gethex+0xf8>
 8011632:	4299      	cmp	r1, r3
 8011634:	f843 cc04 	str.w	ip, [r3, #-4]
 8011638:	d8d9      	bhi.n	80115ee <__gethex+0x352>
 801163a:	68a3      	ldr	r3, [r4, #8]
 801163c:	459b      	cmp	fp, r3
 801163e:	db17      	blt.n	8011670 <__gethex+0x3d4>
 8011640:	6861      	ldr	r1, [r4, #4]
 8011642:	9801      	ldr	r0, [sp, #4]
 8011644:	3101      	adds	r1, #1
 8011646:	f7fd fe39 	bl	800f2bc <_Balloc>
 801164a:	4681      	mov	r9, r0
 801164c:	b918      	cbnz	r0, 8011656 <__gethex+0x3ba>
 801164e:	4b1a      	ldr	r3, [pc, #104]	@ (80116b8 <__gethex+0x41c>)
 8011650:	4602      	mov	r2, r0
 8011652:	2184      	movs	r1, #132	@ 0x84
 8011654:	e6c5      	b.n	80113e2 <__gethex+0x146>
 8011656:	6922      	ldr	r2, [r4, #16]
 8011658:	3202      	adds	r2, #2
 801165a:	f104 010c 	add.w	r1, r4, #12
 801165e:	0092      	lsls	r2, r2, #2
 8011660:	300c      	adds	r0, #12
 8011662:	f7ff fd69 	bl	8011138 <memcpy>
 8011666:	4621      	mov	r1, r4
 8011668:	9801      	ldr	r0, [sp, #4]
 801166a:	f7fd fe67 	bl	800f33c <_Bfree>
 801166e:	464c      	mov	r4, r9
 8011670:	6923      	ldr	r3, [r4, #16]
 8011672:	1c5a      	adds	r2, r3, #1
 8011674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011678:	6122      	str	r2, [r4, #16]
 801167a:	2201      	movs	r2, #1
 801167c:	615a      	str	r2, [r3, #20]
 801167e:	e7be      	b.n	80115fe <__gethex+0x362>
 8011680:	6922      	ldr	r2, [r4, #16]
 8011682:	455a      	cmp	r2, fp
 8011684:	dd0b      	ble.n	801169e <__gethex+0x402>
 8011686:	2101      	movs	r1, #1
 8011688:	4620      	mov	r0, r4
 801168a:	f7ff fd9f 	bl	80111cc <rshift>
 801168e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011692:	3701      	adds	r7, #1
 8011694:	42bb      	cmp	r3, r7
 8011696:	f6ff aee0 	blt.w	801145a <__gethex+0x1be>
 801169a:	2501      	movs	r5, #1
 801169c:	e7c2      	b.n	8011624 <__gethex+0x388>
 801169e:	f016 061f 	ands.w	r6, r6, #31
 80116a2:	d0fa      	beq.n	801169a <__gethex+0x3fe>
 80116a4:	4453      	add	r3, sl
 80116a6:	f1c6 0620 	rsb	r6, r6, #32
 80116aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80116ae:	f7fd fef7 	bl	800f4a0 <__hi0bits>
 80116b2:	42b0      	cmp	r0, r6
 80116b4:	dbe7      	blt.n	8011686 <__gethex+0x3ea>
 80116b6:	e7f0      	b.n	801169a <__gethex+0x3fe>
 80116b8:	080123d1 	.word	0x080123d1

080116bc <L_shift>:
 80116bc:	f1c2 0208 	rsb	r2, r2, #8
 80116c0:	0092      	lsls	r2, r2, #2
 80116c2:	b570      	push	{r4, r5, r6, lr}
 80116c4:	f1c2 0620 	rsb	r6, r2, #32
 80116c8:	6843      	ldr	r3, [r0, #4]
 80116ca:	6804      	ldr	r4, [r0, #0]
 80116cc:	fa03 f506 	lsl.w	r5, r3, r6
 80116d0:	432c      	orrs	r4, r5
 80116d2:	40d3      	lsrs	r3, r2
 80116d4:	6004      	str	r4, [r0, #0]
 80116d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80116da:	4288      	cmp	r0, r1
 80116dc:	d3f4      	bcc.n	80116c8 <L_shift+0xc>
 80116de:	bd70      	pop	{r4, r5, r6, pc}

080116e0 <__match>:
 80116e0:	b530      	push	{r4, r5, lr}
 80116e2:	6803      	ldr	r3, [r0, #0]
 80116e4:	3301      	adds	r3, #1
 80116e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116ea:	b914      	cbnz	r4, 80116f2 <__match+0x12>
 80116ec:	6003      	str	r3, [r0, #0]
 80116ee:	2001      	movs	r0, #1
 80116f0:	bd30      	pop	{r4, r5, pc}
 80116f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80116fa:	2d19      	cmp	r5, #25
 80116fc:	bf98      	it	ls
 80116fe:	3220      	addls	r2, #32
 8011700:	42a2      	cmp	r2, r4
 8011702:	d0f0      	beq.n	80116e6 <__match+0x6>
 8011704:	2000      	movs	r0, #0
 8011706:	e7f3      	b.n	80116f0 <__match+0x10>

08011708 <__hexnan>:
 8011708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801170c:	680b      	ldr	r3, [r1, #0]
 801170e:	6801      	ldr	r1, [r0, #0]
 8011710:	115e      	asrs	r6, r3, #5
 8011712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011716:	f013 031f 	ands.w	r3, r3, #31
 801171a:	b087      	sub	sp, #28
 801171c:	bf18      	it	ne
 801171e:	3604      	addne	r6, #4
 8011720:	2500      	movs	r5, #0
 8011722:	1f37      	subs	r7, r6, #4
 8011724:	4682      	mov	sl, r0
 8011726:	4690      	mov	r8, r2
 8011728:	9301      	str	r3, [sp, #4]
 801172a:	f846 5c04 	str.w	r5, [r6, #-4]
 801172e:	46b9      	mov	r9, r7
 8011730:	463c      	mov	r4, r7
 8011732:	9502      	str	r5, [sp, #8]
 8011734:	46ab      	mov	fp, r5
 8011736:	784a      	ldrb	r2, [r1, #1]
 8011738:	1c4b      	adds	r3, r1, #1
 801173a:	9303      	str	r3, [sp, #12]
 801173c:	b342      	cbz	r2, 8011790 <__hexnan+0x88>
 801173e:	4610      	mov	r0, r2
 8011740:	9105      	str	r1, [sp, #20]
 8011742:	9204      	str	r2, [sp, #16]
 8011744:	f7ff fd94 	bl	8011270 <__hexdig_fun>
 8011748:	2800      	cmp	r0, #0
 801174a:	d151      	bne.n	80117f0 <__hexnan+0xe8>
 801174c:	9a04      	ldr	r2, [sp, #16]
 801174e:	9905      	ldr	r1, [sp, #20]
 8011750:	2a20      	cmp	r2, #32
 8011752:	d818      	bhi.n	8011786 <__hexnan+0x7e>
 8011754:	9b02      	ldr	r3, [sp, #8]
 8011756:	459b      	cmp	fp, r3
 8011758:	dd13      	ble.n	8011782 <__hexnan+0x7a>
 801175a:	454c      	cmp	r4, r9
 801175c:	d206      	bcs.n	801176c <__hexnan+0x64>
 801175e:	2d07      	cmp	r5, #7
 8011760:	dc04      	bgt.n	801176c <__hexnan+0x64>
 8011762:	462a      	mov	r2, r5
 8011764:	4649      	mov	r1, r9
 8011766:	4620      	mov	r0, r4
 8011768:	f7ff ffa8 	bl	80116bc <L_shift>
 801176c:	4544      	cmp	r4, r8
 801176e:	d952      	bls.n	8011816 <__hexnan+0x10e>
 8011770:	2300      	movs	r3, #0
 8011772:	f1a4 0904 	sub.w	r9, r4, #4
 8011776:	f844 3c04 	str.w	r3, [r4, #-4]
 801177a:	f8cd b008 	str.w	fp, [sp, #8]
 801177e:	464c      	mov	r4, r9
 8011780:	461d      	mov	r5, r3
 8011782:	9903      	ldr	r1, [sp, #12]
 8011784:	e7d7      	b.n	8011736 <__hexnan+0x2e>
 8011786:	2a29      	cmp	r2, #41	@ 0x29
 8011788:	d157      	bne.n	801183a <__hexnan+0x132>
 801178a:	3102      	adds	r1, #2
 801178c:	f8ca 1000 	str.w	r1, [sl]
 8011790:	f1bb 0f00 	cmp.w	fp, #0
 8011794:	d051      	beq.n	801183a <__hexnan+0x132>
 8011796:	454c      	cmp	r4, r9
 8011798:	d206      	bcs.n	80117a8 <__hexnan+0xa0>
 801179a:	2d07      	cmp	r5, #7
 801179c:	dc04      	bgt.n	80117a8 <__hexnan+0xa0>
 801179e:	462a      	mov	r2, r5
 80117a0:	4649      	mov	r1, r9
 80117a2:	4620      	mov	r0, r4
 80117a4:	f7ff ff8a 	bl	80116bc <L_shift>
 80117a8:	4544      	cmp	r4, r8
 80117aa:	d936      	bls.n	801181a <__hexnan+0x112>
 80117ac:	f1a8 0204 	sub.w	r2, r8, #4
 80117b0:	4623      	mov	r3, r4
 80117b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80117b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80117ba:	429f      	cmp	r7, r3
 80117bc:	d2f9      	bcs.n	80117b2 <__hexnan+0xaa>
 80117be:	1b3b      	subs	r3, r7, r4
 80117c0:	f023 0303 	bic.w	r3, r3, #3
 80117c4:	3304      	adds	r3, #4
 80117c6:	3401      	adds	r4, #1
 80117c8:	3e03      	subs	r6, #3
 80117ca:	42b4      	cmp	r4, r6
 80117cc:	bf88      	it	hi
 80117ce:	2304      	movhi	r3, #4
 80117d0:	4443      	add	r3, r8
 80117d2:	2200      	movs	r2, #0
 80117d4:	f843 2b04 	str.w	r2, [r3], #4
 80117d8:	429f      	cmp	r7, r3
 80117da:	d2fb      	bcs.n	80117d4 <__hexnan+0xcc>
 80117dc:	683b      	ldr	r3, [r7, #0]
 80117de:	b91b      	cbnz	r3, 80117e8 <__hexnan+0xe0>
 80117e0:	4547      	cmp	r7, r8
 80117e2:	d128      	bne.n	8011836 <__hexnan+0x12e>
 80117e4:	2301      	movs	r3, #1
 80117e6:	603b      	str	r3, [r7, #0]
 80117e8:	2005      	movs	r0, #5
 80117ea:	b007      	add	sp, #28
 80117ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117f0:	3501      	adds	r5, #1
 80117f2:	2d08      	cmp	r5, #8
 80117f4:	f10b 0b01 	add.w	fp, fp, #1
 80117f8:	dd06      	ble.n	8011808 <__hexnan+0x100>
 80117fa:	4544      	cmp	r4, r8
 80117fc:	d9c1      	bls.n	8011782 <__hexnan+0x7a>
 80117fe:	2300      	movs	r3, #0
 8011800:	f844 3c04 	str.w	r3, [r4, #-4]
 8011804:	2501      	movs	r5, #1
 8011806:	3c04      	subs	r4, #4
 8011808:	6822      	ldr	r2, [r4, #0]
 801180a:	f000 000f 	and.w	r0, r0, #15
 801180e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011812:	6020      	str	r0, [r4, #0]
 8011814:	e7b5      	b.n	8011782 <__hexnan+0x7a>
 8011816:	2508      	movs	r5, #8
 8011818:	e7b3      	b.n	8011782 <__hexnan+0x7a>
 801181a:	9b01      	ldr	r3, [sp, #4]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d0dd      	beq.n	80117dc <__hexnan+0xd4>
 8011820:	f1c3 0320 	rsb	r3, r3, #32
 8011824:	f04f 32ff 	mov.w	r2, #4294967295
 8011828:	40da      	lsrs	r2, r3
 801182a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801182e:	4013      	ands	r3, r2
 8011830:	f846 3c04 	str.w	r3, [r6, #-4]
 8011834:	e7d2      	b.n	80117dc <__hexnan+0xd4>
 8011836:	3f04      	subs	r7, #4
 8011838:	e7d0      	b.n	80117dc <__hexnan+0xd4>
 801183a:	2004      	movs	r0, #4
 801183c:	e7d5      	b.n	80117ea <__hexnan+0xe2>

0801183e <__ascii_mbtowc>:
 801183e:	b082      	sub	sp, #8
 8011840:	b901      	cbnz	r1, 8011844 <__ascii_mbtowc+0x6>
 8011842:	a901      	add	r1, sp, #4
 8011844:	b142      	cbz	r2, 8011858 <__ascii_mbtowc+0x1a>
 8011846:	b14b      	cbz	r3, 801185c <__ascii_mbtowc+0x1e>
 8011848:	7813      	ldrb	r3, [r2, #0]
 801184a:	600b      	str	r3, [r1, #0]
 801184c:	7812      	ldrb	r2, [r2, #0]
 801184e:	1e10      	subs	r0, r2, #0
 8011850:	bf18      	it	ne
 8011852:	2001      	movne	r0, #1
 8011854:	b002      	add	sp, #8
 8011856:	4770      	bx	lr
 8011858:	4610      	mov	r0, r2
 801185a:	e7fb      	b.n	8011854 <__ascii_mbtowc+0x16>
 801185c:	f06f 0001 	mvn.w	r0, #1
 8011860:	e7f8      	b.n	8011854 <__ascii_mbtowc+0x16>

08011862 <_realloc_r>:
 8011862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011866:	4680      	mov	r8, r0
 8011868:	4615      	mov	r5, r2
 801186a:	460c      	mov	r4, r1
 801186c:	b921      	cbnz	r1, 8011878 <_realloc_r+0x16>
 801186e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011872:	4611      	mov	r1, r2
 8011874:	f7fb bdc6 	b.w	800d404 <_malloc_r>
 8011878:	b92a      	cbnz	r2, 8011886 <_realloc_r+0x24>
 801187a:	f7fd fcd5 	bl	800f228 <_free_r>
 801187e:	2400      	movs	r4, #0
 8011880:	4620      	mov	r0, r4
 8011882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011886:	f000 f8c4 	bl	8011a12 <_malloc_usable_size_r>
 801188a:	4285      	cmp	r5, r0
 801188c:	4606      	mov	r6, r0
 801188e:	d802      	bhi.n	8011896 <_realloc_r+0x34>
 8011890:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011894:	d8f4      	bhi.n	8011880 <_realloc_r+0x1e>
 8011896:	4629      	mov	r1, r5
 8011898:	4640      	mov	r0, r8
 801189a:	f7fb fdb3 	bl	800d404 <_malloc_r>
 801189e:	4607      	mov	r7, r0
 80118a0:	2800      	cmp	r0, #0
 80118a2:	d0ec      	beq.n	801187e <_realloc_r+0x1c>
 80118a4:	42b5      	cmp	r5, r6
 80118a6:	462a      	mov	r2, r5
 80118a8:	4621      	mov	r1, r4
 80118aa:	bf28      	it	cs
 80118ac:	4632      	movcs	r2, r6
 80118ae:	f7ff fc43 	bl	8011138 <memcpy>
 80118b2:	4621      	mov	r1, r4
 80118b4:	4640      	mov	r0, r8
 80118b6:	f7fd fcb7 	bl	800f228 <_free_r>
 80118ba:	463c      	mov	r4, r7
 80118bc:	e7e0      	b.n	8011880 <_realloc_r+0x1e>

080118be <__ascii_wctomb>:
 80118be:	4603      	mov	r3, r0
 80118c0:	4608      	mov	r0, r1
 80118c2:	b141      	cbz	r1, 80118d6 <__ascii_wctomb+0x18>
 80118c4:	2aff      	cmp	r2, #255	@ 0xff
 80118c6:	d904      	bls.n	80118d2 <__ascii_wctomb+0x14>
 80118c8:	228a      	movs	r2, #138	@ 0x8a
 80118ca:	601a      	str	r2, [r3, #0]
 80118cc:	f04f 30ff 	mov.w	r0, #4294967295
 80118d0:	4770      	bx	lr
 80118d2:	700a      	strb	r2, [r1, #0]
 80118d4:	2001      	movs	r0, #1
 80118d6:	4770      	bx	lr

080118d8 <fiprintf>:
 80118d8:	b40e      	push	{r1, r2, r3}
 80118da:	b503      	push	{r0, r1, lr}
 80118dc:	4601      	mov	r1, r0
 80118de:	ab03      	add	r3, sp, #12
 80118e0:	4805      	ldr	r0, [pc, #20]	@ (80118f8 <fiprintf+0x20>)
 80118e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80118e6:	6800      	ldr	r0, [r0, #0]
 80118e8:	9301      	str	r3, [sp, #4]
 80118ea:	f7ff f9a1 	bl	8010c30 <_vfiprintf_r>
 80118ee:	b002      	add	sp, #8
 80118f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80118f4:	b003      	add	sp, #12
 80118f6:	4770      	bx	lr
 80118f8:	20000034 	.word	0x20000034

080118fc <__swhatbuf_r>:
 80118fc:	b570      	push	{r4, r5, r6, lr}
 80118fe:	460c      	mov	r4, r1
 8011900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011904:	2900      	cmp	r1, #0
 8011906:	b096      	sub	sp, #88	@ 0x58
 8011908:	4615      	mov	r5, r2
 801190a:	461e      	mov	r6, r3
 801190c:	da0d      	bge.n	801192a <__swhatbuf_r+0x2e>
 801190e:	89a3      	ldrh	r3, [r4, #12]
 8011910:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011914:	f04f 0100 	mov.w	r1, #0
 8011918:	bf14      	ite	ne
 801191a:	2340      	movne	r3, #64	@ 0x40
 801191c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011920:	2000      	movs	r0, #0
 8011922:	6031      	str	r1, [r6, #0]
 8011924:	602b      	str	r3, [r5, #0]
 8011926:	b016      	add	sp, #88	@ 0x58
 8011928:	bd70      	pop	{r4, r5, r6, pc}
 801192a:	466a      	mov	r2, sp
 801192c:	f000 f848 	bl	80119c0 <_fstat_r>
 8011930:	2800      	cmp	r0, #0
 8011932:	dbec      	blt.n	801190e <__swhatbuf_r+0x12>
 8011934:	9901      	ldr	r1, [sp, #4]
 8011936:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801193a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801193e:	4259      	negs	r1, r3
 8011940:	4159      	adcs	r1, r3
 8011942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011946:	e7eb      	b.n	8011920 <__swhatbuf_r+0x24>

08011948 <__smakebuf_r>:
 8011948:	898b      	ldrh	r3, [r1, #12]
 801194a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801194c:	079d      	lsls	r5, r3, #30
 801194e:	4606      	mov	r6, r0
 8011950:	460c      	mov	r4, r1
 8011952:	d507      	bpl.n	8011964 <__smakebuf_r+0x1c>
 8011954:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011958:	6023      	str	r3, [r4, #0]
 801195a:	6123      	str	r3, [r4, #16]
 801195c:	2301      	movs	r3, #1
 801195e:	6163      	str	r3, [r4, #20]
 8011960:	b003      	add	sp, #12
 8011962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011964:	ab01      	add	r3, sp, #4
 8011966:	466a      	mov	r2, sp
 8011968:	f7ff ffc8 	bl	80118fc <__swhatbuf_r>
 801196c:	9f00      	ldr	r7, [sp, #0]
 801196e:	4605      	mov	r5, r0
 8011970:	4639      	mov	r1, r7
 8011972:	4630      	mov	r0, r6
 8011974:	f7fb fd46 	bl	800d404 <_malloc_r>
 8011978:	b948      	cbnz	r0, 801198e <__smakebuf_r+0x46>
 801197a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801197e:	059a      	lsls	r2, r3, #22
 8011980:	d4ee      	bmi.n	8011960 <__smakebuf_r+0x18>
 8011982:	f023 0303 	bic.w	r3, r3, #3
 8011986:	f043 0302 	orr.w	r3, r3, #2
 801198a:	81a3      	strh	r3, [r4, #12]
 801198c:	e7e2      	b.n	8011954 <__smakebuf_r+0xc>
 801198e:	89a3      	ldrh	r3, [r4, #12]
 8011990:	6020      	str	r0, [r4, #0]
 8011992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011996:	81a3      	strh	r3, [r4, #12]
 8011998:	9b01      	ldr	r3, [sp, #4]
 801199a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801199e:	b15b      	cbz	r3, 80119b8 <__smakebuf_r+0x70>
 80119a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119a4:	4630      	mov	r0, r6
 80119a6:	f000 f81d 	bl	80119e4 <_isatty_r>
 80119aa:	b128      	cbz	r0, 80119b8 <__smakebuf_r+0x70>
 80119ac:	89a3      	ldrh	r3, [r4, #12]
 80119ae:	f023 0303 	bic.w	r3, r3, #3
 80119b2:	f043 0301 	orr.w	r3, r3, #1
 80119b6:	81a3      	strh	r3, [r4, #12]
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	431d      	orrs	r5, r3
 80119bc:	81a5      	strh	r5, [r4, #12]
 80119be:	e7cf      	b.n	8011960 <__smakebuf_r+0x18>

080119c0 <_fstat_r>:
 80119c0:	b538      	push	{r3, r4, r5, lr}
 80119c2:	4d07      	ldr	r5, [pc, #28]	@ (80119e0 <_fstat_r+0x20>)
 80119c4:	2300      	movs	r3, #0
 80119c6:	4604      	mov	r4, r0
 80119c8:	4608      	mov	r0, r1
 80119ca:	4611      	mov	r1, r2
 80119cc:	602b      	str	r3, [r5, #0]
 80119ce:	f7f2 f905 	bl	8003bdc <_fstat>
 80119d2:	1c43      	adds	r3, r0, #1
 80119d4:	d102      	bne.n	80119dc <_fstat_r+0x1c>
 80119d6:	682b      	ldr	r3, [r5, #0]
 80119d8:	b103      	cbz	r3, 80119dc <_fstat_r+0x1c>
 80119da:	6023      	str	r3, [r4, #0]
 80119dc:	bd38      	pop	{r3, r4, r5, pc}
 80119de:	bf00      	nop
 80119e0:	20002c90 	.word	0x20002c90

080119e4 <_isatty_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	4d06      	ldr	r5, [pc, #24]	@ (8011a00 <_isatty_r+0x1c>)
 80119e8:	2300      	movs	r3, #0
 80119ea:	4604      	mov	r4, r0
 80119ec:	4608      	mov	r0, r1
 80119ee:	602b      	str	r3, [r5, #0]
 80119f0:	f7f2 f904 	bl	8003bfc <_isatty>
 80119f4:	1c43      	adds	r3, r0, #1
 80119f6:	d102      	bne.n	80119fe <_isatty_r+0x1a>
 80119f8:	682b      	ldr	r3, [r5, #0]
 80119fa:	b103      	cbz	r3, 80119fe <_isatty_r+0x1a>
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	bd38      	pop	{r3, r4, r5, pc}
 8011a00:	20002c90 	.word	0x20002c90

08011a04 <abort>:
 8011a04:	b508      	push	{r3, lr}
 8011a06:	2006      	movs	r0, #6
 8011a08:	f000 f834 	bl	8011a74 <raise>
 8011a0c:	2001      	movs	r0, #1
 8011a0e:	f7f2 f895 	bl	8003b3c <_exit>

08011a12 <_malloc_usable_size_r>:
 8011a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a16:	1f18      	subs	r0, r3, #4
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	bfbc      	itt	lt
 8011a1c:	580b      	ldrlt	r3, [r1, r0]
 8011a1e:	18c0      	addlt	r0, r0, r3
 8011a20:	4770      	bx	lr

08011a22 <_raise_r>:
 8011a22:	291f      	cmp	r1, #31
 8011a24:	b538      	push	{r3, r4, r5, lr}
 8011a26:	4605      	mov	r5, r0
 8011a28:	460c      	mov	r4, r1
 8011a2a:	d904      	bls.n	8011a36 <_raise_r+0x14>
 8011a2c:	2316      	movs	r3, #22
 8011a2e:	6003      	str	r3, [r0, #0]
 8011a30:	f04f 30ff 	mov.w	r0, #4294967295
 8011a34:	bd38      	pop	{r3, r4, r5, pc}
 8011a36:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011a38:	b112      	cbz	r2, 8011a40 <_raise_r+0x1e>
 8011a3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a3e:	b94b      	cbnz	r3, 8011a54 <_raise_r+0x32>
 8011a40:	4628      	mov	r0, r5
 8011a42:	f000 f831 	bl	8011aa8 <_getpid_r>
 8011a46:	4622      	mov	r2, r4
 8011a48:	4601      	mov	r1, r0
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a50:	f000 b818 	b.w	8011a84 <_kill_r>
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d00a      	beq.n	8011a6e <_raise_r+0x4c>
 8011a58:	1c59      	adds	r1, r3, #1
 8011a5a:	d103      	bne.n	8011a64 <_raise_r+0x42>
 8011a5c:	2316      	movs	r3, #22
 8011a5e:	6003      	str	r3, [r0, #0]
 8011a60:	2001      	movs	r0, #1
 8011a62:	e7e7      	b.n	8011a34 <_raise_r+0x12>
 8011a64:	2100      	movs	r1, #0
 8011a66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	4798      	blx	r3
 8011a6e:	2000      	movs	r0, #0
 8011a70:	e7e0      	b.n	8011a34 <_raise_r+0x12>
	...

08011a74 <raise>:
 8011a74:	4b02      	ldr	r3, [pc, #8]	@ (8011a80 <raise+0xc>)
 8011a76:	4601      	mov	r1, r0
 8011a78:	6818      	ldr	r0, [r3, #0]
 8011a7a:	f7ff bfd2 	b.w	8011a22 <_raise_r>
 8011a7e:	bf00      	nop
 8011a80:	20000034 	.word	0x20000034

08011a84 <_kill_r>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	4d07      	ldr	r5, [pc, #28]	@ (8011aa4 <_kill_r+0x20>)
 8011a88:	2300      	movs	r3, #0
 8011a8a:	4604      	mov	r4, r0
 8011a8c:	4608      	mov	r0, r1
 8011a8e:	4611      	mov	r1, r2
 8011a90:	602b      	str	r3, [r5, #0]
 8011a92:	f7f2 f843 	bl	8003b1c <_kill>
 8011a96:	1c43      	adds	r3, r0, #1
 8011a98:	d102      	bne.n	8011aa0 <_kill_r+0x1c>
 8011a9a:	682b      	ldr	r3, [r5, #0]
 8011a9c:	b103      	cbz	r3, 8011aa0 <_kill_r+0x1c>
 8011a9e:	6023      	str	r3, [r4, #0]
 8011aa0:	bd38      	pop	{r3, r4, r5, pc}
 8011aa2:	bf00      	nop
 8011aa4:	20002c90 	.word	0x20002c90

08011aa8 <_getpid_r>:
 8011aa8:	f7f2 b830 	b.w	8003b0c <_getpid>

08011aac <sqrt>:
 8011aac:	b538      	push	{r3, r4, r5, lr}
 8011aae:	ed2d 8b02 	vpush	{d8}
 8011ab2:	ec55 4b10 	vmov	r4, r5, d0
 8011ab6:	f000 f825 	bl	8011b04 <__ieee754_sqrt>
 8011aba:	4622      	mov	r2, r4
 8011abc:	462b      	mov	r3, r5
 8011abe:	4620      	mov	r0, r4
 8011ac0:	4629      	mov	r1, r5
 8011ac2:	eeb0 8a40 	vmov.f32	s16, s0
 8011ac6:	eef0 8a60 	vmov.f32	s17, s1
 8011aca:	f7ef f82f 	bl	8000b2c <__aeabi_dcmpun>
 8011ace:	b990      	cbnz	r0, 8011af6 <sqrt+0x4a>
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	f7ef f800 	bl	8000adc <__aeabi_dcmplt>
 8011adc:	b158      	cbz	r0, 8011af6 <sqrt+0x4a>
 8011ade:	f7fc fd23 	bl	800e528 <__errno>
 8011ae2:	2321      	movs	r3, #33	@ 0x21
 8011ae4:	6003      	str	r3, [r0, #0]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	2300      	movs	r3, #0
 8011aea:	4610      	mov	r0, r2
 8011aec:	4619      	mov	r1, r3
 8011aee:	f7ee fead 	bl	800084c <__aeabi_ddiv>
 8011af2:	ec41 0b18 	vmov	d8, r0, r1
 8011af6:	eeb0 0a48 	vmov.f32	s0, s16
 8011afa:	eef0 0a68 	vmov.f32	s1, s17
 8011afe:	ecbd 8b02 	vpop	{d8}
 8011b02:	bd38      	pop	{r3, r4, r5, pc}

08011b04 <__ieee754_sqrt>:
 8011b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b08:	4a68      	ldr	r2, [pc, #416]	@ (8011cac <__ieee754_sqrt+0x1a8>)
 8011b0a:	ec55 4b10 	vmov	r4, r5, d0
 8011b0e:	43aa      	bics	r2, r5
 8011b10:	462b      	mov	r3, r5
 8011b12:	4621      	mov	r1, r4
 8011b14:	d110      	bne.n	8011b38 <__ieee754_sqrt+0x34>
 8011b16:	4622      	mov	r2, r4
 8011b18:	4620      	mov	r0, r4
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	f7ee fd6c 	bl	80005f8 <__aeabi_dmul>
 8011b20:	4602      	mov	r2, r0
 8011b22:	460b      	mov	r3, r1
 8011b24:	4620      	mov	r0, r4
 8011b26:	4629      	mov	r1, r5
 8011b28:	f7ee fbb0 	bl	800028c <__adddf3>
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	460d      	mov	r5, r1
 8011b30:	ec45 4b10 	vmov	d0, r4, r5
 8011b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b38:	2d00      	cmp	r5, #0
 8011b3a:	dc0e      	bgt.n	8011b5a <__ieee754_sqrt+0x56>
 8011b3c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011b40:	4322      	orrs	r2, r4
 8011b42:	d0f5      	beq.n	8011b30 <__ieee754_sqrt+0x2c>
 8011b44:	b19d      	cbz	r5, 8011b6e <__ieee754_sqrt+0x6a>
 8011b46:	4622      	mov	r2, r4
 8011b48:	4620      	mov	r0, r4
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	f7ee fb9c 	bl	8000288 <__aeabi_dsub>
 8011b50:	4602      	mov	r2, r0
 8011b52:	460b      	mov	r3, r1
 8011b54:	f7ee fe7a 	bl	800084c <__aeabi_ddiv>
 8011b58:	e7e8      	b.n	8011b2c <__ieee754_sqrt+0x28>
 8011b5a:	152a      	asrs	r2, r5, #20
 8011b5c:	d115      	bne.n	8011b8a <__ieee754_sqrt+0x86>
 8011b5e:	2000      	movs	r0, #0
 8011b60:	e009      	b.n	8011b76 <__ieee754_sqrt+0x72>
 8011b62:	0acb      	lsrs	r3, r1, #11
 8011b64:	3a15      	subs	r2, #21
 8011b66:	0549      	lsls	r1, r1, #21
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d0fa      	beq.n	8011b62 <__ieee754_sqrt+0x5e>
 8011b6c:	e7f7      	b.n	8011b5e <__ieee754_sqrt+0x5a>
 8011b6e:	462a      	mov	r2, r5
 8011b70:	e7fa      	b.n	8011b68 <__ieee754_sqrt+0x64>
 8011b72:	005b      	lsls	r3, r3, #1
 8011b74:	3001      	adds	r0, #1
 8011b76:	02dc      	lsls	r4, r3, #11
 8011b78:	d5fb      	bpl.n	8011b72 <__ieee754_sqrt+0x6e>
 8011b7a:	1e44      	subs	r4, r0, #1
 8011b7c:	1b12      	subs	r2, r2, r4
 8011b7e:	f1c0 0420 	rsb	r4, r0, #32
 8011b82:	fa21 f404 	lsr.w	r4, r1, r4
 8011b86:	4323      	orrs	r3, r4
 8011b88:	4081      	lsls	r1, r0
 8011b8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b8e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8011b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011b96:	07d2      	lsls	r2, r2, #31
 8011b98:	bf5c      	itt	pl
 8011b9a:	005b      	lslpl	r3, r3, #1
 8011b9c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011ba4:	bf58      	it	pl
 8011ba6:	0049      	lslpl	r1, r1, #1
 8011ba8:	2600      	movs	r6, #0
 8011baa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011bae:	106d      	asrs	r5, r5, #1
 8011bb0:	0049      	lsls	r1, r1, #1
 8011bb2:	2016      	movs	r0, #22
 8011bb4:	4632      	mov	r2, r6
 8011bb6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011bba:	1917      	adds	r7, r2, r4
 8011bbc:	429f      	cmp	r7, r3
 8011bbe:	bfde      	ittt	le
 8011bc0:	193a      	addle	r2, r7, r4
 8011bc2:	1bdb      	suble	r3, r3, r7
 8011bc4:	1936      	addle	r6, r6, r4
 8011bc6:	0fcf      	lsrs	r7, r1, #31
 8011bc8:	3801      	subs	r0, #1
 8011bca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8011bce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011bd2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011bd6:	d1f0      	bne.n	8011bba <__ieee754_sqrt+0xb6>
 8011bd8:	4604      	mov	r4, r0
 8011bda:	2720      	movs	r7, #32
 8011bdc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011be0:	429a      	cmp	r2, r3
 8011be2:	eb00 0e0c 	add.w	lr, r0, ip
 8011be6:	db02      	blt.n	8011bee <__ieee754_sqrt+0xea>
 8011be8:	d113      	bne.n	8011c12 <__ieee754_sqrt+0x10e>
 8011bea:	458e      	cmp	lr, r1
 8011bec:	d811      	bhi.n	8011c12 <__ieee754_sqrt+0x10e>
 8011bee:	f1be 0f00 	cmp.w	lr, #0
 8011bf2:	eb0e 000c 	add.w	r0, lr, ip
 8011bf6:	da42      	bge.n	8011c7e <__ieee754_sqrt+0x17a>
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	db40      	blt.n	8011c7e <__ieee754_sqrt+0x17a>
 8011bfc:	f102 0801 	add.w	r8, r2, #1
 8011c00:	1a9b      	subs	r3, r3, r2
 8011c02:	458e      	cmp	lr, r1
 8011c04:	bf88      	it	hi
 8011c06:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011c0a:	eba1 010e 	sub.w	r1, r1, lr
 8011c0e:	4464      	add	r4, ip
 8011c10:	4642      	mov	r2, r8
 8011c12:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011c16:	3f01      	subs	r7, #1
 8011c18:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011c1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011c20:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011c24:	d1dc      	bne.n	8011be0 <__ieee754_sqrt+0xdc>
 8011c26:	4319      	orrs	r1, r3
 8011c28:	d01b      	beq.n	8011c62 <__ieee754_sqrt+0x15e>
 8011c2a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8011cb0 <__ieee754_sqrt+0x1ac>
 8011c2e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8011cb4 <__ieee754_sqrt+0x1b0>
 8011c32:	e9da 0100 	ldrd	r0, r1, [sl]
 8011c36:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c3a:	f7ee fb25 	bl	8000288 <__aeabi_dsub>
 8011c3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011c42:	4602      	mov	r2, r0
 8011c44:	460b      	mov	r3, r1
 8011c46:	4640      	mov	r0, r8
 8011c48:	4649      	mov	r1, r9
 8011c4a:	f7ee ff51 	bl	8000af0 <__aeabi_dcmple>
 8011c4e:	b140      	cbz	r0, 8011c62 <__ieee754_sqrt+0x15e>
 8011c50:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011c54:	e9da 0100 	ldrd	r0, r1, [sl]
 8011c58:	e9db 2300 	ldrd	r2, r3, [fp]
 8011c5c:	d111      	bne.n	8011c82 <__ieee754_sqrt+0x17e>
 8011c5e:	3601      	adds	r6, #1
 8011c60:	463c      	mov	r4, r7
 8011c62:	1072      	asrs	r2, r6, #1
 8011c64:	0863      	lsrs	r3, r4, #1
 8011c66:	07f1      	lsls	r1, r6, #31
 8011c68:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8011c6c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8011c70:	bf48      	it	mi
 8011c72:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8011c76:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	e756      	b.n	8011b2c <__ieee754_sqrt+0x28>
 8011c7e:	4690      	mov	r8, r2
 8011c80:	e7be      	b.n	8011c00 <__ieee754_sqrt+0xfc>
 8011c82:	f7ee fb03 	bl	800028c <__adddf3>
 8011c86:	e9da 8900 	ldrd	r8, r9, [sl]
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	460b      	mov	r3, r1
 8011c8e:	4640      	mov	r0, r8
 8011c90:	4649      	mov	r1, r9
 8011c92:	f7ee ff23 	bl	8000adc <__aeabi_dcmplt>
 8011c96:	b120      	cbz	r0, 8011ca2 <__ieee754_sqrt+0x19e>
 8011c98:	1ca0      	adds	r0, r4, #2
 8011c9a:	bf08      	it	eq
 8011c9c:	3601      	addeq	r6, #1
 8011c9e:	3402      	adds	r4, #2
 8011ca0:	e7df      	b.n	8011c62 <__ieee754_sqrt+0x15e>
 8011ca2:	1c63      	adds	r3, r4, #1
 8011ca4:	f023 0401 	bic.w	r4, r3, #1
 8011ca8:	e7db      	b.n	8011c62 <__ieee754_sqrt+0x15e>
 8011caa:	bf00      	nop
 8011cac:	7ff00000 	.word	0x7ff00000
 8011cb0:	200001f8 	.word	0x200001f8
 8011cb4:	200001f0 	.word	0x200001f0

08011cb8 <_init>:
 8011cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cba:	bf00      	nop
 8011cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cbe:	bc08      	pop	{r3}
 8011cc0:	469e      	mov	lr, r3
 8011cc2:	4770      	bx	lr

08011cc4 <_fini>:
 8011cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cc6:	bf00      	nop
 8011cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cca:	bc08      	pop	{r3}
 8011ccc:	469e      	mov	lr, r3
 8011cce:	4770      	bx	lr
