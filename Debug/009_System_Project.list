
009_System_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  0800c284  0800c284  0001c284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8ec  0800c8ec  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8ec  0800c8ec  0001c8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8f4  0800c8f4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8f4  0800c8f4  0001c8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8f8  0800c8f8  0001c8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c8fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000029c0  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002a58  20002a58  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001677b  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032d9  00000000  00000000  00036886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000014f0  00000000  00000000  00039b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000104a  00000000  00000000  0003b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025ec2  00000000  00000000  0003c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb60  00000000  00000000  00061f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df7fb  00000000  00000000  0007dabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000063c8  00000000  00000000  0015d2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00163680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c26c 	.word	0x0800c26c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800c26c 	.word	0x0800c26c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b970 	b.w	8000e90 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	460d      	mov	r5, r1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	460f      	mov	r7, r1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d14a      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4694      	mov	ip, r2
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0xe2>
 8000bde:	fab2 f382 	clz	r3, r2
 8000be2:	b143      	cbz	r3, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000be8:	f1c3 0220 	rsb	r2, r3, #32
 8000bec:	409f      	lsls	r7, r3
 8000bee:	fa20 f202 	lsr.w	r2, r0, r2
 8000bf2:	4317      	orrs	r7, r2
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bfa:	fa1f f58c 	uxth.w	r5, ip
 8000bfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c02:	0c22      	lsrs	r2, r4, #16
 8000c04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c0c:	fb01 f005 	mul.w	r0, r1, r5
 8000c10:	4290      	cmp	r0, r2
 8000c12:	d90a      	bls.n	8000c2a <__udivmoddi4+0x62>
 8000c14:	eb1c 0202 	adds.w	r2, ip, r2
 8000c18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c1c:	f080 811c 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c20:	4290      	cmp	r0, r2
 8000c22:	f240 8119 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c26:	3902      	subs	r1, #2
 8000c28:	4462      	add	r2, ip
 8000c2a:	1a12      	subs	r2, r2, r0
 8000c2c:	b2a4      	uxth	r4, r4
 8000c2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c3a:	fb00 f505 	mul.w	r5, r0, r5
 8000c3e:	42a5      	cmp	r5, r4
 8000c40:	d90a      	bls.n	8000c58 <__udivmoddi4+0x90>
 8000c42:	eb1c 0404 	adds.w	r4, ip, r4
 8000c46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c4a:	f080 8107 	bcs.w	8000e5c <__udivmoddi4+0x294>
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	f240 8104 	bls.w	8000e5c <__udivmoddi4+0x294>
 8000c54:	4464      	add	r4, ip
 8000c56:	3802      	subs	r0, #2
 8000c58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	2100      	movs	r1, #0
 8000c60:	b11e      	cbz	r6, 8000c6a <__udivmoddi4+0xa2>
 8000c62:	40dc      	lsrs	r4, r3
 8000c64:	2300      	movs	r3, #0
 8000c66:	e9c6 4300 	strd	r4, r3, [r6]
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d908      	bls.n	8000c84 <__udivmoddi4+0xbc>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80ed 	beq.w	8000e52 <__udivmoddi4+0x28a>
 8000c78:	2100      	movs	r1, #0
 8000c7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	fab3 f183 	clz	r1, r3
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d149      	bne.n	8000d20 <__udivmoddi4+0x158>
 8000c8c:	42ab      	cmp	r3, r5
 8000c8e:	d302      	bcc.n	8000c96 <__udivmoddi4+0xce>
 8000c90:	4282      	cmp	r2, r0
 8000c92:	f200 80f8 	bhi.w	8000e86 <__udivmoddi4+0x2be>
 8000c96:	1a84      	subs	r4, r0, r2
 8000c98:	eb65 0203 	sbc.w	r2, r5, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	d0e2      	beq.n	8000c6a <__udivmoddi4+0xa2>
 8000ca4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ca8:	e7df      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000caa:	b902      	cbnz	r2, 8000cae <__udivmoddi4+0xe6>
 8000cac:	deff      	udf	#255	; 0xff
 8000cae:	fab2 f382 	clz	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8090 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cb8:	1a8a      	subs	r2, r1, r2
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ccc:	0c22      	lsrs	r2, r4, #16
 8000cce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cd2:	fb0e f005 	mul.w	r0, lr, r5
 8000cd6:	4290      	cmp	r0, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cda:	eb1c 0202 	adds.w	r2, ip, r2
 8000cde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4290      	cmp	r0, r2
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2b8>
 8000cea:	4645      	mov	r5, r8
 8000cec:	1a12      	subs	r2, r2, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cf4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cf8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x14e>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x14c>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2c2>
 8000d14:	4610      	mov	r0, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d1e:	e79f      	b.n	8000c60 <__udivmoddi4+0x98>
 8000d20:	f1c1 0720 	rsb	r7, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d32:	fa20 f307 	lsr.w	r3, r0, r7
 8000d36:	40fd      	lsrs	r5, r7
 8000d38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3c:	4323      	orrs	r3, r4
 8000d3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d42:	fa1f fe8c 	uxth.w	lr, ip
 8000d46:	fb09 5518 	mls	r5, r9, r8, r5
 8000d4a:	0c1c      	lsrs	r4, r3, #16
 8000d4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d50:	fb08 f50e 	mul.w	r5, r8, lr
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2b4>
 8000d6c:	42a5      	cmp	r5, r4
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2b4>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4464      	add	r4, ip
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	b29d      	uxth	r5, r3
 8000d7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d80:	fb09 4413 	mls	r4, r9, r3, r4
 8000d84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2ac>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da6:	fba3 9502 	umull	r9, r5, r3, r2
 8000daa:	eba4 040e 	sub.w	r4, r4, lr
 8000dae:	42ac      	cmp	r4, r5
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46ae      	mov	lr, r5
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x29c>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x298>
 8000db8:	b156      	cbz	r6, 8000dd0 <__udivmoddi4+0x208>
 8000dba:	ebb0 0208 	subs.w	r2, r0, r8
 8000dbe:	eb64 040e 	sbc.w	r4, r4, lr
 8000dc2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dc6:	40ca      	lsrs	r2, r1
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	4317      	orrs	r7, r2
 8000dcc:	e9c6 7400 	strd	r7, r4, [r6]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd8:	f1c3 0120 	rsb	r1, r3, #32
 8000ddc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de0:	fa20 f201 	lsr.w	r2, r0, r1
 8000de4:	fa25 f101 	lsr.w	r1, r5, r1
 8000de8:	409d      	lsls	r5, r3
 8000dea:	432a      	orrs	r2, r5
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000df8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dfc:	0c11      	lsrs	r1, r2, #16
 8000dfe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e02:	fb00 f50e 	mul.w	r5, r0, lr
 8000e06:	428d      	cmp	r5, r1
 8000e08:	fa04 f403 	lsl.w	r4, r4, r3
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x258>
 8000e0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e18:	428d      	cmp	r5, r1
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4461      	add	r1, ip
 8000e20:	1b49      	subs	r1, r1, r5
 8000e22:	b292      	uxth	r2, r2
 8000e24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e28:	fb07 1115 	mls	r1, r7, r5, r1
 8000e2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e30:	fb05 f10e 	mul.w	r1, r5, lr
 8000e34:	4291      	cmp	r1, r2
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x282>
 8000e38:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000e42:	4291      	cmp	r1, r2
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000e46:	3d02      	subs	r5, #2
 8000e48:	4462      	add	r2, ip
 8000e4a:	1a52      	subs	r2, r2, r1
 8000e4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0xfc>
 8000e52:	4631      	mov	r1, r6
 8000e54:	4630      	mov	r0, r6
 8000e56:	e708      	b.n	8000c6a <__udivmoddi4+0xa2>
 8000e58:	4639      	mov	r1, r7
 8000e5a:	e6e6      	b.n	8000c2a <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e6fb      	b.n	8000c58 <__udivmoddi4+0x90>
 8000e60:	4548      	cmp	r0, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e70:	4645      	mov	r5, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x282>
 8000e74:	462b      	mov	r3, r5
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x258>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e80:	3d02      	subs	r5, #2
 8000e82:	4462      	add	r2, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x124>
 8000e86:	4608      	mov	r0, r1
 8000e88:	e70a      	b.n	8000ca0 <__udivmoddi4+0xd8>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x14e>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2140      	movs	r1, #64	; 0x40
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <SELECT+0x18>)
 8000e9e:	f004 f993 	bl	80051c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f002 fdac 	bl	8003a00 <HAL_Delay>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020400 	.word	0x40020400

08000eb0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <DESELECT+0x18>)
 8000eba:	f004 f985 	bl	80051c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f002 fd9e 	bl	8003a00 <HAL_Delay>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40020400 	.word	0x40020400

08000ecc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000ed6:	bf00      	nop
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <SPI_TxByte+0x30>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d1f8      	bne.n	8000ed8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000ee6:	1df9      	adds	r1, r7, #7
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	2201      	movs	r2, #1
 8000eec:	4803      	ldr	r0, [pc, #12]	; (8000efc <SPI_TxByte+0x30>)
 8000eee:	f004 fea6 	bl	8005c3e <HAL_SPI_Transmit>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000bc 	.word	0x200000bc

08000f00 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f0c:	bf00      	nop
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <SPI_TxBuffer+0x30>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d1f8      	bne.n	8000f0e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000f1c:	887a      	ldrh	r2, [r7, #2]
 8000f1e:	2364      	movs	r3, #100	; 0x64
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <SPI_TxBuffer+0x30>)
 8000f24:	f004 fe8b 	bl	8005c3e <HAL_SPI_Transmit>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000bc 	.word	0x200000bc

08000f34 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
 8000f3c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000f3e:	bf00      	nop
 8000f40:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <SPI_RxByte+0x34>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d1f8      	bne.n	8000f40 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000f4e:	1dba      	adds	r2, r7, #6
 8000f50:	1df9      	adds	r1, r7, #7
 8000f52:	2364      	movs	r3, #100	; 0x64
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <SPI_RxByte+0x34>)
 8000f5a:	f004 ffb3 	bl	8005ec4 <HAL_SPI_TransmitReceive>

	return data;
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200000bc 	.word	0x200000bc

08000f6c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000f74:	f7ff ffde 	bl	8000f34 <SPI_RxByte>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <SD_ReadyWait+0x30>)
 8000f90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f94:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000f96:	f7ff ffcd 	bl	8000f34 <SPI_RxByte>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2bff      	cmp	r3, #255	; 0xff
 8000fa2:	d003      	beq.n	8000fac <SD_ReadyWait+0x24>
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SD_ReadyWait+0x30>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f4      	bne.n	8000f96 <SD_ReadyWait+0xe>

	return res;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000b6 	.word	0x200000b6

08000fbc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000fc2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000fc6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000fc8:	f7ff ff72 	bl	8000eb0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	e005      	b.n	8000fde <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000fd2:	20ff      	movs	r0, #255	; 0xff
 8000fd4:	f7ff ff7a 	bl	8000ecc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	ddf6      	ble.n	8000fd2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000fe4:	f7ff ff56 	bl	8000e94 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000fe8:	2340      	movs	r3, #64	; 0x40
 8000fea:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000ffc:	2395      	movs	r3, #149	; 0x95
 8000ffe:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001000:	463b      	mov	r3, r7
 8001002:	2106      	movs	r1, #6
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff7b 	bl	8000f00 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800100a:	e002      	b.n	8001012 <SD_PowerOn+0x56>
	{
		cnt--;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	3b01      	subs	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001012:	f7ff ff8f 	bl	8000f34 <SPI_RxByte>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	d002      	beq.n	8001022 <SD_PowerOn+0x66>
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f4      	bne.n	800100c <SD_PowerOn+0x50>
	}

	DESELECT();
 8001022:	f7ff ff45 	bl	8000eb0 <DESELECT>
	SPI_TxByte(0XFF);
 8001026:	20ff      	movs	r0, #255	; 0xff
 8001028:	f7ff ff50 	bl	8000ecc <SPI_TxByte>

	PowerFlag = 1;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <SD_PowerOn+0x80>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000b9 	.word	0x200000b9

08001040 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <SD_PowerOff+0x14>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	200000b9 	.word	0x200000b9

08001058 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
	return PowerFlag;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <SD_CheckPower+0x14>)
 800105e:	781b      	ldrb	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200000b9 	.word	0x200000b9

08001070 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <SD_RxDataBlock+0x58>)
 800107c:	22c8      	movs	r2, #200	; 0xc8
 800107e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001080:	f7ff ff58 	bl	8000f34 <SPI_RxByte>
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	d103      	bne.n	8001096 <SD_RxDataBlock+0x26>
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <SD_RxDataBlock+0x58>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f4      	bne.n	8001080 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	2bfe      	cmp	r3, #254	; 0xfe
 800109a:	d001      	beq.n	80010a0 <SD_RxDataBlock+0x30>
 800109c:	2300      	movs	r3, #0
 800109e:	e00f      	b.n	80010c0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	1c5a      	adds	r2, r3, #1
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff60 	bl	8000f6c <SPI_RxBytePtr>
	} while(len--);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	1e5a      	subs	r2, r3, #1
 80010b0:	603a      	str	r2, [r7, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f4      	bne.n	80010a0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80010b6:	f7ff ff3d 	bl	8000f34 <SPI_RxByte>
	SPI_RxByte();
 80010ba:	f7ff ff3b 	bl	8000f34 <SPI_RxByte>

	return TRUE;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000b4 	.word	0x200000b4

080010cc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80010dc:	f7ff ff54 	bl	8000f88 <SD_ReadyWait>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d001      	beq.n	80010ea <SD_TxDataBlock+0x1e>
 80010e6:	2300      	movs	r3, #0
 80010e8:	e02f      	b.n	800114a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff feed 	bl	8000ecc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2bfd      	cmp	r3, #253	; 0xfd
 80010f6:	d020      	beq.n	800113a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80010f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff feff 	bl	8000f00 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001102:	f7ff ff17 	bl	8000f34 <SPI_RxByte>
		SPI_RxByte();
 8001106:	f7ff ff15 	bl	8000f34 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800110a:	e00b      	b.n	8001124 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800110c:	f7ff ff12 	bl	8000f34 <SPI_RxByte>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	2b05      	cmp	r3, #5
 800111c:	d006      	beq.n	800112c <SD_TxDataBlock+0x60>
			i++;
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	3301      	adds	r3, #1
 8001122:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001124:	7bbb      	ldrb	r3, [r7, #14]
 8001126:	2b40      	cmp	r3, #64	; 0x40
 8001128:	d9f0      	bls.n	800110c <SD_TxDataBlock+0x40>
 800112a:	e000      	b.n	800112e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800112c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800112e:	bf00      	nop
 8001130:	f7ff ff00 	bl	8000f34 <SPI_RxByte>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fa      	beq.n	8001130 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	f003 031f 	and.w	r3, r3, #31
 8001140:	2b05      	cmp	r3, #5
 8001142:	d101      	bne.n	8001148 <SD_TxDataBlock+0x7c>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	6039      	str	r1, [r7, #0]
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800115e:	f7ff ff13 	bl	8000f88 <SD_ReadyWait>
 8001162:	4603      	mov	r3, r0
 8001164:	2bff      	cmp	r3, #255	; 0xff
 8001166:	d001      	beq.n	800116c <SD_SendCmd+0x1a>
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	e042      	b.n	80011f2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff feac 	bl	8000ecc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	0e1b      	lsrs	r3, r3, #24
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fea6 	bl	8000ecc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	0c1b      	lsrs	r3, r3, #16
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fea0 	bl	8000ecc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fe9a 	bl	8000ecc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe95 	bl	8000ecc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b40      	cmp	r3, #64	; 0x40
 80011a6:	d102      	bne.n	80011ae <SD_SendCmd+0x5c>
 80011a8:	2395      	movs	r3, #149	; 0x95
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e007      	b.n	80011be <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b48      	cmp	r3, #72	; 0x48
 80011b2:	d102      	bne.n	80011ba <SD_SendCmd+0x68>
 80011b4:	2387      	movs	r3, #135	; 0x87
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e001      	b.n	80011be <SD_SendCmd+0x6c>
	else crc = 1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe83 	bl	8000ecc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b4c      	cmp	r3, #76	; 0x4c
 80011ca:	d101      	bne.n	80011d0 <SD_SendCmd+0x7e>
 80011cc:	f7ff feb2 	bl	8000f34 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80011d0:	230a      	movs	r3, #10
 80011d2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80011d4:	f7ff feae 	bl	8000f34 <SPI_RxByte>
 80011d8:	4603      	mov	r3, r0
 80011da:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80011dc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da05      	bge.n	80011f0 <SD_SendCmd+0x9e>
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	73bb      	strb	r3, [r7, #14]
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f1      	bne.n	80011d4 <SD_SendCmd+0x82>

	return res;
 80011f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SD_disk_initialize+0x14>
 800120c:	2301      	movs	r3, #1
 800120e:	e0d1      	b.n	80013b4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <SD_disk_initialize+0x1c0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <SD_disk_initialize+0x2a>
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <SD_disk_initialize+0x1c0>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	e0c6      	b.n	80013b4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001226:	f7ff fec9 	bl	8000fbc <SD_PowerOn>

	/* slave select */
	SELECT();
 800122a:	f7ff fe33 	bl	8000e94 <SELECT>

	/* check disk type */
	type = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001232:	2100      	movs	r1, #0
 8001234:	2040      	movs	r0, #64	; 0x40
 8001236:	f7ff ff8c 	bl	8001152 <SD_SendCmd>
 800123a:	4603      	mov	r3, r0
 800123c:	2b01      	cmp	r3, #1
 800123e:	f040 80a1 	bne.w	8001384 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001242:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <SD_disk_initialize+0x1c4>)
 8001244:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001248:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800124a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800124e:	2048      	movs	r0, #72	; 0x48
 8001250:	f7ff ff7f 	bl	8001152 <SD_SendCmd>
 8001254:	4603      	mov	r3, r0
 8001256:	2b01      	cmp	r3, #1
 8001258:	d155      	bne.n	8001306 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e00c      	b.n	800127a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001260:	7bfc      	ldrb	r4, [r7, #15]
 8001262:	f7ff fe67 	bl	8000f34 <SPI_RxByte>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	f104 0310 	add.w	r3, r4, #16
 800126e:	443b      	add	r3, r7
 8001270:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	3301      	adds	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d9ef      	bls.n	8001260 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001280:	7abb      	ldrb	r3, [r7, #10]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d17e      	bne.n	8001384 <SD_disk_initialize+0x188>
 8001286:	7afb      	ldrb	r3, [r7, #11]
 8001288:	2baa      	cmp	r3, #170	; 0xaa
 800128a:	d17b      	bne.n	8001384 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800128c:	2100      	movs	r1, #0
 800128e:	2077      	movs	r0, #119	; 0x77
 8001290:	f7ff ff5f 	bl	8001152 <SD_SendCmd>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d807      	bhi.n	80012aa <SD_disk_initialize+0xae>
 800129a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800129e:	2069      	movs	r0, #105	; 0x69
 80012a0:	f7ff ff57 	bl	8001152 <SD_SendCmd>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <SD_disk_initialize+0x1c4>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ec      	bne.n	800128c <SD_disk_initialize+0x90>
 80012b2:	e000      	b.n	80012b6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80012b4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <SD_disk_initialize+0x1c4>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d062      	beq.n	8001384 <SD_disk_initialize+0x188>
 80012be:	2100      	movs	r1, #0
 80012c0:	207a      	movs	r0, #122	; 0x7a
 80012c2:	f7ff ff46 	bl	8001152 <SD_SendCmd>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d15b      	bne.n	8001384 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	e00c      	b.n	80012ec <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80012d2:	7bfc      	ldrb	r4, [r7, #15]
 80012d4:	f7ff fe2e 	bl	8000f34 <SPI_RxByte>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	f104 0310 	add.w	r3, r4, #16
 80012e0:	443b      	add	r3, r7
 80012e2:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	3301      	adds	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d9ef      	bls.n	80012d2 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80012f2:	7a3b      	ldrb	r3, [r7, #8]
 80012f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SD_disk_initialize+0x104>
 80012fc:	230c      	movs	r3, #12
 80012fe:	e000      	b.n	8001302 <SD_disk_initialize+0x106>
 8001300:	2304      	movs	r3, #4
 8001302:	73bb      	strb	r3, [r7, #14]
 8001304:	e03e      	b.n	8001384 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001306:	2100      	movs	r1, #0
 8001308:	2077      	movs	r0, #119	; 0x77
 800130a:	f7ff ff22 	bl	8001152 <SD_SendCmd>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	d808      	bhi.n	8001326 <SD_disk_initialize+0x12a>
 8001314:	2100      	movs	r1, #0
 8001316:	2069      	movs	r0, #105	; 0x69
 8001318:	f7ff ff1b 	bl	8001152 <SD_SendCmd>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d801      	bhi.n	8001326 <SD_disk_initialize+0x12a>
 8001322:	2302      	movs	r3, #2
 8001324:	e000      	b.n	8001328 <SD_disk_initialize+0x12c>
 8001326:	2301      	movs	r3, #1
 8001328:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d10e      	bne.n	800134e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001330:	2100      	movs	r1, #0
 8001332:	2077      	movs	r0, #119	; 0x77
 8001334:	f7ff ff0d 	bl	8001152 <SD_SendCmd>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d80e      	bhi.n	800135c <SD_disk_initialize+0x160>
 800133e:	2100      	movs	r1, #0
 8001340:	2069      	movs	r0, #105	; 0x69
 8001342:	f7ff ff06 	bl	8001152 <SD_SendCmd>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <SD_disk_initialize+0x160>
 800134c:	e00c      	b.n	8001368 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800134e:	2100      	movs	r1, #0
 8001350:	2041      	movs	r0, #65	; 0x41
 8001352:	f7ff fefe 	bl	8001152 <SD_SendCmd>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d004      	beq.n	8001366 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <SD_disk_initialize+0x1c4>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e2      	bne.n	800132a <SD_disk_initialize+0x12e>
 8001364:	e000      	b.n	8001368 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001366:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <SD_disk_initialize+0x1c4>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <SD_disk_initialize+0x184>
 8001370:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001374:	2050      	movs	r0, #80	; 0x50
 8001376:	f7ff feec 	bl	8001152 <SD_SendCmd>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SD_disk_initialize+0x188>
 8001380:	2300      	movs	r3, #0
 8001382:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <SD_disk_initialize+0x1c8>)
 8001386:	7bbb      	ldrb	r3, [r7, #14]
 8001388:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800138a:	f7ff fd91 	bl	8000eb0 <DESELECT>
	SPI_RxByte();
 800138e:	f7ff fdd1 	bl	8000f34 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <SD_disk_initialize+0x1c0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <SD_disk_initialize+0x1c0>)
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	e001      	b.n	80013ae <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80013aa:	f7ff fe49 	bl	8001040 <SD_PowerOff>
	}

	return Stat;
 80013ae:	4b03      	ldr	r3, [pc, #12]	; (80013bc <SD_disk_initialize+0x1c0>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	20000000 	.word	0x20000000
 80013c0:	200000b4 	.word	0x200000b4
 80013c4:	200000b8 	.word	0x200000b8

080013c8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SD_disk_status+0x14>
 80013d8:	2301      	movs	r3, #1
 80013da:	e002      	b.n	80013e2 <SD_disk_status+0x1a>
	return Stat;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <SD_disk_status+0x28>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000000 	.word	0x20000000

080013f4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	4603      	mov	r3, r0
 8001402:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <SD_disk_read+0x1c>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <SD_disk_read+0x20>
 8001410:	2304      	movs	r3, #4
 8001412:	e051      	b.n	80014b8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <SD_disk_read+0xcc>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SD_disk_read+0x32>
 8001422:	2303      	movs	r3, #3
 8001424:	e048      	b.n	80014b8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <SD_disk_read+0xd0>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <SD_disk_read+0x44>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	607b      	str	r3, [r7, #4]

	SELECT();
 8001438:	f7ff fd2c 	bl	8000e94 <SELECT>

	if (count == 1)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d111      	bne.n	8001466 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	2051      	movs	r0, #81	; 0x51
 8001446:	f7ff fe84 	bl	8001152 <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d129      	bne.n	80014a4 <SD_disk_read+0xb0>
 8001450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f7ff fe0b 	bl	8001070 <SD_RxDataBlock>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d021      	beq.n	80014a4 <SD_disk_read+0xb0>
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	e01e      	b.n	80014a4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	2052      	movs	r0, #82	; 0x52
 800146a:	f7ff fe72 	bl	8001152 <SD_SendCmd>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d117      	bne.n	80014a4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001478:	68b8      	ldr	r0, [r7, #8]
 800147a:	f7ff fdf9 	bl	8001070 <SD_RxDataBlock>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <SD_disk_read+0xa6>
				buff += 512;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800148a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3b01      	subs	r3, #1
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ed      	bne.n	8001474 <SD_disk_read+0x80>
 8001498:	e000      	b.n	800149c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800149a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800149c:	2100      	movs	r1, #0
 800149e:	204c      	movs	r0, #76	; 0x4c
 80014a0:	f7ff fe57 	bl	8001152 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80014a4:	f7ff fd04 	bl	8000eb0 <DESELECT>
	SPI_RxByte();
 80014a8:	f7ff fd44 	bl	8000f34 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf14      	ite	ne
 80014b2:	2301      	movne	r3, #1
 80014b4:	2300      	moveq	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	200000b8 	.word	0x200000b8

080014c8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d102      	bne.n	80014e4 <SD_disk_write+0x1c>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <SD_disk_write+0x20>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e06b      	b.n	80015c0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014e8:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <SD_disk_write+0x100>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SD_disk_write+0x32>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e062      	b.n	80015c0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80014fa:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <SD_disk_write+0x100>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <SD_disk_write+0x44>
 8001508:	2302      	movs	r3, #2
 800150a:	e059      	b.n	80015c0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <SD_disk_write+0x104>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <SD_disk_write+0x56>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	025b      	lsls	r3, r3, #9
 800151c:	607b      	str	r3, [r7, #4]

	SELECT();
 800151e:	f7ff fcb9 	bl	8000e94 <SELECT>

	if (count == 1)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d110      	bne.n	800154a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	2058      	movs	r0, #88	; 0x58
 800152c:	f7ff fe11 	bl	8001152 <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d13a      	bne.n	80015ac <SD_disk_write+0xe4>
 8001536:	21fe      	movs	r1, #254	; 0xfe
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff fdc7 	bl	80010cc <SD_TxDataBlock>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d033      	beq.n	80015ac <SD_disk_write+0xe4>
			count = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	e030      	b.n	80015ac <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <SD_disk_write+0x104>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001556:	2100      	movs	r1, #0
 8001558:	2077      	movs	r0, #119	; 0x77
 800155a:	f7ff fdfa 	bl	8001152 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800155e:	6839      	ldr	r1, [r7, #0]
 8001560:	2057      	movs	r0, #87	; 0x57
 8001562:	f7ff fdf6 	bl	8001152 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	2059      	movs	r0, #89	; 0x59
 800156a:	f7ff fdf2 	bl	8001152 <SD_SendCmd>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d11b      	bne.n	80015ac <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001574:	21fc      	movs	r1, #252	; 0xfc
 8001576:	68b8      	ldr	r0, [r7, #8]
 8001578:	f7ff fda8 	bl	80010cc <SD_TxDataBlock>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00a      	beq.n	8001598 <SD_disk_write+0xd0>
				buff += 512;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001588:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ee      	bne.n	8001574 <SD_disk_write+0xac>
 8001596:	e000      	b.n	800159a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001598:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800159a:	21fd      	movs	r1, #253	; 0xfd
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fd95 	bl	80010cc <SD_TxDataBlock>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <SD_disk_write+0xe4>
			{
				count = 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80015ac:	f7ff fc80 	bl	8000eb0 <DESELECT>
	SPI_RxByte();
 80015b0:	f7ff fcc0 	bl	8000f34 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	200000b8 	.word	0x200000b8

080015d0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	603a      	str	r2, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]
 80015dc:	460b      	mov	r3, r1
 80015de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SD_disk_ioctl+0x1e>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e115      	b.n	800181a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d124      	bne.n	8001644 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d012      	beq.n	8001628 <SD_disk_ioctl+0x58>
 8001602:	2b02      	cmp	r3, #2
 8001604:	dc1a      	bgt.n	800163c <SD_disk_ioctl+0x6c>
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <SD_disk_ioctl+0x40>
 800160a:	2b01      	cmp	r3, #1
 800160c:	d006      	beq.n	800161c <SD_disk_ioctl+0x4c>
 800160e:	e015      	b.n	800163c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001610:	f7ff fd16 	bl	8001040 <SD_PowerOff>
			res = RES_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800161a:	e0fc      	b.n	8001816 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800161c:	f7ff fcce 	bl	8000fbc <SD_PowerOn>
			res = RES_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001626:	e0f6      	b.n	8001816 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	1c5c      	adds	r4, r3, #1
 800162c:	f7ff fd14 	bl	8001058 <SD_CheckPower>
 8001630:	4603      	mov	r3, r0
 8001632:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800163a:	e0ec      	b.n	8001816 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800163c:	2304      	movs	r3, #4
 800163e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001642:	e0e8      	b.n	8001816 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001644:	4b77      	ldr	r3, [pc, #476]	; (8001824 <SD_disk_ioctl+0x254>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SD_disk_ioctl+0x86>
 8001652:	2303      	movs	r3, #3
 8001654:	e0e1      	b.n	800181a <SD_disk_ioctl+0x24a>

		SELECT();
 8001656:	f7ff fc1d 	bl	8000e94 <SELECT>

		switch (ctrl)
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	2b0d      	cmp	r3, #13
 800165e:	f200 80cb 	bhi.w	80017f8 <SD_disk_ioctl+0x228>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <SD_disk_ioctl+0x98>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001763 	.word	0x08001763
 800166c:	080016a1 	.word	0x080016a1
 8001670:	08001753 	.word	0x08001753
 8001674:	080017f9 	.word	0x080017f9
 8001678:	080017f9 	.word	0x080017f9
 800167c:	080017f9 	.word	0x080017f9
 8001680:	080017f9 	.word	0x080017f9
 8001684:	080017f9 	.word	0x080017f9
 8001688:	080017f9 	.word	0x080017f9
 800168c:	080017f9 	.word	0x080017f9
 8001690:	080017f9 	.word	0x080017f9
 8001694:	08001775 	.word	0x08001775
 8001698:	08001799 	.word	0x08001799
 800169c:	080017bd 	.word	0x080017bd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80016a0:	2100      	movs	r1, #0
 80016a2:	2049      	movs	r0, #73	; 0x49
 80016a4:	f7ff fd55 	bl	8001152 <SD_SendCmd>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 80a8 	bne.w	8001800 <SD_disk_ioctl+0x230>
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2110      	movs	r1, #16
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fcda 	bl	8001070 <SD_RxDataBlock>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 809e 	beq.w	8001800 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80016c4:	7b3b      	ldrb	r3, [r7, #12]
 80016c6:	099b      	lsrs	r3, r3, #6
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10e      	bne.n	80016ec <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016ce:	7d7b      	ldrb	r3, [r7, #21]
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	7d3b      	ldrb	r3, [r7, #20]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	021b      	lsls	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4413      	add	r3, r2
 80016dc:	b29b      	uxth	r3, r3
 80016de:	3301      	adds	r3, #1
 80016e0:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80016e2:	8bfb      	ldrh	r3, [r7, #30]
 80016e4:	029a      	lsls	r2, r3, #10
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e02e      	b.n	800174a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016ec:	7c7b      	ldrb	r3, [r7, #17]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	7dbb      	ldrb	r3, [r7, #22]
 80016f6:	09db      	lsrs	r3, r3, #7
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	7d7b      	ldrb	r3, [r7, #21]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f003 0306 	and.w	r3, r3, #6
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4413      	add	r3, r2
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3302      	adds	r3, #2
 8001710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001714:	7d3b      	ldrb	r3, [r7, #20]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	b2db      	uxtb	r3, r3
 800171a:	b29a      	uxth	r2, r3
 800171c:	7cfb      	ldrb	r3, [r7, #19]
 800171e:	b29b      	uxth	r3, r3
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29a      	uxth	r2, r3
 8001728:	7cbb      	ldrb	r3, [r7, #18]
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	b29b      	uxth	r3, r3
 800172e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001732:	b29b      	uxth	r3, r3
 8001734:	4413      	add	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	3301      	adds	r3, #1
 800173a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800173c:	8bfa      	ldrh	r2, [r7, #30]
 800173e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001742:	3b09      	subs	r3, #9
 8001744:	409a      	lsls	r2, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001750:	e056      	b.n	8001800 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001758:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001760:	e055      	b.n	800180e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001762:	f7ff fc11 	bl	8000f88 <SD_ReadyWait>
 8001766:	4603      	mov	r3, r0
 8001768:	2bff      	cmp	r3, #255	; 0xff
 800176a:	d14b      	bne.n	8001804 <SD_disk_ioctl+0x234>
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001772:	e047      	b.n	8001804 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001774:	2100      	movs	r1, #0
 8001776:	2049      	movs	r0, #73	; 0x49
 8001778:	f7ff fceb 	bl	8001152 <SD_SendCmd>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d142      	bne.n	8001808 <SD_disk_ioctl+0x238>
 8001782:	2110      	movs	r1, #16
 8001784:	6a38      	ldr	r0, [r7, #32]
 8001786:	f7ff fc73 	bl	8001070 <SD_RxDataBlock>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03b      	beq.n	8001808 <SD_disk_ioctl+0x238>
 8001790:	2300      	movs	r3, #0
 8001792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001796:	e037      	b.n	8001808 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001798:	2100      	movs	r1, #0
 800179a:	204a      	movs	r0, #74	; 0x4a
 800179c:	f7ff fcd9 	bl	8001152 <SD_SendCmd>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d132      	bne.n	800180c <SD_disk_ioctl+0x23c>
 80017a6:	2110      	movs	r1, #16
 80017a8:	6a38      	ldr	r0, [r7, #32]
 80017aa:	f7ff fc61 	bl	8001070 <SD_RxDataBlock>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02b      	beq.n	800180c <SD_disk_ioctl+0x23c>
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80017ba:	e027      	b.n	800180c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80017bc:	2100      	movs	r1, #0
 80017be:	207a      	movs	r0, #122	; 0x7a
 80017c0:	f7ff fcc7 	bl	8001152 <SD_SendCmd>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017d0:	e00b      	b.n	80017ea <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80017d2:	6a3c      	ldr	r4, [r7, #32]
 80017d4:	1c63      	adds	r3, r4, #1
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	f7ff fbac 	bl	8000f34 <SPI_RxByte>
 80017dc:	4603      	mov	r3, r0
 80017de:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80017e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017e4:	3301      	adds	r3, #1
 80017e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80017ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d9ef      	bls.n	80017d2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80017f8:	2304      	movs	r3, #4
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017fe:	e006      	b.n	800180e <SD_disk_ioctl+0x23e>
			break;
 8001800:	bf00      	nop
 8001802:	e004      	b.n	800180e <SD_disk_ioctl+0x23e>
			break;
 8001804:	bf00      	nop
 8001806:	e002      	b.n	800180e <SD_disk_ioctl+0x23e>
			break;
 8001808:	bf00      	nop
 800180a:	e000      	b.n	800180e <SD_disk_ioctl+0x23e>
			break;
 800180c:	bf00      	nop
		}

		DESELECT();
 800180e:	f7ff fb4f 	bl	8000eb0 <DESELECT>
		SPI_RxByte();
 8001812:	f7ff fb8f 	bl	8000f34 <SPI_RxByte>
	}

	return res;
 8001816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800181a:	4618      	mov	r0, r3
 800181c:	372c      	adds	r7, #44	; 0x2c
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000

08001828 <__io_putchar>:
    #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
    #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 1000);
 8001830:	1d39      	adds	r1, r7, #4
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	2201      	movs	r2, #1
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <__io_putchar+0x20>)
 800183a:	f005 fa95 	bl	8006d68 <HAL_UART_Transmit>
    return ch;
 800183e:	687b      	ldr	r3, [r7, #4]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200022cc 	.word	0x200022cc

0800184c <transmit_uart>:
char buffer[100];


//SD karta yazmada kullanılan transmit_uart'ın fonskiyonu.
void transmit_uart(char *string)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
     uint8_t len = strlen(string);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7fe fcbb 	bl	80001d0 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
     HAL_UART_Transmit(&huart3, (uint8_t*) string, len, 200);
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b29a      	uxth	r2, r3
 8001862:	23c8      	movs	r3, #200	; 0xc8
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <transmit_uart+0x28>)
 8001868:	f005 fa7e 	bl	8006d68 <HAL_UART_Transmit>
}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000235c 	.word	0x2000235c

08001878 <nextion_Send>:



//Nextion'a değer göndermede kullanılan fonksiyon.
void nextion_Send(char *obj, uint32_t num ) //obj parametresine num değeri gönderilir.
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]


	uint8_t *nextion_Buffer = malloc(30*sizeof(char)); //buffer için bellek tahsis edilir.
 8001882:	201e      	movs	r0, #30
 8001884:	f009 facc 	bl	800ae20 <malloc>
 8001888:	4603      	mov	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *)nextion_Buffer, "%s.val=%ld", obj, num); //nextion ekranına gönderilecek komut
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <nextion_Send+0x4c>)
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f009 fc54 	bl	800b140 <siprintf>
 8001898:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart2, nextion_Buffer, len, 1000);
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	b29a      	uxth	r2, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	4808      	ldr	r0, [pc, #32]	; (80018c8 <nextion_Send+0x50>)
 80018a6:	f005 fa5f 	bl	8006d68 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, end_Command, 3, 100);
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	2203      	movs	r2, #3
 80018ae:	4907      	ldr	r1, [pc, #28]	; (80018cc <nextion_Send+0x54>)
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <nextion_Send+0x50>)
 80018b2:	f005 fa59 	bl	8006d68 <HAL_UART_Transmit>
	free(nextion_Buffer); //bellek serbest bırakılır.
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f009 faba 	bl	800ae30 <free>


}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	0800c284 	.word	0x0800c284
 80018c8:	20002314 	.word	0x20002314
 80018cc:	20000004 	.word	0x20000004

080018d0 <map>:

//Bu fonksiyon belirli bir değer aralığını başka bir değer aralığına dönüştürür.
uint32_t map(uint32_t min1, uint32_t max1, uint32_t min2, uint32_t max2, uint32_t width)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]
	return (min1*width)/min2;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	fb03 f202 	mul.w	r2, r3, r2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_UART_RxCpltCallback>:

//DAC ile alınan verinin gönderimi
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	6078      	str	r0, [r7, #4]
	 if (huart == &huart2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_UART_RxCpltCallback+0x138>)
 8001904:	4293      	cmp	r3, r2
 8001906:	f040 8197 	bne.w	8001c38 <HAL_UART_RxCpltCallback+0x340>
	 {

		 if(RX_Data[1] == 0x31)
 800190a:	4b4a      	ldr	r3, [pc, #296]	; (8001a34 <HAL_UART_RxCpltCallback+0x13c>)
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	2b31      	cmp	r3, #49	; 0x31
 8001910:	d116      	bne.n	8001940 <HAL_UART_RxCpltCallback+0x48>
		 {
		 nextion_Send("n2", iVin);
 8001912:	4b49      	ldr	r3, [pc, #292]	; (8001a38 <HAL_UART_RxCpltCallback+0x140>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	4848      	ldr	r0, [pc, #288]	; (8001a3c <HAL_UART_RxCpltCallback+0x144>)
 800191a:	f7ff ffad 	bl	8001878 <nextion_Send>
		 nextion_Send("n3", iIin);
 800191e:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_UART_RxCpltCallback+0x148>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	4847      	ldr	r0, [pc, #284]	; (8001a44 <HAL_UART_RxCpltCallback+0x14c>)
 8001926:	f7ff ffa7 	bl	8001878 <nextion_Send>
		 nextion_Send("n4", 666);
 800192a:	f240 219a 	movw	r1, #666	; 0x29a
 800192e:	4846      	ldr	r0, [pc, #280]	; (8001a48 <HAL_UART_RxCpltCallback+0x150>)
 8001930:	f7ff ffa2 	bl	8001878 <nextion_Send>
		 nextion_Send("n5", 777);
 8001934:	f240 3109 	movw	r1, #777	; 0x309
 8001938:	4844      	ldr	r0, [pc, #272]	; (8001a4c <HAL_UART_RxCpltCallback+0x154>)
 800193a:	f7ff ff9d 	bl	8001878 <nextion_Send>
 800193e:	e0d3      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x32)
 8001940:	4b3c      	ldr	r3, [pc, #240]	; (8001a34 <HAL_UART_RxCpltCallback+0x13c>)
 8001942:	785b      	ldrb	r3, [r3, #1]
 8001944:	2b32      	cmp	r3, #50	; 0x32
 8001946:	d116      	bne.n	8001976 <HAL_UART_RxCpltCallback+0x7e>
		 {
		 nextion_Send("n6", iVout);
 8001948:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_UART_RxCpltCallback+0x158>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	4841      	ldr	r0, [pc, #260]	; (8001a54 <HAL_UART_RxCpltCallback+0x15c>)
 8001950:	f7ff ff92 	bl	8001878 <nextion_Send>
		 nextion_Send("n7", iIout);
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_UART_RxCpltCallback+0x160>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4840      	ldr	r0, [pc, #256]	; (8001a5c <HAL_UART_RxCpltCallback+0x164>)
 800195c:	f7ff ff8c 	bl	8001878 <nextion_Send>
		 nextion_Send("n8", 666);
 8001960:	f240 219a 	movw	r1, #666	; 0x29a
 8001964:	483e      	ldr	r0, [pc, #248]	; (8001a60 <HAL_UART_RxCpltCallback+0x168>)
 8001966:	f7ff ff87 	bl	8001878 <nextion_Send>
		 nextion_Send("n9", 777);
 800196a:	f240 3109 	movw	r1, #777	; 0x309
 800196e:	483d      	ldr	r0, [pc, #244]	; (8001a64 <HAL_UART_RxCpltCallback+0x16c>)
 8001970:	f7ff ff82 	bl	8001878 <nextion_Send>
 8001974:	e0b8      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x33)
 8001976:	4b2f      	ldr	r3, [pc, #188]	; (8001a34 <HAL_UART_RxCpltCallback+0x13c>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	2b33      	cmp	r3, #51	; 0x33
 800197c:	d124      	bne.n	80019c8 <HAL_UART_RxCpltCallback+0xd0>
		 {
		 nextion_Send("n10", iV1L);
 800197e:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <HAL_UART_RxCpltCallback+0x170>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4619      	mov	r1, r3
 8001984:	4839      	ldr	r0, [pc, #228]	; (8001a6c <HAL_UART_RxCpltCallback+0x174>)
 8001986:	f7ff ff77 	bl	8001878 <nextion_Send>
		 nextion_Send("n11", iI1L);
 800198a:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_UART_RxCpltCallback+0x178>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4619      	mov	r1, r3
 8001990:	4838      	ldr	r0, [pc, #224]	; (8001a74 <HAL_UART_RxCpltCallback+0x17c>)
 8001992:	f7ff ff71 	bl	8001878 <nextion_Send>
		 nextion_Send("n12", iV2L);
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_UART_RxCpltCallback+0x180>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4619      	mov	r1, r3
 800199c:	4837      	ldr	r0, [pc, #220]	; (8001a7c <HAL_UART_RxCpltCallback+0x184>)
 800199e:	f7ff ff6b 	bl	8001878 <nextion_Send>
		 nextion_Send("n13", iI2L);
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <HAL_UART_RxCpltCallback+0x188>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4836      	ldr	r0, [pc, #216]	; (8001a84 <HAL_UART_RxCpltCallback+0x18c>)
 80019aa:	f7ff ff65 	bl	8001878 <nextion_Send>
		 nextion_Send("n14", iV3L);
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <HAL_UART_RxCpltCallback+0x190>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4619      	mov	r1, r3
 80019b4:	4835      	ldr	r0, [pc, #212]	; (8001a8c <HAL_UART_RxCpltCallback+0x194>)
 80019b6:	f7ff ff5f 	bl	8001878 <nextion_Send>
		 nextion_Send("n15", iI3L);
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <HAL_UART_RxCpltCallback+0x198>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4619      	mov	r1, r3
 80019c0:	4834      	ldr	r0, [pc, #208]	; (8001a94 <HAL_UART_RxCpltCallback+0x19c>)
 80019c2:	f7ff ff59 	bl	8001878 <nextion_Send>
 80019c6:	e08f      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x34)
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_UART_RxCpltCallback+0x13c>)
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	2b34      	cmp	r3, #52	; 0x34
 80019ce:	d124      	bne.n	8001a1a <HAL_UART_RxCpltCallback+0x122>
		 {
		 nextion_Send("n16", iV12L);
 80019d0:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_UART_RxCpltCallback+0x1a0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4831      	ldr	r0, [pc, #196]	; (8001a9c <HAL_UART_RxCpltCallback+0x1a4>)
 80019d8:	f7ff ff4e 	bl	8001878 <nextion_Send>
		 nextion_Send("n17", iI12L);
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_UART_RxCpltCallback+0x1a8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	4830      	ldr	r0, [pc, #192]	; (8001aa4 <HAL_UART_RxCpltCallback+0x1ac>)
 80019e4:	f7ff ff48 	bl	8001878 <nextion_Send>
		 nextion_Send("n18", iV23L);
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_UART_RxCpltCallback+0x1b0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	482f      	ldr	r0, [pc, #188]	; (8001aac <HAL_UART_RxCpltCallback+0x1b4>)
 80019f0:	f7ff ff42 	bl	8001878 <nextion_Send>
		 nextion_Send("n19", iI23L);
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_UART_RxCpltCallback+0x1b8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	482e      	ldr	r0, [pc, #184]	; (8001ab4 <HAL_UART_RxCpltCallback+0x1bc>)
 80019fc:	f7ff ff3c 	bl	8001878 <nextion_Send>
		 nextion_Send("n20", iV13L);
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_UART_RxCpltCallback+0x1c0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	482d      	ldr	r0, [pc, #180]	; (8001abc <HAL_UART_RxCpltCallback+0x1c4>)
 8001a08:	f7ff ff36 	bl	8001878 <nextion_Send>
		 nextion_Send("n21", iI13L);
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <HAL_UART_RxCpltCallback+0x1c8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	482c      	ldr	r0, [pc, #176]	; (8001ac4 <HAL_UART_RxCpltCallback+0x1cc>)
 8001a14:	f7ff ff30 	bl	8001878 <nextion_Send>
 8001a18:	e066      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x1f0>
		 }

		 else if(RX_Data[1] == 0x35)
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_UART_RxCpltCallback+0x13c>)
 8001a1c:	785b      	ldrb	r3, [r3, #1]
 8001a1e:	2b35      	cmp	r3, #53	; 0x35
 8001a20:	d156      	bne.n	8001ad0 <HAL_UART_RxCpltCallback+0x1d8>
		 {
		 nextion_Send("n22", itemp);
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_UART_RxCpltCallback+0x1d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4828      	ldr	r0, [pc, #160]	; (8001acc <HAL_UART_RxCpltCallback+0x1d4>)
 8001a2a:	f7ff ff25 	bl	8001878 <nextion_Send>
 8001a2e:	e05b      	b.n	8001ae8 <HAL_UART_RxCpltCallback+0x1f0>
 8001a30:	20002314 	.word	0x20002314
 8001a34:	200025d4 	.word	0x200025d4
 8001a38:	200025b0 	.word	0x200025b0
 8001a3c:	0800c290 	.word	0x0800c290
 8001a40:	200025b4 	.word	0x200025b4
 8001a44:	0800c294 	.word	0x0800c294
 8001a48:	0800c298 	.word	0x0800c298
 8001a4c:	0800c29c 	.word	0x0800c29c
 8001a50:	200025a4 	.word	0x200025a4
 8001a54:	0800c2a0 	.word	0x0800c2a0
 8001a58:	200025ac 	.word	0x200025ac
 8001a5c:	0800c2a4 	.word	0x0800c2a4
 8001a60:	0800c2a8 	.word	0x0800c2a8
 8001a64:	0800c2ac 	.word	0x0800c2ac
 8001a68:	2000258c 	.word	0x2000258c
 8001a6c:	0800c2b0 	.word	0x0800c2b0
 8001a70:	20002598 	.word	0x20002598
 8001a74:	0800c2b4 	.word	0x0800c2b4
 8001a78:	20002590 	.word	0x20002590
 8001a7c:	0800c2b8 	.word	0x0800c2b8
 8001a80:	2000259c 	.word	0x2000259c
 8001a84:	0800c2bc 	.word	0x0800c2bc
 8001a88:	20002594 	.word	0x20002594
 8001a8c:	0800c2c0 	.word	0x0800c2c0
 8001a90:	200025a0 	.word	0x200025a0
 8001a94:	0800c2c4 	.word	0x0800c2c4
 8001a98:	200025b8 	.word	0x200025b8
 8001a9c:	0800c2c8 	.word	0x0800c2c8
 8001aa0:	200025c4 	.word	0x200025c4
 8001aa4:	0800c2cc 	.word	0x0800c2cc
 8001aa8:	200025bc 	.word	0x200025bc
 8001aac:	0800c2d0 	.word	0x0800c2d0
 8001ab0:	200025c8 	.word	0x200025c8
 8001ab4:	0800c2d4 	.word	0x0800c2d4
 8001ab8:	200025c0 	.word	0x200025c0
 8001abc:	0800c2d8 	.word	0x0800c2d8
 8001ac0:	200025cc 	.word	0x200025cc
 8001ac4:	0800c2dc 	.word	0x0800c2dc
 8001ac8:	200025a8 	.word	0x200025a8
 8001acc:	0800c2e0 	.word	0x0800c2e0
		 }

		 else
		 {
		 nextion_Send("n0", send_V);
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_UART_RxCpltCallback+0x348>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	485b      	ldr	r0, [pc, #364]	; (8001c44 <HAL_UART_RxCpltCallback+0x34c>)
 8001ad8:	f7ff fece 	bl	8001878 <nextion_Send>
		 nextion_Send("n1", send_I);
 8001adc:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <HAL_UART_RxCpltCallback+0x350>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	485a      	ldr	r0, [pc, #360]	; (8001c4c <HAL_UART_RxCpltCallback+0x354>)
 8001ae4:	f7ff fec8 	bl	8001878 <nextion_Send>
		 }



		if(RX_Data[2] == 0x03)
 8001ae8:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_UART_RxCpltCallback+0x358>)
 8001aea:	789b      	ldrb	r3, [r3, #2]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d126      	bne.n	8001b3e <HAL_UART_RxCpltCallback+0x246>
		{
			dac_V -= 0.5;
 8001af0:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fd05 	bl	8000504 <__aeabi_ui2d>
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_UART_RxCpltCallback+0x360>)
 8001b00:	f7fe fbc2 	bl	8000288 <__aeabi_dsub>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f824 	bl	8000b58 <__aeabi_d2uiz>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b14:	6013      	str	r3, [r2, #0]
			if(dac_V == 20) dac_V = 20;
 8001b16:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b14      	cmp	r3, #20
 8001b1c:	d102      	bne.n	8001b24 <HAL_UART_RxCpltCallback+0x22c>
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b20:	2214      	movs	r2, #20
 8001b22:	601a      	str	r2, [r3, #0]
			send_V = map(dac_V,0,20,0,1275);
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2214      	movs	r2, #20
 8001b32:	2100      	movs	r1, #0
 8001b34:	f7ff fecc 	bl	80018d0 <map>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4a41      	ldr	r2, [pc, #260]	; (8001c40 <HAL_UART_RxCpltCallback+0x348>)
 8001b3c:	6013      	str	r3, [r2, #0]
		}

		if(RX_Data[2] == 0x04)
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_UART_RxCpltCallback+0x358>)
 8001b40:	789b      	ldrb	r3, [r3, #2]
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d126      	bne.n	8001b94 <HAL_UART_RxCpltCallback+0x29c>
		{
			dac_V += 0.5;
 8001b46:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fcda 	bl	8000504 <__aeabi_ui2d>
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_UART_RxCpltCallback+0x360>)
 8001b56:	f7fe fb99 	bl	800028c <__adddf3>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7fe fff9 	bl	8000b58 <__aeabi_d2uiz>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a3a      	ldr	r2, [pc, #232]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b6a:	6013      	str	r3, [r2, #0]
			if(dac_V == 0) dac_V = 0;
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <HAL_UART_RxCpltCallback+0x282>
 8001b74:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
			send_V = map(dac_V,0,20,0,1275);
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_UART_RxCpltCallback+0x35c>)
 8001b7c:	6818      	ldr	r0, [r3, #0]
 8001b7e:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2300      	movs	r3, #0
 8001b86:	2214      	movs	r2, #20
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f7ff fea1 	bl	80018d0 <map>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a2b      	ldr	r2, [pc, #172]	; (8001c40 <HAL_UART_RxCpltCallback+0x348>)
 8001b92:	6013      	str	r3, [r2, #0]
		}

		if(RX_Data[2] == 0x05)
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_UART_RxCpltCallback+0x358>)
 8001b96:	789b      	ldrb	r3, [r3, #2]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d11c      	bne.n	8001bd6 <HAL_UART_RxCpltCallback+0x2de>
		{
			dac_I -= 50;
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3b32      	subs	r3, #50	; 0x32
 8001ba2:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001ba4:	6013      	str	r3, [r2, #0]
			if(dac_I == 3000) dac_I = 3000;
 8001ba6:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d103      	bne.n	8001bba <HAL_UART_RxCpltCallback+0x2c2>
 8001bb2:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001bb4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bb8:	601a      	str	r2, [r3, #0]
			send_I = map(dac_I,0,3000,0,1275);
 8001bba:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bca:	2100      	movs	r1, #0
 8001bcc:	f7ff fe80 	bl	80018d0 <map>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_UART_RxCpltCallback+0x350>)
 8001bd4:	6013      	str	r3, [r2, #0]
		}
		if(RX_Data[2] == 0x06)
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_UART_RxCpltCallback+0x358>)
 8001bd8:	789b      	ldrb	r3, [r3, #2]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d119      	bne.n	8001c12 <HAL_UART_RxCpltCallback+0x31a>
		{
			dac_I += 50;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3332      	adds	r3, #50	; 0x32
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001be6:	6013      	str	r3, [r2, #0]
			if(dac_I == 0) dac_I = 0;
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <HAL_UART_RxCpltCallback+0x2fe>
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
			send_I = map(dac_I,0,3000,0,1275);
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_UART_RxCpltCallback+0x364>)
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	f240 43fb 	movw	r3, #1275	; 0x4fb
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c06:	2100      	movs	r1, #0
 8001c08:	f7ff fe62 	bl	80018d0 <map>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_UART_RxCpltCallback+0x350>)
 8001c10:	6013      	str	r3, [r2, #0]
		}


		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R,send_V);
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_UART_RxCpltCallback+0x348>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4811      	ldr	r0, [pc, #68]	; (8001c60 <HAL_UART_RxCpltCallback+0x368>)
 8001c1c:	f002 fcb3 	bl	8004586 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,send_I);
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_UART_RxCpltCallback+0x350>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2110      	movs	r1, #16
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <HAL_UART_RxCpltCallback+0x368>)
 8001c2a:	f002 fcac 	bl	8004586 <HAL_DAC_SetValue>

	   HAL_UART_Receive_IT(&huart2, RX_Data, 4);
 8001c2e:	2204      	movs	r2, #4
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <HAL_UART_RxCpltCallback+0x358>)
 8001c32:	480c      	ldr	r0, [pc, #48]	; (8001c64 <HAL_UART_RxCpltCallback+0x36c>)
 8001c34:	f005 f923 	bl	8006e7e <HAL_UART_Receive_IT>
	 }



}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	200025e0 	.word	0x200025e0
 8001c44:	0800c2e4 	.word	0x0800c2e4
 8001c48:	200025e4 	.word	0x200025e4
 8001c4c:	0800c2e8 	.word	0x0800c2e8
 8001c50:	200025d4 	.word	0x200025d4
 8001c54:	200025d8 	.word	0x200025d8
 8001c58:	3fe00000 	.word	0x3fe00000
 8001c5c:	200025dc 	.word	0x200025dc
 8001c60:	20002228 	.word	0x20002228
 8001c64:	20002314 	.word	0x20002314

08001c68 <HAL_ADC_ConvCpltCallback>:


//Timer1 50us'de bir kesmeye girdi ve ADC1 bu kısımda örnek almaya başladı.

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c68:	b5b0      	push	{r4, r5, r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
	start_tick = DWT->CYCCNT;
 8001c70:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <HAL_ADC_ConvCpltCallback+0x238>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a8b      	ldr	r2, [pc, #556]	; (8001ea4 <HAL_ADC_ConvCpltCallback+0x23c>)
 8001c76:	6013      	str	r3, [r2, #0]

while(count<1600)
 8001c78:	f000 bcda 	b.w	8002630 <HAL_ADC_ConvCpltCallback+0x9c8>
	{

	switch(k)
 8001c7c:	4b8a      	ldr	r3, [pc, #552]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b0b      	cmp	r3, #11
 8001c82:	f200 8130 	bhi.w	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>
 8001c86:	a201      	add	r2, pc, #4	; (adr r2, 8001c8c <HAL_ADC_ConvCpltCallback+0x24>)
 8001c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8c:	08001cbd 	.word	0x08001cbd
 8001c90:	08001ce9 	.word	0x08001ce9
 8001c94:	08001d15 	.word	0x08001d15
 8001c98:	08001d41 	.word	0x08001d41
 8001c9c:	08001d6d 	.word	0x08001d6d
 8001ca0:	08001d99 	.word	0x08001d99
 8001ca4:	08001dc5 	.word	0x08001dc5
 8001ca8:	08001df1 	.word	0x08001df1
 8001cac:	08001e1d 	.word	0x08001e1d
 8001cb0:	08001e49 	.word	0x08001e49
 8001cb4:	08001e75 	.word	0x08001e75
 8001cb8:	08001eb5 	.word	0x08001eb5
		{

			case 0: //REF
				adc1_Value[k] += adc_Buffer[k];
 8001cbc:	4b7a      	ldr	r3, [pc, #488]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a7a      	ldr	r2, [pc, #488]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001cc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cc6:	4b78      	ldr	r3, [pc, #480]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a79      	ldr	r2, [pc, #484]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001ccc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cd0:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	440a      	add	r2, r1
 8001cd6:	4975      	ldr	r1, [pc, #468]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001cdc:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	4a71      	ldr	r2, [pc, #452]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001ce4:	6013      	str	r3, [r2, #0]
				break;
 8001ce6:	e0fe      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>


			case 1: //VL1
				adc1_Value[k] += adc_Buffer[k];
 8001ce8:	4b6f      	ldr	r3, [pc, #444]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a6f      	ldr	r2, [pc, #444]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001cee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001cf8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cfc:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	440a      	add	r2, r1
 8001d02:	496a      	ldr	r1, [pc, #424]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001d08:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a66      	ldr	r2, [pc, #408]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d10:	6013      	str	r3, [r2, #0]
				break;
 8001d12:	e0e8      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 2: //VL2
				adc1_Value[k] += adc_Buffer[k];
 8001d14:	4b64      	ldr	r3, [pc, #400]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a64      	ldr	r2, [pc, #400]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001d1a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d1e:	4b62      	ldr	r3, [pc, #392]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a63      	ldr	r2, [pc, #396]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d28:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	440a      	add	r2, r1
 8001d2e:	495f      	ldr	r1, [pc, #380]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001d34:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	4a5b      	ldr	r2, [pc, #364]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d3c:	6013      	str	r3, [r2, #0]
				break;
 8001d3e:	e0d2      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 3: //VL3
				adc1_Value[k] += adc_Buffer[k];
 8001d40:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a59      	ldr	r2, [pc, #356]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001d46:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d4a:	4b57      	ldr	r3, [pc, #348]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001d50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d54:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	440a      	add	r2, r1
 8001d5a:	4954      	ldr	r1, [pc, #336]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001d60:	4b51      	ldr	r3, [pc, #324]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3301      	adds	r3, #1
 8001d66:	4a50      	ldr	r2, [pc, #320]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d68:	6013      	str	r3, [r2, #0]
				break;
 8001d6a:	e0bc      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 4: //IL1
				adc1_Value[k] += adc_Buffer[k];
 8001d6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a4e      	ldr	r2, [pc, #312]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001d72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d76:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001d7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	440a      	add	r2, r1
 8001d86:	4949      	ldr	r1, [pc, #292]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001d8c:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d94:	6013      	str	r3, [r2, #0]
				break;
 8001d96:	e0a6      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 5: //IL2
				adc1_Value[k] += adc_Buffer[k];
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a43      	ldr	r2, [pc, #268]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001d9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001da2:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a42      	ldr	r2, [pc, #264]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001da8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dac:	4b3e      	ldr	r3, [pc, #248]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	440a      	add	r2, r1
 8001db2:	493e      	ldr	r1, [pc, #248]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001db8:	4b3b      	ldr	r3, [pc, #236]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001dc0:	6013      	str	r3, [r2, #0]
				break;
 8001dc2:	e090      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 6: //IL3
				adc1_Value[k] += adc_Buffer[k];
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a38      	ldr	r2, [pc, #224]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001dca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001dd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dd8:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	440a      	add	r2, r1
 8001dde:	4933      	ldr	r1, [pc, #204]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001dec:	6013      	str	r3, [r2, #0]
				break;
 8001dee:	e07a      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 7: //BARA+
				adc1_Value[k] += adc_Buffer[k];
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2d      	ldr	r2, [pc, #180]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001df6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001e00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e04:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	440a      	add	r2, r1
 8001e0a:	4928      	ldr	r1, [pc, #160]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e18:	6013      	str	r3, [r2, #0]
				break;
 8001e1a:	e064      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 8: //BARA-
				adc1_Value[k] += adc_Buffer[k];
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001e22:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001e2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	440a      	add	r2, r1
 8001e36:	491d      	ldr	r1, [pc, #116]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e44:	6013      	str	r3, [r2, #0]
				break;
 8001e46:	e04e      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 9: //FB VOLTAGE
				adc1_Value[k] += adc_Buffer[k];
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001e4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	440a      	add	r2, r1
 8001e62:	4912      	ldr	r1, [pc, #72]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e70:	6013      	str	r3, [r2, #0]
				break;
 8001e72:	e038      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>

			case 10: //T_SAMPLE
				adc1_Value[k] += adc_Buffer[k];
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001e7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_ADC_ConvCpltCallback+0x248>)
 8001e84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	440a      	add	r2, r1
 8001e8e:	4907      	ldr	r1, [pc, #28]	; (8001eac <HAL_ADC_ConvCpltCallback+0x244>)
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				k++;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_ADC_ConvCpltCallback+0x240>)
 8001e9c:	6013      	str	r3, [r2, #0]
				break;
 8001e9e:	e022      	b.n	8001ee6 <HAL_ADC_ConvCpltCallback+0x27e>
 8001ea0:	e0001000 	.word	0xe0001000
 8001ea4:	20002424 	.word	0x20002424
 8001ea8:	20002524 	.word	0x20002524
 8001eac:	20002464 	.word	0x20002464
 8001eb0:	20002434 	.word	0x20002434

			case 11: //AKIM
				adc1_Value[k] += adc_Buffer[k];
 8001eb4:	4b94      	ldr	r3, [pc, #592]	; (8002108 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a94      	ldr	r2, [pc, #592]	; (800210c <HAL_ADC_ConvCpltCallback+0x4a4>)
 8001eba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ebe:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a93      	ldr	r2, [pc, #588]	; (8002110 <HAL_ADC_ConvCpltCallback+0x4a8>)
 8001ec4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ec8:	4b8f      	ldr	r3, [pc, #572]	; (8002108 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	440a      	add	r2, r1
 8001ece:	498f      	ldr	r1, [pc, #572]	; (800210c <HAL_ADC_ConvCpltCallback+0x4a4>)
 8001ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				count++;
 8001ed4:	4b8f      	ldr	r3, [pc, #572]	; (8002114 <HAL_ADC_ConvCpltCallback+0x4ac>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a8e      	ldr	r2, [pc, #568]	; (8002114 <HAL_ADC_ConvCpltCallback+0x4ac>)
 8001edc:	6013      	str	r3, [r2, #0]
				k=0;
 8001ede:	4b8a      	ldr	r3, [pc, #552]	; (8002108 <HAL_ADC_ConvCpltCallback+0x4a0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
				break;
 8001ee4:	bf00      	nop
		}




		if(count==1600)
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_ADC_ConvCpltCallback+0x4ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8001eee:	f040 839f 	bne.w	8002630 <HAL_ADC_ConvCpltCallback+0x9c8>
		{

				adc1_Mean[0] = adc1_Value[0] / 1600;
 8001ef2:	4b86      	ldr	r3, [pc, #536]	; (800210c <HAL_ADC_ConvCpltCallback+0x4a4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a88      	ldr	r2, [pc, #544]	; (8002118 <HAL_ADC_ConvCpltCallback+0x4b0>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	0a5b      	lsrs	r3, r3, #9
 8001efe:	4a87      	ldr	r2, [pc, #540]	; (800211c <HAL_ADC_ConvCpltCallback+0x4b4>)
 8001f00:	6013      	str	r3, [r2, #0]

			for(uint8_t t=1;t<7;t++)
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	e053      	b.n	8001fb0 <HAL_ADC_ConvCpltCallback+0x348>
				{
				//RMS Değer Hesabı
				adc1_Mean[t] = adc1_Value[t] / 1600; //Alınan değerler toplamı toplam sayıya bölündü ve ort değer elde edildi.
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	4a80      	ldr	r2, [pc, #512]	; (800210c <HAL_ADC_ConvCpltCallback+0x4a4>)
 8001f0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	4981      	ldr	r1, [pc, #516]	; (8002118 <HAL_ADC_ConvCpltCallback+0x4b0>)
 8001f14:	fba1 1202 	umull	r1, r2, r1, r2
 8001f18:	0a52      	lsrs	r2, r2, #9
 8001f1a:	4980      	ldr	r1, [pc, #512]	; (800211c <HAL_ADC_ConvCpltCallback+0x4b4>)
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				adc1_Square[t] = (adc1_Mean[t]-adc1_Mean[0]) * (adc1_Mean[t]-adc1_Mean[0]); //Ortalama değerin karesi alındı.
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	4a7e      	ldr	r2, [pc, #504]	; (800211c <HAL_ADC_ConvCpltCallback+0x4b4>)
 8001f24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f28:	4b7c      	ldr	r3, [pc, #496]	; (800211c <HAL_ADC_ConvCpltCallback+0x4b4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	1ad2      	subs	r2, r2, r3
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	497a      	ldr	r1, [pc, #488]	; (800211c <HAL_ADC_ConvCpltCallback+0x4b4>)
 8001f32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8001f36:	4b79      	ldr	r3, [pc, #484]	; (800211c <HAL_ADC_ConvCpltCallback+0x4b4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	1ac9      	subs	r1, r1, r3
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	fb01 f202 	mul.w	r2, r1, r2
 8001f42:	4977      	ldr	r1, [pc, #476]	; (8002120 <HAL_ADC_ConvCpltCallback+0x4b8>)
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				adc1_Square_Root[t] = 331 * sqrt(adc1_Square[t]  * 0.707 / 868.8); //Karesi alınan değerlerin karekökü alındı. 331:Gerilim Bölücü  0.707:RMS Hesabı(sqrt(2)/2)  868.8:Kalibrasyon Çarpanı
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	4a75      	ldr	r2, [pc, #468]	; (8002120 <HAL_ADC_ConvCpltCallback+0x4b8>)
 8001f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fad7 	bl	8000504 <__aeabi_ui2d>
 8001f56:	a364      	add	r3, pc, #400	; (adr r3, 80020e8 <HAL_ADC_ConvCpltCallback+0x480>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fb4c 	bl	80005f8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	a361      	add	r3, pc, #388	; (adr r3, 80020f0 <HAL_ADC_ConvCpltCallback+0x488>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe fc6d 	bl	800084c <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	ec43 2b17 	vmov	d7, r2, r3
 8001f7a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f7e:	eef0 0a67 	vmov.f32	s1, s15
 8001f82:	f00a f86d 	bl	800c060 <sqrt>
 8001f86:	ec51 0b10 	vmov	r0, r1, d0
 8001f8a:	a35b      	add	r3, pc, #364	; (adr r3, 80020f8 <HAL_ADC_ConvCpltCallback+0x490>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb32 	bl	80005f8 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	7bfc      	ldrb	r4, [r7, #15]
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fddb 	bl	8000b58 <__aeabi_d2uiz>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a5f      	ldr	r2, [pc, #380]	; (8002124 <HAL_ADC_ConvCpltCallback+0x4bc>)
 8001fa6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			for(uint8_t t=1;t<7;t++)
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	3301      	adds	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d9a8      	bls.n	8001f08 <HAL_ADC_ConvCpltCallback+0x2a0>
				}


				V1L=adc1_Square_Root[1];  //V1L
 8001fb6:	4b5b      	ldr	r3, [pc, #364]	; (8002124 <HAL_ADC_ConvCpltCallback+0x4bc>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <HAL_ADC_ConvCpltCallback+0x4c0>)
 8001fbc:	6013      	str	r3, [r2, #0]
				V2L=adc1_Square_Root[2];  //V2L
 8001fbe:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_ADC_ConvCpltCallback+0x4bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_ADC_ConvCpltCallback+0x4c4>)
 8001fc4:	6013      	str	r3, [r2, #0]
				V3L=adc1_Square_Root[3];  //V3L
 8001fc6:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HAL_ADC_ConvCpltCallback+0x4bc>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4a59      	ldr	r2, [pc, #356]	; (8002130 <HAL_ADC_ConvCpltCallback+0x4c8>)
 8001fcc:	6013      	str	r3, [r2, #0]

				I1L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[4])); // IL1  330,55:Direnç ve kalibrasyon çarpanı
 8001fce:	4b54      	ldr	r3, [pc, #336]	; (8002120 <HAL_ADC_ConvCpltCallback+0x4b8>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fa96 	bl	8000504 <__aeabi_ui2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	ec43 2b10 	vmov	d0, r2, r3
 8001fe0:	f00a f83e 	bl	800c060 <sqrt>
 8001fe4:	ec51 0b10 	vmov	r0, r1, d0
 8001fe8:	a345      	add	r3, pc, #276	; (adr r3, 8002100 <HAL_ADC_ConvCpltCallback+0x498>)
 8001fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fee:	f7fe fb03 	bl	80005f8 <__aeabi_dmul>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4610      	mov	r0, r2
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_ADC_ConvCpltCallback+0x4cc>)
 8002000:	f7fe fafa 	bl	80005f8 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fda4 	bl	8000b58 <__aeabi_d2uiz>
 8002010:	4603      	mov	r3, r0
 8002012:	4a49      	ldr	r2, [pc, #292]	; (8002138 <HAL_ADC_ConvCpltCallback+0x4d0>)
 8002014:	6013      	str	r3, [r2, #0]
				I2L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[5])); // IL2
 8002016:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_ADC_ConvCpltCallback+0x4b8>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fa72 	bl	8000504 <__aeabi_ui2d>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	ec43 2b10 	vmov	d0, r2, r3
 8002028:	f00a f81a 	bl	800c060 <sqrt>
 800202c:	ec51 0b10 	vmov	r0, r1, d0
 8002030:	a333      	add	r3, pc, #204	; (adr r3, 8002100 <HAL_ADC_ConvCpltCallback+0x498>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe fadf 	bl	80005f8 <__aeabi_dmul>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_ADC_ConvCpltCallback+0x4cc>)
 8002048:	f7fe fad6 	bl	80005f8 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe fd80 	bl	8000b58 <__aeabi_d2uiz>
 8002058:	4603      	mov	r3, r0
 800205a:	4a38      	ldr	r2, [pc, #224]	; (800213c <HAL_ADC_ConvCpltCallback+0x4d4>)
 800205c:	6013      	str	r3, [r2, #0]
				I3L = CT * (330 * 3.3 / 4095 / 55 * sqrt(adc1_Square[6])); //IL3
 800205e:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_ADC_ConvCpltCallback+0x4b8>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa4e 	bl	8000504 <__aeabi_ui2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	ec43 2b10 	vmov	d0, r2, r3
 8002070:	f009 fff6 	bl	800c060 <sqrt>
 8002074:	ec51 0b10 	vmov	r0, r1, d0
 8002078:	a321      	add	r3, pc, #132	; (adr r3, 8002100 <HAL_ADC_ConvCpltCallback+0x498>)
 800207a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207e:	f7fe fabb 	bl	80005f8 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b29      	ldr	r3, [pc, #164]	; (8002134 <HAL_ADC_ConvCpltCallback+0x4cc>)
 8002090:	f7fe fab2 	bl	80005f8 <__aeabi_dmul>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f7fe fd5c 	bl	8000b58 <__aeabi_d2uiz>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a27      	ldr	r2, [pc, #156]	; (8002140 <HAL_ADC_ConvCpltCallback+0x4d8>)
 80020a4:	6013      	str	r3, [r2, #0]

				Vin = (V1L+V2L+V3L) / 3;
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_ADC_ConvCpltCallback+0x4c0>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_ADC_ConvCpltCallback+0x4c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	441a      	add	r2, r3
 80020b0:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_ADC_ConvCpltCallback+0x4c8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	4a23      	ldr	r2, [pc, #140]	; (8002144 <HAL_ADC_ConvCpltCallback+0x4dc>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	085b      	lsrs	r3, r3, #1
 80020be:	4a22      	ldr	r2, [pc, #136]	; (8002148 <HAL_ADC_ConvCpltCallback+0x4e0>)
 80020c0:	6013      	str	r3, [r2, #0]
				Iin = (I1L+I2L+I3L) / 3;
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_ADC_ConvCpltCallback+0x4d0>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <HAL_ADC_ConvCpltCallback+0x4d4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	441a      	add	r2, r3
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_ADC_ConvCpltCallback+0x4d8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a1c      	ldr	r2, [pc, #112]	; (8002144 <HAL_ADC_ConvCpltCallback+0x4dc>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_ADC_ConvCpltCallback+0x4e4>)
 80020dc:	6013      	str	r3, [r2, #0]

				for(uint8_t j=7;j<12;j++) adc1_Mean[j] = adc1_Value[j] / 1600;
 80020de:	2307      	movs	r3, #7
 80020e0:	73bb      	strb	r3, [r7, #14]
 80020e2:	e044      	b.n	800216e <HAL_ADC_ConvCpltCallback+0x506>
 80020e4:	f3af 8000 	nop.w
 80020e8:	76c8b439 	.word	0x76c8b439
 80020ec:	3fe69fbe 	.word	0x3fe69fbe
 80020f0:	66666666 	.word	0x66666666
 80020f4:	408b2666 	.word	0x408b2666
 80020f8:	00000000 	.word	0x00000000
 80020fc:	4074b000 	.word	0x4074b000
 8002100:	ad67a347 	.word	0xad67a347
 8002104:	3f73ce09 	.word	0x3f73ce09
 8002108:	20002524 	.word	0x20002524
 800210c:	20002464 	.word	0x20002464
 8002110:	20002434 	.word	0x20002434
 8002114:	20002528 	.word	0x20002528
 8002118:	51eb851f 	.word	0x51eb851f
 800211c:	200024f4 	.word	0x200024f4
 8002120:	20002494 	.word	0x20002494
 8002124:	200024c4 	.word	0x200024c4
 8002128:	2000253c 	.word	0x2000253c
 800212c:	20002540 	.word	0x20002540
 8002130:	20002544 	.word	0x20002544
 8002134:	40490000 	.word	0x40490000
 8002138:	20002530 	.word	0x20002530
 800213c:	20002534 	.word	0x20002534
 8002140:	20002538 	.word	0x20002538
 8002144:	aaaaaaab 	.word	0xaaaaaaab
 8002148:	20002578 	.word	0x20002578
 800214c:	2000257c 	.word	0x2000257c
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	4ac9      	ldr	r2, [pc, #804]	; (8002478 <HAL_ADC_ConvCpltCallback+0x810>)
 8002154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	49c8      	ldr	r1, [pc, #800]	; (800247c <HAL_ADC_ConvCpltCallback+0x814>)
 800215c:	fba1 1202 	umull	r1, r2, r1, r2
 8002160:	0a52      	lsrs	r2, r2, #9
 8002162:	49c7      	ldr	r1, [pc, #796]	; (8002480 <HAL_ADC_ConvCpltCallback+0x818>)
 8002164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	3301      	adds	r3, #1
 800216c:	73bb      	strb	r3, [r7, #14]
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	2b0b      	cmp	r3, #11
 8002172:	d9ed      	bls.n	8002150 <HAL_ADC_ConvCpltCallback+0x4e8>

				bara_Arti=adc1_Mean[7] * 3.3 / 4096; //bara+
 8002174:	4bc2      	ldr	r3, [pc, #776]	; (8002480 <HAL_ADC_ConvCpltCallback+0x818>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe f9c3 	bl	8000504 <__aeabi_ui2d>
 800217e:	a3b2      	add	r3, pc, #712	; (adr r3, 8002448 <HAL_ADC_ConvCpltCallback+0x7e0>)
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f7fe fa38 	bl	80005f8 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	4bbb      	ldr	r3, [pc, #748]	; (8002484 <HAL_ADC_ConvCpltCallback+0x81c>)
 8002196:	f7fe fb59 	bl	800084c <__aeabi_ddiv>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fcd9 	bl	8000b58 <__aeabi_d2uiz>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4ab7      	ldr	r2, [pc, #732]	; (8002488 <HAL_ADC_ConvCpltCallback+0x820>)
 80021aa:	6013      	str	r3, [r2, #0]
				bara_Eksi=adc1_Mean[8] * 3.3 / 4096; //bara-
 80021ac:	4bb4      	ldr	r3, [pc, #720]	; (8002480 <HAL_ADC_ConvCpltCallback+0x818>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9a7 	bl	8000504 <__aeabi_ui2d>
 80021b6:	a3a4      	add	r3, pc, #656	; (adr r3, 8002448 <HAL_ADC_ConvCpltCallback+0x7e0>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe fa1c 	bl	80005f8 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	4bad      	ldr	r3, [pc, #692]	; (8002484 <HAL_ADC_ConvCpltCallback+0x81c>)
 80021ce:	f7fe fb3d 	bl	800084c <__aeabi_ddiv>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fcbd 	bl	8000b58 <__aeabi_d2uiz>
 80021de:	4603      	mov	r3, r0
 80021e0:	4aaa      	ldr	r2, [pc, #680]	; (800248c <HAL_ADC_ConvCpltCallback+0x824>)
 80021e2:	6013      	str	r3, [r2, #0]
				Vout=adc1_Mean[9] * 3.3 / 4096 * 0.9615; // Vout
 80021e4:	4ba6      	ldr	r3, [pc, #664]	; (8002480 <HAL_ADC_ConvCpltCallback+0x818>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f98b 	bl	8000504 <__aeabi_ui2d>
 80021ee:	a396      	add	r3, pc, #600	; (adr r3, 8002448 <HAL_ADC_ConvCpltCallback+0x7e0>)
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f7fe fa00 	bl	80005f8 <__aeabi_dmul>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4610      	mov	r0, r2
 80021fe:	4619      	mov	r1, r3
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	4b9f      	ldr	r3, [pc, #636]	; (8002484 <HAL_ADC_ConvCpltCallback+0x81c>)
 8002206:	f7fe fb21 	bl	800084c <__aeabi_ddiv>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	a38f      	add	r3, pc, #572	; (adr r3, 8002450 <HAL_ADC_ConvCpltCallback+0x7e8>)
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	f7fe f9ee 	bl	80005f8 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe fc98 	bl	8000b58 <__aeabi_d2uiz>
 8002228:	4603      	mov	r3, r0
 800222a:	4a99      	ldr	r2, [pc, #612]	; (8002490 <HAL_ADC_ConvCpltCallback+0x828>)
 800222c:	6013      	str	r3, [r2, #0]
				t_sample=adc1_Mean[10] * 3.3 / 4096; //s_sample sıcaklık
 800222e:	4b94      	ldr	r3, [pc, #592]	; (8002480 <HAL_ADC_ConvCpltCallback+0x818>)
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f966 	bl	8000504 <__aeabi_ui2d>
 8002238:	a383      	add	r3, pc, #524	; (adr r3, 8002448 <HAL_ADC_ConvCpltCallback+0x7e0>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9db 	bl	80005f8 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	4b8d      	ldr	r3, [pc, #564]	; (8002484 <HAL_ADC_ConvCpltCallback+0x81c>)
 8002250:	f7fe fafc 	bl	800084c <__aeabi_ddiv>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fc7c 	bl	8000b58 <__aeabi_d2uiz>
 8002260:	4603      	mov	r3, r0
 8002262:	4a8c      	ldr	r2, [pc, #560]	; (8002494 <HAL_ADC_ConvCpltCallback+0x82c>)
 8002264:	6013      	str	r3, [r2, #0]
				akim=adc1_Mean[11] * 3.3 / 4096; //akım
 8002266:	4b86      	ldr	r3, [pc, #536]	; (8002480 <HAL_ADC_ConvCpltCallback+0x818>)
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f94a 	bl	8000504 <__aeabi_ui2d>
 8002270:	a375      	add	r3, pc, #468	; (adr r3, 8002448 <HAL_ADC_ConvCpltCallback+0x7e0>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	f7fe f9bf 	bl	80005f8 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_ADC_ConvCpltCallback+0x81c>)
 8002288:	f7fe fae0 	bl	800084c <__aeabi_ddiv>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fc60 	bl	8000b58 <__aeabi_d2uiz>
 8002298:	4603      	mov	r3, r0
 800229a:	4a7f      	ldr	r2, [pc, #508]	; (8002498 <HAL_ADC_ConvCpltCallback+0x830>)
 800229c:	6013      	str	r3, [r2, #0]
				Iout=map(adc1_Mean[11],180,995,0,3680)-697; // Iout
 800229e:	4b78      	ldr	r3, [pc, #480]	; (8002480 <HAL_ADC_ConvCpltCallback+0x818>)
 80022a0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80022a2:	f44f 6366 	mov.w	r3, #3680	; 0xe60
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2300      	movs	r3, #0
 80022aa:	f240 32e3 	movw	r2, #995	; 0x3e3
 80022ae:	21b4      	movs	r1, #180	; 0xb4
 80022b0:	f7ff fb0e 	bl	80018d0 <map>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f2a3 23b9 	subw	r3, r3, #697	; 0x2b9
 80022ba:	4a78      	ldr	r2, [pc, #480]	; (800249c <HAL_ADC_ConvCpltCallback+0x834>)
 80022bc:	6013      	str	r3, [r2, #0]
				if(Iout<0) Iout=0;
				bara_Toplam=bara_Arti-bara_Eksi;
 80022be:	4b72      	ldr	r3, [pc, #456]	; (8002488 <HAL_ADC_ConvCpltCallback+0x820>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b72      	ldr	r3, [pc, #456]	; (800248c <HAL_ADC_ConvCpltCallback+0x824>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	4a75      	ldr	r2, [pc, #468]	; (80024a0 <HAL_ADC_ConvCpltCallback+0x838>)
 80022ca:	6013      	str	r3, [r2, #0]

				//Sıcaklık hesabı
				temp = 16.628 * t_sample * t_sample + 535.2484 * t_sample -16.129 ;
 80022cc:	4b71      	ldr	r3, [pc, #452]	; (8002494 <HAL_ADC_ConvCpltCallback+0x82c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f917 	bl	8000504 <__aeabi_ui2d>
 80022d6:	a360      	add	r3, pc, #384	; (adr r3, 8002458 <HAL_ADC_ConvCpltCallback+0x7f0>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f7fe f98c 	bl	80005f8 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4614      	mov	r4, r2
 80022e6:	461d      	mov	r5, r3
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_ADC_ConvCpltCallback+0x82c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f909 	bl	8000504 <__aeabi_ui2d>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4620      	mov	r0, r4
 80022f8:	4629      	mov	r1, r5
 80022fa:	f7fe f97d 	bl	80005f8 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4614      	mov	r4, r2
 8002304:	461d      	mov	r5, r3
 8002306:	4b63      	ldr	r3, [pc, #396]	; (8002494 <HAL_ADC_ConvCpltCallback+0x82c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f8fa 	bl	8000504 <__aeabi_ui2d>
 8002310:	a353      	add	r3, pc, #332	; (adr r3, 8002460 <HAL_ADC_ConvCpltCallback+0x7f8>)
 8002312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002316:	f7fe f96f 	bl	80005f8 <__aeabi_dmul>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4620      	mov	r0, r4
 8002320:	4629      	mov	r1, r5
 8002322:	f7fd ffb3 	bl	800028c <__adddf3>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	a34e      	add	r3, pc, #312	; (adr r3, 8002468 <HAL_ADC_ConvCpltCallback+0x800>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	f7fd ffa8 	bl	8000288 <__aeabi_dsub>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fc0a 	bl	8000b58 <__aeabi_d2uiz>
 8002344:	4603      	mov	r3, r0
 8002346:	4a57      	ldr	r2, [pc, #348]	; (80024a4 <HAL_ADC_ConvCpltCallback+0x83c>)
 8002348:	6013      	str	r3, [r2, #0]


				//Faz-Faz arası gerilim ve akımlar
				V12L=sqrt(3)*(adc1_Square_Root[1] + adc1_Square_Root[2] / 2);
 800234a:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4b56      	ldr	r3, [pc, #344]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	085b      	lsrs	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe f8d4 	bl	8000504 <__aeabi_ui2d>
 800235c:	a344      	add	r3, pc, #272	; (adr r3, 8002470 <HAL_ADC_ConvCpltCallback+0x808>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe f949 	bl	80005f8 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fbf3 	bl	8000b58 <__aeabi_d2uiz>
 8002372:	4603      	mov	r3, r0
 8002374:	4a4d      	ldr	r2, [pc, #308]	; (80024ac <HAL_ADC_ConvCpltCallback+0x844>)
 8002376:	6013      	str	r3, [r2, #0]
				V23L=sqrt(3)*(adc1_Square_Root[2] + adc1_Square_Root[3] / 2);
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b4a      	ldr	r3, [pc, #296]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f8bd 	bl	8000504 <__aeabi_ui2d>
 800238a:	a339      	add	r3, pc, #228	; (adr r3, 8002470 <HAL_ADC_ConvCpltCallback+0x808>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe f932 	bl	80005f8 <__aeabi_dmul>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fbdc 	bl	8000b58 <__aeabi_d2uiz>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <HAL_ADC_ConvCpltCallback+0x848>)
 80023a4:	6013      	str	r3, [r2, #0]
				V13L=sqrt(3)*(adc1_Square_Root[1] + adc1_Square_Root[3] / 2);
 80023a6:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8a6 	bl	8000504 <__aeabi_ui2d>
 80023b8:	a32d      	add	r3, pc, #180	; (adr r3, 8002470 <HAL_ADC_ConvCpltCallback+0x808>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	f7fe f91b 	bl	80005f8 <__aeabi_dmul>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7fe fbc5 	bl	8000b58 <__aeabi_d2uiz>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4a38      	ldr	r2, [pc, #224]	; (80024b4 <HAL_ADC_ConvCpltCallback+0x84c>)
 80023d2:	6013      	str	r3, [r2, #0]
				I12L=sqrt(3)*(adc1_Square_Root[4] + adc1_Square_Root[5] / 2);
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f88f 	bl	8000504 <__aeabi_ui2d>
 80023e6:	a322      	add	r3, pc, #136	; (adr r3, 8002470 <HAL_ADC_ConvCpltCallback+0x808>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f904 	bl	80005f8 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f7fe fbae 	bl	8000b58 <__aeabi_d2uiz>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4a2e      	ldr	r2, [pc, #184]	; (80024b8 <HAL_ADC_ConvCpltCallback+0x850>)
 8002400:	6013      	str	r3, [r2, #0]
				I23L=sqrt(3)*(adc1_Square_Root[5] + adc1_Square_Root[6] / 2);
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	4413      	add	r3, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f878 	bl	8000504 <__aeabi_ui2d>
 8002414:	a316      	add	r3, pc, #88	; (adr r3, 8002470 <HAL_ADC_ConvCpltCallback+0x808>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	f7fe f8ed 	bl	80005f8 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fb97 	bl	8000b58 <__aeabi_d2uiz>
 800242a:	4603      	mov	r3, r0
 800242c:	4a23      	ldr	r2, [pc, #140]	; (80024bc <HAL_ADC_ConvCpltCallback+0x854>)
 800242e:	6013      	str	r3, [r2, #0]
				I13L=sqrt(3)*(adc1_Square_Root[4] + adc1_Square_Root[6] / 2);
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <HAL_ADC_ConvCpltCallback+0x840>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f861 	bl	8000504 <__aeabi_ui2d>
 8002442:	e03d      	b.n	80024c0 <HAL_ADC_ConvCpltCallback+0x858>
 8002444:	f3af 8000 	nop.w
 8002448:	66666666 	.word	0x66666666
 800244c:	400a6666 	.word	0x400a6666
 8002450:	a5e353f8 	.word	0xa5e353f8
 8002454:	3feec49b 	.word	0x3feec49b
 8002458:	9ba5e354 	.word	0x9ba5e354
 800245c:	4030a0c4 	.word	0x4030a0c4
 8002460:	b923a29c 	.word	0xb923a29c
 8002464:	4080b9fc 	.word	0x4080b9fc
 8002468:	24dd2f1b 	.word	0x24dd2f1b
 800246c:	40302106 	.word	0x40302106
 8002470:	e8584caa 	.word	0xe8584caa
 8002474:	3ffbb67a 	.word	0x3ffbb67a
 8002478:	20002464 	.word	0x20002464
 800247c:	51eb851f 	.word	0x51eb851f
 8002480:	200024f4 	.word	0x200024f4
 8002484:	40b00000 	.word	0x40b00000
 8002488:	20002560 	.word	0x20002560
 800248c:	20002564 	.word	0x20002564
 8002490:	20002568 	.word	0x20002568
 8002494:	2000256c 	.word	0x2000256c
 8002498:	20002570 	.word	0x20002570
 800249c:	20002574 	.word	0x20002574
 80024a0:	20002584 	.word	0x20002584
 80024a4:	20002580 	.word	0x20002580
 80024a8:	200024c4 	.word	0x200024c4
 80024ac:	20002548 	.word	0x20002548
 80024b0:	2000254c 	.word	0x2000254c
 80024b4:	20002550 	.word	0x20002550
 80024b8:	20002554 	.word	0x20002554
 80024bc:	20002558 	.word	0x20002558
 80024c0:	a3aa      	add	r3, pc, #680	; (adr r3, 800276c <HAL_ADC_ConvCpltCallback+0xb04>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f897 	bl	80005f8 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f7fe fb41 	bl	8000b58 <__aeabi_d2uiz>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_ADC_ConvCpltCallback+0xa18>)
 80024da:	6013      	str	r3, [r2, #0]


				//Değerler int'e çevriliyor.
				iMean=(int)adc1_Mean[0];
 80024dc:	4b69      	ldr	r3, [pc, #420]	; (8002684 <HAL_ADC_ConvCpltCallback+0xa1c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b69      	ldr	r3, [pc, #420]	; (8002688 <HAL_ADC_ConvCpltCallback+0xa20>)
 80024e4:	601a      	str	r2, [r3, #0]
				iV1L = (int)V1L;
 80024e6:	4b69      	ldr	r3, [pc, #420]	; (800268c <HAL_ADC_ConvCpltCallback+0xa24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_ADC_ConvCpltCallback+0xa28>)
 80024ee:	601a      	str	r2, [r3, #0]
				iV2L = (int)V2L;
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_ADC_ConvCpltCallback+0xa2c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b68      	ldr	r3, [pc, #416]	; (8002698 <HAL_ADC_ConvCpltCallback+0xa30>)
 80024f8:	601a      	str	r2, [r3, #0]
				iV3L = (int)V3L;
 80024fa:	4b68      	ldr	r3, [pc, #416]	; (800269c <HAL_ADC_ConvCpltCallback+0xa34>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	4b67      	ldr	r3, [pc, #412]	; (80026a0 <HAL_ADC_ConvCpltCallback+0xa38>)
 8002502:	601a      	str	r2, [r3, #0]
				iI1L = (int)I1L;
 8002504:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <HAL_ADC_ConvCpltCallback+0xa3c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_ADC_ConvCpltCallback+0xa40>)
 800250c:	601a      	str	r2, [r3, #0]
				iI2L = (int)I2L;
 800250e:	4b67      	ldr	r3, [pc, #412]	; (80026ac <HAL_ADC_ConvCpltCallback+0xa44>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa48>)
 8002516:	601a      	str	r2, [r3, #0]
				iI3L = (int)I3L;
 8002518:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <HAL_ADC_ConvCpltCallback+0xa4c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b66      	ldr	r3, [pc, #408]	; (80026b8 <HAL_ADC_ConvCpltCallback+0xa50>)
 8002520:	601a      	str	r2, [r3, #0]
				iVout = (int)Vout;
 8002522:	4b66      	ldr	r3, [pc, #408]	; (80026bc <HAL_ADC_ConvCpltCallback+0xa54>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_ADC_ConvCpltCallback+0xa58>)
 800252a:	601a      	str	r2, [r3, #0]
				itemp = (int)temp;
 800252c:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_ADC_ConvCpltCallback+0xa5c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_ADC_ConvCpltCallback+0xa60>)
 8002534:	601a      	str	r2, [r3, #0]
				iIout = (int)Iout;
 8002536:	4b65      	ldr	r3, [pc, #404]	; (80026cc <HAL_ADC_ConvCpltCallback+0xa64>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	4b64      	ldr	r3, [pc, #400]	; (80026d0 <HAL_ADC_ConvCpltCallback+0xa68>)
 800253e:	601a      	str	r2, [r3, #0]
				iVin = (int)Vin;
 8002540:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <HAL_ADC_ConvCpltCallback+0xa6c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b64      	ldr	r3, [pc, #400]	; (80026d8 <HAL_ADC_ConvCpltCallback+0xa70>)
 8002548:	601a      	str	r2, [r3, #0]
				iIin = (int)Iin;
 800254a:	4b64      	ldr	r3, [pc, #400]	; (80026dc <HAL_ADC_ConvCpltCallback+0xa74>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_ADC_ConvCpltCallback+0xa78>)
 8002552:	601a      	str	r2, [r3, #0]
				iV12L = (int)V12L;
 8002554:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_ADC_ConvCpltCallback+0xa7c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	461a      	mov	r2, r3
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_ADC_ConvCpltCallback+0xa80>)
 800255c:	601a      	str	r2, [r3, #0]
				iV23L = (int)V23L;
 800255e:	4b63      	ldr	r3, [pc, #396]	; (80026ec <HAL_ADC_ConvCpltCallback+0xa84>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <HAL_ADC_ConvCpltCallback+0xa88>)
 8002566:	601a      	str	r2, [r3, #0]
				iV13L = (int)V13L;
 8002568:	4b62      	ldr	r3, [pc, #392]	; (80026f4 <HAL_ADC_ConvCpltCallback+0xa8c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b62      	ldr	r3, [pc, #392]	; (80026f8 <HAL_ADC_ConvCpltCallback+0xa90>)
 8002570:	601a      	str	r2, [r3, #0]
				iI12L = (int)I12L;
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <HAL_ADC_ConvCpltCallback+0xa94>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	4b61      	ldr	r3, [pc, #388]	; (8002700 <HAL_ADC_ConvCpltCallback+0xa98>)
 800257a:	601a      	str	r2, [r3, #0]
				iI23L = (int)I23L;
 800257c:	4b61      	ldr	r3, [pc, #388]	; (8002704 <HAL_ADC_ConvCpltCallback+0xa9c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b61      	ldr	r3, [pc, #388]	; (8002708 <HAL_ADC_ConvCpltCallback+0xaa0>)
 8002584:	601a      	str	r2, [r3, #0]
				iI13L = (int)I13L;
 8002586:	4b3e      	ldr	r3, [pc, #248]	; (8002680 <HAL_ADC_ConvCpltCallback+0xa18>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	4b5f      	ldr	r3, [pc, #380]	; (800270c <HAL_ADC_ConvCpltCallback+0xaa4>)
 800258e:	601a      	str	r2, [r3, #0]
				ibara_Toplam = (int)bara_Toplam;
 8002590:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <HAL_ADC_ConvCpltCallback+0xaa8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b5f      	ldr	r3, [pc, #380]	; (8002714 <HAL_ADC_ConvCpltCallback+0xaac>)
 8002598:	601a      	str	r2, [r3, #0]




				//int değerler char'a çevriliyor
				sprintf(adc1_Last0, "%d", 0); //geçen süre yazması gerekiyor.
 800259a:	2200      	movs	r2, #0
 800259c:	495e      	ldr	r1, [pc, #376]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 800259e:	485f      	ldr	r0, [pc, #380]	; (800271c <HAL_ADC_ConvCpltCallback+0xab4>)
 80025a0:	f008 fdce 	bl	800b140 <siprintf>
				sprintf(adc1_Last1, "%d", iV1L);
 80025a4:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <HAL_ADC_ConvCpltCallback+0xa28>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	495b      	ldr	r1, [pc, #364]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 80025ac:	485c      	ldr	r0, [pc, #368]	; (8002720 <HAL_ADC_ConvCpltCallback+0xab8>)
 80025ae:	f008 fdc7 	bl	800b140 <siprintf>
				sprintf(adc1_Last2, "%d", iV2L);
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <HAL_ADC_ConvCpltCallback+0xa30>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4957      	ldr	r1, [pc, #348]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 80025ba:	485a      	ldr	r0, [pc, #360]	; (8002724 <HAL_ADC_ConvCpltCallback+0xabc>)
 80025bc:	f008 fdc0 	bl	800b140 <siprintf>
				sprintf(adc1_Last3, "%d", iV3L);
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_ADC_ConvCpltCallback+0xa38>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4954      	ldr	r1, [pc, #336]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 80025c8:	4857      	ldr	r0, [pc, #348]	; (8002728 <HAL_ADC_ConvCpltCallback+0xac0>)
 80025ca:	f008 fdb9 	bl	800b140 <siprintf>
				sprintf(adc1_Last4, "%d", iI1L);
 80025ce:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_ADC_ConvCpltCallback+0xa40>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	4950      	ldr	r1, [pc, #320]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 80025d6:	4855      	ldr	r0, [pc, #340]	; (800272c <HAL_ADC_ConvCpltCallback+0xac4>)
 80025d8:	f008 fdb2 	bl	800b140 <siprintf>
				sprintf(adc1_Last5, "%d", iI2L);
 80025dc:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_ADC_ConvCpltCallback+0xa48>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	494d      	ldr	r1, [pc, #308]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 80025e4:	4852      	ldr	r0, [pc, #328]	; (8002730 <HAL_ADC_ConvCpltCallback+0xac8>)
 80025e6:	f008 fdab 	bl	800b140 <siprintf>
				sprintf(adc1_Last6, "%d", iI3L);
 80025ea:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_ADC_ConvCpltCallback+0xa50>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	4949      	ldr	r1, [pc, #292]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 80025f2:	4850      	ldr	r0, [pc, #320]	; (8002734 <HAL_ADC_ConvCpltCallback+0xacc>)
 80025f4:	f008 fda4 	bl	800b140 <siprintf>
				sprintf(adc1_Last7, "%d", ibara_Toplam);
 80025f8:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_ADC_ConvCpltCallback+0xaac>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4946      	ldr	r1, [pc, #280]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 8002600:	484d      	ldr	r0, [pc, #308]	; (8002738 <HAL_ADC_ConvCpltCallback+0xad0>)
 8002602:	f008 fd9d 	bl	800b140 <siprintf>
				sprintf(adc1_Last8, "%d", iVout);
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_ADC_ConvCpltCallback+0xa58>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	4942      	ldr	r1, [pc, #264]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 800260e:	484b      	ldr	r0, [pc, #300]	; (800273c <HAL_ADC_ConvCpltCallback+0xad4>)
 8002610:	f008 fd96 	bl	800b140 <siprintf>
				sprintf(adc1_Last9, "%d", iIout);
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_ADC_ConvCpltCallback+0xa68>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	493f      	ldr	r1, [pc, #252]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 800261c:	4848      	ldr	r0, [pc, #288]	; (8002740 <HAL_ADC_ConvCpltCallback+0xad8>)
 800261e:	f008 fd8f 	bl	800b140 <siprintf>
				sprintf(adc1_Last10, "%d", itemp);
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <HAL_ADC_ConvCpltCallback+0xa60>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	493b      	ldr	r1, [pc, #236]	; (8002718 <HAL_ADC_ConvCpltCallback+0xab0>)
 800262a:	4846      	ldr	r0, [pc, #280]	; (8002744 <HAL_ADC_ConvCpltCallback+0xadc>)
 800262c:	f008 fd88 	bl	800b140 <siprintf>
while(count<1600)
 8002630:	4b45      	ldr	r3, [pc, #276]	; (8002748 <HAL_ADC_ConvCpltCallback+0xae0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8002638:	f4ff ab20 	bcc.w	8001c7c <HAL_ADC_ConvCpltCallback+0x14>



	}

	sd_Flag=1;
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_ADC_ConvCpltCallback+0xae4>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

	end_tick = DWT->CYCCNT;
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <HAL_ADC_ConvCpltCallback+0xae8>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a43      	ldr	r2, [pc, #268]	; (8002754 <HAL_ADC_ConvCpltCallback+0xaec>)
 8002648:	6013      	str	r3, [r2, #0]
	sprintf(message, "Time: %ld ms\r\n",(end_tick-start_tick)/(SystemCoreClock/1000000));
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <HAL_ADC_ConvCpltCallback+0xaec>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b42      	ldr	r3, [pc, #264]	; (8002758 <HAL_ADC_ConvCpltCallback+0xaf0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	1ad2      	subs	r2, r2, r3
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_ADC_ConvCpltCallback+0xaf4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4941      	ldr	r1, [pc, #260]	; (8002760 <HAL_ADC_ConvCpltCallback+0xaf8>)
 800265a:	fba1 1303 	umull	r1, r3, r1, r3
 800265e:	0c9b      	lsrs	r3, r3, #18
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	461a      	mov	r2, r3
 8002666:	493f      	ldr	r1, [pc, #252]	; (8002764 <HAL_ADC_ConvCpltCallback+0xafc>)
 8002668:	483f      	ldr	r0, [pc, #252]	; (8002768 <HAL_ADC_ConvCpltCallback+0xb00>)
 800266a:	f008 fd69 	bl	800b140 <siprintf>
	printf(message);
 800266e:	483e      	ldr	r0, [pc, #248]	; (8002768 <HAL_ADC_ConvCpltCallback+0xb00>)
 8002670:	f008 fd54 	bl	800b11c <iprintf>



}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bdb0      	pop	{r4, r5, r7, pc}
 800267c:	f3af 8000 	nop.w
 8002680:	2000255c 	.word	0x2000255c
 8002684:	200024f4 	.word	0x200024f4
 8002688:	20002588 	.word	0x20002588
 800268c:	2000253c 	.word	0x2000253c
 8002690:	2000258c 	.word	0x2000258c
 8002694:	20002540 	.word	0x20002540
 8002698:	20002590 	.word	0x20002590
 800269c:	20002544 	.word	0x20002544
 80026a0:	20002594 	.word	0x20002594
 80026a4:	20002530 	.word	0x20002530
 80026a8:	20002598 	.word	0x20002598
 80026ac:	20002534 	.word	0x20002534
 80026b0:	2000259c 	.word	0x2000259c
 80026b4:	20002538 	.word	0x20002538
 80026b8:	200025a0 	.word	0x200025a0
 80026bc:	20002568 	.word	0x20002568
 80026c0:	200025a4 	.word	0x200025a4
 80026c4:	20002580 	.word	0x20002580
 80026c8:	200025a8 	.word	0x200025a8
 80026cc:	20002574 	.word	0x20002574
 80026d0:	200025ac 	.word	0x200025ac
 80026d4:	20002578 	.word	0x20002578
 80026d8:	200025b0 	.word	0x200025b0
 80026dc:	2000257c 	.word	0x2000257c
 80026e0:	200025b4 	.word	0x200025b4
 80026e4:	20002548 	.word	0x20002548
 80026e8:	200025b8 	.word	0x200025b8
 80026ec:	2000254c 	.word	0x2000254c
 80026f0:	200025bc 	.word	0x200025bc
 80026f4:	20002550 	.word	0x20002550
 80026f8:	200025c0 	.word	0x200025c0
 80026fc:	20002554 	.word	0x20002554
 8002700:	200025c4 	.word	0x200025c4
 8002704:	20002558 	.word	0x20002558
 8002708:	200025c8 	.word	0x200025c8
 800270c:	200025cc 	.word	0x200025cc
 8002710:	20002584 	.word	0x20002584
 8002714:	200025d0 	.word	0x200025d0
 8002718:	0800c2ec 	.word	0x0800c2ec
 800271c:	200025e8 	.word	0x200025e8
 8002720:	200025fc 	.word	0x200025fc
 8002724:	20002610 	.word	0x20002610
 8002728:	20002624 	.word	0x20002624
 800272c:	20002638 	.word	0x20002638
 8002730:	2000264c 	.word	0x2000264c
 8002734:	20002660 	.word	0x20002660
 8002738:	20002674 	.word	0x20002674
 800273c:	20002688 	.word	0x20002688
 8002740:	2000269c 	.word	0x2000269c
 8002744:	200026b0 	.word	0x200026b0
 8002748:	20002528 	.word	0x20002528
 800274c:	2000252c 	.word	0x2000252c
 8002750:	e0001000 	.word	0xe0001000
 8002754:	20002428 	.word	0x20002428
 8002758:	20002424 	.word	0x20002424
 800275c:	20000008 	.word	0x20000008
 8002760:	431bde83 	.word	0x431bde83
 8002764:	0800c2f0 	.word	0x0800c2f0
 8002768:	200023a4 	.word	0x200023a4
 800276c:	e8584caa 	.word	0xe8584caa
 8002770:	3ffbb67a 	.word	0x3ffbb67a

08002774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800277a:	f001 f8cf 	bl	800391c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800277e:	f000 f949 	bl	8002a14 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // For measuring execution time
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002782:	4b7f      	ldr	r3, [pc, #508]	; (8002980 <main+0x20c>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a7e      	ldr	r2, [pc, #504]	; (8002980 <main+0x20c>)
 8002788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278c:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 800278e:	4b7d      	ldr	r3, [pc, #500]	; (8002984 <main+0x210>)
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;
 8002794:	4b7b      	ldr	r3, [pc, #492]	; (8002984 <main+0x210>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800279a:	f000 fc3b 	bl	8003014 <MX_GPIO_Init>
  MX_DMA_Init();
 800279e:	f000 fc19 	bl	8002fd4 <MX_DMA_Init>
  MX_ADC1_Init();
 80027a2:	f000 f9a1 	bl	8002ae8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80027a6:	f000 faf5 	bl	8002d94 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80027aa:	f000 fbbf 	bl	8002f2c <MX_USART2_UART_Init>
  MX_DAC_Init();
 80027ae:	f000 fa87 	bl	8002cc0 <MX_DAC_Init>
  MX_SPI1_Init();
 80027b2:	f000 fab9 	bl	8002d28 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80027b6:	f000 fbe3 	bl	8002f80 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80027ba:	f005 fadb 	bl	8007d74 <MX_FATFS_Init>
  MX_UART4_Init();
 80027be:	f000 fb8b 	bl	8002ed8 <MX_UART4_Init>
  MX_TIM8_Init();
 80027c2:	f000 fb37 	bl	8002e34 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); // Örnekleme için timer kesmesi başlangıcı USER CODE 4'e git.
 80027c6:	4870      	ldr	r0, [pc, #448]	; (8002988 <main+0x214>)
 80027c8:	f003 fe58 	bl	800647c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim8);  // HMI Ekrana her 1s'de yazması için timer kesmesi başlangıcı
 80027cc:	486f      	ldr	r0, [pc, #444]	; (800298c <main+0x218>)
 80027ce:	f003 fe55 	bl	800647c <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80027d2:	2100      	movs	r1, #0
 80027d4:	486e      	ldr	r0, [pc, #440]	; (8002990 <main+0x21c>)
 80027d6:	f001 fe7f 	bl	80044d8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80027da:	2110      	movs	r1, #16
 80027dc:	486c      	ldr	r0, [pc, #432]	; (8002990 <main+0x21c>)
 80027de:	f001 fe7b 	bl	80044d8 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(sd_Flag==1)
 80027e2:	4b6c      	ldr	r3, [pc, #432]	; (8002994 <main+0x220>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d1fb      	bne.n	80027e2 <main+0x6e>
	  {
		  	//SD karta yazdırma kısmı, sd_Flag 1 olduğunda SD Karta yazdırıyor.
		    fres = f_mount(&fs, "", 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	496a      	ldr	r1, [pc, #424]	; (8002998 <main+0x224>)
 80027ee:	486b      	ldr	r0, [pc, #428]	; (800299c <main+0x228>)
 80027f0:	f007 fd0a 	bl	800a208 <f_mount>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b69      	ldr	r3, [pc, #420]	; (80029a0 <main+0x22c>)
 80027fa:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <main+0x22c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <main+0x98>
				transmit_uart("Micro SD card is mounted successfully!\n");
 8002804:	4867      	ldr	r0, [pc, #412]	; (80029a4 <main+0x230>)
 8002806:	f7ff f821 	bl	800184c <transmit_uart>
 800280a:	e006      	b.n	800281a <main+0xa6>
			} else if (fres != FR_OK) {
 800280c:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <main+0x22c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <main+0xa6>
				transmit_uart("Micro SD card's mount error!\n");
 8002814:	4864      	ldr	r0, [pc, #400]	; (80029a8 <main+0x234>)
 8002816:	f7ff f819 	bl	800184c <transmit_uart>
			}

			// FA_OPEN_APPEND opens file if it exists and if not then creates it,
			// the pointer is set at the end of the file for appending
			fres = f_open(&fil, "log-file.txt", FA_OPEN_APPEND | FA_WRITE | FA_READ);
 800281a:	2233      	movs	r2, #51	; 0x33
 800281c:	4963      	ldr	r1, [pc, #396]	; (80029ac <main+0x238>)
 800281e:	4864      	ldr	r0, [pc, #400]	; (80029b0 <main+0x23c>)
 8002820:	f007 fd38 	bl	800a294 <f_open>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <main+0x22c>)
 800282a:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 800282c:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <main+0x22c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <main+0xc8>
				transmit_uart("File opened for reading and checking the free space.\n");
 8002834:	485f      	ldr	r0, [pc, #380]	; (80029b4 <main+0x240>)
 8002836:	f7ff f809 	bl	800184c <transmit_uart>
 800283a:	e006      	b.n	800284a <main+0xd6>
			} else if (fres != FR_OK) {
 800283c:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <main+0x22c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <main+0xd6>
				transmit_uart("File was not opened for reading and checking the free space!\n");
 8002844:	485c      	ldr	r0, [pc, #368]	; (80029b8 <main+0x244>)
 8002846:	f7ff f801 	bl	800184c <transmit_uart>


			 //ADC değerlerinin char'a dönüştürülüp sd karta yazdırıldığı bölüm

//				 f_puts("(s) VL1 VL2 VL3 IL1 IL2 IL3 VBARA VOUT IOUT TBARA \n", &fil);
				 f_puts(adc1_Last0, &fil);   // ADC değerleri metin dosyasına yazdırıldı.
 800284a:	4959      	ldr	r1, [pc, #356]	; (80029b0 <main+0x23c>)
 800284c:	485b      	ldr	r0, [pc, #364]	; (80029bc <main+0x248>)
 800284e:	f008 f9a0 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 8002852:	4957      	ldr	r1, [pc, #348]	; (80029b0 <main+0x23c>)
 8002854:	485a      	ldr	r0, [pc, #360]	; (80029c0 <main+0x24c>)
 8002856:	f008 f99c 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last1, &fil);
 800285a:	4955      	ldr	r1, [pc, #340]	; (80029b0 <main+0x23c>)
 800285c:	4859      	ldr	r0, [pc, #356]	; (80029c4 <main+0x250>)
 800285e:	f008 f998 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 8002862:	4953      	ldr	r1, [pc, #332]	; (80029b0 <main+0x23c>)
 8002864:	4856      	ldr	r0, [pc, #344]	; (80029c0 <main+0x24c>)
 8002866:	f008 f994 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last2, &fil);
 800286a:	4951      	ldr	r1, [pc, #324]	; (80029b0 <main+0x23c>)
 800286c:	4856      	ldr	r0, [pc, #344]	; (80029c8 <main+0x254>)
 800286e:	f008 f990 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 8002872:	494f      	ldr	r1, [pc, #316]	; (80029b0 <main+0x23c>)
 8002874:	4852      	ldr	r0, [pc, #328]	; (80029c0 <main+0x24c>)
 8002876:	f008 f98c 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last3, &fil);
 800287a:	494d      	ldr	r1, [pc, #308]	; (80029b0 <main+0x23c>)
 800287c:	4853      	ldr	r0, [pc, #332]	; (80029cc <main+0x258>)
 800287e:	f008 f988 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 8002882:	494b      	ldr	r1, [pc, #300]	; (80029b0 <main+0x23c>)
 8002884:	484e      	ldr	r0, [pc, #312]	; (80029c0 <main+0x24c>)
 8002886:	f008 f984 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last4, &fil);
 800288a:	4949      	ldr	r1, [pc, #292]	; (80029b0 <main+0x23c>)
 800288c:	4850      	ldr	r0, [pc, #320]	; (80029d0 <main+0x25c>)
 800288e:	f008 f980 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 8002892:	4947      	ldr	r1, [pc, #284]	; (80029b0 <main+0x23c>)
 8002894:	484a      	ldr	r0, [pc, #296]	; (80029c0 <main+0x24c>)
 8002896:	f008 f97c 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last5, &fil);
 800289a:	4945      	ldr	r1, [pc, #276]	; (80029b0 <main+0x23c>)
 800289c:	484d      	ldr	r0, [pc, #308]	; (80029d4 <main+0x260>)
 800289e:	f008 f978 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 80028a2:	4943      	ldr	r1, [pc, #268]	; (80029b0 <main+0x23c>)
 80028a4:	4846      	ldr	r0, [pc, #280]	; (80029c0 <main+0x24c>)
 80028a6:	f008 f974 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last6, &fil);
 80028aa:	4941      	ldr	r1, [pc, #260]	; (80029b0 <main+0x23c>)
 80028ac:	484a      	ldr	r0, [pc, #296]	; (80029d8 <main+0x264>)
 80028ae:	f008 f970 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 80028b2:	493f      	ldr	r1, [pc, #252]	; (80029b0 <main+0x23c>)
 80028b4:	4842      	ldr	r0, [pc, #264]	; (80029c0 <main+0x24c>)
 80028b6:	f008 f96c 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last7, &fil);
 80028ba:	493d      	ldr	r1, [pc, #244]	; (80029b0 <main+0x23c>)
 80028bc:	4847      	ldr	r0, [pc, #284]	; (80029dc <main+0x268>)
 80028be:	f008 f968 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 80028c2:	493b      	ldr	r1, [pc, #236]	; (80029b0 <main+0x23c>)
 80028c4:	483e      	ldr	r0, [pc, #248]	; (80029c0 <main+0x24c>)
 80028c6:	f008 f964 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last8, &fil);
 80028ca:	4939      	ldr	r1, [pc, #228]	; (80029b0 <main+0x23c>)
 80028cc:	4844      	ldr	r0, [pc, #272]	; (80029e0 <main+0x26c>)
 80028ce:	f008 f960 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 80028d2:	4937      	ldr	r1, [pc, #220]	; (80029b0 <main+0x23c>)
 80028d4:	483a      	ldr	r0, [pc, #232]	; (80029c0 <main+0x24c>)
 80028d6:	f008 f95c 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last9, &fil);
 80028da:	4935      	ldr	r1, [pc, #212]	; (80029b0 <main+0x23c>)
 80028dc:	4841      	ldr	r0, [pc, #260]	; (80029e4 <main+0x270>)
 80028de:	f008 f958 	bl	800ab92 <f_puts>
				 f_puts(" ", &fil);
 80028e2:	4933      	ldr	r1, [pc, #204]	; (80029b0 <main+0x23c>)
 80028e4:	4836      	ldr	r0, [pc, #216]	; (80029c0 <main+0x24c>)
 80028e6:	f008 f954 	bl	800ab92 <f_puts>
				 f_puts(adc1_Last10, &fil);
 80028ea:	4931      	ldr	r1, [pc, #196]	; (80029b0 <main+0x23c>)
 80028ec:	483e      	ldr	r0, [pc, #248]	; (80029e8 <main+0x274>)
 80028ee:	f008 f950 	bl	800ab92 <f_puts>
				 f_puts("\n", &fil);
 80028f2:	492f      	ldr	r1, [pc, #188]	; (80029b0 <main+0x23c>)
 80028f4:	483d      	ldr	r0, [pc, #244]	; (80029ec <main+0x278>)
 80028f6:	f008 f94c 	bl	800ab92 <f_puts>




			fres = f_close(&fil);
 80028fa:	482d      	ldr	r0, [pc, #180]	; (80029b0 <main+0x23c>)
 80028fc:	f008 f8a8 	bl	800aa50 <f_close>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <main+0x22c>)
 8002906:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <main+0x22c>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <main+0x1a4>
				transmit_uart("The file is closed.\n");
 8002910:	4837      	ldr	r0, [pc, #220]	; (80029f0 <main+0x27c>)
 8002912:	f7fe ff9b 	bl	800184c <transmit_uart>
 8002916:	e006      	b.n	8002926 <main+0x1b2>
			} else if (fres != FR_OK) {
 8002918:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <main+0x22c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <main+0x1b2>
				transmit_uart("The file was not closed.\n");}
 8002920:	4834      	ldr	r0, [pc, #208]	; (80029f4 <main+0x280>)
 8002922:	f7fe ff93 	bl	800184c <transmit_uart>




			    sd_Flag=0;
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <main+0x220>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
			count=0;
 800292c:	4b32      	ldr	r3, [pc, #200]	; (80029f8 <main+0x284>)
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
			k=0;
 8002932:	4b32      	ldr	r3, [pc, #200]	; (80029fc <main+0x288>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

			// Alınan veriler sıfırlanıyor.
			for(uint8_t y=0;y<12;y++)
 8002938:	2300      	movs	r3, #0
 800293a:	71fb      	strb	r3, [r7, #7]
 800293c:	e01b      	b.n	8002976 <main+0x202>
			{
				adc_Buffer[y]=0;
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	4a2f      	ldr	r2, [pc, #188]	; (8002a00 <main+0x28c>)
 8002942:	2100      	movs	r1, #0
 8002944:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Value[y]=0;
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	4a2e      	ldr	r2, [pc, #184]	; (8002a04 <main+0x290>)
 800294c:	2100      	movs	r1, #0
 800294e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Mean[y]=0;
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	4a2c      	ldr	r2, [pc, #176]	; (8002a08 <main+0x294>)
 8002956:	2100      	movs	r1, #0
 8002958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Square[y]=0;
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	4a2b      	ldr	r2, [pc, #172]	; (8002a0c <main+0x298>)
 8002960:	2100      	movs	r1, #0
 8002962:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				adc1_Square_Root[y]=0;
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <main+0x29c>)
 800296a:	2100      	movs	r1, #0
 800296c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(uint8_t y=0;y<12;y++)
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	3301      	adds	r3, #1
 8002974:	71fb      	strb	r3, [r7, #7]
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	2b0b      	cmp	r3, #11
 800297a:	d9e0      	bls.n	800293e <main+0x1ca>
	  if(sd_Flag==1)
 800297c:	e731      	b.n	80027e2 <main+0x6e>
 800297e:	bf00      	nop
 8002980:	e000edf0 	.word	0xe000edf0
 8002984:	e0001000 	.word	0xe0001000
 8002988:	2000223c 	.word	0x2000223c
 800298c:	20002284 	.word	0x20002284
 8002990:	20002228 	.word	0x20002228
 8002994:	2000252c 	.word	0x2000252c
 8002998:	0800c300 	.word	0x0800c300
 800299c:	20000114 	.word	0x20000114
 80029a0:	2000217c 	.word	0x2000217c
 80029a4:	0800c304 	.word	0x0800c304
 80029a8:	0800c32c 	.word	0x0800c32c
 80029ac:	0800c34c 	.word	0x0800c34c
 80029b0:	2000114c 	.word	0x2000114c
 80029b4:	0800c35c 	.word	0x0800c35c
 80029b8:	0800c394 	.word	0x0800c394
 80029bc:	200025e8 	.word	0x200025e8
 80029c0:	0800c3d4 	.word	0x0800c3d4
 80029c4:	200025fc 	.word	0x200025fc
 80029c8:	20002610 	.word	0x20002610
 80029cc:	20002624 	.word	0x20002624
 80029d0:	20002638 	.word	0x20002638
 80029d4:	2000264c 	.word	0x2000264c
 80029d8:	20002660 	.word	0x20002660
 80029dc:	20002674 	.word	0x20002674
 80029e0:	20002688 	.word	0x20002688
 80029e4:	2000269c 	.word	0x2000269c
 80029e8:	200026b0 	.word	0x200026b0
 80029ec:	0800c3d8 	.word	0x0800c3d8
 80029f0:	0800c3dc 	.word	0x0800c3dc
 80029f4:	0800c3f4 	.word	0x0800c3f4
 80029f8:	20002528 	.word	0x20002528
 80029fc:	20002524 	.word	0x20002524
 8002a00:	20002434 	.word	0x20002434
 8002a04:	20002464 	.word	0x20002464
 8002a08:	200024f4 	.word	0x200024f4
 8002a0c:	20002494 	.word	0x20002494
 8002a10:	200024c4 	.word	0x200024c4

08002a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b094      	sub	sp, #80	; 0x50
 8002a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1a:	f107 0320 	add.w	r3, r7, #32
 8002a1e:	2230      	movs	r2, #48	; 0x30
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f008 fbef 	bl	800b206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <SystemClock_Config+0xcc>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <SystemClock_Config+0xcc>)
 8002a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a46:	6413      	str	r3, [r2, #64]	; 0x40
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <SystemClock_Config+0xcc>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a54:	2300      	movs	r3, #0
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <SystemClock_Config+0xd0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <SystemClock_Config+0xd0>)
 8002a5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <SystemClock_Config+0xd0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a70:	2301      	movs	r3, #1
 8002a72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002a84:	2304      	movs	r3, #4
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a88:	23a8      	movs	r3, #168	; 0xa8
 8002a8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a90:	2307      	movs	r3, #7
 8002a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a94:	f107 0320 	add.w	r3, r7, #32
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f002 fbaf 	bl	80051fc <HAL_RCC_OscConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002aa4:	f000 fb66 	bl	8003174 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002aa8:	230f      	movs	r3, #15
 8002aaa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aac:	2302      	movs	r3, #2
 8002aae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ab4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ab8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002abe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ac0:	f107 030c 	add.w	r3, r7, #12
 8002ac4:	2105      	movs	r1, #5
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 fe10 	bl	80056ec <HAL_RCC_ClockConfig>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ad2:	f000 fb4f 	bl	8003174 <Error_Handler>
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3750      	adds	r7, #80	; 0x50
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002aee:	463b      	mov	r3, r7
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002afa:	4b6e      	ldr	r3, [pc, #440]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002afc:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <MX_ADC1_Init+0x1d0>)
 8002afe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b00:	4b6c      	ldr	r3, [pc, #432]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b08:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b0e:	4b69      	ldr	r3, [pc, #420]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b14:	4b67      	ldr	r3, [pc, #412]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b1a:	4b66      	ldr	r3, [pc, #408]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b22:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b28:	4b62      	ldr	r3, [pc, #392]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b2a:	4a64      	ldr	r2, [pc, #400]	; (8002cbc <MX_ADC1_Init+0x1d4>)
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b2e:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8002b34:	4b5f      	ldr	r3, [pc, #380]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b36:	220c      	movs	r2, #12
 8002b38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b3a:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b42:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b48:	485a      	ldr	r0, [pc, #360]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b4a:	f000 ff7d 	bl	8003a48 <HAL_ADC_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002b54:	f000 fb0e 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002b60:	2307      	movs	r3, #7
 8002b62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b64:	463b      	mov	r3, r7
 8002b66:	4619      	mov	r1, r3
 8002b68:	4852      	ldr	r0, [pc, #328]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b6a:	f001 f8d5 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002b74:	f000 fafe 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b80:	463b      	mov	r3, r7
 8002b82:	4619      	mov	r1, r3
 8002b84:	484b      	ldr	r0, [pc, #300]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002b86:	f001 f8c7 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002b90:	f000 faf0 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b94:	2302      	movs	r3, #2
 8002b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4844      	ldr	r0, [pc, #272]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002ba2:	f001 f8b9 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002bac:	f000 fae2 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bb8:	463b      	mov	r3, r7
 8002bba:	4619      	mov	r1, r3
 8002bbc:	483d      	ldr	r0, [pc, #244]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002bbe:	f001 f8ab 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002bc8:	f000 fad4 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002bcc:	2306      	movs	r3, #6
 8002bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002bd0:	2305      	movs	r3, #5
 8002bd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4836      	ldr	r0, [pc, #216]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002bda:	f001 f89d 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002be4:	f000 fac6 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002be8:	2307      	movs	r3, #7
 8002bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002bec:	2306      	movs	r3, #6
 8002bee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bf0:	463b      	mov	r3, r7
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	482f      	ldr	r0, [pc, #188]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002bf6:	f001 f88f 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002c00:	f000 fab8 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002c04:	2308      	movs	r3, #8
 8002c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4828      	ldr	r0, [pc, #160]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002c12:	f001 f881 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002c1c:	f000 faaa 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002c20:	2309      	movs	r3, #9
 8002c22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002c24:	2308      	movs	r3, #8
 8002c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c28:	463b      	mov	r3, r7
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4821      	ldr	r0, [pc, #132]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002c2e:	f001 f873 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002c38:	f000 fa9c 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c3c:	230a      	movs	r3, #10
 8002c3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002c40:	2309      	movs	r3, #9
 8002c42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c44:	463b      	mov	r3, r7
 8002c46:	4619      	mov	r1, r3
 8002c48:	481a      	ldr	r0, [pc, #104]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002c4a:	f001 f865 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002c54:	f000 fa8e 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002c58:	230b      	movs	r3, #11
 8002c5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002c5c:	230a      	movs	r3, #10
 8002c5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c60:	463b      	mov	r3, r7
 8002c62:	4619      	mov	r1, r3
 8002c64:	4813      	ldr	r0, [pc, #76]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002c66:	f001 f857 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002c70:	f000 fa80 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002c74:	230d      	movs	r3, #13
 8002c76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002c78:	230b      	movs	r3, #11
 8002c7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002c82:	f001 f849 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002c8c:	f000 fa72 	bl	8003174 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002c90:	230f      	movs	r3, #15
 8002c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002c94:	230c      	movs	r3, #12
 8002c96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c98:	463b      	mov	r3, r7
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_ADC1_Init+0x1cc>)
 8002c9e:	f001 f83b 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002ca8:	f000 fa64 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20002180 	.word	0x20002180
 8002cb8:	40012000 	.word	0x40012000
 8002cbc:	0f000001 	.word	0x0f000001

08002cc0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <MX_DAC_Init+0x60>)
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <MX_DAC_Init+0x64>)
 8002cd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002cd4:	4812      	ldr	r0, [pc, #72]	; (8002d20 <MX_DAC_Init+0x60>)
 8002cd6:	f001 fbdd 	bl	8004494 <HAL_DAC_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002ce0:	f000 fa48 	bl	8003174 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002cec:	463b      	mov	r3, r7
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	480b      	ldr	r0, [pc, #44]	; (8002d20 <MX_DAC_Init+0x60>)
 8002cf4:	f001 fc71 	bl	80045da <HAL_DAC_ConfigChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002cfe:	f000 fa39 	bl	8003174 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002d02:	463b      	mov	r3, r7
 8002d04:	2210      	movs	r2, #16
 8002d06:	4619      	mov	r1, r3
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_DAC_Init+0x60>)
 8002d0a:	f001 fc66 	bl	80045da <HAL_DAC_ConfigChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002d14:	f000 fa2e 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20002228 	.word	0x20002228
 8002d24:	40007400 	.word	0x40007400

08002d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <MX_SPI1_Init+0x68>)
 8002d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d3a:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d40:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d46:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d74:	220a      	movs	r2, #10
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d78:	4804      	ldr	r0, [pc, #16]	; (8002d8c <MX_SPI1_Init+0x64>)
 8002d7a:	f002 fed7 	bl	8005b2c <HAL_SPI_Init>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002d84:	f000 f9f6 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200000bc 	.word	0x200000bc
 8002d90:	40013000 	.word	0x40013000

08002d94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da8:	463b      	mov	r3, r7
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002db0:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002db2:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <MX_TIM1_Init+0x9c>)
 8002db4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400-1;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002dc4:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002dc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ddc:	4813      	ldr	r0, [pc, #76]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002dde:	f003 fafd 	bl	80063dc <HAL_TIM_Base_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002de8:	f000 f9c4 	bl	8003174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	4619      	mov	r1, r3
 8002df8:	480c      	ldr	r0, [pc, #48]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002dfa:	f003 fc9f 	bl	800673c <HAL_TIM_ConfigClockSource>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002e04:	f000 f9b6 	bl	8003174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e10:	463b      	mov	r3, r7
 8002e12:	4619      	mov	r1, r3
 8002e14:	4805      	ldr	r0, [pc, #20]	; (8002e2c <MX_TIM1_Init+0x98>)
 8002e16:	f003 fec7 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002e20:	f000 f9a8 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	2000223c 	.word	0x2000223c
 8002e30:	40010000 	.word	0x40010000

08002e34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	609a      	str	r2, [r3, #8]
 8002e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e48:	463b      	mov	r3, r7
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e50:	4b1f      	ldr	r3, [pc, #124]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e52:	4a20      	ldr	r2, [pc, #128]	; (8002ed4 <MX_TIM8_Init+0xa0>)
 8002e54:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20000-1;
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e58:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002e5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8400-1;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e66:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002e6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6c:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e72:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e78:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e7e:	4814      	ldr	r0, [pc, #80]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e80:	f003 faac 	bl	80063dc <HAL_TIM_Base_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002e8a:	f000 f973 	bl	8003174 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e94:	f107 0308 	add.w	r3, r7, #8
 8002e98:	4619      	mov	r1, r3
 8002e9a:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002e9c:	f003 fc4e 	bl	800673c <HAL_TIM_ConfigClockSource>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002ea6:	f000 f965 	bl	8003174 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002eb2:	463b      	mov	r3, r7
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <MX_TIM8_Init+0x9c>)
 8002eb8:	f003 fe76 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8002ec2:	f000 f957 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20002284 	.word	0x20002284
 8002ed4:	40010400 	.word	0x40010400

08002ed8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <MX_UART4_Init+0x50>)
 8002ee0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002ee4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ee8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002efe:	220c      	movs	r2, #12
 8002f00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f02:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002f0e:	4805      	ldr	r0, [pc, #20]	; (8002f24 <MX_UART4_Init+0x4c>)
 8002f10:	f003 feda 	bl	8006cc8 <HAL_UART_Init>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002f1a:	f000 f92b 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200022cc 	.word	0x200022cc
 8002f28:	40004c00 	.word	0x40004c00

08002f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <MX_USART2_UART_Init+0x50>)
 8002f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f52:	220c      	movs	r2, #12
 8002f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_USART2_UART_Init+0x4c>)
 8002f64:	f003 feb0 	bl	8006cc8 <HAL_UART_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f6e:	f000 f901 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20002314 	.word	0x20002314
 8002f7c:	40004400 	.word	0x40004400

08002f80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <MX_USART3_UART_Init+0x50>)
 8002f88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_USART3_UART_Init+0x4c>)
 8002fb8:	f003 fe86 	bl	8006cc8 <HAL_UART_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002fc2:	f000 f8d7 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000235c 	.word	0x2000235c
 8002fd0:	40004800 	.word	0x40004800

08002fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <MX_DMA_Init+0x3c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <MX_DMA_Init+0x3c>)
 8002fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <MX_DMA_Init+0x3c>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	2038      	movs	r0, #56	; 0x38
 8002ffc:	f001 fa07 	bl	800440e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003000:	2038      	movs	r0, #56	; 0x38
 8003002:	f001 fa20 	bl	8004446 <HAL_NVIC_EnableIRQ>

}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40023800 	.word	0x40023800

08003014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	60da      	str	r2, [r3, #12]
 8003028:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	4b33      	ldr	r3, [pc, #204]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a32      	ldr	r2, [pc, #200]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b30      	ldr	r3, [pc, #192]	; (80030fc <MX_GPIO_Init+0xe8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <MX_GPIO_Init+0xe8>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b29      	ldr	r3, [pc, #164]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	4b25      	ldr	r3, [pc, #148]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	4a24      	ldr	r2, [pc, #144]	; (80030fc <MX_GPIO_Init+0xe8>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6313      	str	r3, [r2, #48]	; 0x30
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	6313      	str	r3, [r2, #48]	; 0x30
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <MX_GPIO_Init+0xe8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <MX_GPIO_Init+0xe8>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <MX_GPIO_Init+0xe8>)
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <MX_GPIO_Init+0xe8>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80030b6:	2201      	movs	r2, #1
 80030b8:	2140      	movs	r1, #64	; 0x40
 80030ba:	4811      	ldr	r0, [pc, #68]	; (8003100 <MX_GPIO_Init+0xec>)
 80030bc:	f002 f884 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : REF_Pin */
  GPIO_InitStruct.Pin = REF_Pin;
 80030c0:	2301      	movs	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c4:	2303      	movs	r3, #3
 80030c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(REF_GPIO_Port, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	480c      	ldr	r0, [pc, #48]	; (8003104 <MX_GPIO_Init+0xf0>)
 80030d4:	f001 fedc 	bl	8004e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030d8:	2340      	movs	r3, #64	; 0x40
 80030da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030dc:	2301      	movs	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80030e4:	2301      	movs	r3, #1
 80030e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	4804      	ldr	r0, [pc, #16]	; (8003100 <MX_GPIO_Init+0xec>)
 80030f0:	f001 fece 	bl	8004e90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030f4:	bf00      	nop
 80030f6:	3728      	adds	r7, #40	; 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	40020400 	.word	0x40020400
 8003104:	40020000 	.word	0x40020000

08003108 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  /* TIMER CAGRILDI  */
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == TIM1)  // 50US'DE BIR KESMEYE GIRIP DEGER TOPLAYACAK.
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a0f      	ldr	r2, [pc, #60]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d109      	bne.n	800312e <HAL_TIM_PeriodElapsedCallback+0x26>
	 {
		 HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_Buffer, sizeof(adc_Buffer)); /* ADC1 BASLADI VE DEGERLER ADC1'DEN CEKILDI */
 800311a:	2230      	movs	r2, #48	; 0x30
 800311c:	490e      	ldr	r1, [pc, #56]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800311e:	480f      	ldr	r0, [pc, #60]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003120:	f000 fcd6 	bl	8003ad0 <HAL_ADC_Start_DMA>
		 sec1++;
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800312c:	6013      	str	r3, [r2, #0]
	 }

	 if(htim->Instance == TIM8) // 1s'de bir tft ekrana verileri gönderecek.
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d109      	bne.n	800314c <HAL_TIM_PeriodElapsedCallback+0x44>
	 {


		 HAL_UART_Receive_IT(&huart2, RX_Data, 4);  //UART CallBack'e git ve basılan butona göre değer gönder ekrana.
 8003138:	2204      	movs	r2, #4
 800313a:	490b      	ldr	r1, [pc, #44]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800313c:	480b      	ldr	r0, [pc, #44]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800313e:	f003 fe9e 	bl	8006e7e <HAL_UART_Receive_IT>
		 sec8++;
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800314a:	6013      	str	r3, [r2, #0]

	 }


}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40010000 	.word	0x40010000
 8003158:	20002434 	.word	0x20002434
 800315c:	20002180 	.word	0x20002180
 8003160:	2000242c 	.word	0x2000242c
 8003164:	40010400 	.word	0x40010400
 8003168:	200025d4 	.word	0x200025d4
 800316c:	20002314 	.word	0x20002314
 8003170:	20002430 	.word	0x20002430

08003174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003178:	b672      	cpsid	i
}
 800317a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800317c:	e7fe      	b.n	800317c <Error_Handler+0x8>
	...

08003180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_MspInit+0x4c>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a0f      	ldr	r2, [pc, #60]	; (80031cc <HAL_MspInit+0x4c>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <HAL_MspInit+0x4c>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_MspInit+0x4c>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_MspInit+0x4c>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_MspInit+0x4c>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031be:	2007      	movs	r0, #7
 80031c0:	f001 f91a 	bl	80043f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800

080031d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	; 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 031c 	add.w	r3, r7, #28
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a49      	ldr	r2, [pc, #292]	; (8003314 <HAL_ADC_MspInit+0x144>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f040 808c 	bne.w	800330c <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_ADC_MspInit+0x148>)
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	4a46      	ldr	r2, [pc, #280]	; (8003318 <HAL_ADC_MspInit+0x148>)
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	6453      	str	r3, [r2, #68]	; 0x44
 8003204:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_ADC_MspInit+0x148>)
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_ADC_MspInit+0x148>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	4a3f      	ldr	r2, [pc, #252]	; (8003318 <HAL_ADC_MspInit+0x148>)
 800321a:	f043 0304 	orr.w	r3, r3, #4
 800321e:	6313      	str	r3, [r2, #48]	; 0x30
 8003220:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_ADC_MspInit+0x148>)
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322c:	2300      	movs	r3, #0
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_ADC_MspInit+0x148>)
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	4a38      	ldr	r2, [pc, #224]	; (8003318 <HAL_ADC_MspInit+0x148>)
 8003236:	f043 0301 	orr.w	r3, r3, #1
 800323a:	6313      	str	r3, [r2, #48]	; 0x30
 800323c:	4b36      	ldr	r3, [pc, #216]	; (8003318 <HAL_ADC_MspInit+0x148>)
 800323e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <HAL_ADC_MspInit+0x148>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	4a31      	ldr	r2, [pc, #196]	; (8003318 <HAL_ADC_MspInit+0x148>)
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	6313      	str	r3, [r2, #48]	; 0x30
 8003258:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_ADC_MspInit+0x148>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC1_OLC2_Pin|ADC1_OLC3_Pin|ADC1_OLC5_Pin|AKIM_FB_Pin;
 8003264:	232b      	movs	r3, #43	; 0x2b
 8003266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003268:	2303      	movs	r3, #3
 800326a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003270:	f107 031c 	add.w	r3, r7, #28
 8003274:	4619      	mov	r1, r3
 8003276:	4829      	ldr	r0, [pc, #164]	; (800331c <HAL_ADC_MspInit+0x14c>)
 8003278:	f001 fe0a 	bl	8004e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = REF_Pin|L1_OLC_Pin|L2_OLC_Pin|L3_OLC_Pin
 800327c:	23cf      	movs	r3, #207	; 0xcf
 800327e:	61fb      	str	r3, [r7, #28]
                          |I1_OLC_Pin|I2_OLC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003280:	2303      	movs	r3, #3
 8003282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003288:	f107 031c 	add.w	r3, r7, #28
 800328c:	4619      	mov	r1, r3
 800328e:	4824      	ldr	r0, [pc, #144]	; (8003320 <HAL_ADC_MspInit+0x150>)
 8003290:	f001 fdfe 	bl	8004e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I3_OLC_Pin|ADC1_OLC_Pin;
 8003294:	2303      	movs	r3, #3
 8003296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003298:	2303      	movs	r3, #3
 800329a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a0:	f107 031c 	add.w	r3, r7, #28
 80032a4:	4619      	mov	r1, r3
 80032a6:	481f      	ldr	r0, [pc, #124]	; (8003324 <HAL_ADC_MspInit+0x154>)
 80032a8:	f001 fdf2 	bl	8004e90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <HAL_ADC_MspInit+0x15c>)
 80032b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032be:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032da:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032dc:	4b12      	ldr	r3, [pc, #72]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80032f0:	480d      	ldr	r0, [pc, #52]	; (8003328 <HAL_ADC_MspInit+0x158>)
 80032f2:	f001 f9cb 	bl	800468c <HAL_DMA_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80032fc:	f7ff ff3a 	bl	8003174 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a09      	ldr	r2, [pc, #36]	; (8003328 <HAL_ADC_MspInit+0x158>)
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <HAL_ADC_MspInit+0x158>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800330c:	bf00      	nop
 800330e:	3730      	adds	r7, #48	; 0x30
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40012000 	.word	0x40012000
 8003318:	40023800 	.word	0x40023800
 800331c:	40020800 	.word	0x40020800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	200021c8 	.word	0x200021c8
 800332c:	40026410 	.word	0x40026410

08003330 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003338:	f107 0314 	add.w	r3, r7, #20
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_DAC_MspInit+0x7c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d127      	bne.n	80033a2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <HAL_DAC_MspInit+0x80>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <HAL_DAC_MspInit+0x80>)
 800335c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b13      	ldr	r3, [pc, #76]	; (80033b0 <HAL_DAC_MspInit+0x80>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_DAC_MspInit+0x80>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <HAL_DAC_MspInit+0x80>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <HAL_DAC_MspInit+0x80>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = DAC_VOLTAJ_OUT_Pin|DAC_AKIM_OUT_Pin;
 800338a:	2330      	movs	r3, #48	; 0x30
 800338c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800338e:	2303      	movs	r3, #3
 8003390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	f107 0314 	add.w	r3, r7, #20
 800339a:	4619      	mov	r1, r3
 800339c:	4805      	ldr	r0, [pc, #20]	; (80033b4 <HAL_DAC_MspInit+0x84>)
 800339e:	f001 fd77 	bl	8004e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80033a2:	bf00      	nop
 80033a4:	3728      	adds	r7, #40	; 0x28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40007400 	.word	0x40007400
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020000 	.word	0x40020000

080033b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a19      	ldr	r2, [pc, #100]	; (800343c <HAL_SPI_MspInit+0x84>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d12b      	bne.n	8003432 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <HAL_SPI_MspInit+0x88>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	4a17      	ldr	r2, [pc, #92]	; (8003440 <HAL_SPI_MspInit+0x88>)
 80033e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033e8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_SPI_MspInit+0x88>)
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_SPI_MspInit+0x88>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a10      	ldr	r2, [pc, #64]	; (8003440 <HAL_SPI_MspInit+0x88>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <HAL_SPI_MspInit+0x88>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003412:	2338      	movs	r3, #56	; 0x38
 8003414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003422:	2305      	movs	r3, #5
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4619      	mov	r1, r3
 800342c:	4805      	ldr	r0, [pc, #20]	; (8003444 <HAL_SPI_MspInit+0x8c>)
 800342e:	f001 fd2f 	bl	8004e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003432:	bf00      	nop
 8003434:	3728      	adds	r7, #40	; 0x28
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40013000 	.word	0x40013000
 8003440:	40023800 	.word	0x40023800
 8003444:	40020400 	.word	0x40020400

08003448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_TIM_Base_MspInit+0x80>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d116      	bne.n	8003488 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_TIM_Base_MspInit+0x84>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_TIM_Base_MspInit+0x84>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6453      	str	r3, [r2, #68]	; 0x44
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_TIM_Base_MspInit+0x84>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	2100      	movs	r1, #0
 800347a:	2019      	movs	r0, #25
 800347c:	f000 ffc7 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003480:	2019      	movs	r0, #25
 8003482:	f000 ffe0 	bl	8004446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003486:	e01a      	b.n	80034be <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM8)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a10      	ldr	r2, [pc, #64]	; (80034d0 <HAL_TIM_Base_MspInit+0x88>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d115      	bne.n	80034be <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <HAL_TIM_Base_MspInit+0x84>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	4a0c      	ldr	r2, [pc, #48]	; (80034cc <HAL_TIM_Base_MspInit+0x84>)
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	6453      	str	r3, [r2, #68]	; 0x44
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_TIM_Base_MspInit+0x84>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2100      	movs	r1, #0
 80034b2:	202c      	movs	r0, #44	; 0x2c
 80034b4:	f000 ffab 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80034b8:	202c      	movs	r0, #44	; 0x2c
 80034ba:	f000 ffc4 	bl	8004446 <HAL_NVIC_EnableIRQ>
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40010000 	.word	0x40010000
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40010400 	.word	0x40010400

080034d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08e      	sub	sp, #56	; 0x38
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a54      	ldr	r2, [pc, #336]	; (8003644 <HAL_UART_MspInit+0x170>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d12d      	bne.n	8003552 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
 80034fa:	4b53      	ldr	r3, [pc, #332]	; (8003648 <HAL_UART_MspInit+0x174>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a52      	ldr	r2, [pc, #328]	; (8003648 <HAL_UART_MspInit+0x174>)
 8003500:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_UART_MspInit+0x174>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	4b4c      	ldr	r3, [pc, #304]	; (8003648 <HAL_UART_MspInit+0x174>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a4b      	ldr	r2, [pc, #300]	; (8003648 <HAL_UART_MspInit+0x174>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b49      	ldr	r3, [pc, #292]	; (8003648 <HAL_UART_MspInit+0x174>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800352e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003540:	2308      	movs	r3, #8
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003548:	4619      	mov	r1, r3
 800354a:	4840      	ldr	r0, [pc, #256]	; (800364c <HAL_UART_MspInit+0x178>)
 800354c:	f001 fca0 	bl	8004e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003550:	e073      	b.n	800363a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a3e      	ldr	r2, [pc, #248]	; (8003650 <HAL_UART_MspInit+0x17c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d134      	bne.n	80035c6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	4b39      	ldr	r3, [pc, #228]	; (8003648 <HAL_UART_MspInit+0x174>)
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_UART_MspInit+0x174>)
 8003566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356a:	6413      	str	r3, [r2, #64]	; 0x40
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_UART_MspInit+0x174>)
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <HAL_UART_MspInit+0x174>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	4a31      	ldr	r2, [pc, #196]	; (8003648 <HAL_UART_MspInit+0x174>)
 8003582:	f043 0308 	orr.w	r3, r3, #8
 8003586:	6313      	str	r3, [r2, #48]	; 0x30
 8003588:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <HAL_UART_MspInit+0x174>)
 800358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = NEXTION_TX_Pin|NEXTION_RX_Pin;
 8003594:	2360      	movs	r3, #96	; 0x60
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a0:	2303      	movs	r3, #3
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035a4:	2307      	movs	r3, #7
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	4619      	mov	r1, r3
 80035ae:	4829      	ldr	r0, [pc, #164]	; (8003654 <HAL_UART_MspInit+0x180>)
 80035b0:	f001 fc6e 	bl	8004e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2100      	movs	r1, #0
 80035b8:	2026      	movs	r0, #38	; 0x26
 80035ba:	f000 ff28 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035be:	2026      	movs	r0, #38	; 0x26
 80035c0:	f000 ff41 	bl	8004446 <HAL_NVIC_EnableIRQ>
}
 80035c4:	e039      	b.n	800363a <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART3)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a23      	ldr	r2, [pc, #140]	; (8003658 <HAL_UART_MspInit+0x184>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d134      	bne.n	800363a <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART3_CLK_ENABLE();
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <HAL_UART_MspInit+0x174>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <HAL_UART_MspInit+0x174>)
 80035da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035de:	6413      	str	r3, [r2, #64]	; 0x40
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_UART_MspInit+0x174>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <HAL_UART_MspInit+0x174>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_UART_MspInit+0x174>)
 80035f6:	f043 0302 	orr.w	r3, r3, #2
 80035fa:	6313      	str	r3, [r2, #48]	; 0x30
 80035fc:	4b12      	ldr	r3, [pc, #72]	; (8003648 <HAL_UART_MspInit+0x174>)
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SD_CARD_TX_Pin|SD_CARD_RX_Pin;
 8003608:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003616:	2303      	movs	r3, #3
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800361a:	2307      	movs	r3, #7
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800361e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003622:	4619      	mov	r1, r3
 8003624:	480d      	ldr	r0, [pc, #52]	; (800365c <HAL_UART_MspInit+0x188>)
 8003626:	f001 fc33 	bl	8004e90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	2027      	movs	r0, #39	; 0x27
 8003630:	f000 feed 	bl	800440e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003634:	2027      	movs	r0, #39	; 0x27
 8003636:	f000 ff06 	bl	8004446 <HAL_NVIC_EnableIRQ>
}
 800363a:	bf00      	nop
 800363c:	3738      	adds	r7, #56	; 0x38
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40004c00 	.word	0x40004c00
 8003648:	40023800 	.word	0x40023800
 800364c:	40020800 	.word	0x40020800
 8003650:	40004400 	.word	0x40004400
 8003654:	40020c00 	.word	0x40020c00
 8003658:	40004800 	.word	0x40004800
 800365c:	40020400 	.word	0x40020400

08003660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003664:	e7fe      	b.n	8003664 <NMI_Handler+0x4>

08003666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800366a:	e7fe      	b.n	800366a <HardFault_Handler+0x4>

0800366c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003670:	e7fe      	b.n	8003670 <MemManage_Handler+0x4>

08003672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003672:	b480      	push	{r7}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003676:	e7fe      	b.n	8003676 <BusFault_Handler+0x4>

08003678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800367c:	e7fe      	b.n	800367c <UsageFault_Handler+0x4>

0800367e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <SysTick_Handler+0x44>)
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <SysTick_Handler+0x18>
	   Timer1--;
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <SysTick_Handler+0x44>)
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <SysTick_Handler+0x44>)
 80036be:	801a      	strh	r2, [r3, #0]

	if(Timer2 > 0)
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <SysTick_Handler+0x48>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <SysTick_Handler+0x2c>
	   Timer2--;
 80036c8:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <SysTick_Handler+0x48>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <SysTick_Handler+0x48>)
 80036d2:	801a      	strh	r2, [r3, #0]

	millis++;
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <SysTick_Handler+0x4c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	4a06      	ldr	r2, [pc, #24]	; (80036f4 <SysTick_Handler+0x4c>)
 80036dc:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036de:	f000 f96f 	bl	80039c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80036e2:	f000 feca 	bl	800447a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200000b4 	.word	0x200000b4
 80036f0:	200000b6 	.word	0x200000b6
 80036f4:	200026c4 	.word	0x200026c4

080036f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036fc:	4802      	ldr	r0, [pc, #8]	; (8003708 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80036fe:	f002 ff2d 	bl	800655c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	2000223c 	.word	0x2000223c

0800370c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003710:	4802      	ldr	r0, [pc, #8]	; (800371c <USART2_IRQHandler+0x10>)
 8003712:	f003 fbd9 	bl	8006ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20002314 	.word	0x20002314

08003720 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003724:	4802      	ldr	r0, [pc, #8]	; (8003730 <USART3_IRQHandler+0x10>)
 8003726:	f003 fbcf 	bl	8006ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	2000235c 	.word	0x2000235c

08003734 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003738:	4802      	ldr	r0, [pc, #8]	; (8003744 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800373a:	f002 ff0f 	bl	800655c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20002284 	.word	0x20002284

08003748 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <DMA2_Stream0_IRQHandler+0x10>)
 800374e:	f001 f935 	bl	80049bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200021c8 	.word	0x200021c8

0800375c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e00a      	b.n	8003784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800376e:	f3af 8000 	nop.w
 8003772:	4601      	mov	r1, r0
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	60ba      	str	r2, [r7, #8]
 800377a:	b2ca      	uxtb	r2, r1
 800377c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3301      	adds	r3, #1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	dbf0      	blt.n	800376e <_read+0x12>
  }

  return len;
 800378c:	687b      	ldr	r3, [r7, #4]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e009      	b.n	80037bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	60ba      	str	r2, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe f839 	bl	8001828 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	dbf1      	blt.n	80037a8 <_write+0x12>
  }
  return len;
 80037c4:	687b      	ldr	r3, [r7, #4]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <_close>:

int _close(int file)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037f6:	605a      	str	r2, [r3, #4]
  return 0;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <_isatty>:

int _isatty(int file)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800380e:	2301      	movs	r3, #1
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <_sbrk+0x5c>)
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <_sbrk+0x60>)
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <_sbrk+0x64>)
 8003856:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <_sbrk+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d207      	bcs.n	8003878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003868:	f007 fd2c 	bl	800b2c4 <__errno>
 800386c:	4603      	mov	r3, r0
 800386e:	220c      	movs	r2, #12
 8003870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	e009      	b.n	800388c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <_sbrk+0x64>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <_sbrk+0x64>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	4a05      	ldr	r2, [pc, #20]	; (800389c <_sbrk+0x64>)
 8003888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800388a:	68fb      	ldr	r3, [r7, #12]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20020000 	.word	0x20020000
 8003898:	00000400 	.word	0x00000400
 800389c:	200026c8 	.word	0x200026c8
 80038a0:	20002a58 	.word	0x20002a58

080038a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <SystemInit+0x20>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <SystemInit+0x20>)
 80038b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003900 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80038cc:	f7ff ffea 	bl	80038a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038d2:	490d      	ldr	r1, [pc, #52]	; (8003908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d8:	e002      	b.n	80038e0 <LoopCopyDataInit>

080038da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038de:	3304      	adds	r3, #4

080038e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038e4:	d3f9      	bcc.n	80038da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038e6:	4a0a      	ldr	r2, [pc, #40]	; (8003910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038e8:	4c0a      	ldr	r4, [pc, #40]	; (8003914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038ec:	e001      	b.n	80038f2 <LoopFillZerobss>

080038ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f0:	3204      	adds	r2, #4

080038f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038f4:	d3fb      	bcc.n	80038ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038f6:	f007 fceb 	bl	800b2d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038fa:	f7fe ff3b 	bl	8002774 <main>
  bx  lr    
 80038fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003908:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800390c:	0800c8fc 	.word	0x0800c8fc
  ldr r2, =_sbss
 8003910:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003914:	20002a58 	.word	0x20002a58

08003918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003918:	e7fe      	b.n	8003918 <ADC_IRQHandler>
	...

0800391c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003920:	4b0e      	ldr	r3, [pc, #56]	; (800395c <HAL_Init+0x40>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a0d      	ldr	r2, [pc, #52]	; (800395c <HAL_Init+0x40>)
 8003926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800392a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_Init+0x40>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_Init+0x40>)
 8003932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <HAL_Init+0x40>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a07      	ldr	r2, [pc, #28]	; (800395c <HAL_Init+0x40>)
 800393e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003944:	2003      	movs	r0, #3
 8003946:	f000 fd57 	bl	80043f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800394a:	2000      	movs	r0, #0
 800394c:	f000 f808 	bl	8003960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003950:	f7ff fc16 	bl	8003180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023c00 	.word	0x40023c00

08003960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003968:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_InitTick+0x54>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_InitTick+0x58>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4619      	mov	r1, r3
 8003972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003976:	fbb3 f3f1 	udiv	r3, r3, r1
 800397a:	fbb2 f3f3 	udiv	r3, r2, r3
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fd6f 	bl	8004462 <HAL_SYSTICK_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e00e      	b.n	80039ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b0f      	cmp	r3, #15
 8003992:	d80a      	bhi.n	80039aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003994:	2200      	movs	r2, #0
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	f04f 30ff 	mov.w	r0, #4294967295
 800399c:	f000 fd37 	bl	800440e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a0:	4a06      	ldr	r2, [pc, #24]	; (80039bc <HAL_InitTick+0x5c>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000008 	.word	0x20000008
 80039b8:	20000010 	.word	0x20000010
 80039bc:	2000000c 	.word	0x2000000c

080039c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_IncTick+0x20>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_IncTick+0x24>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4413      	add	r3, r2
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_IncTick+0x24>)
 80039d2:	6013      	str	r3, [r2, #0]
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	20000010 	.word	0x20000010
 80039e4:	200026cc 	.word	0x200026cc

080039e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  return uwTick;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <HAL_GetTick+0x14>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	200026cc 	.word	0x200026cc

08003a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7ff ffee 	bl	80039e8 <HAL_GetTick>
 8003a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d005      	beq.n	8003a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_Delay+0x44>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a26:	bf00      	nop
 8003a28:	f7ff ffde 	bl	80039e8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d8f7      	bhi.n	8003a28 <HAL_Delay+0x28>
  {
  }
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000010 	.word	0x20000010

08003a48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e033      	b.n	8003ac6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff fbb2 	bl	80031d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d118      	bne.n	8003ab8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a8e:	f023 0302 	bic.w	r3, r3, #2
 8003a92:	f043 0202 	orr.w	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa5e 	bl	8003f5c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab6:	e001      	b.n	8003abc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_Start_DMA+0x1e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0e9      	b.n	8003cc2 <HAL_ADC_Start_DMA+0x1f2>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d018      	beq.n	8003b36 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b14:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <HAL_ADC_Start_DMA+0x1fc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a6d      	ldr	r2, [pc, #436]	; (8003cd0 <HAL_ADC_Start_DMA+0x200>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0c9a      	lsrs	r2, r3, #18
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b28:	e002      	b.n	8003b30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f9      	bne.n	8003b2a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b44:	d107      	bne.n	8003b56 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b54:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	f040 80a1 	bne.w	8003ca8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d007      	beq.n	8003b98 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f023 0206 	bic.w	r2, r3, #6
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
 8003bb2:	e002      	b.n	8003bba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bc2:	4b44      	ldr	r3, [pc, #272]	; (8003cd4 <HAL_ADC_Start_DMA+0x204>)
 8003bc4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	4a43      	ldr	r2, [pc, #268]	; (8003cd8 <HAL_ADC_Start_DMA+0x208>)
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	4a42      	ldr	r2, [pc, #264]	; (8003cdc <HAL_ADC_Start_DMA+0x20c>)
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	4a41      	ldr	r2, [pc, #260]	; (8003ce0 <HAL_ADC_Start_DMA+0x210>)
 8003bdc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003be6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003bf6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c06:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	334c      	adds	r3, #76	; 0x4c
 8003c12:	4619      	mov	r1, r3
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f000 fde6 	bl	80047e8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d12a      	bne.n	8003c7e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2d      	ldr	r2, [pc, #180]	; (8003ce4 <HAL_ADC_Start_DMA+0x214>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d015      	beq.n	8003c5e <HAL_ADC_Start_DMA+0x18e>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2c      	ldr	r2, [pc, #176]	; (8003ce8 <HAL_ADC_Start_DMA+0x218>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d105      	bne.n	8003c48 <HAL_ADC_Start_DMA+0x178>
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_ADC_Start_DMA+0x204>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a27      	ldr	r2, [pc, #156]	; (8003cec <HAL_ADC_Start_DMA+0x21c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d136      	bne.n	8003cc0 <HAL_ADC_Start_DMA+0x1f0>
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_ADC_Start_DMA+0x204>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d130      	bne.n	8003cc0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d129      	bne.n	8003cc0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	e020      	b.n	8003cc0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <HAL_ADC_Start_DMA+0x214>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d11b      	bne.n	8003cc0 <HAL_ADC_Start_DMA+0x1f0>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d114      	bne.n	8003cc0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f043 0210 	orr.w	r2, r3, #16
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f043 0201 	orr.w	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000008 	.word	0x20000008
 8003cd0:	431bde83 	.word	0x431bde83
 8003cd4:	40012300 	.word	0x40012300
 8003cd8:	08004155 	.word	0x08004155
 8003cdc:	0800420f 	.word	0x0800420f
 8003ce0:	0800422b 	.word	0x0800422b
 8003ce4:	40012000 	.word	0x40012000
 8003ce8:	40012100 	.word	0x40012100
 8003cec:	40012200 	.word	0x40012200

08003cf0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x1c>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e105      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x228>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	d925      	bls.n	8003d90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68d9      	ldr	r1, [r3, #12]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	3b1e      	subs	r3, #30
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43da      	mvns	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	400a      	ands	r2, r1
 8003d68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68d9      	ldr	r1, [r3, #12]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4403      	add	r3, r0
 8003d82:	3b1e      	subs	r3, #30
 8003d84:	409a      	lsls	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	e022      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6919      	ldr	r1, [r3, #16]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	2207      	movs	r2, #7
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43da      	mvns	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	400a      	ands	r2, r1
 8003db2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6919      	ldr	r1, [r3, #16]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4403      	add	r3, r0
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d824      	bhi.n	8003e28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	3b05      	subs	r3, #5
 8003df0:	221f      	movs	r2, #31
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43da      	mvns	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	3b05      	subs	r3, #5
 8003e1a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	635a      	str	r2, [r3, #52]	; 0x34
 8003e26:	e04c      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d824      	bhi.n	8003e7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	3b23      	subs	r3, #35	; 0x23
 8003e42:	221f      	movs	r2, #31
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	43da      	mvns	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	400a      	ands	r2, r1
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	3b23      	subs	r3, #35	; 0x23
 8003e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
 8003e78:	e023      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	3b41      	subs	r3, #65	; 0x41
 8003e8c:	221f      	movs	r2, #31
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43da      	mvns	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	400a      	ands	r2, r1
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3b41      	subs	r3, #65	; 0x41
 8003eb6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <HAL_ADC_ConfigChannel+0x234>)
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a21      	ldr	r2, [pc, #132]	; (8003f50 <HAL_ADC_ConfigChannel+0x238>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d109      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x1cc>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b12      	cmp	r3, #18
 8003ed6:	d105      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_ADC_ConfigChannel+0x238>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d123      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x21e>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d003      	beq.n	8003efe <HAL_ADC_ConfigChannel+0x1e6>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b11      	cmp	r3, #17
 8003efc:	d11b      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d111      	bne.n	8003f36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f12:	4b10      	ldr	r3, [pc, #64]	; (8003f54 <HAL_ADC_ConfigChannel+0x23c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <HAL_ADC_ConfigChannel+0x240>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	0c9a      	lsrs	r2, r3, #18
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f28:	e002      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f9      	bne.n	8003f2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40012300 	.word	0x40012300
 8003f50:	40012000 	.word	0x40012000
 8003f54:	20000008 	.word	0x20000008
 8003f58:	431bde83 	.word	0x431bde83

08003f5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f64:	4b79      	ldr	r3, [pc, #484]	; (800414c <ADC_Init+0x1f0>)
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	021a      	lsls	r2, r3, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6859      	ldr	r1, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6899      	ldr	r1, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	4a58      	ldr	r2, [pc, #352]	; (8004150 <ADC_Init+0x1f4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6899      	ldr	r1, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	e00f      	b.n	800405a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004058:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0202 	bic.w	r2, r2, #2
 8004068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6899      	ldr	r1, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7e1b      	ldrb	r3, [r3, #24]
 8004074:	005a      	lsls	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004096:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6859      	ldr	r1, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	3b01      	subs	r3, #1
 80040b4:	035a      	lsls	r2, r3, #13
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	e007      	b.n	80040d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	051a      	lsls	r2, r3, #20
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6899      	ldr	r1, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004112:	025a      	lsls	r2, r3, #9
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800412a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	029a      	lsls	r2, r3, #10
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40012300 	.word	0x40012300
 8004150:	0f000001 	.word	0x0f000001

08004154 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800416a:	2b00      	cmp	r3, #0
 800416c:	d13c      	bne.n	80041e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d12b      	bne.n	80041e0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800418c:	2b00      	cmp	r3, #0
 800418e:	d127      	bne.n	80041e0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d119      	bne.n	80041e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0220 	bic.w	r2, r2, #32
 80041ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f043 0201 	orr.w	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7fd fd41 	bl	8001c68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041e6:	e00e      	b.n	8004206 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff fd85 	bl	8003d04 <HAL_ADC_ErrorCallback>
}
 80041fa:	e004      	b.n	8004206 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fd67 	bl	8003cf0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff fd5a 	bl	8003d04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004274:	4013      	ands	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800428a:	4a04      	ldr	r2, [pc, #16]	; (800429c <__NVIC_SetPriorityGrouping+0x44>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	60d3      	str	r3, [r2, #12]
}
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042a4:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <__NVIC_GetPriorityGrouping+0x18>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	f003 0307 	and.w	r3, r3, #7
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	db0b      	blt.n	80042e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4907      	ldr	r1, [pc, #28]	; (80042f4 <__NVIC_EnableIRQ+0x38>)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2001      	movs	r0, #1
 80042de:	fa00 f202 	lsl.w	r2, r0, r2
 80042e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	e000e100 	.word	0xe000e100

080042f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	6039      	str	r1, [r7, #0]
 8004302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004308:	2b00      	cmp	r3, #0
 800430a:	db0a      	blt.n	8004322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b2da      	uxtb	r2, r3
 8004310:	490c      	ldr	r1, [pc, #48]	; (8004344 <__NVIC_SetPriority+0x4c>)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	0112      	lsls	r2, r2, #4
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	440b      	add	r3, r1
 800431c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004320:	e00a      	b.n	8004338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4908      	ldr	r1, [pc, #32]	; (8004348 <__NVIC_SetPriority+0x50>)
 8004328:	79fb      	ldrb	r3, [r7, #7]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	3b04      	subs	r3, #4
 8004330:	0112      	lsls	r2, r2, #4
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	440b      	add	r3, r1
 8004336:	761a      	strb	r2, [r3, #24]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000e100 	.word	0xe000e100
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f1c3 0307 	rsb	r3, r3, #7
 8004366:	2b04      	cmp	r3, #4
 8004368:	bf28      	it	cs
 800436a:	2304      	movcs	r3, #4
 800436c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3304      	adds	r3, #4
 8004372:	2b06      	cmp	r3, #6
 8004374:	d902      	bls.n	800437c <NVIC_EncodePriority+0x30>
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3b03      	subs	r3, #3
 800437a:	e000      	b.n	800437e <NVIC_EncodePriority+0x32>
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004380:	f04f 32ff 	mov.w	r2, #4294967295
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	401a      	ands	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004394:	f04f 31ff 	mov.w	r1, #4294967295
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fa01 f303 	lsl.w	r3, r1, r3
 800439e:	43d9      	mvns	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a4:	4313      	orrs	r3, r2
         );
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3724      	adds	r7, #36	; 0x24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3b01      	subs	r3, #1
 80043c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c4:	d301      	bcc.n	80043ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043c6:	2301      	movs	r3, #1
 80043c8:	e00f      	b.n	80043ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ca:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <SysTick_Config+0x40>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d2:	210f      	movs	r1, #15
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	f7ff ff8e 	bl	80042f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <SysTick_Config+0x40>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e2:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <SysTick_Config+0x40>)
 80043e4:	2207      	movs	r2, #7
 80043e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	e000e010 	.word	0xe000e010

080043f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff29 	bl	8004258 <__NVIC_SetPriorityGrouping>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]
 800441a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004420:	f7ff ff3e 	bl	80042a0 <__NVIC_GetPriorityGrouping>
 8004424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff8e 	bl	800434c <NVIC_EncodePriority>
 8004430:	4602      	mov	r2, r0
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff5d 	bl	80042f8 <__NVIC_SetPriority>
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	4603      	mov	r3, r0
 800444e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff31 	bl	80042bc <__NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff ffa2 	bl	80043b4 <SysTick_Config>
 8004470:	4603      	mov	r3, r0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800447e:	f000 f802 	bl	8004486 <HAL_SYSTICK_Callback>
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004486:	b480      	push	{r7}
 8004488:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e014      	b.n	80044d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	791b      	ldrb	r3, [r3, #4]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fe ff3a 	bl	8003330 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e046      	b.n	800457a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	795b      	ldrb	r3, [r3, #5]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_DAC_Start+0x20>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e040      	b.n	800457a <HAL_DAC_Start+0xa2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6819      	ldr	r1, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800452c:	2b3c      	cmp	r3, #60	; 0x3c
 800452e:	d11d      	bne.n	800456c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	e014      	b.n	800456c <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	213c      	movs	r1, #60	; 0x3c
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	429a      	cmp	r2, r3
 800455a:	d107      	bne.n	800456c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0202 	orr.w	r2, r2, #2
 800456a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004586:	b480      	push	{r7}
 8004588:	b087      	sub	sp, #28
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
 8004592:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e015      	b.n	80045ce <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	3308      	adds	r3, #8
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	e004      	b.n	80045c4 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4413      	add	r3, r2
 80045c0:	3314      	adds	r3, #20
 80045c2:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	461a      	mov	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80045da:	b480      	push	{r7}
 80045dc:	b089      	sub	sp, #36	; 0x24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_DAC_ConfigChannel+0x1c>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e042      	b.n	8004680 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	795b      	ldrb	r3, [r3, #5]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_DAC_ConfigChannel+0x2c>
 8004602:	2302      	movs	r3, #2
 8004604:	e03c      	b.n	8004680 <HAL_DAC_ConfigChannel+0xa6>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2202      	movs	r2, #2
 8004610:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	22c0      	movs	r2, #192	; 0xc0
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43da      	mvns	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	400a      	ands	r2, r1
 8004670:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800467e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3724      	adds	r7, #36	; 0x24
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004698:	f7ff f9a6 	bl	80039e8 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e099      	b.n	80047dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046c8:	e00f      	b.n	80046ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046ca:	f7ff f98d 	bl	80039e8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d908      	bls.n	80046ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2203      	movs	r2, #3
 80046e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e078      	b.n	80047dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e8      	bne.n	80046ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4b38      	ldr	r3, [pc, #224]	; (80047e4 <HAL_DMA_Init+0x158>)
 8004704:	4013      	ands	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	2b04      	cmp	r3, #4
 8004742:	d107      	bne.n	8004754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	4313      	orrs	r3, r2
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b04      	cmp	r3, #4
 800477c:	d117      	bne.n	80047ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00e      	beq.n	80047ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fb01 	bl	8004d98 <DMA_CheckFifoParam>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2240      	movs	r2, #64	; 0x40
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80047aa:	2301      	movs	r3, #1
 80047ac:	e016      	b.n	80047dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fab8 	bl	8004d2c <DMA_CalcBaseAndBitshift>
 80047bc:	4603      	mov	r3, r0
 80047be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c4:	223f      	movs	r2, #63	; 0x3f
 80047c6:	409a      	lsls	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	f010803f 	.word	0xf010803f

080047e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_DMA_Start_IT+0x26>
 800480a:	2302      	movs	r3, #2
 800480c:	e040      	b.n	8004890 <HAL_DMA_Start_IT+0xa8>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d12f      	bne.n	8004882 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fa4a 	bl	8004cd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	223f      	movs	r2, #63	; 0x3f
 8004842:	409a      	lsls	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0216 	orr.w	r2, r2, #22
 8004856:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0208 	orr.w	r2, r2, #8
 800486e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	e005      	b.n	800488e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800488a:	2302      	movs	r3, #2
 800488c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80048a6:	f7ff f89f 	bl	80039e8 <HAL_GetTick>
 80048aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d008      	beq.n	80048ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2280      	movs	r2, #128	; 0x80
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e052      	b.n	8004970 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0216 	bic.w	r2, r2, #22
 80048d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <HAL_DMA_Abort+0x62>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0201 	bic.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800491a:	e013      	b.n	8004944 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800491c:	f7ff f864 	bl	80039e8 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b05      	cmp	r3, #5
 8004928:	d90c      	bls.n	8004944 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2203      	movs	r2, #3
 8004934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e015      	b.n	8004970 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e4      	bne.n	800491c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004956:	223f      	movs	r2, #63	; 0x3f
 8004958:	409a      	lsls	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d004      	beq.n	8004996 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2280      	movs	r2, #128	; 0x80
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e00c      	b.n	80049b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2205      	movs	r2, #5
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0201 	bic.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049c8:	4b8e      	ldr	r3, [pc, #568]	; (8004c04 <HAL_DMA_IRQHandler+0x248>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a8e      	ldr	r2, [pc, #568]	; (8004c08 <HAL_DMA_IRQHandler+0x24c>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	0a9b      	lsrs	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	2208      	movs	r2, #8
 80049e8:	409a      	lsls	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01a      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d013      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0204 	bic.w	r2, r2, #4
 8004a0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a14:	2208      	movs	r2, #8
 8004a16:	409a      	lsls	r2, r3
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	f043 0201 	orr.w	r2, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d012      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00b      	beq.n	8004a5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f043 0202 	orr.w	r2, r3, #2
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	2204      	movs	r2, #4
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d012      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00b      	beq.n	8004a94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a80:	2204      	movs	r2, #4
 8004a82:	409a      	lsls	r2, r3
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a98:	2210      	movs	r2, #16
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d043      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d03c      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d018      	beq.n	8004afe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d108      	bne.n	8004aec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d024      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
 8004aea:	e01f      	b.n	8004b2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e016      	b.n	8004b2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d107      	bne.n	8004b1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 0208 	bic.w	r2, r2, #8
 8004b1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b30:	2220      	movs	r2, #32
 8004b32:	409a      	lsls	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 808f 	beq.w	8004c5c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8087 	beq.w	8004c5c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b52:	2220      	movs	r2, #32
 8004b54:	409a      	lsls	r2, r3
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	d136      	bne.n	8004bd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0216 	bic.w	r2, r2, #22
 8004b74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <HAL_DMA_IRQHandler+0x1da>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d007      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0208 	bic.w	r2, r2, #8
 8004ba4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	223f      	movs	r2, #63	; 0x3f
 8004bac:	409a      	lsls	r2, r3
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d07e      	beq.n	8004cc8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
        }
        return;
 8004bd2:	e079      	b.n	8004cc8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01d      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10d      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d031      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	4798      	blx	r3
 8004c00:	e02c      	b.n	8004c5c <HAL_DMA_IRQHandler+0x2a0>
 8004c02:	bf00      	nop
 8004c04:	20000008 	.word	0x20000008
 8004c08:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d023      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	4798      	blx	r3
 8004c1c:	e01e      	b.n	8004c5c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10f      	bne.n	8004c4c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0210 	bic.w	r2, r2, #16
 8004c3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d032      	beq.n	8004cca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d022      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2205      	movs	r2, #5
 8004c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d307      	bcc.n	8004ca4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f2      	bne.n	8004c88 <HAL_DMA_IRQHandler+0x2cc>
 8004ca2:	e000      	b.n	8004ca6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ca4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
 8004cc6:	e000      	b.n	8004cca <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cc8:	bf00      	nop
    }
  }
}
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d108      	bne.n	8004d10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d0e:	e007      	b.n	8004d20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	60da      	str	r2, [r3, #12]
}
 8004d20:	bf00      	nop
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	3b10      	subs	r3, #16
 8004d3c:	4a14      	ldr	r2, [pc, #80]	; (8004d90 <DMA_CalcBaseAndBitshift+0x64>)
 8004d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d46:	4a13      	ldr	r2, [pc, #76]	; (8004d94 <DMA_CalcBaseAndBitshift+0x68>)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d909      	bls.n	8004d6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d62:	f023 0303 	bic.w	r3, r3, #3
 8004d66:	1d1a      	adds	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d6c:	e007      	b.n	8004d7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	aaaaaaab 	.word	0xaaaaaaab
 8004d94:	0800c470 	.word	0x0800c470

08004d98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d11f      	bne.n	8004df2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d856      	bhi.n	8004e66 <DMA_CheckFifoParam+0xce>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <DMA_CheckFifoParam+0x28>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004de3 	.word	0x08004de3
 8004dc8:	08004dd1 	.word	0x08004dd1
 8004dcc:	08004e67 	.word	0x08004e67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d046      	beq.n	8004e6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de0:	e043      	b.n	8004e6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dea:	d140      	bne.n	8004e6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df0:	e03d      	b.n	8004e6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dfa:	d121      	bne.n	8004e40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d837      	bhi.n	8004e72 <DMA_CheckFifoParam+0xda>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <DMA_CheckFifoParam+0x70>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004e19 	.word	0x08004e19
 8004e0c:	08004e1f 	.word	0x08004e1f
 8004e10:	08004e19 	.word	0x08004e19
 8004e14:	08004e31 	.word	0x08004e31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1c:	e030      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d025      	beq.n	8004e76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2e:	e022      	b.n	8004e76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e38:	d11f      	bne.n	8004e7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e3e:	e01c      	b.n	8004e7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d903      	bls.n	8004e4e <DMA_CheckFifoParam+0xb6>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d003      	beq.n	8004e54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e4c:	e018      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
      break;
 8004e52:	e015      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00e      	beq.n	8004e7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      break;
 8004e64:	e00b      	b.n	8004e7e <DMA_CheckFifoParam+0xe6>
      break;
 8004e66:	bf00      	nop
 8004e68:	e00a      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e008      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e006      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
      break;
 8004e72:	bf00      	nop
 8004e74:	e004      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
      break;
 8004e76:	bf00      	nop
 8004e78:	e002      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e7a:	bf00      	nop
 8004e7c:	e000      	b.n	8004e80 <DMA_CheckFifoParam+0xe8>
      break;
 8004e7e:	bf00      	nop
    }
  } 
  
  return status; 
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop

08004e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	; 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e16b      	b.n	8005184 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004eac:	2201      	movs	r2, #1
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	f040 815a 	bne.w	800517e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d005      	beq.n	8004ee2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d130      	bne.n	8004f44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	2203      	movs	r2, #3
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f18:	2201      	movs	r2, #1
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	091b      	lsrs	r3, r3, #4
 8004f2e:	f003 0201 	and.w	r2, r3, #1
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d017      	beq.n	8004f80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	43db      	mvns	r3, r3
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	4013      	ands	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d123      	bne.n	8004fd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	08da      	lsrs	r2, r3, #3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3208      	adds	r2, #8
 8004f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	220f      	movs	r2, #15
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	08da      	lsrs	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	3208      	adds	r2, #8
 8004fce:	69b9      	ldr	r1, [r7, #24]
 8004fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	2203      	movs	r2, #3
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0203 	and.w	r2, r3, #3
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 80b4 	beq.w	800517e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005016:	2300      	movs	r3, #0
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	4b60      	ldr	r3, [pc, #384]	; (800519c <HAL_GPIO_Init+0x30c>)
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	4a5f      	ldr	r2, [pc, #380]	; (800519c <HAL_GPIO_Init+0x30c>)
 8005020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005024:	6453      	str	r3, [r2, #68]	; 0x44
 8005026:	4b5d      	ldr	r3, [pc, #372]	; (800519c <HAL_GPIO_Init+0x30c>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005032:	4a5b      	ldr	r2, [pc, #364]	; (80051a0 <HAL_GPIO_Init+0x310>)
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	3302      	adds	r3, #2
 800503a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	220f      	movs	r2, #15
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a52      	ldr	r2, [pc, #328]	; (80051a4 <HAL_GPIO_Init+0x314>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d02b      	beq.n	80050b6 <HAL_GPIO_Init+0x226>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a51      	ldr	r2, [pc, #324]	; (80051a8 <HAL_GPIO_Init+0x318>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d025      	beq.n	80050b2 <HAL_GPIO_Init+0x222>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a50      	ldr	r2, [pc, #320]	; (80051ac <HAL_GPIO_Init+0x31c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01f      	beq.n	80050ae <HAL_GPIO_Init+0x21e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a4f      	ldr	r2, [pc, #316]	; (80051b0 <HAL_GPIO_Init+0x320>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d019      	beq.n	80050aa <HAL_GPIO_Init+0x21a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a4e      	ldr	r2, [pc, #312]	; (80051b4 <HAL_GPIO_Init+0x324>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <HAL_GPIO_Init+0x216>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a4d      	ldr	r2, [pc, #308]	; (80051b8 <HAL_GPIO_Init+0x328>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00d      	beq.n	80050a2 <HAL_GPIO_Init+0x212>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a4c      	ldr	r2, [pc, #304]	; (80051bc <HAL_GPIO_Init+0x32c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d007      	beq.n	800509e <HAL_GPIO_Init+0x20e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a4b      	ldr	r2, [pc, #300]	; (80051c0 <HAL_GPIO_Init+0x330>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d101      	bne.n	800509a <HAL_GPIO_Init+0x20a>
 8005096:	2307      	movs	r3, #7
 8005098:	e00e      	b.n	80050b8 <HAL_GPIO_Init+0x228>
 800509a:	2308      	movs	r3, #8
 800509c:	e00c      	b.n	80050b8 <HAL_GPIO_Init+0x228>
 800509e:	2306      	movs	r3, #6
 80050a0:	e00a      	b.n	80050b8 <HAL_GPIO_Init+0x228>
 80050a2:	2305      	movs	r3, #5
 80050a4:	e008      	b.n	80050b8 <HAL_GPIO_Init+0x228>
 80050a6:	2304      	movs	r3, #4
 80050a8:	e006      	b.n	80050b8 <HAL_GPIO_Init+0x228>
 80050aa:	2303      	movs	r3, #3
 80050ac:	e004      	b.n	80050b8 <HAL_GPIO_Init+0x228>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e002      	b.n	80050b8 <HAL_GPIO_Init+0x228>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <HAL_GPIO_Init+0x228>
 80050b6:	2300      	movs	r3, #0
 80050b8:	69fa      	ldr	r2, [r7, #28]
 80050ba:	f002 0203 	and.w	r2, r2, #3
 80050be:	0092      	lsls	r2, r2, #2
 80050c0:	4093      	lsls	r3, r2
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050c8:	4935      	ldr	r1, [pc, #212]	; (80051a0 <HAL_GPIO_Init+0x310>)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	3302      	adds	r3, #2
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050d6:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <HAL_GPIO_Init+0x334>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	43db      	mvns	r3, r3
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	4013      	ands	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050fa:	4a32      	ldr	r2, [pc, #200]	; (80051c4 <HAL_GPIO_Init+0x334>)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005100:	4b30      	ldr	r3, [pc, #192]	; (80051c4 <HAL_GPIO_Init+0x334>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005124:	4a27      	ldr	r2, [pc, #156]	; (80051c4 <HAL_GPIO_Init+0x334>)
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800512a:	4b26      	ldr	r3, [pc, #152]	; (80051c4 <HAL_GPIO_Init+0x334>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	43db      	mvns	r3, r3
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	4013      	ands	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800514e:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <HAL_GPIO_Init+0x334>)
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005154:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <HAL_GPIO_Init+0x334>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005178:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <HAL_GPIO_Init+0x334>)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	3301      	adds	r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2b0f      	cmp	r3, #15
 8005188:	f67f ae90 	bls.w	8004eac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	3724      	adds	r7, #36	; 0x24
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
 80051a0:	40013800 	.word	0x40013800
 80051a4:	40020000 	.word	0x40020000
 80051a8:	40020400 	.word	0x40020400
 80051ac:	40020800 	.word	0x40020800
 80051b0:	40020c00 	.word	0x40020c00
 80051b4:	40021000 	.word	0x40021000
 80051b8:	40021400 	.word	0x40021400
 80051bc:	40021800 	.word	0x40021800
 80051c0:	40021c00 	.word	0x40021c00
 80051c4:	40013c00 	.word	0x40013c00

080051c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
 80051d4:	4613      	mov	r3, r2
 80051d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051d8:	787b      	ldrb	r3, [r7, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051de:	887a      	ldrh	r2, [r7, #2]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051e4:	e003      	b.n	80051ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051e6:	887b      	ldrh	r3, [r7, #2]
 80051e8:	041a      	lsls	r2, r3, #16
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	619a      	str	r2, [r3, #24]
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e267      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b00      	cmp	r3, #0
 8005218:	d075      	beq.n	8005306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800521a:	4b88      	ldr	r3, [pc, #544]	; (800543c <HAL_RCC_OscConfig+0x240>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b04      	cmp	r3, #4
 8005224:	d00c      	beq.n	8005240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005226:	4b85      	ldr	r3, [pc, #532]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800522e:	2b08      	cmp	r3, #8
 8005230:	d112      	bne.n	8005258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005232:	4b82      	ldr	r3, [pc, #520]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800523e:	d10b      	bne.n	8005258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005240:	4b7e      	ldr	r3, [pc, #504]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d05b      	beq.n	8005304 <HAL_RCC_OscConfig+0x108>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d157      	bne.n	8005304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e242      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005260:	d106      	bne.n	8005270 <HAL_RCC_OscConfig+0x74>
 8005262:	4b76      	ldr	r3, [pc, #472]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a75      	ldr	r2, [pc, #468]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	e01d      	b.n	80052ac <HAL_RCC_OscConfig+0xb0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005278:	d10c      	bne.n	8005294 <HAL_RCC_OscConfig+0x98>
 800527a:	4b70      	ldr	r3, [pc, #448]	; (800543c <HAL_RCC_OscConfig+0x240>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a6f      	ldr	r2, [pc, #444]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4b6d      	ldr	r3, [pc, #436]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a6c      	ldr	r2, [pc, #432]	; (800543c <HAL_RCC_OscConfig+0x240>)
 800528c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e00b      	b.n	80052ac <HAL_RCC_OscConfig+0xb0>
 8005294:	4b69      	ldr	r3, [pc, #420]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a68      	ldr	r2, [pc, #416]	; (800543c <HAL_RCC_OscConfig+0x240>)
 800529a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	4b66      	ldr	r3, [pc, #408]	; (800543c <HAL_RCC_OscConfig+0x240>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a65      	ldr	r2, [pc, #404]	; (800543c <HAL_RCC_OscConfig+0x240>)
 80052a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d013      	beq.n	80052dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b4:	f7fe fb98 	bl	80039e8 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052bc:	f7fe fb94 	bl	80039e8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e207      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b5b      	ldr	r3, [pc, #364]	; (800543c <HAL_RCC_OscConfig+0x240>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f0      	beq.n	80052bc <HAL_RCC_OscConfig+0xc0>
 80052da:	e014      	b.n	8005306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052dc:	f7fe fb84 	bl	80039e8 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e4:	f7fe fb80 	bl	80039e8 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e1f3      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052f6:	4b51      	ldr	r3, [pc, #324]	; (800543c <HAL_RCC_OscConfig+0x240>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0xe8>
 8005302:	e000      	b.n	8005306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d063      	beq.n	80053da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005312:	4b4a      	ldr	r3, [pc, #296]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 030c 	and.w	r3, r3, #12
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531e:	4b47      	ldr	r3, [pc, #284]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005326:	2b08      	cmp	r3, #8
 8005328:	d11c      	bne.n	8005364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532a:	4b44      	ldr	r3, [pc, #272]	; (800543c <HAL_RCC_OscConfig+0x240>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d116      	bne.n	8005364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005336:	4b41      	ldr	r3, [pc, #260]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_RCC_OscConfig+0x152>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d001      	beq.n	800534e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e1c7      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534e:	4b3b      	ldr	r3, [pc, #236]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	4937      	ldr	r1, [pc, #220]	; (800543c <HAL_RCC_OscConfig+0x240>)
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005362:	e03a      	b.n	80053da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d020      	beq.n	80053ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800536c:	4b34      	ldr	r3, [pc, #208]	; (8005440 <HAL_RCC_OscConfig+0x244>)
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005372:	f7fe fb39 	bl	80039e8 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537a:	f7fe fb35 	bl	80039e8 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e1a8      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800538c:	4b2b      	ldr	r3, [pc, #172]	; (800543c <HAL_RCC_OscConfig+0x240>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005398:	4b28      	ldr	r3, [pc, #160]	; (800543c <HAL_RCC_OscConfig+0x240>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	4925      	ldr	r1, [pc, #148]	; (800543c <HAL_RCC_OscConfig+0x240>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	600b      	str	r3, [r1, #0]
 80053ac:	e015      	b.n	80053da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <HAL_RCC_OscConfig+0x244>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fe fb18 	bl	80039e8 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053bc:	f7fe fb14 	bl	80039e8 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e187      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ce:	4b1b      	ldr	r3, [pc, #108]	; (800543c <HAL_RCC_OscConfig+0x240>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d036      	beq.n	8005454 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ee:	4b15      	ldr	r3, [pc, #84]	; (8005444 <HAL_RCC_OscConfig+0x248>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fe faf8 	bl	80039e8 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fe faf4 	bl	80039e8 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e167      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_RCC_OscConfig+0x240>)
 8005410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x200>
 800541a:	e01b      	b.n	8005454 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HAL_RCC_OscConfig+0x248>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005422:	f7fe fae1 	bl	80039e8 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005428:	e00e      	b.n	8005448 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542a:	f7fe fadd 	bl	80039e8 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d907      	bls.n	8005448 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e150      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
 800543c:	40023800 	.word	0x40023800
 8005440:	42470000 	.word	0x42470000
 8005444:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005448:	4b88      	ldr	r3, [pc, #544]	; (800566c <HAL_RCC_OscConfig+0x470>)
 800544a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1ea      	bne.n	800542a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8097 	beq.w	8005590 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005462:	2300      	movs	r3, #0
 8005464:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005466:	4b81      	ldr	r3, [pc, #516]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	4b7d      	ldr	r3, [pc, #500]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	4a7c      	ldr	r2, [pc, #496]	; (800566c <HAL_RCC_OscConfig+0x470>)
 800547c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005480:	6413      	str	r3, [r2, #64]	; 0x40
 8005482:	4b7a      	ldr	r3, [pc, #488]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548a:	60bb      	str	r3, [r7, #8]
 800548c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800548e:	2301      	movs	r3, #1
 8005490:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005492:	4b77      	ldr	r3, [pc, #476]	; (8005670 <HAL_RCC_OscConfig+0x474>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d118      	bne.n	80054d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800549e:	4b74      	ldr	r3, [pc, #464]	; (8005670 <HAL_RCC_OscConfig+0x474>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a73      	ldr	r2, [pc, #460]	; (8005670 <HAL_RCC_OscConfig+0x474>)
 80054a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054aa:	f7fe fa9d 	bl	80039e8 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b2:	f7fe fa99 	bl	80039e8 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e10c      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c4:	4b6a      	ldr	r3, [pc, #424]	; (8005670 <HAL_RCC_OscConfig+0x474>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0f0      	beq.n	80054b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d106      	bne.n	80054e6 <HAL_RCC_OscConfig+0x2ea>
 80054d8:	4b64      	ldr	r3, [pc, #400]	; (800566c <HAL_RCC_OscConfig+0x470>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a63      	ldr	r2, [pc, #396]	; (800566c <HAL_RCC_OscConfig+0x470>)
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
 80054e4:	e01c      	b.n	8005520 <HAL_RCC_OscConfig+0x324>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2b05      	cmp	r3, #5
 80054ec:	d10c      	bne.n	8005508 <HAL_RCC_OscConfig+0x30c>
 80054ee:	4b5f      	ldr	r3, [pc, #380]	; (800566c <HAL_RCC_OscConfig+0x470>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f2:	4a5e      	ldr	r2, [pc, #376]	; (800566c <HAL_RCC_OscConfig+0x470>)
 80054f4:	f043 0304 	orr.w	r3, r3, #4
 80054f8:	6713      	str	r3, [r2, #112]	; 0x70
 80054fa:	4b5c      	ldr	r3, [pc, #368]	; (800566c <HAL_RCC_OscConfig+0x470>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fe:	4a5b      	ldr	r2, [pc, #364]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005500:	f043 0301 	orr.w	r3, r3, #1
 8005504:	6713      	str	r3, [r2, #112]	; 0x70
 8005506:	e00b      	b.n	8005520 <HAL_RCC_OscConfig+0x324>
 8005508:	4b58      	ldr	r3, [pc, #352]	; (800566c <HAL_RCC_OscConfig+0x470>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	4a57      	ldr	r2, [pc, #348]	; (800566c <HAL_RCC_OscConfig+0x470>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	6713      	str	r3, [r2, #112]	; 0x70
 8005514:	4b55      	ldr	r3, [pc, #340]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	4a54      	ldr	r2, [pc, #336]	; (800566c <HAL_RCC_OscConfig+0x470>)
 800551a:	f023 0304 	bic.w	r3, r3, #4
 800551e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d015      	beq.n	8005554 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005528:	f7fe fa5e 	bl	80039e8 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552e:	e00a      	b.n	8005546 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005530:	f7fe fa5a 	bl	80039e8 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	f241 3288 	movw	r2, #5000	; 0x1388
 800553e:	4293      	cmp	r3, r2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e0cb      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005546:	4b49      	ldr	r3, [pc, #292]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0ee      	beq.n	8005530 <HAL_RCC_OscConfig+0x334>
 8005552:	e014      	b.n	800557e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005554:	f7fe fa48 	bl	80039e8 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555a:	e00a      	b.n	8005572 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800555c:	f7fe fa44 	bl	80039e8 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	f241 3288 	movw	r2, #5000	; 0x1388
 800556a:	4293      	cmp	r3, r2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e0b5      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005572:	4b3e      	ldr	r3, [pc, #248]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1ee      	bne.n	800555c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800557e:	7dfb      	ldrb	r3, [r7, #23]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005584:	4b39      	ldr	r3, [pc, #228]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	4a38      	ldr	r2, [pc, #224]	; (800566c <HAL_RCC_OscConfig+0x470>)
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800558e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 80a1 	beq.w	80056dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800559a:	4b34      	ldr	r3, [pc, #208]	; (800566c <HAL_RCC_OscConfig+0x470>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b08      	cmp	r3, #8
 80055a4:	d05c      	beq.n	8005660 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d141      	bne.n	8005632 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ae:	4b31      	ldr	r3, [pc, #196]	; (8005674 <HAL_RCC_OscConfig+0x478>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b4:	f7fe fa18 	bl	80039e8 <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055bc:	f7fe fa14 	bl	80039e8 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e087      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ce:	4b27      	ldr	r3, [pc, #156]	; (800566c <HAL_RCC_OscConfig+0x470>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	019b      	lsls	r3, r3, #6
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	3b01      	subs	r3, #1
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	061b      	lsls	r3, r3, #24
 80055fe:	491b      	ldr	r1, [pc, #108]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005600:	4313      	orrs	r3, r2
 8005602:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005604:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <HAL_RCC_OscConfig+0x478>)
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560a:	f7fe f9ed 	bl	80039e8 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005612:	f7fe f9e9 	bl	80039e8 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e05c      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005624:	4b11      	ldr	r3, [pc, #68]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <HAL_RCC_OscConfig+0x416>
 8005630:	e054      	b.n	80056dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005632:	4b10      	ldr	r3, [pc, #64]	; (8005674 <HAL_RCC_OscConfig+0x478>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005638:	f7fe f9d6 	bl	80039e8 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005640:	f7fe f9d2 	bl	80039e8 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e045      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005652:	4b06      	ldr	r3, [pc, #24]	; (800566c <HAL_RCC_OscConfig+0x470>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0x444>
 800565e:	e03d      	b.n	80056dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d107      	bne.n	8005678 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e038      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
 800566c:	40023800 	.word	0x40023800
 8005670:	40007000 	.word	0x40007000
 8005674:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005678:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <HAL_RCC_OscConfig+0x4ec>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d028      	beq.n	80056d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d121      	bne.n	80056d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d11a      	bne.n	80056d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056a8:	4013      	ands	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d111      	bne.n	80056d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056be:	085b      	lsrs	r3, r3, #1
 80056c0:	3b01      	subs	r3, #1
 80056c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d107      	bne.n	80056d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800

080056ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0cc      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005700:	4b68      	ldr	r3, [pc, #416]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d90c      	bls.n	8005728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b65      	ldr	r3, [pc, #404]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005716:	4b63      	ldr	r3, [pc, #396]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d001      	beq.n	8005728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e0b8      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d020      	beq.n	8005776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005740:	4b59      	ldr	r3, [pc, #356]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	4a58      	ldr	r2, [pc, #352]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800574a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005758:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	4a52      	ldr	r2, [pc, #328]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005764:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	494d      	ldr	r1, [pc, #308]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	4313      	orrs	r3, r2
 8005774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d044      	beq.n	800580c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578a:	4b47      	ldr	r3, [pc, #284]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d119      	bne.n	80057ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e07f      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d003      	beq.n	80057aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d107      	bne.n	80057ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057aa:	4b3f      	ldr	r3, [pc, #252]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d109      	bne.n	80057ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e06f      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ba:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e067      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ca:	4b37      	ldr	r3, [pc, #220]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f023 0203 	bic.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	4934      	ldr	r1, [pc, #208]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057dc:	f7fe f904 	bl	80039e8 <HAL_GetTick>
 80057e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e2:	e00a      	b.n	80057fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e4:	f7fe f900 	bl	80039e8 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e04f      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fa:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 020c 	and.w	r2, r3, #12
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	429a      	cmp	r2, r3
 800580a:	d1eb      	bne.n	80057e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800580c:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d20c      	bcs.n	8005834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b22      	ldr	r3, [pc, #136]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005822:	4b20      	ldr	r3, [pc, #128]	; (80058a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	683a      	ldr	r2, [r7, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d001      	beq.n	8005834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e032      	b.n	800589a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005840:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4916      	ldr	r1, [pc, #88]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800584e:	4313      	orrs	r3, r2
 8005850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800585e:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	490e      	ldr	r1, [pc, #56]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	4313      	orrs	r3, r2
 8005870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005872:	f000 f821 	bl	80058b8 <HAL_RCC_GetSysClockFreq>
 8005876:	4602      	mov	r2, r0
 8005878:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <HAL_RCC_ClockConfig+0x1bc>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	490a      	ldr	r1, [pc, #40]	; (80058ac <HAL_RCC_ClockConfig+0x1c0>)
 8005884:	5ccb      	ldrb	r3, [r1, r3]
 8005886:	fa22 f303 	lsr.w	r3, r2, r3
 800588a:	4a09      	ldr	r2, [pc, #36]	; (80058b0 <HAL_RCC_ClockConfig+0x1c4>)
 800588c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe f864 	bl	8003960 <HAL_InitTick>

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40023c00 	.word	0x40023c00
 80058a8:	40023800 	.word	0x40023800
 80058ac:	0800c458 	.word	0x0800c458
 80058b0:	20000008 	.word	0x20000008
 80058b4:	2000000c 	.word	0x2000000c

080058b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058bc:	b094      	sub	sp, #80	; 0x50
 80058be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	647b      	str	r3, [r7, #68]	; 0x44
 80058c4:	2300      	movs	r3, #0
 80058c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058c8:	2300      	movs	r3, #0
 80058ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d0:	4b79      	ldr	r3, [pc, #484]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f003 030c 	and.w	r3, r3, #12
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d00d      	beq.n	80058f8 <HAL_RCC_GetSysClockFreq+0x40>
 80058dc:	2b08      	cmp	r3, #8
 80058de:	f200 80e1 	bhi.w	8005aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_RCC_GetSysClockFreq+0x34>
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d003      	beq.n	80058f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80058ea:	e0db      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058ec:	4b73      	ldr	r3, [pc, #460]	; (8005abc <HAL_RCC_GetSysClockFreq+0x204>)
 80058ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80058f0:	e0db      	b.n	8005aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058f2:	4b73      	ldr	r3, [pc, #460]	; (8005ac0 <HAL_RCC_GetSysClockFreq+0x208>)
 80058f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80058f6:	e0d8      	b.n	8005aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058f8:	4b6f      	ldr	r3, [pc, #444]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005900:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005902:	4b6d      	ldr	r3, [pc, #436]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d063      	beq.n	80059d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590e:	4b6a      	ldr	r3, [pc, #424]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	099b      	lsrs	r3, r3, #6
 8005914:	2200      	movs	r2, #0
 8005916:	63bb      	str	r3, [r7, #56]	; 0x38
 8005918:	63fa      	str	r2, [r7, #60]	; 0x3c
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005920:	633b      	str	r3, [r7, #48]	; 0x30
 8005922:	2300      	movs	r3, #0
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
 8005926:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800592a:	4622      	mov	r2, r4
 800592c:	462b      	mov	r3, r5
 800592e:	f04f 0000 	mov.w	r0, #0
 8005932:	f04f 0100 	mov.w	r1, #0
 8005936:	0159      	lsls	r1, r3, #5
 8005938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800593c:	0150      	lsls	r0, r2, #5
 800593e:	4602      	mov	r2, r0
 8005940:	460b      	mov	r3, r1
 8005942:	4621      	mov	r1, r4
 8005944:	1a51      	subs	r1, r2, r1
 8005946:	6139      	str	r1, [r7, #16]
 8005948:	4629      	mov	r1, r5
 800594a:	eb63 0301 	sbc.w	r3, r3, r1
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800595c:	4659      	mov	r1, fp
 800595e:	018b      	lsls	r3, r1, #6
 8005960:	4651      	mov	r1, sl
 8005962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005966:	4651      	mov	r1, sl
 8005968:	018a      	lsls	r2, r1, #6
 800596a:	4651      	mov	r1, sl
 800596c:	ebb2 0801 	subs.w	r8, r2, r1
 8005970:	4659      	mov	r1, fp
 8005972:	eb63 0901 	sbc.w	r9, r3, r1
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800598a:	4690      	mov	r8, r2
 800598c:	4699      	mov	r9, r3
 800598e:	4623      	mov	r3, r4
 8005990:	eb18 0303 	adds.w	r3, r8, r3
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	462b      	mov	r3, r5
 8005998:	eb49 0303 	adc.w	r3, r9, r3
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	f04f 0200 	mov.w	r2, #0
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059aa:	4629      	mov	r1, r5
 80059ac:	024b      	lsls	r3, r1, #9
 80059ae:	4621      	mov	r1, r4
 80059b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059b4:	4621      	mov	r1, r4
 80059b6:	024a      	lsls	r2, r1, #9
 80059b8:	4610      	mov	r0, r2
 80059ba:	4619      	mov	r1, r3
 80059bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059be:	2200      	movs	r2, #0
 80059c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059c8:	f7fb f8e6 	bl	8000b98 <__aeabi_uldivmod>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4613      	mov	r3, r2
 80059d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d4:	e058      	b.n	8005a88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d6:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	099b      	lsrs	r3, r3, #6
 80059dc:	2200      	movs	r2, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	4611      	mov	r1, r2
 80059e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059e6:	623b      	str	r3, [r7, #32]
 80059e8:	2300      	movs	r3, #0
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
 80059ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	f04f 0000 	mov.w	r0, #0
 80059f8:	f04f 0100 	mov.w	r1, #0
 80059fc:	0159      	lsls	r1, r3, #5
 80059fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a02:	0150      	lsls	r0, r2, #5
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4641      	mov	r1, r8
 8005a0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a0e:	4649      	mov	r1, r9
 8005a10:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a28:	ebb2 040a 	subs.w	r4, r2, sl
 8005a2c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	00eb      	lsls	r3, r5, #3
 8005a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a3e:	00e2      	lsls	r2, r4, #3
 8005a40:	4614      	mov	r4, r2
 8005a42:	461d      	mov	r5, r3
 8005a44:	4643      	mov	r3, r8
 8005a46:	18e3      	adds	r3, r4, r3
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	eb45 0303 	adc.w	r3, r5, r3
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	f04f 0200 	mov.w	r2, #0
 8005a56:	f04f 0300 	mov.w	r3, #0
 8005a5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a5e:	4629      	mov	r1, r5
 8005a60:	028b      	lsls	r3, r1, #10
 8005a62:	4621      	mov	r1, r4
 8005a64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a68:	4621      	mov	r1, r4
 8005a6a:	028a      	lsls	r2, r1, #10
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a72:	2200      	movs	r2, #0
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	61fa      	str	r2, [r7, #28]
 8005a78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a7c:	f7fb f88c 	bl	8000b98 <__aeabi_uldivmod>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4613      	mov	r3, r2
 8005a86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a88:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	0c1b      	lsrs	r3, r3, #16
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	3301      	adds	r3, #1
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005a98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aa2:	e002      	b.n	8005aaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005aa4:	4b05      	ldr	r3, [pc, #20]	; (8005abc <HAL_RCC_GetSysClockFreq+0x204>)
 8005aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3750      	adds	r7, #80	; 0x50
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab6:	bf00      	nop
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	00f42400 	.word	0x00f42400
 8005ac0:	007a1200 	.word	0x007a1200

08005ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac8:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aca:	681b      	ldr	r3, [r3, #0]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000008 	.word	0x20000008

08005adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ae0:	f7ff fff0 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4b05      	ldr	r3, [pc, #20]	; (8005afc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	0a9b      	lsrs	r3, r3, #10
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	4903      	ldr	r1, [pc, #12]	; (8005b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005af2:	5ccb      	ldrb	r3, [r1, r3]
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40023800 	.word	0x40023800
 8005b00:	0800c468 	.word	0x0800c468

08005b04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b08:	f7ff ffdc 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	0b5b      	lsrs	r3, r3, #13
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	4903      	ldr	r1, [pc, #12]	; (8005b28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b1a:	5ccb      	ldrb	r3, [r1, r3]
 8005b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	40023800 	.word	0x40023800
 8005b28:	0800c468 	.word	0x0800c468

08005b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e07b      	b.n	8005c36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d108      	bne.n	8005b58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b4e:	d009      	beq.n	8005b64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	61da      	str	r2, [r3, #28]
 8005b56:	e005      	b.n	8005b64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d106      	bne.n	8005b84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fd fc1a 	bl	80033b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be8:	ea42 0103 	orr.w	r1, r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	0c1b      	lsrs	r3, r3, #16
 8005c02:	f003 0104 	and.w	r1, r3, #4
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	f003 0210 	and.w	r2, r3, #16
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b088      	sub	sp, #32
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	603b      	str	r3, [r7, #0]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_SPI_Transmit+0x22>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e12d      	b.n	8005ebc <HAL_SPI_Transmit+0x27e>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c68:	f7fd febe 	bl	80039e8 <HAL_GetTick>
 8005c6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d002      	beq.n	8005c84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c7e:	2302      	movs	r3, #2
 8005c80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c82:	e116      	b.n	8005eb2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SPI_Transmit+0x52>
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d102      	bne.n	8005c96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c94:	e10d      	b.n	8005eb2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	88fa      	ldrh	r2, [r7, #6]
 8005cb4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cdc:	d10f      	bne.n	8005cfe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d007      	beq.n	8005d1c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d24:	d14f      	bne.n	8005dc6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_SPI_Transmit+0xf6>
 8005d2e:	8afb      	ldrh	r3, [r7, #22]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d142      	bne.n	8005dba <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	881a      	ldrh	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	1c9a      	adds	r2, r3, #2
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d58:	e02f      	b.n	8005dba <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d112      	bne.n	8005d8e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	881a      	ldrh	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	1c9a      	adds	r2, r3, #2
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d8c:	e015      	b.n	8005dba <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d8e:	f7fd fe2b 	bl	80039e8 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d803      	bhi.n	8005da6 <HAL_SPI_Transmit+0x168>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d102      	bne.n	8005dac <HAL_SPI_Transmit+0x16e>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005db8:	e07b      	b.n	8005eb2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1ca      	bne.n	8005d5a <HAL_SPI_Transmit+0x11c>
 8005dc4:	e050      	b.n	8005e68 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_SPI_Transmit+0x196>
 8005dce:	8afb      	ldrh	r3, [r7, #22]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d144      	bne.n	8005e5e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005dfa:	e030      	b.n	8005e5e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d113      	bne.n	8005e32 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	7812      	ldrb	r2, [r2, #0]
 8005e16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e30:	e015      	b.n	8005e5e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e32:	f7fd fdd9 	bl	80039e8 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d803      	bhi.n	8005e4a <HAL_SPI_Transmit+0x20c>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d102      	bne.n	8005e50 <HAL_SPI_Transmit+0x212>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d106      	bne.n	8005e5e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005e5c:	e029      	b.n	8005eb2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1c9      	bne.n	8005dfc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 fa61 	bl	8006334 <SPI_EndRxTxTransaction>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10a      	bne.n	8005e9c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e86:	2300      	movs	r3, #0
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	613b      	str	r3, [r7, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e003      	b.n	8005eb2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eba:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08c      	sub	sp, #48	; 0x30
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_SPI_TransmitReceive+0x26>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e198      	b.n	800621c <HAL_SPI_TransmitReceive+0x358>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ef2:	f7fd fd79 	bl	80039e8 <HAL_GetTick>
 8005ef6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f08:	887b      	ldrh	r3, [r7, #2]
 8005f0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d00f      	beq.n	8005f34 <HAL_SPI_TransmitReceive+0x70>
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1a:	d107      	bne.n	8005f2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <HAL_SPI_TransmitReceive+0x68>
 8005f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d003      	beq.n	8005f34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f32:	e16d      	b.n	8006210 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x82>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0x82>
 8005f40:	887b      	ldrh	r3, [r7, #2]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f4c:	e160      	b.n	8006210 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d003      	beq.n	8005f62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2205      	movs	r2, #5
 8005f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	887a      	ldrh	r2, [r7, #2]
 8005f72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	887a      	ldrh	r2, [r7, #2]
 8005f78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	887a      	ldrh	r2, [r7, #2]
 8005f84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	887a      	ldrh	r2, [r7, #2]
 8005f8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa2:	2b40      	cmp	r3, #64	; 0x40
 8005fa4:	d007      	beq.n	8005fb6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fbe:	d17c      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_TransmitReceive+0x10a>
 8005fc8:	8b7b      	ldrh	r3, [r7, #26]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d16a      	bne.n	80060a4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	881a      	ldrh	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	1c9a      	adds	r2, r3, #2
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff2:	e057      	b.n	80060a4 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d11b      	bne.n	800603a <HAL_SPI_TransmitReceive+0x176>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d016      	beq.n	800603a <HAL_SPI_TransmitReceive+0x176>
 800600c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d113      	bne.n	800603a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	881a      	ldrh	r2, [r3, #0]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	1c9a      	adds	r2, r3, #2
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b01      	cmp	r3, #1
 8006046:	d119      	bne.n	800607c <HAL_SPI_TransmitReceive+0x1b8>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d014      	beq.n	800607c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605c:	b292      	uxth	r2, r2
 800605e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	1c9a      	adds	r2, r3, #2
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006078:	2301      	movs	r3, #1
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800607c:	f7fd fcb4 	bl	80039e8 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006088:	429a      	cmp	r2, r3
 800608a:	d80b      	bhi.n	80060a4 <HAL_SPI_TransmitReceive+0x1e0>
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d007      	beq.n	80060a4 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80060a2:	e0b5      	b.n	8006210 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1a2      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x130>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d19d      	bne.n	8005ff4 <HAL_SPI_TransmitReceive+0x130>
 80060b8:	e080      	b.n	80061bc <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d002      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x204>
 80060c2:	8b7b      	ldrh	r3, [r7, #26]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d16f      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	7812      	ldrb	r2, [r2, #0]
 80060d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060ee:	e05b      	b.n	80061a8 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f003 0302 	and.w	r3, r3, #2
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d11c      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x274>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d017      	beq.n	8006138 <HAL_SPI_TransmitReceive+0x274>
 8006108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610a:	2b01      	cmp	r3, #1
 800610c:	d114      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b01      	cmp	r3, #1
 8006144:	d119      	bne.n	800617a <HAL_SPI_TransmitReceive+0x2b6>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d014      	beq.n	800617a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006176:	2301      	movs	r3, #1
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800617a:	f7fd fc35 	bl	80039e8 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006186:	429a      	cmp	r2, r3
 8006188:	d803      	bhi.n	8006192 <HAL_SPI_TransmitReceive+0x2ce>
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006190:	d102      	bne.n	8006198 <HAL_SPI_TransmitReceive+0x2d4>
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	2b00      	cmp	r3, #0
 8006196:	d107      	bne.n	80061a8 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80061a6:	e033      	b.n	8006210 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d19e      	bne.n	80060f0 <HAL_SPI_TransmitReceive+0x22c>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d199      	bne.n	80060f0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 f8b7 	bl	8006334 <SPI_EndRxTxTransaction>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d006      	beq.n	80061da <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80061d8:	e01a      	b.n	8006210 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	617b      	str	r3, [r7, #20]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006206:	e003      	b.n	8006210 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006218:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800621c:	4618      	mov	r0, r3
 800621e:	3730      	adds	r7, #48	; 0x30
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	4613      	mov	r3, r2
 8006232:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006234:	f7fd fbd8 	bl	80039e8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	4413      	add	r3, r2
 8006242:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006244:	f7fd fbd0 	bl	80039e8 <HAL_GetTick>
 8006248:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800624a:	4b39      	ldr	r3, [pc, #228]	; (8006330 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	015b      	lsls	r3, r3, #5
 8006250:	0d1b      	lsrs	r3, r3, #20
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	fb02 f303 	mul.w	r3, r2, r3
 8006258:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800625a:	e054      	b.n	8006306 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006262:	d050      	beq.n	8006306 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006264:	f7fd fbc0 	bl	80039e8 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	429a      	cmp	r2, r3
 8006272:	d902      	bls.n	800627a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d13d      	bne.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006288:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006292:	d111      	bne.n	80062b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800629c:	d004      	beq.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a6:	d107      	bne.n	80062b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c0:	d10f      	bne.n	80062e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e017      	b.n	8006326 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	3b01      	subs	r3, #1
 8006304:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	4013      	ands	r3, r2
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	429a      	cmp	r2, r3
 8006314:	bf0c      	ite	eq
 8006316:	2301      	moveq	r3, #1
 8006318:	2300      	movne	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	429a      	cmp	r2, r3
 8006322:	d19b      	bne.n	800625c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3720      	adds	r7, #32
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20000008 	.word	0x20000008

08006334 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2201      	movs	r2, #1
 8006348:	2102      	movs	r1, #2
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f7ff ff6a 	bl	8006224 <SPI_WaitFlagStateUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635a:	f043 0220 	orr.w	r2, r3, #32
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e032      	b.n	80063cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006366:	4b1b      	ldr	r3, [pc, #108]	; (80063d4 <SPI_EndRxTxTransaction+0xa0>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1b      	ldr	r2, [pc, #108]	; (80063d8 <SPI_EndRxTxTransaction+0xa4>)
 800636c:	fba2 2303 	umull	r2, r3, r2, r3
 8006370:	0d5b      	lsrs	r3, r3, #21
 8006372:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006384:	d112      	bne.n	80063ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2200      	movs	r2, #0
 800638e:	2180      	movs	r1, #128	; 0x80
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff ff47 	bl	8006224 <SPI_WaitFlagStateUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d016      	beq.n	80063ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	f043 0220 	orr.w	r2, r3, #32
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e00f      	b.n	80063cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c2:	2b80      	cmp	r3, #128	; 0x80
 80063c4:	d0f2      	beq.n	80063ac <SPI_EndRxTxTransaction+0x78>
 80063c6:	e000      	b.n	80063ca <SPI_EndRxTxTransaction+0x96>
        break;
 80063c8:	bf00      	nop
  }

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000008 	.word	0x20000008
 80063d8:	165e9f81 	.word	0x165e9f81

080063dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e041      	b.n	8006472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fd f820 	bl	8003448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2202      	movs	r2, #2
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3304      	adds	r3, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f000 fa7e 	bl	800691c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e04e      	b.n	8006532 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a23      	ldr	r2, [pc, #140]	; (8006540 <HAL_TIM_Base_Start_IT+0xc4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d022      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064be:	d01d      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a1f      	ldr	r2, [pc, #124]	; (8006544 <HAL_TIM_Base_Start_IT+0xc8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d018      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a1e      	ldr	r2, [pc, #120]	; (8006548 <HAL_TIM_Base_Start_IT+0xcc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d013      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1c      	ldr	r2, [pc, #112]	; (800654c <HAL_TIM_Base_Start_IT+0xd0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00e      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <HAL_TIM_Base_Start_IT+0xd4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d009      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a19      	ldr	r2, [pc, #100]	; (8006554 <HAL_TIM_Base_Start_IT+0xd8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d004      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0x80>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a18      	ldr	r2, [pc, #96]	; (8006558 <HAL_TIM_Base_Start_IT+0xdc>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d111      	bne.n	8006520 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 0307 	and.w	r3, r3, #7
 8006506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b06      	cmp	r3, #6
 800650c:	d010      	beq.n	8006530 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651e:	e007      	b.n	8006530 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40010400 	.word	0x40010400
 8006554:	40014000 	.word	0x40014000
 8006558:	40001800 	.word	0x40001800

0800655c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d020      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01b      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0202 	mvn.w	r2, #2
 8006590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f999 	bl	80068de <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f98b 	bl	80068ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f99c 	bl	80068f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d020      	beq.n	800660c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01b      	beq.n	800660c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0204 	mvn.w	r2, #4
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f973 	bl	80068de <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f965 	bl	80068ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f976 	bl	80068f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d020      	beq.n	8006658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d01b      	beq.n	8006658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0208 	mvn.w	r2, #8
 8006628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2204      	movs	r2, #4
 800662e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f94d 	bl	80068de <HAL_TIM_IC_CaptureCallback>
 8006644:	e005      	b.n	8006652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f93f 	bl	80068ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f950 	bl	80068f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	f003 0310 	and.w	r3, r3, #16
 800665e:	2b00      	cmp	r3, #0
 8006660:	d020      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 0310 	and.w	r3, r3, #16
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01b      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f06f 0210 	mvn.w	r2, #16
 8006674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2208      	movs	r2, #8
 800667a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f927 	bl	80068de <HAL_TIM_IC_CaptureCallback>
 8006690:	e005      	b.n	800669e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f919 	bl	80068ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f92a 	bl	80068f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0201 	mvn.w	r2, #1
 80066c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fc fd20 	bl	8003108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00c      	beq.n	80066ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fae4 	bl	8006cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00c      	beq.n	8006710 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d007      	beq.n	8006710 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f8fb 	bl	8006906 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 0320 	and.w	r3, r3, #32
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00c      	beq.n	8006734 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f06f 0220 	mvn.w	r2, #32
 800672c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fab6 	bl	8006ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006750:	2b01      	cmp	r3, #1
 8006752:	d101      	bne.n	8006758 <HAL_TIM_ConfigClockSource+0x1c>
 8006754:	2302      	movs	r3, #2
 8006756:	e0b4      	b.n	80068c2 <HAL_TIM_ConfigClockSource+0x186>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006790:	d03e      	beq.n	8006810 <HAL_TIM_ConfigClockSource+0xd4>
 8006792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006796:	f200 8087 	bhi.w	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679e:	f000 8086 	beq.w	80068ae <HAL_TIM_ConfigClockSource+0x172>
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a6:	d87f      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
 80067a8:	2b70      	cmp	r3, #112	; 0x70
 80067aa:	d01a      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0xa6>
 80067ac:	2b70      	cmp	r3, #112	; 0x70
 80067ae:	d87b      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
 80067b0:	2b60      	cmp	r3, #96	; 0x60
 80067b2:	d050      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x11a>
 80067b4:	2b60      	cmp	r3, #96	; 0x60
 80067b6:	d877      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
 80067b8:	2b50      	cmp	r3, #80	; 0x50
 80067ba:	d03c      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0xfa>
 80067bc:	2b50      	cmp	r3, #80	; 0x50
 80067be:	d873      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
 80067c0:	2b40      	cmp	r3, #64	; 0x40
 80067c2:	d058      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x13a>
 80067c4:	2b40      	cmp	r3, #64	; 0x40
 80067c6:	d86f      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
 80067c8:	2b30      	cmp	r3, #48	; 0x30
 80067ca:	d064      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x15a>
 80067cc:	2b30      	cmp	r3, #48	; 0x30
 80067ce:	d86b      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d060      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x15a>
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d867      	bhi.n	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d05c      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x15a>
 80067dc:	2b10      	cmp	r3, #16
 80067de:	d05a      	beq.n	8006896 <HAL_TIM_ConfigClockSource+0x15a>
 80067e0:	e062      	b.n	80068a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067f2:	f000 f9b9 	bl	8006b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006804:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	609a      	str	r2, [r3, #8]
      break;
 800680e:	e04f      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006820:	f000 f9a2 	bl	8006b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689a      	ldr	r2, [r3, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006832:	609a      	str	r2, [r3, #8]
      break;
 8006834:	e03c      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006842:	461a      	mov	r2, r3
 8006844:	f000 f916 	bl	8006a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2150      	movs	r1, #80	; 0x50
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f96f 	bl	8006b32 <TIM_ITRx_SetConfig>
      break;
 8006854:	e02c      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006862:	461a      	mov	r2, r3
 8006864:	f000 f935 	bl	8006ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2160      	movs	r1, #96	; 0x60
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f95f 	bl	8006b32 <TIM_ITRx_SetConfig>
      break;
 8006874:	e01c      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006882:	461a      	mov	r2, r3
 8006884:	f000 f8f6 	bl	8006a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2140      	movs	r1, #64	; 0x40
 800688e:	4618      	mov	r0, r3
 8006890:	f000 f94f 	bl	8006b32 <TIM_ITRx_SetConfig>
      break;
 8006894:	e00c      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f000 f946 	bl	8006b32 <TIM_ITRx_SetConfig>
      break;
 80068a6:	e003      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	73fb      	strb	r3, [r7, #15]
      break;
 80068ac:	e000      	b.n	80068b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800690e:	bf00      	nop
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a46      	ldr	r2, [pc, #280]	; (8006a48 <TIM_Base_SetConfig+0x12c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693a:	d00f      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a43      	ldr	r2, [pc, #268]	; (8006a4c <TIM_Base_SetConfig+0x130>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a42      	ldr	r2, [pc, #264]	; (8006a50 <TIM_Base_SetConfig+0x134>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a41      	ldr	r2, [pc, #260]	; (8006a54 <TIM_Base_SetConfig+0x138>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a40      	ldr	r2, [pc, #256]	; (8006a58 <TIM_Base_SetConfig+0x13c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d108      	bne.n	800696e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a35      	ldr	r2, [pc, #212]	; (8006a48 <TIM_Base_SetConfig+0x12c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d02b      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697c:	d027      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a32      	ldr	r2, [pc, #200]	; (8006a4c <TIM_Base_SetConfig+0x130>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d023      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a31      	ldr	r2, [pc, #196]	; (8006a50 <TIM_Base_SetConfig+0x134>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01f      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a30      	ldr	r2, [pc, #192]	; (8006a54 <TIM_Base_SetConfig+0x138>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01b      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <TIM_Base_SetConfig+0x13c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d017      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a2e      	ldr	r2, [pc, #184]	; (8006a5c <TIM_Base_SetConfig+0x140>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a2d      	ldr	r2, [pc, #180]	; (8006a60 <TIM_Base_SetConfig+0x144>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00f      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <TIM_Base_SetConfig+0x148>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00b      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a2b      	ldr	r2, [pc, #172]	; (8006a68 <TIM_Base_SetConfig+0x14c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d007      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a2a      	ldr	r2, [pc, #168]	; (8006a6c <TIM_Base_SetConfig+0x150>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a29      	ldr	r2, [pc, #164]	; (8006a70 <TIM_Base_SetConfig+0x154>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d108      	bne.n	80069e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a10      	ldr	r2, [pc, #64]	; (8006a48 <TIM_Base_SetConfig+0x12c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_Base_SetConfig+0xf8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a12      	ldr	r2, [pc, #72]	; (8006a58 <TIM_Base_SetConfig+0x13c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d103      	bne.n	8006a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d105      	bne.n	8006a3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f023 0201 	bic.w	r2, r3, #1
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	611a      	str	r2, [r3, #16]
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40000400 	.word	0x40000400
 8006a50:	40000800 	.word	0x40000800
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40010400 	.word	0x40010400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800
 8006a68:	40001800 	.word	0x40001800
 8006a6c:	40001c00 	.word	0x40001c00
 8006a70:	40002000 	.word	0x40002000

08006a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f023 0201 	bic.w	r2, r3, #1
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f023 030a 	bic.w	r3, r3, #10
 8006ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b087      	sub	sp, #28
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	60f8      	str	r0, [r7, #12]
 8006ada:	60b9      	str	r1, [r7, #8]
 8006adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	f023 0210 	bic.w	r2, r3, #16
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	031b      	lsls	r3, r3, #12
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	011b      	lsls	r3, r3, #4
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	bf00      	nop
 8006b28:	371c      	adds	r7, #28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b085      	sub	sp, #20
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f043 0307 	orr.w	r3, r3, #7
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	021a      	lsls	r2, r3, #8
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	609a      	str	r2, [r3, #8]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e05a      	b.n	8006c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a21      	ldr	r2, [pc, #132]	; (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d022      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0c:	d01d      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1d      	ldr	r2, [pc, #116]	; (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d018      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1b      	ldr	r2, [pc, #108]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a1a      	ldr	r2, [pc, #104]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d00e      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a18      	ldr	r2, [pc, #96]	; (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a17      	ldr	r2, [pc, #92]	; (8006c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a15      	ldr	r2, [pc, #84]	; (8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d10c      	bne.n	8006c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	40010000 	.word	0x40010000
 8006c88:	40000400 	.word	0x40000400
 8006c8c:	40000800 	.word	0x40000800
 8006c90:	40000c00 	.word	0x40000c00
 8006c94:	40010400 	.word	0x40010400
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40001800 	.word	0x40001800

08006ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d101      	bne.n	8006cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e042      	b.n	8006d60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fc fbf0 	bl	80034d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2224      	movs	r2, #36	; 0x24
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68da      	ldr	r2, [r3, #12]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fdbd 	bl	800788c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	691a      	ldr	r2, [r3, #16]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	695a      	ldr	r2, [r3, #20]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2220      	movs	r2, #32
 8006d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	; 0x28
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4613      	mov	r3, r2
 8006d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d175      	bne.n	8006e74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_UART_Transmit+0x2c>
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e06e      	b.n	8006e76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2221      	movs	r2, #33	; 0x21
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006da6:	f7fc fe1f 	bl	80039e8 <HAL_GetTick>
 8006daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	88fa      	ldrh	r2, [r7, #6]
 8006db6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc0:	d108      	bne.n	8006dd4 <HAL_UART_Transmit+0x6c>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d104      	bne.n	8006dd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	61bb      	str	r3, [r7, #24]
 8006dd2:	e003      	b.n	8006ddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ddc:	e02e      	b.n	8006e3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2200      	movs	r2, #0
 8006de6:	2180      	movs	r1, #128	; 0x80
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fb1f 	bl	800742c <UART_WaitOnFlagUntilTimeout>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	e03a      	b.n	8006e76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10b      	bne.n	8006e1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	3302      	adds	r3, #2
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	e007      	b.n	8006e2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1cb      	bne.n	8006dde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2140      	movs	r1, #64	; 0x40
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 faeb 	bl	800742c <UART_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e006      	b.n	8006e76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2220      	movs	r2, #32
 8006e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e000      	b.n	8006e76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e74:	2302      	movs	r3, #2
  }
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b084      	sub	sp, #16
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d112      	bne.n	8006ebe <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <HAL_UART_Receive_IT+0x26>
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e00b      	b.n	8006ec0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f000 fb12 	bl	80074de <UART_Start_Receive_IT>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	e000      	b.n	8006ec0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ebe:	2302      	movs	r3, #2
  }
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b0ba      	sub	sp, #232	; 0xe8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10f      	bne.n	8006f2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d009      	beq.n	8006f2e <HAL_UART_IRQHandler+0x66>
 8006f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fbf2 	bl	8007710 <UART_Receive_IT>
      return;
 8006f2c:	e25b      	b.n	80073e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 80de 	beq.w	80070f4 <HAL_UART_IRQHandler+0x22c>
 8006f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d106      	bne.n	8006f52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80d1 	beq.w	80070f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_UART_IRQHandler+0xae>
 8006f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	f043 0201 	orr.w	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <HAL_UART_IRQHandler+0xd2>
 8006f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	f043 0202 	orr.w	r2, r3, #2
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <HAL_UART_IRQHandler+0xf6>
 8006fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d005      	beq.n	8006fbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f043 0204 	orr.w	r2, r3, #4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc2:	f003 0308 	and.w	r3, r3, #8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d011      	beq.n	8006fee <HAL_UART_IRQHandler+0x126>
 8006fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d105      	bne.n	8006fe2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe6:	f043 0208 	orr.w	r2, r3, #8
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 81f2 	beq.w	80073dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	d008      	beq.n	8007016 <HAL_UART_IRQHandler+0x14e>
 8007004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007008:	f003 0320 	and.w	r3, r3, #32
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fb7d 	bl	8007710 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007020:	2b40      	cmp	r3, #64	; 0x40
 8007022:	bf0c      	ite	eq
 8007024:	2301      	moveq	r3, #1
 8007026:	2300      	movne	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <HAL_UART_IRQHandler+0x17a>
 800703a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800703e:	2b00      	cmp	r3, #0
 8007040:	d04f      	beq.n	80070e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa85 	bl	8007552 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d141      	bne.n	80070da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3314      	adds	r3, #20
 800705c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800706c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3314      	adds	r3, #20
 800707e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007082:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800708e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007092:	e841 2300 	strex	r3, r2, [r1]
 8007096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800709a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1d9      	bne.n	8007056 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d013      	beq.n	80070d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ae:	4a7e      	ldr	r2, [pc, #504]	; (80072a8 <HAL_UART_IRQHandler+0x3e0>)
 80070b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fd fc5e 	bl	8004978 <HAL_DMA_Abort_IT>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d016      	beq.n	80070f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d0:	e00e      	b.n	80070f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f994 	bl	8007400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	e00a      	b.n	80070f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f990 	bl	8007400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e0:	e006      	b.n	80070f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f98c 	bl	8007400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80070ee:	e175      	b.n	80073dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070f0:	bf00      	nop
    return;
 80070f2:	e173      	b.n	80073dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	f040 814f 	bne.w	800739c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007102:	f003 0310 	and.w	r3, r3, #16
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8148 	beq.w	800739c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b00      	cmp	r3, #0
 8007116:	f000 8141 	beq.w	800739c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800711a:	2300      	movs	r3, #0
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	60bb      	str	r3, [r7, #8]
 800712e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	f040 80b6 	bne.w	80072ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800714c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 8145 	beq.w	80073e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800715a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800715e:	429a      	cmp	r2, r3
 8007160:	f080 813e 	bcs.w	80073e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800716a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007176:	f000 8088 	beq.w	800728a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	330c      	adds	r3, #12
 8007180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80071a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80071b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80071b6:	e841 2300 	strex	r3, r2, [r1]
 80071ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80071be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1d9      	bne.n	800717a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3314      	adds	r3, #20
 80071cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071d8:	f023 0301 	bic.w	r3, r3, #1
 80071dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3314      	adds	r3, #20
 80071e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e1      	bne.n	80071c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3314      	adds	r3, #20
 8007208:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3314      	adds	r3, #20
 8007222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007226:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007228:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800722c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e3      	bne.n	8007202 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	330c      	adds	r3, #12
 800724e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800725a:	f023 0310 	bic.w	r3, r3, #16
 800725e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	330c      	adds	r3, #12
 8007268:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800726c:	65ba      	str	r2, [r7, #88]	; 0x58
 800726e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007272:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800727a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e3      	bne.n	8007248 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007284:	4618      	mov	r0, r3
 8007286:	f7fd fb07 	bl	8004898 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007298:	b29b      	uxth	r3, r3
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	b29b      	uxth	r3, r3
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f8b7 	bl	8007414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072a6:	e09b      	b.n	80073e0 <HAL_UART_IRQHandler+0x518>
 80072a8:	08007619 	.word	0x08007619
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 808e 	beq.w	80073e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80072c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8089 	beq.w	80073e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	330c      	adds	r3, #12
 80072d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80072f6:	647a      	str	r2, [r7, #68]	; 0x44
 80072f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072fe:	e841 2300 	strex	r3, r2, [r1]
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1e3      	bne.n	80072d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	3314      	adds	r3, #20
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	623b      	str	r3, [r7, #32]
   return(result);
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f023 0301 	bic.w	r3, r3, #1
 8007320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3314      	adds	r3, #20
 800732a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800732e:	633a      	str	r2, [r7, #48]	; 0x30
 8007330:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e3      	bne.n	800730a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	330c      	adds	r3, #12
 8007356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0310 	bic.w	r3, r3, #16
 8007366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	330c      	adds	r3, #12
 8007370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007374:	61fa      	str	r2, [r7, #28]
 8007376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	69b9      	ldr	r1, [r7, #24]
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	617b      	str	r3, [r7, #20]
   return(result);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e3      	bne.n	8007350 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800738e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f83d 	bl	8007414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800739a:	e023      	b.n	80073e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d009      	beq.n	80073bc <HAL_UART_IRQHandler+0x4f4>
 80073a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f943 	bl	8007640 <UART_Transmit_IT>
    return;
 80073ba:	e014      	b.n	80073e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00e      	beq.n	80073e6 <HAL_UART_IRQHandler+0x51e>
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f983 	bl	80076e0 <UART_EndTransmit_IT>
    return;
 80073da:	e004      	b.n	80073e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80073dc:	bf00      	nop
 80073de:	e002      	b.n	80073e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80073e4:	bf00      	nop
  }
}
 80073e6:	37e8      	adds	r7, #232	; 0xe8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4613      	mov	r3, r2
 800743a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743c:	e03b      	b.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d037      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007446:	f7fc facf 	bl	80039e8 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	6a3a      	ldr	r2, [r7, #32]
 8007452:	429a      	cmp	r2, r3
 8007454:	d302      	bcc.n	800745c <UART_WaitOnFlagUntilTimeout+0x30>
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e03a      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f003 0304 	and.w	r3, r3, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d023      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d020      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d01d      	beq.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0308 	and.w	r3, r3, #8
 8007484:	2b08      	cmp	r3, #8
 8007486:	d116      	bne.n	80074b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 f857 	bl	8007552 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2208      	movs	r2, #8
 80074a8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e00f      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4013      	ands	r3, r2
 80074c0:	68ba      	ldr	r2, [r7, #8]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	bf0c      	ite	eq
 80074c6:	2301      	moveq	r3, #1
 80074c8:	2300      	movne	r3, #0
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	79fb      	ldrb	r3, [r7, #7]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d0b4      	beq.n	800743e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	4613      	mov	r3, r2
 80074ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	88fa      	ldrh	r2, [r7, #6]
 80074f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2222      	movs	r2, #34	; 0x22
 8007508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007522:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	695a      	ldr	r2, [r3, #20]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0220 	orr.w	r2, r2, #32
 8007542:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007552:	b480      	push	{r7}
 8007554:	b095      	sub	sp, #84	; 0x54
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800757a:	643a      	str	r2, [r7, #64]	; 0x40
 800757c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e5      	bne.n	800755a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3314      	adds	r3, #20
 8007594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	61fb      	str	r3, [r7, #28]
   return(result);
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3314      	adds	r3, #20
 80075ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e5      	bne.n	800758e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d119      	bne.n	80075fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f023 0310 	bic.w	r3, r3, #16
 80075e0:	647b      	str	r3, [r7, #68]	; 0x44
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075ea:	61ba      	str	r2, [r7, #24]
 80075ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6979      	ldr	r1, [r7, #20]
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	613b      	str	r3, [r7, #16]
   return(result);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e5      	bne.n	80075ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800760c:	bf00      	nop
 800760e:	3754      	adds	r7, #84	; 0x54
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fee4 	bl	8007400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007638:	bf00      	nop
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b21      	cmp	r3, #33	; 0x21
 8007652:	d13e      	bne.n	80076d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765c:	d114      	bne.n	8007688 <UART_Transmit_IT+0x48>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d110      	bne.n	8007688 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800767a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	1c9a      	adds	r2, r3, #2
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	621a      	str	r2, [r3, #32]
 8007686:	e008      	b.n	800769a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	1c59      	adds	r1, r3, #1
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6211      	str	r1, [r2, #32]
 8007692:	781a      	ldrb	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	4619      	mov	r1, r3
 80076a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10f      	bne.n	80076ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80076d2:	2302      	movs	r3, #2
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fe73 	bl	80073ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08c      	sub	sp, #48	; 0x30
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b22      	cmp	r3, #34	; 0x22
 8007722:	f040 80ae 	bne.w	8007882 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772e:	d117      	bne.n	8007760 <UART_Receive_IT+0x50>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d113      	bne.n	8007760 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007738:	2300      	movs	r3, #0
 800773a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007740:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	b29b      	uxth	r3, r3
 800774a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774e:	b29a      	uxth	r2, r3
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	1c9a      	adds	r2, r3, #2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	629a      	str	r2, [r3, #40]	; 0x28
 800775e:	e026      	b.n	80077ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007766:	2300      	movs	r3, #0
 8007768:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007772:	d007      	beq.n	8007784 <UART_Receive_IT+0x74>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <UART_Receive_IT+0x82>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	b2da      	uxtb	r2, r3
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	e008      	b.n	80077a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	3b01      	subs	r3, #1
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4619      	mov	r1, r3
 80077bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d15d      	bne.n	800787e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68da      	ldr	r2, [r3, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0220 	bic.w	r2, r2, #32
 80077d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695a      	ldr	r2, [r3, #20]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0201 	bic.w	r2, r2, #1
 80077f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	2b01      	cmp	r3, #1
 8007806:	d135      	bne.n	8007874 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	330c      	adds	r3, #12
 8007814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	613b      	str	r3, [r7, #16]
   return(result);
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f023 0310 	bic.w	r3, r3, #16
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	330c      	adds	r3, #12
 800782c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782e:	623a      	str	r2, [r7, #32]
 8007830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	69f9      	ldr	r1, [r7, #28]
 8007834:	6a3a      	ldr	r2, [r7, #32]
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	61bb      	str	r3, [r7, #24]
   return(result);
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e5      	bne.n	800780e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b10      	cmp	r3, #16
 800784e:	d10a      	bne.n	8007866 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff fdd1 	bl	8007414 <HAL_UARTEx_RxEventCallback>
 8007872:	e002      	b.n	800787a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fa f83f 	bl	80018f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	e002      	b.n	8007884 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	e000      	b.n	8007884 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007882:	2302      	movs	r3, #2
  }
}
 8007884:	4618      	mov	r0, r3
 8007886:	3730      	adds	r7, #48	; 0x30
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800788c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007890:	b0c0      	sub	sp, #256	; 0x100
 8007892:	af00      	add	r7, sp, #0
 8007894:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80078a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078a8:	68d9      	ldr	r1, [r3, #12]
 80078aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	ea40 0301 	orr.w	r3, r0, r1
 80078b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80078b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	431a      	orrs	r2, r3
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d0:	69db      	ldr	r3, [r3, #28]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80078e4:	f021 010c 	bic.w	r1, r1, #12
 80078e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80078f2:	430b      	orrs	r3, r1
 80078f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007906:	6999      	ldr	r1, [r3, #24]
 8007908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	ea40 0301 	orr.w	r3, r0, r1
 8007912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b8f      	ldr	r3, [pc, #572]	; (8007b58 <UART_SetConfig+0x2cc>)
 800791c:	429a      	cmp	r2, r3
 800791e:	d005      	beq.n	800792c <UART_SetConfig+0xa0>
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4b8d      	ldr	r3, [pc, #564]	; (8007b5c <UART_SetConfig+0x2d0>)
 8007928:	429a      	cmp	r2, r3
 800792a:	d104      	bne.n	8007936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800792c:	f7fe f8ea 	bl	8005b04 <HAL_RCC_GetPCLK2Freq>
 8007930:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007934:	e003      	b.n	800793e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007936:	f7fe f8d1 	bl	8005adc <HAL_RCC_GetPCLK1Freq>
 800793a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800793e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007948:	f040 810c 	bne.w	8007b64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800794c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007950:	2200      	movs	r2, #0
 8007952:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007956:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800795a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800795e:	4622      	mov	r2, r4
 8007960:	462b      	mov	r3, r5
 8007962:	1891      	adds	r1, r2, r2
 8007964:	65b9      	str	r1, [r7, #88]	; 0x58
 8007966:	415b      	adcs	r3, r3
 8007968:	65fb      	str	r3, [r7, #92]	; 0x5c
 800796a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800796e:	4621      	mov	r1, r4
 8007970:	eb12 0801 	adds.w	r8, r2, r1
 8007974:	4629      	mov	r1, r5
 8007976:	eb43 0901 	adc.w	r9, r3, r1
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800798a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800798e:	4690      	mov	r8, r2
 8007990:	4699      	mov	r9, r3
 8007992:	4623      	mov	r3, r4
 8007994:	eb18 0303 	adds.w	r3, r8, r3
 8007998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800799c:	462b      	mov	r3, r5
 800799e:	eb49 0303 	adc.w	r3, r9, r3
 80079a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80079a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80079b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079ba:	460b      	mov	r3, r1
 80079bc:	18db      	adds	r3, r3, r3
 80079be:	653b      	str	r3, [r7, #80]	; 0x50
 80079c0:	4613      	mov	r3, r2
 80079c2:	eb42 0303 	adc.w	r3, r2, r3
 80079c6:	657b      	str	r3, [r7, #84]	; 0x54
 80079c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80079cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80079d0:	f7f9 f8e2 	bl	8000b98 <__aeabi_uldivmod>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4b61      	ldr	r3, [pc, #388]	; (8007b60 <UART_SetConfig+0x2d4>)
 80079da:	fba3 2302 	umull	r2, r3, r3, r2
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	011c      	lsls	r4, r3, #4
 80079e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80079f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80079f4:	4642      	mov	r2, r8
 80079f6:	464b      	mov	r3, r9
 80079f8:	1891      	adds	r1, r2, r2
 80079fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80079fc:	415b      	adcs	r3, r3
 80079fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007a04:	4641      	mov	r1, r8
 8007a06:	eb12 0a01 	adds.w	sl, r2, r1
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	eb43 0b01 	adc.w	fp, r3, r1
 8007a10:	f04f 0200 	mov.w	r2, #0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007a1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a24:	4692      	mov	sl, r2
 8007a26:	469b      	mov	fp, r3
 8007a28:	4643      	mov	r3, r8
 8007a2a:	eb1a 0303 	adds.w	r3, sl, r3
 8007a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a32:	464b      	mov	r3, r9
 8007a34:	eb4b 0303 	adc.w	r3, fp, r3
 8007a38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007a4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007a50:	460b      	mov	r3, r1
 8007a52:	18db      	adds	r3, r3, r3
 8007a54:	643b      	str	r3, [r7, #64]	; 0x40
 8007a56:	4613      	mov	r3, r2
 8007a58:	eb42 0303 	adc.w	r3, r2, r3
 8007a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007a66:	f7f9 f897 	bl	8000b98 <__aeabi_uldivmod>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4b3b      	ldr	r3, [pc, #236]	; (8007b60 <UART_SetConfig+0x2d4>)
 8007a72:	fba3 2301 	umull	r2, r3, r3, r1
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	2264      	movs	r2, #100	; 0x64
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	1acb      	subs	r3, r1, r3
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007a86:	4b36      	ldr	r3, [pc, #216]	; (8007b60 <UART_SetConfig+0x2d4>)
 8007a88:	fba3 2302 	umull	r2, r3, r3, r2
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a94:	441c      	add	r4, r3
 8007a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007aa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	464b      	mov	r3, r9
 8007aac:	1891      	adds	r1, r2, r2
 8007aae:	63b9      	str	r1, [r7, #56]	; 0x38
 8007ab0:	415b      	adcs	r3, r3
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007ab8:	4641      	mov	r1, r8
 8007aba:	1851      	adds	r1, r2, r1
 8007abc:	6339      	str	r1, [r7, #48]	; 0x30
 8007abe:	4649      	mov	r1, r9
 8007ac0:	414b      	adcs	r3, r1
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ad0:	4659      	mov	r1, fp
 8007ad2:	00cb      	lsls	r3, r1, #3
 8007ad4:	4651      	mov	r1, sl
 8007ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ada:	4651      	mov	r1, sl
 8007adc:	00ca      	lsls	r2, r1, #3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4642      	mov	r2, r8
 8007ae6:	189b      	adds	r3, r3, r2
 8007ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007aec:	464b      	mov	r3, r9
 8007aee:	460a      	mov	r2, r1
 8007af0:	eb42 0303 	adc.w	r3, r2, r3
 8007af4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007b04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	18db      	adds	r3, r3, r3
 8007b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b12:	4613      	mov	r3, r2
 8007b14:	eb42 0303 	adc.w	r3, r2, r3
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007b22:	f7f9 f839 	bl	8000b98 <__aeabi_uldivmod>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	; (8007b60 <UART_SetConfig+0x2d4>)
 8007b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b30:	095b      	lsrs	r3, r3, #5
 8007b32:	2164      	movs	r1, #100	; 0x64
 8007b34:	fb01 f303 	mul.w	r3, r1, r3
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	3332      	adds	r3, #50	; 0x32
 8007b3e:	4a08      	ldr	r2, [pc, #32]	; (8007b60 <UART_SetConfig+0x2d4>)
 8007b40:	fba2 2303 	umull	r2, r3, r2, r3
 8007b44:	095b      	lsrs	r3, r3, #5
 8007b46:	f003 0207 	and.w	r2, r3, #7
 8007b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4422      	add	r2, r4
 8007b52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b54:	e106      	b.n	8007d64 <UART_SetConfig+0x4d8>
 8007b56:	bf00      	nop
 8007b58:	40011000 	.word	0x40011000
 8007b5c:	40011400 	.word	0x40011400
 8007b60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007b72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007b76:	4642      	mov	r2, r8
 8007b78:	464b      	mov	r3, r9
 8007b7a:	1891      	adds	r1, r2, r2
 8007b7c:	6239      	str	r1, [r7, #32]
 8007b7e:	415b      	adcs	r3, r3
 8007b80:	627b      	str	r3, [r7, #36]	; 0x24
 8007b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b86:	4641      	mov	r1, r8
 8007b88:	1854      	adds	r4, r2, r1
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	eb43 0501 	adc.w	r5, r3, r1
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	00eb      	lsls	r3, r5, #3
 8007b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b9e:	00e2      	lsls	r2, r4, #3
 8007ba0:	4614      	mov	r4, r2
 8007ba2:	461d      	mov	r5, r3
 8007ba4:	4643      	mov	r3, r8
 8007ba6:	18e3      	adds	r3, r4, r3
 8007ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bac:	464b      	mov	r3, r9
 8007bae:	eb45 0303 	adc.w	r3, r5, r3
 8007bb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007bc6:	f04f 0200 	mov.w	r2, #0
 8007bca:	f04f 0300 	mov.w	r3, #0
 8007bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	008b      	lsls	r3, r1, #2
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bdc:	4621      	mov	r1, r4
 8007bde:	008a      	lsls	r2, r1, #2
 8007be0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007be4:	f7f8 ffd8 	bl	8000b98 <__aeabi_uldivmod>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4b60      	ldr	r3, [pc, #384]	; (8007d70 <UART_SetConfig+0x4e4>)
 8007bee:	fba3 2302 	umull	r2, r3, r3, r2
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	011c      	lsls	r4, r3, #4
 8007bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007c00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	1891      	adds	r1, r2, r2
 8007c0e:	61b9      	str	r1, [r7, #24]
 8007c10:	415b      	adcs	r3, r3
 8007c12:	61fb      	str	r3, [r7, #28]
 8007c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c18:	4641      	mov	r1, r8
 8007c1a:	1851      	adds	r1, r2, r1
 8007c1c:	6139      	str	r1, [r7, #16]
 8007c1e:	4649      	mov	r1, r9
 8007c20:	414b      	adcs	r3, r1
 8007c22:	617b      	str	r3, [r7, #20]
 8007c24:	f04f 0200 	mov.w	r2, #0
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c30:	4659      	mov	r1, fp
 8007c32:	00cb      	lsls	r3, r1, #3
 8007c34:	4651      	mov	r1, sl
 8007c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c3a:	4651      	mov	r1, sl
 8007c3c:	00ca      	lsls	r2, r1, #3
 8007c3e:	4610      	mov	r0, r2
 8007c40:	4619      	mov	r1, r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	4642      	mov	r2, r8
 8007c46:	189b      	adds	r3, r3, r2
 8007c48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c4c:	464b      	mov	r3, r9
 8007c4e:	460a      	mov	r2, r1
 8007c50:	eb42 0303 	adc.w	r3, r2, r3
 8007c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	f04f 0300 	mov.w	r3, #0
 8007c6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007c70:	4649      	mov	r1, r9
 8007c72:	008b      	lsls	r3, r1, #2
 8007c74:	4641      	mov	r1, r8
 8007c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c7a:	4641      	mov	r1, r8
 8007c7c:	008a      	lsls	r2, r1, #2
 8007c7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007c82:	f7f8 ff89 	bl	8000b98 <__aeabi_uldivmod>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4b38      	ldr	r3, [pc, #224]	; (8007d70 <UART_SetConfig+0x4e4>)
 8007c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	2264      	movs	r2, #100	; 0x64
 8007c96:	fb02 f303 	mul.w	r3, r2, r3
 8007c9a:	1acb      	subs	r3, r1, r3
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	3332      	adds	r3, #50	; 0x32
 8007ca0:	4a33      	ldr	r2, [pc, #204]	; (8007d70 <UART_SetConfig+0x4e4>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cac:	441c      	add	r4, r3
 8007cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	673b      	str	r3, [r7, #112]	; 0x70
 8007cb6:	677a      	str	r2, [r7, #116]	; 0x74
 8007cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	1891      	adds	r1, r2, r2
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	415b      	adcs	r3, r3
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ccc:	4641      	mov	r1, r8
 8007cce:	1851      	adds	r1, r2, r1
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	4649      	mov	r1, r9
 8007cd4:	414b      	adcs	r3, r1
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	f04f 0200 	mov.w	r2, #0
 8007cdc:	f04f 0300 	mov.w	r3, #0
 8007ce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ce4:	4659      	mov	r1, fp
 8007ce6:	00cb      	lsls	r3, r1, #3
 8007ce8:	4651      	mov	r1, sl
 8007cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cee:	4651      	mov	r1, sl
 8007cf0:	00ca      	lsls	r2, r1, #3
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	189b      	adds	r3, r3, r2
 8007cfc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cfe:	464b      	mov	r3, r9
 8007d00:	460a      	mov	r2, r1
 8007d02:	eb42 0303 	adc.w	r3, r2, r3
 8007d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	663b      	str	r3, [r7, #96]	; 0x60
 8007d12:	667a      	str	r2, [r7, #100]	; 0x64
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007d20:	4649      	mov	r1, r9
 8007d22:	008b      	lsls	r3, r1, #2
 8007d24:	4641      	mov	r1, r8
 8007d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d2a:	4641      	mov	r1, r8
 8007d2c:	008a      	lsls	r2, r1, #2
 8007d2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007d32:	f7f8 ff31 	bl	8000b98 <__aeabi_uldivmod>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4b0d      	ldr	r3, [pc, #52]	; (8007d70 <UART_SetConfig+0x4e4>)
 8007d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d40:	095b      	lsrs	r3, r3, #5
 8007d42:	2164      	movs	r1, #100	; 0x64
 8007d44:	fb01 f303 	mul.w	r3, r1, r3
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	011b      	lsls	r3, r3, #4
 8007d4c:	3332      	adds	r3, #50	; 0x32
 8007d4e:	4a08      	ldr	r2, [pc, #32]	; (8007d70 <UART_SetConfig+0x4e4>)
 8007d50:	fba2 2303 	umull	r2, r3, r2, r3
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	f003 020f 	and.w	r2, r3, #15
 8007d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4422      	add	r2, r4
 8007d62:	609a      	str	r2, [r3, #8]
}
 8007d64:	bf00      	nop
 8007d66:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d70:	51eb851f 	.word	0x51eb851f

08007d74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007d78:	4904      	ldr	r1, [pc, #16]	; (8007d8c <MX_FATFS_Init+0x18>)
 8007d7a:	4805      	ldr	r0, [pc, #20]	; (8007d90 <MX_FATFS_Init+0x1c>)
 8007d7c:	f002 ff7a 	bl	800ac74 <FATFS_LinkDriver>
 8007d80:	4603      	mov	r3, r0
 8007d82:	461a      	mov	r2, r3
 8007d84:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <MX_FATFS_Init+0x20>)
 8007d86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007d88:	bf00      	nop
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	200026d4 	.word	0x200026d4
 8007d90:	20000014 	.word	0x20000014
 8007d94:	200026d0 	.word	0x200026d0

08007d98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007d9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	4603      	mov	r3, r0
 8007db0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	SD_disk_initialize (pdrv);
 8007db2:	79fb      	ldrb	r3, [r7, #7]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7f9 fa21 	bl	80011fc <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8007dba:	bf00      	nop
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SD_disk_status (pdrv);
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7f9 faf9 	bl	80013c8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8007dd6:	bf00      	nop
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SD_disk_read (pdrv, buff, sector, count);
 8007df0:	7bf8      	ldrb	r0, [r7, #15]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	68b9      	ldr	r1, [r7, #8]
 8007df8:	f7f9 fafc 	bl	80013f4 <SD_disk_read>
  /* USER CODE END READ */
}
 8007dfc:	bf00      	nop
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	SD_disk_write (pdrv, buff, sector, count);
 8007e16:	7bf8      	ldrb	r0, [r7, #15]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	68b9      	ldr	r1, [r7, #8]
 8007e1e:	f7f9 fb53 	bl	80014c8 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8007e22:	bf00      	nop
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	603a      	str	r2, [r7, #0]
 8007e36:	71fb      	strb	r3, [r7, #7]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	SD_disk_ioctl (pdrv, cmd, buff);
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	79b9      	ldrb	r1, [r7, #6]
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7f9 fbc4 	bl	80015d0 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8007e48:	bf00      	nop
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	4a08      	ldr	r2, [pc, #32]	; (8007e84 <disk_status+0x30>)
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	79fa      	ldrb	r2, [r7, #7]
 8007e6c:	4905      	ldr	r1, [pc, #20]	; (8007e84 <disk_status+0x30>)
 8007e6e:	440a      	add	r2, r1
 8007e70:	7a12      	ldrb	r2, [r2, #8]
 8007e72:	4610      	mov	r0, r2
 8007e74:	4798      	blx	r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20002900 	.word	0x20002900

08007e88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	4a0e      	ldr	r2, [pc, #56]	; (8007ed4 <disk_initialize+0x4c>)
 8007e9a:	5cd3      	ldrb	r3, [r2, r3]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d114      	bne.n	8007eca <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	4a0c      	ldr	r2, [pc, #48]	; (8007ed4 <disk_initialize+0x4c>)
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	79fa      	ldrb	r2, [r7, #7]
 8007eae:	4909      	ldr	r1, [pc, #36]	; (8007ed4 <disk_initialize+0x4c>)
 8007eb0:	440a      	add	r2, r1
 8007eb2:	7a12      	ldrb	r2, [r2, #8]
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d103      	bne.n	8007eca <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	4a03      	ldr	r2, [pc, #12]	; (8007ed4 <disk_initialize+0x4c>)
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20002900 	.word	0x20002900

08007ed8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007ed8:	b590      	push	{r4, r7, lr}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
 8007eea:	4a0a      	ldr	r2, [pc, #40]	; (8007f14 <disk_read+0x3c>)
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	689c      	ldr	r4, [r3, #8]
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <disk_read+0x3c>)
 8007ef8:	4413      	add	r3, r2
 8007efa:	7a18      	ldrb	r0, [r3, #8]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	68b9      	ldr	r1, [r7, #8]
 8007f02:	47a0      	blx	r4
 8007f04:	4603      	mov	r3, r0
 8007f06:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd90      	pop	{r4, r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20002900 	.word	0x20002900

08007f18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007f18:	b590      	push	{r4, r7, lr}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	4a0a      	ldr	r2, [pc, #40]	; (8007f54 <disk_write+0x3c>)
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	68dc      	ldr	r4, [r3, #12]
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	4a07      	ldr	r2, [pc, #28]	; (8007f54 <disk_write+0x3c>)
 8007f38:	4413      	add	r3, r2
 8007f3a:	7a18      	ldrb	r0, [r3, #8]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	47a0      	blx	r4
 8007f44:	4603      	mov	r3, r0
 8007f46:	75fb      	strb	r3, [r7, #23]
  return res;
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd90      	pop	{r4, r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20002900 	.word	0x20002900

08007f58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	4603      	mov	r3, r0
 8007f60:	603a      	str	r2, [r7, #0]
 8007f62:	71fb      	strb	r3, [r7, #7]
 8007f64:	460b      	mov	r3, r1
 8007f66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	4a09      	ldr	r2, [pc, #36]	; (8007f90 <disk_ioctl+0x38>)
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	79fa      	ldrb	r2, [r7, #7]
 8007f76:	4906      	ldr	r1, [pc, #24]	; (8007f90 <disk_ioctl+0x38>)
 8007f78:	440a      	add	r2, r1
 8007f7a:	7a10      	ldrb	r0, [r2, #8]
 8007f7c:	79b9      	ldrb	r1, [r7, #6]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4798      	blx	r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
  return res;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20002900 	.word	0x20002900

08007f94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007fa4:	89fb      	ldrh	r3, [r7, #14]
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	b21a      	sxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	b21b      	sxth	r3, r3
 8007fb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007fb6:	89fb      	ldrh	r3, [r7, #14]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3303      	adds	r3, #3
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	3202      	adds	r2, #2
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	3201      	adds	r2, #1
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	021b      	lsls	r3, r3, #8
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	7812      	ldrb	r2, [r2, #0]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
	return rv;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	887a      	ldrh	r2, [r7, #2]
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	887b      	ldrh	r3, [r7, #2]
 8008024:	0a1b      	lsrs	r3, r3, #8
 8008026:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	887a      	ldrh	r2, [r7, #2]
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	b2d2      	uxtb	r2, r2
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	0a1b      	lsrs	r3, r3, #8
 800805a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	b2d2      	uxtb	r2, r2
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	0a1b      	lsrs	r3, r3, #8
 800806c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	b2d2      	uxtb	r2, r2
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	0a1b      	lsrs	r3, r3, #8
 800807e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	701a      	strb	r2, [r3, #0]
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00d      	beq.n	80080ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	1c53      	adds	r3, r2, #1
 80080b6:	613b      	str	r3, [r7, #16]
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	1c59      	adds	r1, r3, #1
 80080bc:	6179      	str	r1, [r7, #20]
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	607b      	str	r3, [r7, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f1      	bne.n	80080b2 <mem_cpy+0x1a>
	}
}
 80080ce:	bf00      	nop
 80080d0:	371c      	adds	r7, #28
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80080da:	b480      	push	{r7}
 80080dc:	b087      	sub	sp, #28
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	617a      	str	r2, [r7, #20]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	b2d2      	uxtb	r2, r2
 80080f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	607b      	str	r3, [r7, #4]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1f3      	bne.n	80080ea <mem_set+0x10>
}
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008110:	b480      	push	{r7}
 8008112:	b089      	sub	sp, #36	; 0x24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	61fa      	str	r2, [r7, #28]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	4619      	mov	r1, r3
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	61ba      	str	r2, [r7, #24]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	1acb      	subs	r3, r1, r3
 800813c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3b01      	subs	r3, #1
 8008142:	607b      	str	r3, [r7, #4]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <mem_cmp+0x40>
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0eb      	beq.n	8008128 <mem_cmp+0x18>

	return r;
 8008150:	697b      	ldr	r3, [r7, #20]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3724      	adds	r7, #36	; 0x24
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008168:	e002      	b.n	8008170 <chk_chr+0x12>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3301      	adds	r3, #1
 800816e:	607b      	str	r3, [r7, #4]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <chk_chr+0x26>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	461a      	mov	r2, r3
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	4293      	cmp	r3, r2
 8008182:	d1f2      	bne.n	800816a <chk_chr+0xc>
	return *str;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	781b      	ldrb	r3, [r3, #0]
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	e029      	b.n	80081fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80081a8:	4a27      	ldr	r2, [pc, #156]	; (8008248 <chk_lock+0xb4>)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	011b      	lsls	r3, r3, #4
 80081ae:	4413      	add	r3, r2
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d01d      	beq.n	80081f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081b6:	4a24      	ldr	r2, [pc, #144]	; (8008248 <chk_lock+0xb4>)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	4413      	add	r3, r2
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d116      	bne.n	80081f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80081c8:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <chk_lock+0xb4>)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	4413      	add	r3, r2
 80081d0:	3304      	adds	r3, #4
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80081d8:	429a      	cmp	r2, r3
 80081da:	d10c      	bne.n	80081f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80081dc:	4a1a      	ldr	r2, [pc, #104]	; (8008248 <chk_lock+0xb4>)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	4413      	add	r3, r2
 80081e4:	3308      	adds	r3, #8
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d102      	bne.n	80081f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80081f0:	e007      	b.n	8008202 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80081f2:	2301      	movs	r3, #1
 80081f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d9d2      	bls.n	80081a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b02      	cmp	r3, #2
 8008206:	d109      	bne.n	800821c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <chk_lock+0x80>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d101      	bne.n	8008218 <chk_lock+0x84>
 8008214:	2300      	movs	r3, #0
 8008216:	e010      	b.n	800823a <chk_lock+0xa6>
 8008218:	2312      	movs	r3, #18
 800821a:	e00e      	b.n	800823a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d108      	bne.n	8008234 <chk_lock+0xa0>
 8008222:	4a09      	ldr	r2, [pc, #36]	; (8008248 <chk_lock+0xb4>)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	4413      	add	r3, r2
 800822a:	330c      	adds	r3, #12
 800822c:	881b      	ldrh	r3, [r3, #0]
 800822e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008232:	d101      	bne.n	8008238 <chk_lock+0xa4>
 8008234:	2310      	movs	r3, #16
 8008236:	e000      	b.n	800823a <chk_lock+0xa6>
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	200026e0 	.word	0x200026e0

0800824c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008252:	2300      	movs	r3, #0
 8008254:	607b      	str	r3, [r7, #4]
 8008256:	e002      	b.n	800825e <enq_lock+0x12>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3301      	adds	r3, #1
 800825c:	607b      	str	r3, [r7, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d806      	bhi.n	8008272 <enq_lock+0x26>
 8008264:	4a09      	ldr	r2, [pc, #36]	; (800828c <enq_lock+0x40>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	4413      	add	r3, r2
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1f2      	bne.n	8008258 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b02      	cmp	r3, #2
 8008276:	bf14      	ite	ne
 8008278:	2301      	movne	r3, #1
 800827a:	2300      	moveq	r3, #0
 800827c:	b2db      	uxtb	r3, r3
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	200026e0 	.word	0x200026e0

08008290 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	e01f      	b.n	80082e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80082a0:	4a41      	ldr	r2, [pc, #260]	; (80083a8 <inc_lock+0x118>)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	011b      	lsls	r3, r3, #4
 80082a6:	4413      	add	r3, r2
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d113      	bne.n	80082da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80082b2:	4a3d      	ldr	r2, [pc, #244]	; (80083a8 <inc_lock+0x118>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	4413      	add	r3, r2
 80082ba:	3304      	adds	r3, #4
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d109      	bne.n	80082da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80082c6:	4a38      	ldr	r2, [pc, #224]	; (80083a8 <inc_lock+0x118>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	4413      	add	r3, r2
 80082ce:	3308      	adds	r3, #8
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d006      	beq.n	80082e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3301      	adds	r3, #1
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d9dc      	bls.n	80082a0 <inc_lock+0x10>
 80082e6:	e000      	b.n	80082ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80082e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d132      	bne.n	8008356 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
 80082f4:	e002      	b.n	80082fc <inc_lock+0x6c>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3301      	adds	r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d806      	bhi.n	8008310 <inc_lock+0x80>
 8008302:	4a29      	ldr	r2, [pc, #164]	; (80083a8 <inc_lock+0x118>)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	4413      	add	r3, r2
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1f2      	bne.n	80082f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d101      	bne.n	800831a <inc_lock+0x8a>
 8008316:	2300      	movs	r3, #0
 8008318:	e040      	b.n	800839c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	4922      	ldr	r1, [pc, #136]	; (80083a8 <inc_lock+0x118>)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	440b      	add	r3, r1
 8008326:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	491e      	ldr	r1, [pc, #120]	; (80083a8 <inc_lock+0x118>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	440b      	add	r3, r1
 8008334:	3304      	adds	r3, #4
 8008336:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	695a      	ldr	r2, [r3, #20]
 800833c:	491a      	ldr	r1, [pc, #104]	; (80083a8 <inc_lock+0x118>)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	011b      	lsls	r3, r3, #4
 8008342:	440b      	add	r3, r1
 8008344:	3308      	adds	r3, #8
 8008346:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008348:	4a17      	ldr	r2, [pc, #92]	; (80083a8 <inc_lock+0x118>)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	4413      	add	r3, r2
 8008350:	330c      	adds	r3, #12
 8008352:	2200      	movs	r2, #0
 8008354:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d009      	beq.n	8008370 <inc_lock+0xe0>
 800835c:	4a12      	ldr	r2, [pc, #72]	; (80083a8 <inc_lock+0x118>)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	4413      	add	r3, r2
 8008364:	330c      	adds	r3, #12
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <inc_lock+0xe0>
 800836c:	2300      	movs	r3, #0
 800836e:	e015      	b.n	800839c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d108      	bne.n	8008388 <inc_lock+0xf8>
 8008376:	4a0c      	ldr	r2, [pc, #48]	; (80083a8 <inc_lock+0x118>)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	011b      	lsls	r3, r3, #4
 800837c:	4413      	add	r3, r2
 800837e:	330c      	adds	r3, #12
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	3301      	adds	r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	e001      	b.n	800838c <inc_lock+0xfc>
 8008388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800838c:	4906      	ldr	r1, [pc, #24]	; (80083a8 <inc_lock+0x118>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	440b      	add	r3, r1
 8008394:	330c      	adds	r3, #12
 8008396:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	3301      	adds	r3, #1
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	200026e0 	.word	0x200026e0

080083ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	607b      	str	r3, [r7, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d825      	bhi.n	800840c <dec_lock+0x60>
		n = Files[i].ctr;
 80083c0:	4a17      	ldr	r2, [pc, #92]	; (8008420 <dec_lock+0x74>)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	4413      	add	r3, r2
 80083c8:	330c      	adds	r3, #12
 80083ca:	881b      	ldrh	r3, [r3, #0]
 80083cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80083ce:	89fb      	ldrh	r3, [r7, #14]
 80083d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d4:	d101      	bne.n	80083da <dec_lock+0x2e>
 80083d6:	2300      	movs	r3, #0
 80083d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80083da:	89fb      	ldrh	r3, [r7, #14]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <dec_lock+0x3a>
 80083e0:	89fb      	ldrh	r3, [r7, #14]
 80083e2:	3b01      	subs	r3, #1
 80083e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80083e6:	4a0e      	ldr	r2, [pc, #56]	; (8008420 <dec_lock+0x74>)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	4413      	add	r3, r2
 80083ee:	330c      	adds	r3, #12
 80083f0:	89fa      	ldrh	r2, [r7, #14]
 80083f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80083f4:	89fb      	ldrh	r3, [r7, #14]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d105      	bne.n	8008406 <dec_lock+0x5a>
 80083fa:	4a09      	ldr	r2, [pc, #36]	; (8008420 <dec_lock+0x74>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	011b      	lsls	r3, r3, #4
 8008400:	4413      	add	r3, r2
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	737b      	strb	r3, [r7, #13]
 800840a:	e001      	b.n	8008410 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800840c:	2302      	movs	r3, #2
 800840e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008410:	7b7b      	ldrb	r3, [r7, #13]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	200026e0 	.word	0x200026e0

08008424 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	e010      	b.n	8008454 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008432:	4a0d      	ldr	r2, [pc, #52]	; (8008468 <clear_lock+0x44>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	011b      	lsls	r3, r3, #4
 8008438:	4413      	add	r3, r2
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	429a      	cmp	r2, r3
 8008440:	d105      	bne.n	800844e <clear_lock+0x2a>
 8008442:	4a09      	ldr	r2, [pc, #36]	; (8008468 <clear_lock+0x44>)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	4413      	add	r3, r2
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	3301      	adds	r3, #1
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d9eb      	bls.n	8008432 <clear_lock+0xe>
	}
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	200026e0 	.word	0x200026e0

0800846c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	78db      	ldrb	r3, [r3, #3]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d034      	beq.n	80084ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008484:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	7858      	ldrb	r0, [r3, #1]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008490:	2301      	movs	r3, #1
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	f7ff fd40 	bl	8007f18 <disk_write>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]
 80084a2:	e022      	b.n	80084ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	1ad2      	subs	r2, r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d217      	bcs.n	80084ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	789b      	ldrb	r3, [r3, #2]
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	e010      	b.n	80084e4 <sync_window+0x78>
					wsect += fs->fsize;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	4413      	add	r3, r2
 80084ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	7858      	ldrb	r0, [r3, #1]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80084d6:	2301      	movs	r3, #1
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	f7ff fd1d 	bl	8007f18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	613b      	str	r3, [r7, #16]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d8eb      	bhi.n	80084c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d01b      	beq.n	8008544 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7ff ffad 	bl	800846c <sync_window>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d113      	bne.n	8008544 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	7858      	ldrb	r0, [r3, #1]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008526:	2301      	movs	r3, #1
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	f7ff fcd5 	bl	8007ed8 <disk_read>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d004      	beq.n	800853e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008534:	f04f 33ff 	mov.w	r3, #4294967295
 8008538:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800853a:	2301      	movs	r3, #1
 800853c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008544:	7bfb      	ldrb	r3, [r7, #15]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f7ff ff87 	bl	800846c <sync_window>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d159      	bne.n	800861c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	2b03      	cmp	r3, #3
 800856e:	d149      	bne.n	8008604 <sync_fs+0xb4>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	791b      	ldrb	r3, [r3, #4]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d145      	bne.n	8008604 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	899b      	ldrh	r3, [r3, #12]
 8008582:	461a      	mov	r2, r3
 8008584:	2100      	movs	r1, #0
 8008586:	f7ff fda8 	bl	80080da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3338      	adds	r3, #56	; 0x38
 800858e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008592:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fd37 	bl	800800a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3338      	adds	r3, #56	; 0x38
 80085a0:	4921      	ldr	r1, [pc, #132]	; (8008628 <sync_fs+0xd8>)
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff fd4c 	bl	8008040 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3338      	adds	r3, #56	; 0x38
 80085ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085b0:	491e      	ldr	r1, [pc, #120]	; (800862c <sync_fs+0xdc>)
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fd44 	bl	8008040 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3338      	adds	r3, #56	; 0x38
 80085bc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f7ff fd3a 	bl	8008040 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3338      	adds	r3, #56	; 0x38
 80085d0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	4619      	mov	r1, r3
 80085da:	4610      	mov	r0, r2
 80085dc:	f7ff fd30 	bl	8008040 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	1c5a      	adds	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	7858      	ldrb	r0, [r3, #1]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085f8:	2301      	movs	r3, #1
 80085fa:	f7ff fc8d 	bl	8007f18 <disk_write>
			fs->fsi_flag = 0;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	2200      	movs	r2, #0
 800860a:	2100      	movs	r1, #0
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff fca3 	bl	8007f58 <disk_ioctl>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <sync_fs+0xcc>
 8008618:	2301      	movs	r3, #1
 800861a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	41615252 	.word	0x41615252
 800862c:	61417272 	.word	0x61417272

08008630 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	3b02      	subs	r3, #2
 800863e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	3b02      	subs	r3, #2
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d301      	bcc.n	8008650 <clust2sect+0x20>
 800864c:	2300      	movs	r3, #0
 800864e:	e008      	b.n	8008662 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	895b      	ldrh	r3, [r3, #10]
 8008654:	461a      	mov	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	fb03 f202 	mul.w	r2, r3, r2
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008660:	4413      	add	r3, r2
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b086      	sub	sp, #24
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d904      	bls.n	800868e <get_fat+0x20>
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	429a      	cmp	r2, r3
 800868c:	d302      	bcc.n	8008694 <get_fat+0x26>
		val = 1;	/* Internal error */
 800868e:	2301      	movs	r3, #1
 8008690:	617b      	str	r3, [r7, #20]
 8008692:	e0bb      	b.n	800880c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008694:	f04f 33ff 	mov.w	r3, #4294967295
 8008698:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b03      	cmp	r3, #3
 80086a0:	f000 8083 	beq.w	80087aa <get_fat+0x13c>
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	f300 80a7 	bgt.w	80087f8 <get_fat+0x18a>
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d002      	beq.n	80086b4 <get_fat+0x46>
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d056      	beq.n	8008760 <get_fat+0xf2>
 80086b2:	e0a1      	b.n	80087f8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	899b      	ldrh	r3, [r3, #12]
 80086ca:	4619      	mov	r1, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80086d2:	4413      	add	r3, r2
 80086d4:	4619      	mov	r1, r3
 80086d6:	6938      	ldr	r0, [r7, #16]
 80086d8:	f7ff ff0c 	bl	80084f4 <move_window>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f040 808d 	bne.w	80087fe <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	60fa      	str	r2, [r7, #12]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	8992      	ldrh	r2, [r2, #12]
 80086ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80086f2:	fb01 f202 	mul.w	r2, r1, r2
 80086f6:	1a9b      	subs	r3, r3, r2
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4413      	add	r3, r2
 80086fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008700:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	899b      	ldrh	r3, [r3, #12]
 800870a:	4619      	mov	r1, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008712:	4413      	add	r3, r2
 8008714:	4619      	mov	r1, r3
 8008716:	6938      	ldr	r0, [r7, #16]
 8008718:	f7ff feec 	bl	80084f4 <move_window>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d16f      	bne.n	8008802 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	899b      	ldrh	r3, [r3, #12]
 8008726:	461a      	mov	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	fbb3 f1f2 	udiv	r1, r3, r2
 800872e:	fb01 f202 	mul.w	r2, r1, r2
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4413      	add	r3, r2
 8008738:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	461a      	mov	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4313      	orrs	r3, r2
 8008744:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <get_fat+0xe8>
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	091b      	lsrs	r3, r3, #4
 8008754:	e002      	b.n	800875c <get_fat+0xee>
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800875c:	617b      	str	r3, [r7, #20]
			break;
 800875e:	e055      	b.n	800880c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	899b      	ldrh	r3, [r3, #12]
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	b29b      	uxth	r3, r3
 800876c:	4619      	mov	r1, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	fbb3 f3f1 	udiv	r3, r3, r1
 8008774:	4413      	add	r3, r2
 8008776:	4619      	mov	r1, r3
 8008778:	6938      	ldr	r0, [r7, #16]
 800877a:	f7ff febb 	bl	80084f4 <move_window>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d140      	bne.n	8008806 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	8992      	ldrh	r2, [r2, #12]
 8008792:	fbb3 f0f2 	udiv	r0, r3, r2
 8008796:	fb00 f202 	mul.w	r2, r0, r2
 800879a:	1a9b      	subs	r3, r3, r2
 800879c:	440b      	add	r3, r1
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff fbf8 	bl	8007f94 <ld_word>
 80087a4:	4603      	mov	r3, r0
 80087a6:	617b      	str	r3, [r7, #20]
			break;
 80087a8:	e030      	b.n	800880c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	899b      	ldrh	r3, [r3, #12]
 80087b2:	089b      	lsrs	r3, r3, #2
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	4619      	mov	r1, r3
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80087be:	4413      	add	r3, r2
 80087c0:	4619      	mov	r1, r3
 80087c2:	6938      	ldr	r0, [r7, #16]
 80087c4:	f7ff fe96 	bl	80084f4 <move_window>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d11d      	bne.n	800880a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	8992      	ldrh	r2, [r2, #12]
 80087dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80087e0:	fb00 f202 	mul.w	r2, r0, r2
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	440b      	add	r3, r1
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff fbeb 	bl	8007fc4 <ld_dword>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80087f4:	617b      	str	r3, [r7, #20]
			break;
 80087f6:	e009      	b.n	800880c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80087f8:	2301      	movs	r3, #1
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e006      	b.n	800880c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80087fe:	bf00      	nop
 8008800:	e004      	b.n	800880c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008802:	bf00      	nop
 8008804:	e002      	b.n	800880c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008806:	bf00      	nop
 8008808:	e000      	b.n	800880c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800880a:	bf00      	nop
		}
	}

	return val;
 800880c:	697b      	ldr	r3, [r7, #20]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008816:	b590      	push	{r4, r7, lr}
 8008818:	b089      	sub	sp, #36	; 0x24
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	60b9      	str	r1, [r7, #8]
 8008820:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008822:	2302      	movs	r3, #2
 8008824:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b01      	cmp	r3, #1
 800882a:	f240 8109 	bls.w	8008a40 <put_fat+0x22a>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	429a      	cmp	r2, r3
 8008836:	f080 8103 	bcs.w	8008a40 <put_fat+0x22a>
		switch (fs->fs_type) {
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b03      	cmp	r3, #3
 8008840:	f000 80b6 	beq.w	80089b0 <put_fat+0x19a>
 8008844:	2b03      	cmp	r3, #3
 8008846:	f300 80fb 	bgt.w	8008a40 <put_fat+0x22a>
 800884a:	2b01      	cmp	r3, #1
 800884c:	d003      	beq.n	8008856 <put_fat+0x40>
 800884e:	2b02      	cmp	r3, #2
 8008850:	f000 8083 	beq.w	800895a <put_fat+0x144>
 8008854:	e0f4      	b.n	8008a40 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	085b      	lsrs	r3, r3, #1
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	4413      	add	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	899b      	ldrh	r3, [r3, #12]
 800886c:	4619      	mov	r1, r3
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	fbb3 f3f1 	udiv	r3, r3, r1
 8008874:	4413      	add	r3, r2
 8008876:	4619      	mov	r1, r3
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff fe3b 	bl	80084f4 <move_window>
 800887e:	4603      	mov	r3, r0
 8008880:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008882:	7ffb      	ldrb	r3, [r7, #31]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f040 80d4 	bne.w	8008a32 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	61ba      	str	r2, [r7, #24]
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	8992      	ldrh	r2, [r2, #12]
 800889a:	fbb3 f0f2 	udiv	r0, r3, r2
 800889e:	fb00 f202 	mul.w	r2, r0, r2
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	440b      	add	r3, r1
 80088a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00d      	beq.n	80088ce <put_fat+0xb8>
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	b25b      	sxtb	r3, r3
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	b25a      	sxtb	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	011b      	lsls	r3, r3, #4
 80088c4:	b25b      	sxtb	r3, r3
 80088c6:	4313      	orrs	r3, r2
 80088c8:	b25b      	sxtb	r3, r3
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	e001      	b.n	80088d2 <put_fat+0xbc>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2201      	movs	r2, #1
 80088da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	899b      	ldrh	r3, [r3, #12]
 80088e4:	4619      	mov	r1, r3
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80088ec:	4413      	add	r3, r2
 80088ee:	4619      	mov	r1, r3
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff fdff 	bl	80084f4 <move_window>
 80088f6:	4603      	mov	r3, r0
 80088f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088fa:	7ffb      	ldrb	r3, [r7, #31]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 809a 	bne.w	8008a36 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	899b      	ldrh	r3, [r3, #12]
 800890c:	461a      	mov	r2, r3
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	fbb3 f0f2 	udiv	r0, r3, r2
 8008914:	fb00 f202 	mul.w	r2, r0, r2
 8008918:	1a9b      	subs	r3, r3, r2
 800891a:	440b      	add	r3, r1
 800891c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d003      	beq.n	8008930 <put_fat+0x11a>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	b2db      	uxtb	r3, r3
 800892e:	e00e      	b.n	800894e <put_fat+0x138>
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b25b      	sxtb	r3, r3
 8008936:	f023 030f 	bic.w	r3, r3, #15
 800893a:	b25a      	sxtb	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	0a1b      	lsrs	r3, r3, #8
 8008940:	b25b      	sxtb	r3, r3
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	b25b      	sxtb	r3, r3
 8008948:	4313      	orrs	r3, r2
 800894a:	b25b      	sxtb	r3, r3
 800894c:	b2db      	uxtb	r3, r3
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2201      	movs	r2, #1
 8008956:	70da      	strb	r2, [r3, #3]
			break;
 8008958:	e072      	b.n	8008a40 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	899b      	ldrh	r3, [r3, #12]
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	b29b      	uxth	r3, r3
 8008966:	4619      	mov	r1, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	fbb3 f3f1 	udiv	r3, r3, r1
 800896e:	4413      	add	r3, r2
 8008970:	4619      	mov	r1, r3
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff fdbe 	bl	80084f4 <move_window>
 8008978:	4603      	mov	r3, r0
 800897a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800897c:	7ffb      	ldrb	r3, [r7, #31]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d15b      	bne.n	8008a3a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	8992      	ldrh	r2, [r2, #12]
 8008990:	fbb3 f0f2 	udiv	r0, r3, r2
 8008994:	fb00 f202 	mul.w	r2, r0, r2
 8008998:	1a9b      	subs	r3, r3, r2
 800899a:	440b      	add	r3, r1
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	b292      	uxth	r2, r2
 80089a0:	4611      	mov	r1, r2
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7ff fb31 	bl	800800a <st_word>
			fs->wflag = 1;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	70da      	strb	r2, [r3, #3]
			break;
 80089ae:	e047      	b.n	8008a40 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	899b      	ldrh	r3, [r3, #12]
 80089b8:	089b      	lsrs	r3, r3, #2
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80089c4:	4413      	add	r3, r2
 80089c6:	4619      	mov	r1, r3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7ff fd93 	bl	80084f4 <move_window>
 80089ce:	4603      	mov	r3, r0
 80089d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80089d2:	7ffb      	ldrb	r3, [r7, #31]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d132      	bne.n	8008a3e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	8992      	ldrh	r2, [r2, #12]
 80089ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80089f0:	fb00 f202 	mul.w	r2, r0, r2
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	440b      	add	r3, r1
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7ff fae3 	bl	8007fc4 <ld_dword>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a04:	4323      	orrs	r3, r4
 8008a06:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	8992      	ldrh	r2, [r2, #12]
 8008a16:	fbb3 f0f2 	udiv	r0, r3, r2
 8008a1a:	fb00 f202 	mul.w	r2, r0, r2
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	440b      	add	r3, r1
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7ff fb0b 	bl	8008040 <st_dword>
			fs->wflag = 1;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	70da      	strb	r2, [r3, #3]
			break;
 8008a30:	e006      	b.n	8008a40 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a32:	bf00      	nop
 8008a34:	e004      	b.n	8008a40 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a36:	bf00      	nop
 8008a38:	e002      	b.n	8008a40 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a3a:	bf00      	nop
 8008a3c:	e000      	b.n	8008a40 <put_fat+0x22a>
			if (res != FR_OK) break;
 8008a3e:	bf00      	nop
		}
	}
	return res;
 8008a40:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3724      	adds	r7, #36	; 0x24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd90      	pop	{r4, r7, pc}

08008a4a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b088      	sub	sp, #32
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d904      	bls.n	8008a70 <remove_chain+0x26>
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d301      	bcc.n	8008a74 <remove_chain+0x2a>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e04b      	b.n	8008b0c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00c      	beq.n	8008a94 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	69b8      	ldr	r0, [r7, #24]
 8008a82:	f7ff fec8 	bl	8008816 <put_fat>
 8008a86:	4603      	mov	r3, r0
 8008a88:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008a8a:	7ffb      	ldrb	r3, [r7, #31]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <remove_chain+0x4a>
 8008a90:	7ffb      	ldrb	r3, [r7, #31]
 8008a92:	e03b      	b.n	8008b0c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008a94:	68b9      	ldr	r1, [r7, #8]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7ff fde9 	bl	800866e <get_fat>
 8008a9c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d031      	beq.n	8008b08 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d101      	bne.n	8008aae <remove_chain+0x64>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	e02e      	b.n	8008b0c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab4:	d101      	bne.n	8008aba <remove_chain+0x70>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e028      	b.n	8008b0c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008aba:	2200      	movs	r2, #0
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	69b8      	ldr	r0, [r7, #24]
 8008ac0:	f7ff fea9 	bl	8008816 <put_fat>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ac8:	7ffb      	ldrb	r3, [r7, #31]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <remove_chain+0x88>
 8008ace:	7ffb      	ldrb	r3, [r7, #31]
 8008ad0:	e01c      	b.n	8008b0c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	3b02      	subs	r3, #2
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d20b      	bcs.n	8008af8 <remove_chain+0xae>
			fs->free_clst++;
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	791b      	ldrb	r3, [r3, #4]
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	69db      	ldr	r3, [r3, #28]
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d3c6      	bcc.n	8008a94 <remove_chain+0x4a>
 8008b06:	e000      	b.n	8008b0a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008b08:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3720      	adds	r7, #32
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10d      	bne.n	8008b46 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d004      	beq.n	8008b40 <create_chain+0x2c>
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d31b      	bcc.n	8008b78 <create_chain+0x64>
 8008b40:	2301      	movs	r3, #1
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	e018      	b.n	8008b78 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fd90 	bl	800866e <get_fat>
 8008b4e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d801      	bhi.n	8008b5a <create_chain+0x46>
 8008b56:	2301      	movs	r3, #1
 8008b58:	e070      	b.n	8008c3c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b60:	d101      	bne.n	8008b66 <create_chain+0x52>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	e06a      	b.n	8008c3c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d201      	bcs.n	8008b74 <create_chain+0x60>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	e063      	b.n	8008c3c <create_chain+0x128>
		scl = clst;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	69fa      	ldr	r2, [r7, #28]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d307      	bcc.n	8008b9c <create_chain+0x88>
				ncl = 2;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008b90:	69fa      	ldr	r2, [r7, #28]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d901      	bls.n	8008b9c <create_chain+0x88>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	e04f      	b.n	8008c3c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008b9c:	69f9      	ldr	r1, [r7, #28]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff fd65 	bl	800866e <get_fat>
 8008ba4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00e      	beq.n	8008bca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d003      	beq.n	8008bba <create_chain+0xa6>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d101      	bne.n	8008bbe <create_chain+0xaa>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	e03e      	b.n	8008c3c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008bbe:	69fa      	ldr	r2, [r7, #28]
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d1da      	bne.n	8008b7c <create_chain+0x68>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e038      	b.n	8008c3c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008bca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd0:	69f9      	ldr	r1, [r7, #28]
 8008bd2:	6938      	ldr	r0, [r7, #16]
 8008bd4:	f7ff fe1f 	bl	8008816 <put_fat>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d109      	bne.n	8008bf6 <create_chain+0xe2>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d006      	beq.n	8008bf6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008be8:	69fa      	ldr	r2, [r7, #28]
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6938      	ldr	r0, [r7, #16]
 8008bee:	f7ff fe12 	bl	8008816 <put_fat>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008bf6:	7dfb      	ldrb	r3, [r7, #23]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d116      	bne.n	8008c2a <create_chain+0x116>
		fs->last_clst = ncl;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	69fa      	ldr	r2, [r7, #28]
 8008c00:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	699a      	ldr	r2, [r3, #24]
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	69db      	ldr	r3, [r3, #28]
 8008c0a:	3b02      	subs	r3, #2
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d804      	bhi.n	8008c1a <create_chain+0x106>
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	1e5a      	subs	r2, r3, #1
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	791b      	ldrb	r3, [r3, #4]
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	711a      	strb	r2, [r3, #4]
 8008c28:	e007      	b.n	8008c3a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d102      	bne.n	8008c36 <create_chain+0x122>
 8008c30:	f04f 33ff 	mov.w	r3, #4294967295
 8008c34:	e000      	b.n	8008c38 <create_chain+0x124>
 8008c36:	2301      	movs	r3, #1
 8008c38:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008c3a:	69fb      	ldr	r3, [r7, #28]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3720      	adds	r7, #32
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c58:	3304      	adds	r3, #4
 8008c5a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	899b      	ldrh	r3, [r3, #12]
 8008c60:	461a      	mov	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	8952      	ldrh	r2, [r2, #10]
 8008c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c70:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	1d1a      	adds	r2, r3, #4
 8008c76:	613a      	str	r2, [r7, #16]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <clmt_clust+0x42>
 8008c82:	2300      	movs	r3, #0
 8008c84:	e010      	b.n	8008ca8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d307      	bcc.n	8008c9e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	617b      	str	r3, [r7, #20]
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c9c:	e7e9      	b.n	8008c72 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008c9e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	4413      	add	r3, r2
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cca:	d204      	bcs.n	8008cd6 <dir_sdi+0x22>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	f003 031f 	and.w	r3, r3, #31
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <dir_sdi+0x26>
		return FR_INT_ERR;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	e071      	b.n	8008dbe <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <dir_sdi+0x46>
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d902      	bls.n	8008cfa <dir_sdi+0x46>
		clst = fs->dirbase;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10c      	bne.n	8008d1a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	8912      	ldrh	r2, [r2, #8]
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d301      	bcc.n	8008d10 <dir_sdi+0x5c>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e056      	b.n	8008dbe <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	61da      	str	r2, [r3, #28]
 8008d18:	e02d      	b.n	8008d76 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	895b      	ldrh	r3, [r3, #10]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	899b      	ldrh	r3, [r3, #12]
 8008d24:	fb02 f303 	mul.w	r3, r2, r3
 8008d28:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d2a:	e019      	b.n	8008d60 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6979      	ldr	r1, [r7, #20]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fc9c 	bl	800866e <get_fat>
 8008d36:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3e:	d101      	bne.n	8008d44 <dir_sdi+0x90>
 8008d40:	2301      	movs	r3, #1
 8008d42:	e03c      	b.n	8008dbe <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d904      	bls.n	8008d54 <dir_sdi+0xa0>
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d301      	bcc.n	8008d58 <dir_sdi+0xa4>
 8008d54:	2302      	movs	r3, #2
 8008d56:	e032      	b.n	8008dbe <dir_sdi+0x10a>
			ofs -= csz;
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d2e1      	bcs.n	8008d2c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008d68:	6979      	ldr	r1, [r7, #20]
 8008d6a:	6938      	ldr	r0, [r7, #16]
 8008d6c:	f7ff fc60 	bl	8008630 <clust2sect>
 8008d70:	4602      	mov	r2, r0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <dir_sdi+0xd4>
 8008d84:	2302      	movs	r3, #2
 8008d86:	e01a      	b.n	8008dbe <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	69da      	ldr	r2, [r3, #28]
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	899b      	ldrh	r3, [r3, #12]
 8008d90:	4619      	mov	r1, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d98:	441a      	add	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	899b      	ldrh	r3, [r3, #12]
 8008da8:	461a      	mov	r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	fbb3 f0f2 	udiv	r0, r3, r2
 8008db0:	fb00 f202 	mul.w	r2, r0, r2
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	18ca      	adds	r2, r1, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b086      	sub	sp, #24
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	3320      	adds	r3, #32
 8008ddc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	69db      	ldr	r3, [r3, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <dir_next+0x28>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dec:	d301      	bcc.n	8008df2 <dir_next+0x2c>
 8008dee:	2304      	movs	r3, #4
 8008df0:	e0bb      	b.n	8008f6a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	899b      	ldrh	r3, [r3, #12]
 8008df6:	461a      	mov	r2, r3
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dfe:	fb01 f202 	mul.w	r2, r1, r2
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f040 809d 	bne.w	8008f44 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	69db      	ldr	r3, [r3, #28]
 8008e0e:	1c5a      	adds	r2, r3, #1
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10b      	bne.n	8008e34 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	8912      	ldrh	r2, [r2, #8]
 8008e24:	4293      	cmp	r3, r2
 8008e26:	f0c0 808d 	bcc.w	8008f44 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	61da      	str	r2, [r3, #28]
 8008e30:	2304      	movs	r3, #4
 8008e32:	e09a      	b.n	8008f6a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	899b      	ldrh	r3, [r3, #12]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	8952      	ldrh	r2, [r2, #10]
 8008e44:	3a01      	subs	r2, #1
 8008e46:	4013      	ands	r3, r2
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d17b      	bne.n	8008f44 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	4619      	mov	r1, r3
 8008e54:	4610      	mov	r0, r2
 8008e56:	f7ff fc0a 	bl	800866e <get_fat>
 8008e5a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d801      	bhi.n	8008e66 <dir_next+0xa0>
 8008e62:	2302      	movs	r3, #2
 8008e64:	e081      	b.n	8008f6a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6c:	d101      	bne.n	8008e72 <dir_next+0xac>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e07b      	b.n	8008f6a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d359      	bcc.n	8008f30 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	61da      	str	r2, [r3, #28]
 8008e88:	2304      	movs	r3, #4
 8008e8a:	e06e      	b.n	8008f6a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	699b      	ldr	r3, [r3, #24]
 8008e92:	4619      	mov	r1, r3
 8008e94:	4610      	mov	r0, r2
 8008e96:	f7ff fe3d 	bl	8008b14 <create_chain>
 8008e9a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <dir_next+0xe0>
 8008ea2:	2307      	movs	r3, #7
 8008ea4:	e061      	b.n	8008f6a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <dir_next+0xea>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e05c      	b.n	8008f6a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d101      	bne.n	8008ebc <dir_next+0xf6>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e056      	b.n	8008f6a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff fad5 	bl	800846c <sync_window>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <dir_next+0x106>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e04e      	b.n	8008f6a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	899b      	ldrh	r3, [r3, #12]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2100      	movs	r1, #0
 8008eda:	f7ff f8fe 	bl	80080da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ede:	2300      	movs	r3, #0
 8008ee0:	613b      	str	r3, [r7, #16]
 8008ee2:	6979      	ldr	r1, [r7, #20]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fba3 	bl	8008630 <clust2sect>
 8008eea:	4602      	mov	r2, r0
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	635a      	str	r2, [r3, #52]	; 0x34
 8008ef0:	e012      	b.n	8008f18 <dir_next+0x152>
						fs->wflag = 1;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008ef8:	68f8      	ldr	r0, [r7, #12]
 8008efa:	f7ff fab7 	bl	800846c <sync_window>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <dir_next+0x142>
 8008f04:	2301      	movs	r3, #1
 8008f06:	e030      	b.n	8008f6a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	613b      	str	r3, [r7, #16]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	635a      	str	r2, [r3, #52]	; 0x34
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	895b      	ldrh	r3, [r3, #10]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d3e6      	bcc.n	8008ef2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	1ad2      	subs	r2, r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	697a      	ldr	r2, [r7, #20]
 8008f34:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008f36:	6979      	ldr	r1, [r7, #20]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f7ff fb79 	bl	8008630 <clust2sect>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	899b      	ldrh	r3, [r3, #12]
 8008f54:	461a      	mov	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	fbb3 f0f2 	udiv	r0, r3, r2
 8008f5c:	fb00 f202 	mul.w	r2, r0, r2
 8008f60:	1a9b      	subs	r3, r3, r2
 8008f62:	18ca      	adds	r2, r1, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b086      	sub	sp, #24
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008f82:	2100      	movs	r1, #0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fe95 	bl	8008cb4 <dir_sdi>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d12b      	bne.n	8008fec <dir_alloc+0x7a>
		n = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff faa8 	bl	80084f4 <move_window>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008fa8:	7dfb      	ldrb	r3, [r7, #23]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d11d      	bne.n	8008fea <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2be5      	cmp	r3, #229	; 0xe5
 8008fb6:	d004      	beq.n	8008fc2 <dir_alloc+0x50>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a1b      	ldr	r3, [r3, #32]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d107      	bne.n	8008fd2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d102      	bne.n	8008fd6 <dir_alloc+0x64>
 8008fd0:	e00c      	b.n	8008fec <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff fef4 	bl	8008dc6 <dir_next>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0d7      	beq.n	8008f98 <dir_alloc+0x26>
 8008fe8:	e000      	b.n	8008fec <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008fea:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d101      	bne.n	8008ff6 <dir_alloc+0x84>
 8008ff2:	2307      	movs	r3, #7
 8008ff4:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3718      	adds	r7, #24
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	331a      	adds	r3, #26
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe ffc0 	bl	8007f94 <ld_word>
 8009014:	4603      	mov	r3, r0
 8009016:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	2b03      	cmp	r3, #3
 800901e:	d109      	bne.n	8009034 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	3314      	adds	r3, #20
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe ffb5 	bl	8007f94 <ld_word>
 800902a:	4603      	mov	r3, r0
 800902c:	041b      	lsls	r3, r3, #16
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009034:	68fb      	ldr	r3, [r7, #12]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	331a      	adds	r3, #26
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	b292      	uxth	r2, r2
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe ffd8 	bl	800800a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	2b03      	cmp	r3, #3
 8009060:	d109      	bne.n	8009076 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f103 0214 	add.w	r2, r3, #20
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	0c1b      	lsrs	r3, r3, #16
 800906c:	b29b      	uxth	r3, r3
 800906e:	4619      	mov	r1, r3
 8009070:	4610      	mov	r0, r2
 8009072:	f7fe ffca 	bl	800800a <st_word>
	}
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009080:	b590      	push	{r4, r7, lr}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	331a      	adds	r3, #26
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe ff80 	bl	8007f94 <ld_word>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d001      	beq.n	800909e <cmp_lfn+0x1e>
 800909a:	2300      	movs	r3, #0
 800909c:	e059      	b.n	8009152 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090a6:	1e5a      	subs	r2, r3, #1
 80090a8:	4613      	mov	r3, r2
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80090b4:	2301      	movs	r3, #1
 80090b6:	81fb      	strh	r3, [r7, #14]
 80090b8:	2300      	movs	r3, #0
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	e033      	b.n	8009126 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80090be:	4a27      	ldr	r2, [pc, #156]	; (800915c <cmp_lfn+0xdc>)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	4413      	add	r3, r2
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	4413      	add	r3, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe ff61 	bl	8007f94 <ld_word>
 80090d2:	4603      	mov	r3, r0
 80090d4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80090d6:	89fb      	ldrh	r3, [r7, #14]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01a      	beq.n	8009112 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2bfe      	cmp	r3, #254	; 0xfe
 80090e0:	d812      	bhi.n	8009108 <cmp_lfn+0x88>
 80090e2:	89bb      	ldrh	r3, [r7, #12]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f001 fe11 	bl	800ad0c <ff_wtoupper>
 80090ea:	4603      	mov	r3, r0
 80090ec:	461c      	mov	r4, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	617a      	str	r2, [r7, #20]
 80090f4:	005b      	lsls	r3, r3, #1
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	4413      	add	r3, r2
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 fe05 	bl	800ad0c <ff_wtoupper>
 8009102:	4603      	mov	r3, r0
 8009104:	429c      	cmp	r4, r3
 8009106:	d001      	beq.n	800910c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009108:	2300      	movs	r3, #0
 800910a:	e022      	b.n	8009152 <cmp_lfn+0xd2>
			}
			wc = uc;
 800910c:	89bb      	ldrh	r3, [r7, #12]
 800910e:	81fb      	strh	r3, [r7, #14]
 8009110:	e006      	b.n	8009120 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009112:	89bb      	ldrh	r3, [r7, #12]
 8009114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009118:	4293      	cmp	r3, r2
 800911a:	d001      	beq.n	8009120 <cmp_lfn+0xa0>
 800911c:	2300      	movs	r3, #0
 800911e:	e018      	b.n	8009152 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	3301      	adds	r3, #1
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b0c      	cmp	r3, #12
 800912a:	d9c8      	bls.n	80090be <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <cmp_lfn+0xd0>
 8009138:	89fb      	ldrh	r3, [r7, #14]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d008      	beq.n	8009150 <cmp_lfn+0xd0>
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	005b      	lsls	r3, r3, #1
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <cmp_lfn+0xd0>
 800914c:	2300      	movs	r3, #0
 800914e:	e000      	b.n	8009152 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009150:	2301      	movs	r3, #1
}
 8009152:	4618      	mov	r0, r3
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	bd90      	pop	{r4, r7, pc}
 800915a:	bf00      	nop
 800915c:	0800c4f8 	.word	0x0800c4f8

08009160 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	4611      	mov	r1, r2
 800916c:	461a      	mov	r2, r3
 800916e:	460b      	mov	r3, r1
 8009170:	71fb      	strb	r3, [r7, #7]
 8009172:	4613      	mov	r3, r2
 8009174:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	330d      	adds	r3, #13
 800917a:	79ba      	ldrb	r2, [r7, #6]
 800917c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	330b      	adds	r3, #11
 8009182:	220f      	movs	r2, #15
 8009184:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	330c      	adds	r3, #12
 800918a:	2200      	movs	r2, #0
 800918c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	331a      	adds	r3, #26
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe ff38 	bl	800800a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	1e5a      	subs	r2, r3, #1
 800919e:	4613      	mov	r3, r2
 80091a0:	005b      	lsls	r3, r3, #1
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	82fb      	strh	r3, [r7, #22]
 80091ae:	2300      	movs	r3, #0
 80091b0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80091b2:	8afb      	ldrh	r3, [r7, #22]
 80091b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d007      	beq.n	80091cc <put_lfn+0x6c>
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	61fa      	str	r2, [r7, #28]
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	4413      	add	r3, r2
 80091c8:	881b      	ldrh	r3, [r3, #0]
 80091ca:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80091cc:	4a17      	ldr	r2, [pc, #92]	; (800922c <put_lfn+0xcc>)
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	4413      	add	r3, r2
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	461a      	mov	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	4413      	add	r3, r2
 80091da:	8afa      	ldrh	r2, [r7, #22]
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fe ff13 	bl	800800a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80091e4:	8afb      	ldrh	r3, [r7, #22]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d102      	bne.n	80091f0 <put_lfn+0x90>
 80091ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091ee:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	3301      	adds	r3, #1
 80091f4:	61bb      	str	r3, [r7, #24]
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	2b0c      	cmp	r3, #12
 80091fa:	d9da      	bls.n	80091b2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80091fc:	8afb      	ldrh	r3, [r7, #22]
 80091fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009202:	4293      	cmp	r3, r2
 8009204:	d006      	beq.n	8009214 <put_lfn+0xb4>
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <put_lfn+0xbc>
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800921a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	79fa      	ldrb	r2, [r7, #7]
 8009220:	701a      	strb	r2, [r3, #0]
}
 8009222:	bf00      	nop
 8009224:	3720      	adds	r7, #32
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	0800c4f8 	.word	0x0800c4f8

08009230 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08c      	sub	sp, #48	; 0x30
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800923e:	220b      	movs	r2, #11
 8009240:	68b9      	ldr	r1, [r7, #8]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7fe ff28 	bl	8008098 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b05      	cmp	r3, #5
 800924c:	d92b      	bls.n	80092a6 <gen_numname+0x76>
		sr = seq;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009252:	e022      	b.n	800929a <gen_numname+0x6a>
			wc = *lfn++;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	1c9a      	adds	r2, r3, #2
 8009258:	607a      	str	r2, [r7, #4]
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800925e:	2300      	movs	r3, #0
 8009260:	62bb      	str	r3, [r7, #40]	; 0x28
 8009262:	e017      	b.n	8009294 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	005a      	lsls	r2, r3, #1
 8009268:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	4413      	add	r3, r2
 8009270:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009274:	085b      	lsrs	r3, r3, #1
 8009276:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <gen_numname+0x5e>
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8009288:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800928c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	3301      	adds	r3, #1
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	2b0f      	cmp	r3, #15
 8009298:	d9e4      	bls.n	8009264 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1d8      	bne.n	8009254 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80092a6:	2307      	movs	r3, #7
 80092a8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f003 030f 	and.w	r3, r3, #15
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	3330      	adds	r3, #48	; 0x30
 80092b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80092ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092be:	2b39      	cmp	r3, #57	; 0x39
 80092c0:	d904      	bls.n	80092cc <gen_numname+0x9c>
 80092c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092c6:	3307      	adds	r3, #7
 80092c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	1e5a      	subs	r2, r3, #1
 80092d0:	62ba      	str	r2, [r7, #40]	; 0x28
 80092d2:	3330      	adds	r3, #48	; 0x30
 80092d4:	443b      	add	r3, r7
 80092d6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80092da:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	091b      	lsrs	r3, r3, #4
 80092e2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1df      	bne.n	80092aa <gen_numname+0x7a>
	ns[i] = '~';
 80092ea:	f107 0214 	add.w	r2, r7, #20
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	4413      	add	r3, r2
 80092f2:	227e      	movs	r2, #126	; 0x7e
 80092f4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80092f6:	2300      	movs	r3, #0
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
 80092fa:	e002      	b.n	8009302 <gen_numname+0xd2>
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	3301      	adds	r3, #1
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
 8009302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	429a      	cmp	r2, r3
 8009308:	d205      	bcs.n	8009316 <gen_numname+0xe6>
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	4413      	add	r3, r2
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	2b20      	cmp	r3, #32
 8009314:	d1f2      	bne.n	80092fc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	2b07      	cmp	r3, #7
 800931a:	d807      	bhi.n	800932c <gen_numname+0xfc>
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	62ba      	str	r2, [r7, #40]	; 0x28
 8009322:	3330      	adds	r3, #48	; 0x30
 8009324:	443b      	add	r3, r7
 8009326:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800932a:	e000      	b.n	800932e <gen_numname+0xfe>
 800932c:	2120      	movs	r1, #32
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	627a      	str	r2, [r7, #36]	; 0x24
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	460a      	mov	r2, r1
 800933a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	2b07      	cmp	r3, #7
 8009340:	d9e9      	bls.n	8009316 <gen_numname+0xe6>
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	3730      	adds	r7, #48	; 0x30
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009358:	230b      	movs	r3, #11
 800935a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	b2da      	uxtb	r2, r3
 8009360:	0852      	lsrs	r2, r2, #1
 8009362:	01db      	lsls	r3, r3, #7
 8009364:	4313      	orrs	r3, r2
 8009366:	b2da      	uxtb	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	1c59      	adds	r1, r3, #1
 800936c:	6079      	str	r1, [r7, #4]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	4413      	add	r3, r2
 8009372:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	3b01      	subs	r3, #1
 8009378:	60bb      	str	r3, [r7, #8]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1ed      	bne.n	800935c <sum_sfn+0x10>
	return sum;
 8009380:	7bfb      	ldrb	r3, [r7, #15]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b086      	sub	sp, #24
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800939c:	2100      	movs	r1, #0
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff fc88 	bl	8008cb4 <dir_sdi>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <dir_find+0x24>
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	e0a9      	b.n	8009506 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80093b2:	23ff      	movs	r3, #255	; 0xff
 80093b4:	753b      	strb	r3, [r7, #20]
 80093b6:	7d3b      	ldrb	r3, [r7, #20]
 80093b8:	757b      	strb	r3, [r7, #21]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f04f 32ff 	mov.w	r2, #4294967295
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6938      	ldr	r0, [r7, #16]
 80093ca:	f7ff f893 	bl	80084f4 <move_window>
 80093ce:	4603      	mov	r3, r0
 80093d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f040 8090 	bne.w	80094fa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80093e2:	7dbb      	ldrb	r3, [r7, #22]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <dir_find+0x60>
 80093e8:	2304      	movs	r3, #4
 80093ea:	75fb      	strb	r3, [r7, #23]
 80093ec:	e08a      	b.n	8009504 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a1b      	ldr	r3, [r3, #32]
 80093f2:	330b      	adds	r3, #11
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093fa:	73fb      	strb	r3, [r7, #15]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7bfa      	ldrb	r2, [r7, #15]
 8009400:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009402:	7dbb      	ldrb	r3, [r7, #22]
 8009404:	2be5      	cmp	r3, #229	; 0xe5
 8009406:	d007      	beq.n	8009418 <dir_find+0x8a>
 8009408:	7bfb      	ldrb	r3, [r7, #15]
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b00      	cmp	r3, #0
 8009410:	d009      	beq.n	8009426 <dir_find+0x98>
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	2b0f      	cmp	r3, #15
 8009416:	d006      	beq.n	8009426 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009418:	23ff      	movs	r3, #255	; 0xff
 800941a:	757b      	strb	r3, [r7, #21]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
 8009424:	e05e      	b.n	80094e4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	2b0f      	cmp	r3, #15
 800942a:	d136      	bne.n	800949a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d154      	bne.n	80094e4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800943a:	7dbb      	ldrb	r3, [r7, #22]
 800943c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00d      	beq.n	8009460 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	7b5b      	ldrb	r3, [r3, #13]
 800944a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800944c:	7dbb      	ldrb	r3, [r7, #22]
 800944e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009452:	75bb      	strb	r3, [r7, #22]
 8009454:	7dbb      	ldrb	r3, [r7, #22]
 8009456:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	695a      	ldr	r2, [r3, #20]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009460:	7dba      	ldrb	r2, [r7, #22]
 8009462:	7d7b      	ldrb	r3, [r7, #21]
 8009464:	429a      	cmp	r2, r3
 8009466:	d115      	bne.n	8009494 <dir_find+0x106>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	330d      	adds	r3, #13
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	7d3a      	ldrb	r2, [r7, #20]
 8009472:	429a      	cmp	r2, r3
 8009474:	d10e      	bne.n	8009494 <dir_find+0x106>
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	4619      	mov	r1, r3
 8009480:	4610      	mov	r0, r2
 8009482:	f7ff fdfd 	bl	8009080 <cmp_lfn>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <dir_find+0x106>
 800948c:	7d7b      	ldrb	r3, [r7, #21]
 800948e:	3b01      	subs	r3, #1
 8009490:	b2db      	uxtb	r3, r3
 8009492:	e000      	b.n	8009496 <dir_find+0x108>
 8009494:	23ff      	movs	r3, #255	; 0xff
 8009496:	757b      	strb	r3, [r7, #21]
 8009498:	e024      	b.n	80094e4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800949a:	7d7b      	ldrb	r3, [r7, #21]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d109      	bne.n	80094b4 <dir_find+0x126>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a1b      	ldr	r3, [r3, #32]
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7ff ff51 	bl	800934c <sum_sfn>
 80094aa:	4603      	mov	r3, r0
 80094ac:	461a      	mov	r2, r3
 80094ae:	7d3b      	ldrb	r3, [r7, #20]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d024      	beq.n	80094fe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094ba:	f003 0301 	and.w	r3, r3, #1
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <dir_find+0x14a>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a18      	ldr	r0, [r3, #32]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	3324      	adds	r3, #36	; 0x24
 80094ca:	220b      	movs	r2, #11
 80094cc:	4619      	mov	r1, r3
 80094ce:	f7fe fe1f 	bl	8008110 <mem_cmp>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d014      	beq.n	8009502 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80094d8:	23ff      	movs	r3, #255	; 0xff
 80094da:	757b      	strb	r3, [r7, #21]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f04f 32ff 	mov.w	r2, #4294967295
 80094e2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80094e4:	2100      	movs	r1, #0
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff fc6d 	bl	8008dc6 <dir_next>
 80094ec:	4603      	mov	r3, r0
 80094ee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80094f0:	7dfb      	ldrb	r3, [r7, #23]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f43f af65 	beq.w	80093c2 <dir_find+0x34>
 80094f8:	e004      	b.n	8009504 <dir_find+0x176>
		if (res != FR_OK) break;
 80094fa:	bf00      	nop
 80094fc:	e002      	b.n	8009504 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009502:	bf00      	nop

	return res;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08c      	sub	sp, #48	; 0x30
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009524:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <dir_register+0x20>
 800952c:	2306      	movs	r3, #6
 800952e:	e0e0      	b.n	80096f2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009530:	2300      	movs	r3, #0
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
 8009534:	e002      	b.n	800953c <dir_register+0x2c>
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	3301      	adds	r3, #1
 800953a:	627b      	str	r3, [r7, #36]	; 0x24
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	691a      	ldr	r2, [r3, #16]
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	4413      	add	r3, r2
 8009546:	881b      	ldrh	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1f4      	bne.n	8009536 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009552:	f107 030c 	add.w	r3, r7, #12
 8009556:	220c      	movs	r2, #12
 8009558:	4618      	mov	r0, r3
 800955a:	f7fe fd9d 	bl	8008098 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800955e:	7dfb      	ldrb	r3, [r7, #23]
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d032      	beq.n	80095ce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2240      	movs	r2, #64	; 0x40
 800956c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8009570:	2301      	movs	r3, #1
 8009572:	62bb      	str	r3, [r7, #40]	; 0x28
 8009574:	e016      	b.n	80095a4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	691a      	ldr	r2, [r3, #16]
 8009580:	f107 010c 	add.w	r1, r7, #12
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	f7ff fe53 	bl	8009230 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff feff 	bl	800938e <dir_find>
 8009590:	4603      	mov	r3, r0
 8009592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8009596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800959a:	2b00      	cmp	r3, #0
 800959c:	d106      	bne.n	80095ac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a0:	3301      	adds	r3, #1
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	2b63      	cmp	r3, #99	; 0x63
 80095a8:	d9e5      	bls.n	8009576 <dir_register+0x66>
 80095aa:	e000      	b.n	80095ae <dir_register+0x9e>
			if (res != FR_OK) break;
 80095ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	2b64      	cmp	r3, #100	; 0x64
 80095b2:	d101      	bne.n	80095b8 <dir_register+0xa8>
 80095b4:	2307      	movs	r3, #7
 80095b6:	e09c      	b.n	80096f2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80095b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095bc:	2b04      	cmp	r3, #4
 80095be:	d002      	beq.n	80095c6 <dir_register+0xb6>
 80095c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095c4:	e095      	b.n	80096f2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80095c6:	7dfa      	ldrb	r2, [r7, #23]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80095ce:	7dfb      	ldrb	r3, [r7, #23]
 80095d0:	f003 0302 	and.w	r3, r3, #2
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <dir_register+0xd8>
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	330c      	adds	r3, #12
 80095dc:	4a47      	ldr	r2, [pc, #284]	; (80096fc <dir_register+0x1ec>)
 80095de:	fba2 2303 	umull	r2, r3, r2, r3
 80095e2:	089b      	lsrs	r3, r3, #2
 80095e4:	3301      	adds	r3, #1
 80095e6:	e000      	b.n	80095ea <dir_register+0xda>
 80095e8:	2301      	movs	r3, #1
 80095ea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80095ec:	6a39      	ldr	r1, [r7, #32]
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fcbf 	bl	8008f72 <dir_alloc>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80095fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d148      	bne.n	8009694 <dir_register+0x184>
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	3b01      	subs	r3, #1
 8009606:	623b      	str	r3, [r7, #32]
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d042      	beq.n	8009694 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	695a      	ldr	r2, [r3, #20]
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	015b      	lsls	r3, r3, #5
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff fb4a 	bl	8008cb4 <dir_sdi>
 8009620:	4603      	mov	r3, r0
 8009622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8009626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800962a:	2b00      	cmp	r3, #0
 800962c:	d132      	bne.n	8009694 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3324      	adds	r3, #36	; 0x24
 8009632:	4618      	mov	r0, r3
 8009634:	f7ff fe8a 	bl	800934c <sum_sfn>
 8009638:	4603      	mov	r3, r0
 800963a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	4619      	mov	r1, r3
 8009642:	69f8      	ldr	r0, [r7, #28]
 8009644:	f7fe ff56 	bl	80084f4 <move_window>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800964e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009652:	2b00      	cmp	r3, #0
 8009654:	d11d      	bne.n	8009692 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	6918      	ldr	r0, [r3, #16]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a19      	ldr	r1, [r3, #32]
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	b2da      	uxtb	r2, r3
 8009662:	7efb      	ldrb	r3, [r7, #27]
 8009664:	f7ff fd7c 	bl	8009160 <put_lfn>
				fs->wflag = 1;
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	2201      	movs	r2, #1
 800966c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800966e:	2100      	movs	r1, #0
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff fba8 	bl	8008dc6 <dir_next>
 8009676:	4603      	mov	r3, r0
 8009678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800967c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009680:	2b00      	cmp	r3, #0
 8009682:	d107      	bne.n	8009694 <dir_register+0x184>
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	3b01      	subs	r3, #1
 8009688:	623b      	str	r3, [r7, #32]
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1d5      	bne.n	800963c <dir_register+0x12c>
 8009690:	e000      	b.n	8009694 <dir_register+0x184>
				if (res != FR_OK) break;
 8009692:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009698:	2b00      	cmp	r3, #0
 800969a:	d128      	bne.n	80096ee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	4619      	mov	r1, r3
 80096a2:	69f8      	ldr	r0, [r7, #28]
 80096a4:	f7fe ff26 	bl	80084f4 <move_window>
 80096a8:	4603      	mov	r3, r0
 80096aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80096ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d11b      	bne.n	80096ee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	2220      	movs	r2, #32
 80096bc:	2100      	movs	r1, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fd0b 	bl	80080da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a18      	ldr	r0, [r3, #32]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3324      	adds	r3, #36	; 0x24
 80096cc:	220b      	movs	r2, #11
 80096ce:	4619      	mov	r1, r3
 80096d0:	f7fe fce2 	bl	8008098 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a1b      	ldr	r3, [r3, #32]
 80096de:	330c      	adds	r3, #12
 80096e0:	f002 0218 	and.w	r2, r2, #24
 80096e4:	b2d2      	uxtb	r2, r2
 80096e6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	2201      	movs	r2, #1
 80096ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80096ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3730      	adds	r7, #48	; 0x30
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	4ec4ec4f 	.word	0x4ec4ec4f

08009700 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08a      	sub	sp, #40	; 0x28
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	60fb      	str	r3, [r7, #12]
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	61ba      	str	r2, [r7, #24]
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	4413      	add	r3, r2
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800972e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009730:	2b1f      	cmp	r3, #31
 8009732:	d940      	bls.n	80097b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009734:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009736:	2b2f      	cmp	r3, #47	; 0x2f
 8009738:	d006      	beq.n	8009748 <create_name+0x48>
 800973a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800973c:	2b5c      	cmp	r3, #92	; 0x5c
 800973e:	d110      	bne.n	8009762 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009740:	e002      	b.n	8009748 <create_name+0x48>
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	3301      	adds	r3, #1
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	4413      	add	r3, r2
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b2f      	cmp	r3, #47	; 0x2f
 8009752:	d0f6      	beq.n	8009742 <create_name+0x42>
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4413      	add	r3, r2
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b5c      	cmp	r3, #92	; 0x5c
 800975e:	d0f0      	beq.n	8009742 <create_name+0x42>
			break;
 8009760:	e02a      	b.n	80097b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2bfe      	cmp	r3, #254	; 0xfe
 8009766:	d901      	bls.n	800976c <create_name+0x6c>
 8009768:	2306      	movs	r3, #6
 800976a:	e17d      	b.n	8009a68 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800976c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800976e:	b2db      	uxtb	r3, r3
 8009770:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8009772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009774:	2101      	movs	r1, #1
 8009776:	4618      	mov	r0, r3
 8009778:	f001 fa8c 	bl	800ac94 <ff_convert>
 800977c:	4603      	mov	r3, r0
 800977e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8009780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <create_name+0x8a>
 8009786:	2306      	movs	r3, #6
 8009788:	e16e      	b.n	8009a68 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800978a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800978c:	2b7f      	cmp	r3, #127	; 0x7f
 800978e:	d809      	bhi.n	80097a4 <create_name+0xa4>
 8009790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009792:	4619      	mov	r1, r3
 8009794:	488d      	ldr	r0, [pc, #564]	; (80099cc <create_name+0x2cc>)
 8009796:	f7fe fce2 	bl	800815e <chk_chr>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d001      	beq.n	80097a4 <create_name+0xa4>
 80097a0:	2306      	movs	r3, #6
 80097a2:	e161      	b.n	8009a68 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	617a      	str	r2, [r7, #20]
 80097aa:	005b      	lsls	r3, r3, #1
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4413      	add	r3, r2
 80097b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80097b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80097b4:	e7b4      	b.n	8009720 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80097b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	441a      	add	r2, r3
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80097c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097c4:	2b1f      	cmp	r3, #31
 80097c6:	d801      	bhi.n	80097cc <create_name+0xcc>
 80097c8:	2304      	movs	r3, #4
 80097ca:	e000      	b.n	80097ce <create_name+0xce>
 80097cc:	2300      	movs	r3, #0
 80097ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80097d2:	e011      	b.n	80097f8 <create_name+0xf8>
		w = lfn[di - 1];
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80097da:	3b01      	subs	r3, #1
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4413      	add	r3, r2
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80097e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d002      	beq.n	80097f2 <create_name+0xf2>
 80097ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80097ee:	2b2e      	cmp	r3, #46	; 0x2e
 80097f0:	d106      	bne.n	8009800 <create_name+0x100>
		di--;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1ea      	bne.n	80097d4 <create_name+0xd4>
 80097fe:	e000      	b.n	8009802 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8009800:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	4413      	add	r3, r2
 800980a:	2200      	movs	r2, #0
 800980c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d101      	bne.n	8009818 <create_name+0x118>
 8009814:	2306      	movs	r3, #6
 8009816:	e127      	b.n	8009a68 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	220b      	movs	r2, #11
 800981e:	2120      	movs	r1, #32
 8009820:	4618      	mov	r0, r3
 8009822:	f7fe fc5a 	bl	80080da <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8009826:	2300      	movs	r3, #0
 8009828:	61bb      	str	r3, [r7, #24]
 800982a:	e002      	b.n	8009832 <create_name+0x132>
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	3301      	adds	r3, #1
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	4413      	add	r3, r2
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	2b20      	cmp	r3, #32
 800983e:	d0f5      	beq.n	800982c <create_name+0x12c>
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	4413      	add	r3, r2
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	2b2e      	cmp	r3, #46	; 0x2e
 800984c:	d0ee      	beq.n	800982c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d009      	beq.n	8009868 <create_name+0x168>
 8009854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009858:	f043 0303 	orr.w	r3, r3, #3
 800985c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8009860:	e002      	b.n	8009868 <create_name+0x168>
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	3b01      	subs	r3, #1
 8009866:	617b      	str	r3, [r7, #20]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d009      	beq.n	8009882 <create_name+0x182>
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009874:	3b01      	subs	r3, #1
 8009876:	005b      	lsls	r3, r3, #1
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	2b2e      	cmp	r3, #46	; 0x2e
 8009880:	d1ef      	bne.n	8009862 <create_name+0x162>

	i = b = 0; ni = 8;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009888:	2300      	movs	r3, #0
 800988a:	623b      	str	r3, [r7, #32]
 800988c:	2308      	movs	r3, #8
 800988e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	61ba      	str	r2, [r7, #24]
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80098a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 8090 	beq.w	80099c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80098a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d006      	beq.n	80098bc <create_name+0x1bc>
 80098ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098b0:	2b2e      	cmp	r3, #46	; 0x2e
 80098b2:	d10a      	bne.n	80098ca <create_name+0x1ca>
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d006      	beq.n	80098ca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80098bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098c0:	f043 0303 	orr.w	r3, r3, #3
 80098c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098c8:	e07d      	b.n	80099c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80098ca:	6a3a      	ldr	r2, [r7, #32]
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d203      	bcs.n	80098da <create_name+0x1da>
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d123      	bne.n	8009922 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	2b0b      	cmp	r3, #11
 80098de:	d106      	bne.n	80098ee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80098e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e4:	f043 0303 	orr.w	r3, r3, #3
 80098e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80098ec:	e075      	b.n	80099da <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80098ee:	69ba      	ldr	r2, [r7, #24]
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d005      	beq.n	8009902 <create_name+0x202>
 80098f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098fa:	f043 0303 	orr.w	r3, r3, #3
 80098fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	429a      	cmp	r2, r3
 8009908:	d866      	bhi.n	80099d8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	61bb      	str	r3, [r7, #24]
 800990e:	2308      	movs	r3, #8
 8009910:	623b      	str	r3, [r7, #32]
 8009912:	230b      	movs	r3, #11
 8009914:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8009916:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009920:	e051      	b.n	80099c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8009922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009924:	2b7f      	cmp	r3, #127	; 0x7f
 8009926:	d914      	bls.n	8009952 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800992a:	2100      	movs	r1, #0
 800992c:	4618      	mov	r0, r3
 800992e:	f001 f9b1 	bl	800ac94 <ff_convert>
 8009932:	4603      	mov	r3, r0
 8009934:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8009936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009938:	2b00      	cmp	r3, #0
 800993a:	d004      	beq.n	8009946 <create_name+0x246>
 800993c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800993e:	3b80      	subs	r3, #128	; 0x80
 8009940:	4a23      	ldr	r2, [pc, #140]	; (80099d0 <create_name+0x2d0>)
 8009942:	5cd3      	ldrb	r3, [r2, r3]
 8009944:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8009946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800994a:	f043 0302 	orr.w	r3, r3, #2
 800994e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8009952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009954:	2b00      	cmp	r3, #0
 8009956:	d007      	beq.n	8009968 <create_name+0x268>
 8009958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800995a:	4619      	mov	r1, r3
 800995c:	481d      	ldr	r0, [pc, #116]	; (80099d4 <create_name+0x2d4>)
 800995e:	f7fe fbfe 	bl	800815e <chk_chr>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d008      	beq.n	800997a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8009968:	235f      	movs	r3, #95	; 0x5f
 800996a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800996c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009970:	f043 0303 	orr.w	r3, r3, #3
 8009974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009978:	e01b      	b.n	80099b2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800997a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800997c:	2b40      	cmp	r3, #64	; 0x40
 800997e:	d909      	bls.n	8009994 <create_name+0x294>
 8009980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009982:	2b5a      	cmp	r3, #90	; 0x5a
 8009984:	d806      	bhi.n	8009994 <create_name+0x294>
					b |= 2;
 8009986:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800998a:	f043 0302 	orr.w	r3, r3, #2
 800998e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009992:	e00e      	b.n	80099b2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009996:	2b60      	cmp	r3, #96	; 0x60
 8009998:	d90b      	bls.n	80099b2 <create_name+0x2b2>
 800999a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800999c:	2b7a      	cmp	r3, #122	; 0x7a
 800999e:	d808      	bhi.n	80099b2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80099a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099a4:	f043 0301 	orr.w	r3, r3, #1
 80099a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80099ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ae:	3b20      	subs	r3, #32
 80099b0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80099b2:	6a3b      	ldr	r3, [r7, #32]
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	623a      	str	r2, [r7, #32]
 80099b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099ba:	b2d1      	uxtb	r1, r2
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	4413      	add	r3, r2
 80099c0:	460a      	mov	r2, r1
 80099c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80099c6:	e763      	b.n	8009890 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80099c8:	bf00      	nop
 80099ca:	e006      	b.n	80099da <create_name+0x2da>
 80099cc:	0800c410 	.word	0x0800c410
 80099d0:	0800c478 	.word	0x0800c478
 80099d4:	0800c41c 	.word	0x0800c41c
			if (si > di) break;			/* No extension */
 80099d8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099e0:	2be5      	cmp	r3, #229	; 0xe5
 80099e2:	d103      	bne.n	80099ec <create_name+0x2ec>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2205      	movs	r2, #5
 80099e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d104      	bne.n	80099fc <create_name+0x2fc>
 80099f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80099fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a00:	f003 030c 	and.w	r3, r3, #12
 8009a04:	2b0c      	cmp	r3, #12
 8009a06:	d005      	beq.n	8009a14 <create_name+0x314>
 8009a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	2b03      	cmp	r3, #3
 8009a12:	d105      	bne.n	8009a20 <create_name+0x320>
 8009a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a18:	f043 0302 	orr.w	r3, r3, #2
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d117      	bne.n	8009a5c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a30:	f003 0303 	and.w	r3, r3, #3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d105      	bne.n	8009a44 <create_name+0x344>
 8009a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a3c:	f043 0310 	orr.w	r3, r3, #16
 8009a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009a44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a48:	f003 030c 	and.w	r3, r3, #12
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d105      	bne.n	8009a5c <create_name+0x35c>
 8009a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a54:	f043 0308 	orr.w	r3, r3, #8
 8009a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8009a66:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3728      	adds	r7, #40	; 0x28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009a84:	e002      	b.n	8009a8c <follow_path+0x1c>
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	2b2f      	cmp	r3, #47	; 0x2f
 8009a92:	d0f8      	beq.n	8009a86 <follow_path+0x16>
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	2b5c      	cmp	r3, #92	; 0x5c
 8009a9a:	d0f4      	beq.n	8009a86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2b1f      	cmp	r3, #31
 8009aa8:	d80a      	bhi.n	8009ac0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2280      	movs	r2, #128	; 0x80
 8009aae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff f8fd 	bl	8008cb4 <dir_sdi>
 8009aba:	4603      	mov	r3, r0
 8009abc:	75fb      	strb	r3, [r7, #23]
 8009abe:	e048      	b.n	8009b52 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ac0:	463b      	mov	r3, r7
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff fe1b 	bl	8009700 <create_name>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d139      	bne.n	8009b48 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff fc5a 	bl	800938e <dir_find>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ae4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00a      	beq.n	8009b02 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d12c      	bne.n	8009b4c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009af2:	7afb      	ldrb	r3, [r7, #11]
 8009af4:	f003 0304 	and.w	r3, r3, #4
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d127      	bne.n	8009b4c <follow_path+0xdc>
 8009afc:	2305      	movs	r3, #5
 8009afe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009b00:	e024      	b.n	8009b4c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d121      	bne.n	8009b50 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	799b      	ldrb	r3, [r3, #6]
 8009b10:	f003 0310 	and.w	r3, r3, #16
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d102      	bne.n	8009b1e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009b18:	2305      	movs	r3, #5
 8009b1a:	75fb      	strb	r3, [r7, #23]
 8009b1c:	e019      	b.n	8009b52 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	8992      	ldrh	r2, [r2, #12]
 8009b2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b30:	fb00 f202 	mul.w	r2, r0, r2
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	440b      	add	r3, r1
 8009b38:	4619      	mov	r1, r3
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7ff fa60 	bl	8009000 <ld_clust>
 8009b40:	4602      	mov	r2, r0
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009b46:	e7bb      	b.n	8009ac0 <follow_path+0x50>
			if (res != FR_OK) break;
 8009b48:	bf00      	nop
 8009b4a:	e002      	b.n	8009b52 <follow_path+0xe2>
				break;
 8009b4c:	bf00      	nop
 8009b4e:	e000      	b.n	8009b52 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009b50:	bf00      	nop
			}
		}
	}

	return res;
 8009b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3718      	adds	r7, #24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295
 8009b68:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d031      	beq.n	8009bd6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	617b      	str	r3, [r7, #20]
 8009b78:	e002      	b.n	8009b80 <get_ldnumber+0x24>
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b1f      	cmp	r3, #31
 8009b86:	d903      	bls.n	8009b90 <get_ldnumber+0x34>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b3a      	cmp	r3, #58	; 0x3a
 8009b8e:	d1f4      	bne.n	8009b7a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	2b3a      	cmp	r3, #58	; 0x3a
 8009b96:	d11c      	bne.n	8009bd2 <get_ldnumber+0x76>
			tp = *path;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	60fa      	str	r2, [r7, #12]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	3b30      	subs	r3, #48	; 0x30
 8009ba8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b09      	cmp	r3, #9
 8009bae:	d80e      	bhi.n	8009bce <get_ldnumber+0x72>
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d10a      	bne.n	8009bce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d107      	bne.n	8009bce <get_ldnumber+0x72>
					vol = (int)i;
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	e002      	b.n	8009bd8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009bd6:	693b      	ldr	r3, [r7, #16]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	371c      	adds	r7, #28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	70da      	strb	r2, [r3, #3]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009bfc:	6839      	ldr	r1, [r7, #0]
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7fe fc78 	bl	80084f4 <move_window>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <check_fs+0x2a>
 8009c0a:	2304      	movs	r3, #4
 8009c0c:	e038      	b.n	8009c80 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	3338      	adds	r3, #56	; 0x38
 8009c12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe f9bc 	bl	8007f94 <ld_word>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d001      	beq.n	8009c2c <check_fs+0x48>
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e029      	b.n	8009c80 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c32:	2be9      	cmp	r3, #233	; 0xe9
 8009c34:	d009      	beq.n	8009c4a <check_fs+0x66>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009c3c:	2beb      	cmp	r3, #235	; 0xeb
 8009c3e:	d11e      	bne.n	8009c7e <check_fs+0x9a>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c46:	2b90      	cmp	r3, #144	; 0x90
 8009c48:	d119      	bne.n	8009c7e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3338      	adds	r3, #56	; 0x38
 8009c4e:	3336      	adds	r3, #54	; 0x36
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe f9b7 	bl	8007fc4 <ld_dword>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009c5c:	4a0a      	ldr	r2, [pc, #40]	; (8009c88 <check_fs+0xa4>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d101      	bne.n	8009c66 <check_fs+0x82>
 8009c62:	2300      	movs	r3, #0
 8009c64:	e00c      	b.n	8009c80 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3338      	adds	r3, #56	; 0x38
 8009c6a:	3352      	adds	r3, #82	; 0x52
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe f9a9 	bl	8007fc4 <ld_dword>
 8009c72:	4603      	mov	r3, r0
 8009c74:	4a05      	ldr	r2, [pc, #20]	; (8009c8c <check_fs+0xa8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d101      	bne.n	8009c7e <check_fs+0x9a>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e000      	b.n	8009c80 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009c7e:	2302      	movs	r3, #2
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	00544146 	.word	0x00544146
 8009c8c:	33544146 	.word	0x33544146

08009c90 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b096      	sub	sp, #88	; 0x58
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7ff ff59 	bl	8009b5c <get_ldnumber>
 8009caa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	da01      	bge.n	8009cb6 <find_volume+0x26>
 8009cb2:	230b      	movs	r3, #11
 8009cb4:	e265      	b.n	800a182 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009cb6:	4a9f      	ldr	r2, [pc, #636]	; (8009f34 <find_volume+0x2a4>)
 8009cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cbe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <find_volume+0x3a>
 8009cc6:	230c      	movs	r3, #12
 8009cc8:	e25b      	b.n	800a182 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009cd0:	79fb      	ldrb	r3, [r7, #7]
 8009cd2:	f023 0301 	bic.w	r3, r3, #1
 8009cd6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d01a      	beq.n	8009d16 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe f8b5 	bl	8007e54 <disk_status>
 8009cea:	4603      	mov	r3, r0
 8009cec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009cf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10c      	bne.n	8009d16 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d007      	beq.n	8009d12 <find_volume+0x82>
 8009d02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009d0e:	230a      	movs	r3, #10
 8009d10:	e237      	b.n	800a182 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8009d12:	2300      	movs	r3, #0
 8009d14:	e235      	b.n	800a182 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d18:	2200      	movs	r2, #0
 8009d1a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d22:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d26:	785b      	ldrb	r3, [r3, #1]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fe f8ad 	bl	8007e88 <disk_initialize>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009d34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d38:	f003 0301 	and.w	r3, r3, #1
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009d40:	2303      	movs	r3, #3
 8009d42:	e21e      	b.n	800a182 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009d44:	79fb      	ldrb	r3, [r7, #7]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d007      	beq.n	8009d5a <find_volume+0xca>
 8009d4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009d4e:	f003 0304 	and.w	r3, r3, #4
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009d56:	230a      	movs	r3, #10
 8009d58:	e213      	b.n	800a182 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5c:	7858      	ldrb	r0, [r3, #1]
 8009d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d60:	330c      	adds	r3, #12
 8009d62:	461a      	mov	r2, r3
 8009d64:	2102      	movs	r1, #2
 8009d66:	f7fe f8f7 	bl	8007f58 <disk_ioctl>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <find_volume+0xe4>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e206      	b.n	800a182 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d76:	899b      	ldrh	r3, [r3, #12]
 8009d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d7c:	d80d      	bhi.n	8009d9a <find_volume+0x10a>
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d80:	899b      	ldrh	r3, [r3, #12]
 8009d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d86:	d308      	bcc.n	8009d9a <find_volume+0x10a>
 8009d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8a:	899b      	ldrh	r3, [r3, #12]
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d90:	899b      	ldrh	r3, [r3, #12]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	4013      	ands	r3, r2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <find_volume+0x10e>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e1f1      	b.n	800a182 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009da4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009da6:	f7ff ff1d 	bl	8009be4 <check_fs>
 8009daa:	4603      	mov	r3, r0
 8009dac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009db0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d149      	bne.n	8009e4c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009db8:	2300      	movs	r3, #0
 8009dba:	643b      	str	r3, [r7, #64]	; 0x40
 8009dbc:	e01e      	b.n	8009dfc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dc0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8009dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009dcc:	4413      	add	r3, r2
 8009dce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d006      	beq.n	8009de8 <find_volume+0x158>
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	3308      	adds	r3, #8
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe f8f0 	bl	8007fc4 <ld_dword>
 8009de4:	4602      	mov	r2, r0
 8009de6:	e000      	b.n	8009dea <find_volume+0x15a>
 8009de8:	2200      	movs	r2, #0
 8009dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	3358      	adds	r3, #88	; 0x58
 8009df0:	443b      	add	r3, r7
 8009df2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009df8:	3301      	adds	r3, #1
 8009dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8009dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d9dd      	bls.n	8009dbe <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009e02:	2300      	movs	r3, #0
 8009e04:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <find_volume+0x182>
 8009e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	3358      	adds	r3, #88	; 0x58
 8009e18:	443b      	add	r3, r7
 8009e1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009e1e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d005      	beq.n	8009e32 <find_volume+0x1a2>
 8009e26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009e28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e2a:	f7ff fedb 	bl	8009be4 <check_fs>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	e000      	b.n	8009e34 <find_volume+0x1a4>
 8009e32:	2303      	movs	r3, #3
 8009e34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d905      	bls.n	8009e4c <find_volume+0x1bc>
 8009e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e42:	3301      	adds	r3, #1
 8009e44:	643b      	str	r3, [r7, #64]	; 0x40
 8009e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d9e2      	bls.n	8009e12 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e50:	2b04      	cmp	r3, #4
 8009e52:	d101      	bne.n	8009e58 <find_volume+0x1c8>
 8009e54:	2301      	movs	r3, #1
 8009e56:	e194      	b.n	800a182 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009e58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d901      	bls.n	8009e64 <find_volume+0x1d4>
 8009e60:	230d      	movs	r3, #13
 8009e62:	e18e      	b.n	800a182 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e66:	3338      	adds	r3, #56	; 0x38
 8009e68:	330b      	adds	r3, #11
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe f892 	bl	8007f94 <ld_word>
 8009e70:	4603      	mov	r3, r0
 8009e72:	461a      	mov	r2, r3
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	899b      	ldrh	r3, [r3, #12]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d001      	beq.n	8009e80 <find_volume+0x1f0>
 8009e7c:	230d      	movs	r3, #13
 8009e7e:	e180      	b.n	800a182 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e82:	3338      	adds	r3, #56	; 0x38
 8009e84:	3316      	adds	r3, #22
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe f884 	bl	8007f94 <ld_word>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <find_volume+0x214>
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	3338      	adds	r3, #56	; 0x38
 8009e9a:	3324      	adds	r3, #36	; 0x24
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe f891 	bl	8007fc4 <ld_dword>
 8009ea2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ea8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb6:	789b      	ldrb	r3, [r3, #2]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d005      	beq.n	8009ec8 <find_volume+0x238>
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	789b      	ldrb	r3, [r3, #2]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d001      	beq.n	8009ec8 <find_volume+0x238>
 8009ec4:	230d      	movs	r3, #13
 8009ec6:	e15c      	b.n	800a182 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eca:	789b      	ldrb	r3, [r3, #2]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ed0:	fb02 f303 	mul.w	r3, r2, r3
 8009ed4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	895b      	ldrh	r3, [r3, #10]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d008      	beq.n	8009efc <find_volume+0x26c>
 8009eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eec:	895b      	ldrh	r3, [r3, #10]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	895b      	ldrh	r3, [r3, #10]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <find_volume+0x270>
 8009efc:	230d      	movs	r3, #13
 8009efe:	e140      	b.n	800a182 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	3338      	adds	r3, #56	; 0x38
 8009f04:	3311      	adds	r3, #17
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7fe f844 	bl	8007f94 <ld_word>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f12:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f16:	891b      	ldrh	r3, [r3, #8]
 8009f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f1a:	8992      	ldrh	r2, [r2, #12]
 8009f1c:	0952      	lsrs	r2, r2, #5
 8009f1e:	b292      	uxth	r2, r2
 8009f20:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f24:	fb01 f202 	mul.w	r2, r1, r2
 8009f28:	1a9b      	subs	r3, r3, r2
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d003      	beq.n	8009f38 <find_volume+0x2a8>
 8009f30:	230d      	movs	r3, #13
 8009f32:	e126      	b.n	800a182 <find_volume+0x4f2>
 8009f34:	200026d8 	.word	0x200026d8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3a:	3338      	adds	r3, #56	; 0x38
 8009f3c:	3313      	adds	r3, #19
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe f828 	bl	8007f94 <ld_word>
 8009f44:	4603      	mov	r3, r0
 8009f46:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d106      	bne.n	8009f5c <find_volume+0x2cc>
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	3338      	adds	r3, #56	; 0x38
 8009f52:	3320      	adds	r3, #32
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe f835 	bl	8007fc4 <ld_dword>
 8009f5a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	3338      	adds	r3, #56	; 0x38
 8009f60:	330e      	adds	r3, #14
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe f816 	bl	8007f94 <ld_word>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009f6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <find_volume+0x2e6>
 8009f72:	230d      	movs	r3, #13
 8009f74:	e105      	b.n	800a182 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009f76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7a:	4413      	add	r3, r2
 8009f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f7e:	8911      	ldrh	r1, [r2, #8]
 8009f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f82:	8992      	ldrh	r2, [r2, #12]
 8009f84:	0952      	lsrs	r2, r2, #5
 8009f86:	b292      	uxth	r2, r2
 8009f88:	fbb1 f2f2 	udiv	r2, r1, r2
 8009f8c:	b292      	uxth	r2, r2
 8009f8e:	4413      	add	r3, r2
 8009f90:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d201      	bcs.n	8009f9e <find_volume+0x30e>
 8009f9a:	230d      	movs	r3, #13
 8009f9c:	e0f1      	b.n	800a182 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fa6:	8952      	ldrh	r2, [r2, #10]
 8009fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <find_volume+0x328>
 8009fb4:	230d      	movs	r3, #13
 8009fb6:	e0e4      	b.n	800a182 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d802      	bhi.n	8009fce <find_volume+0x33e>
 8009fc8:	2302      	movs	r3, #2
 8009fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d802      	bhi.n	8009fde <find_volume+0x34e>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	1c9a      	adds	r2, r3, #2
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009fec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ff0:	441a      	add	r2, r3
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8009ff6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	441a      	add	r2, r3
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800a000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a004:	2b03      	cmp	r3, #3
 800a006:	d11e      	bne.n	800a046 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00a:	3338      	adds	r3, #56	; 0x38
 800a00c:	332a      	adds	r3, #42	; 0x2a
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fd ffc0 	bl	8007f94 <ld_word>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <find_volume+0x38e>
 800a01a:	230d      	movs	r3, #13
 800a01c:	e0b1      	b.n	800a182 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	891b      	ldrh	r3, [r3, #8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <find_volume+0x39a>
 800a026:	230d      	movs	r3, #13
 800a028:	e0ab      	b.n	800a182 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02c:	3338      	adds	r3, #56	; 0x38
 800a02e:	332c      	adds	r3, #44	; 0x2c
 800a030:	4618      	mov	r0, r3
 800a032:	f7fd ffc7 	bl	8007fc4 <ld_dword>
 800a036:	4602      	mov	r2, r0
 800a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	647b      	str	r3, [r7, #68]	; 0x44
 800a044:	e01f      	b.n	800a086 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	891b      	ldrh	r3, [r3, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <find_volume+0x3c2>
 800a04e:	230d      	movs	r3, #13
 800a050:	e097      	b.n	800a182 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a058:	441a      	add	r2, r3
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a05e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a062:	2b02      	cmp	r3, #2
 800a064:	d103      	bne.n	800a06e <find_volume+0x3de>
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	e00a      	b.n	800a084 <find_volume+0x3f4>
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	69da      	ldr	r2, [r3, #28]
 800a072:	4613      	mov	r3, r2
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	4413      	add	r3, r2
 800a078:	085a      	lsrs	r2, r3, #1
 800a07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a084:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	6a1a      	ldr	r2, [r3, #32]
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	899b      	ldrh	r3, [r3, #12]
 800a08e:	4619      	mov	r1, r3
 800a090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a092:	440b      	add	r3, r1
 800a094:	3b01      	subs	r3, #1
 800a096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a098:	8989      	ldrh	r1, [r1, #12]
 800a09a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d201      	bcs.n	800a0a6 <find_volume+0x416>
 800a0a2:	230d      	movs	r3, #13
 800a0a4:	e06d      	b.n	800a182 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ac:	619a      	str	r2, [r3, #24]
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b0:	699a      	ldr	r2, [r3, #24]
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0b8:	2280      	movs	r2, #128	; 0x80
 800a0ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a0bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d149      	bne.n	800a158 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	3338      	adds	r3, #56	; 0x38
 800a0c8:	3330      	adds	r3, #48	; 0x30
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fd ff62 	bl	8007f94 <ld_word>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d140      	bne.n	800a158 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d8:	3301      	adds	r3, #1
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0de:	f7fe fa09 	bl	80084f4 <move_window>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d137      	bne.n	800a158 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	3338      	adds	r3, #56	; 0x38
 800a0f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7fd ff4c 	bl	8007f94 <ld_word>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	461a      	mov	r2, r3
 800a100:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a104:	429a      	cmp	r2, r3
 800a106:	d127      	bne.n	800a158 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	3338      	adds	r3, #56	; 0x38
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fd ff59 	bl	8007fc4 <ld_dword>
 800a112:	4603      	mov	r3, r0
 800a114:	4a1d      	ldr	r2, [pc, #116]	; (800a18c <find_volume+0x4fc>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d11e      	bne.n	800a158 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11c:	3338      	adds	r3, #56	; 0x38
 800a11e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a122:	4618      	mov	r0, r3
 800a124:	f7fd ff4e 	bl	8007fc4 <ld_dword>
 800a128:	4603      	mov	r3, r0
 800a12a:	4a19      	ldr	r2, [pc, #100]	; (800a190 <find_volume+0x500>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d113      	bne.n	800a158 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	3338      	adds	r3, #56	; 0x38
 800a134:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fd ff43 	bl	8007fc4 <ld_dword>
 800a13e:	4602      	mov	r2, r0
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a146:	3338      	adds	r3, #56	; 0x38
 800a148:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fd ff39 	bl	8007fc4 <ld_dword>
 800a152:	4602      	mov	r2, r0
 800a154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a156:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a15e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a160:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <find_volume+0x504>)
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	3301      	adds	r3, #1
 800a166:	b29a      	uxth	r2, r3
 800a168:	4b0a      	ldr	r3, [pc, #40]	; (800a194 <find_volume+0x504>)
 800a16a:	801a      	strh	r2, [r3, #0]
 800a16c:	4b09      	ldr	r3, [pc, #36]	; (800a194 <find_volume+0x504>)
 800a16e:	881a      	ldrh	r2, [r3, #0]
 800a170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a172:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800a174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a176:	4a08      	ldr	r2, [pc, #32]	; (800a198 <find_volume+0x508>)
 800a178:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a17a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a17c:	f7fe f952 	bl	8008424 <clear_lock>
#endif
	return FR_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3758      	adds	r7, #88	; 0x58
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	41615252 	.word	0x41615252
 800a190:	61417272 	.word	0x61417272
 800a194:	200026dc 	.word	0x200026dc
 800a198:	20002700 	.word	0x20002700

0800a19c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a1a6:	2309      	movs	r3, #9
 800a1a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d01c      	beq.n	800a1ea <validate+0x4e>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d018      	beq.n	800a1ea <validate+0x4e>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d013      	beq.n	800a1ea <validate+0x4e>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	889a      	ldrh	r2, [r3, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	88db      	ldrh	r3, [r3, #6]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d10c      	bne.n	800a1ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	785b      	ldrb	r3, [r3, #1]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fd fe3c 	bl	8007e54 <disk_status>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f003 0301 	and.w	r3, r3, #1
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <validate+0x4e>
			res = FR_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d102      	bne.n	800a1f6 <validate+0x5a>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	e000      	b.n	800a1f8 <validate+0x5c>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	6013      	str	r3, [r2, #0]
	return res;
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b088      	sub	sp, #32
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a21a:	f107 0310 	add.w	r3, r7, #16
 800a21e:	4618      	mov	r0, r3
 800a220:	f7ff fc9c 	bl	8009b5c <get_ldnumber>
 800a224:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	da01      	bge.n	800a230 <f_mount+0x28>
 800a22c:	230b      	movs	r3, #11
 800a22e:	e02b      	b.n	800a288 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a230:	4a17      	ldr	r2, [pc, #92]	; (800a290 <f_mount+0x88>)
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a238:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d005      	beq.n	800a24c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a240:	69b8      	ldr	r0, [r7, #24]
 800a242:	f7fe f8ef 	bl	8008424 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	490d      	ldr	r1, [pc, #52]	; (800a290 <f_mount+0x88>)
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d002      	beq.n	800a26e <f_mount+0x66>
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d001      	beq.n	800a272 <f_mount+0x6a>
 800a26e:	2300      	movs	r3, #0
 800a270:	e00a      	b.n	800a288 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a272:	f107 010c 	add.w	r1, r7, #12
 800a276:	f107 0308 	add.w	r3, r7, #8
 800a27a:	2200      	movs	r2, #0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fd07 	bl	8009c90 <find_volume>
 800a282:	4603      	mov	r3, r0
 800a284:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a286:	7dfb      	ldrb	r3, [r7, #23]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3720      	adds	r7, #32
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	200026d8 	.word	0x200026d8

0800a294 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b09a      	sub	sp, #104	; 0x68
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <f_open+0x18>
 800a2a8:	2309      	movs	r3, #9
 800a2aa:	e1bb      	b.n	800a624 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a2b4:	79fa      	ldrb	r2, [r7, #7]
 800a2b6:	f107 0114 	add.w	r1, r7, #20
 800a2ba:	f107 0308 	add.w	r3, r7, #8
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff fce6 	bl	8009c90 <find_volume>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800a2ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f040 819f 	bne.w	800a612 <f_open+0x37e>
		dj.obj.fs = fs;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	f107 0318 	add.w	r3, r7, #24
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff fbc5 	bl	8009a70 <follow_path>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a2ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d11a      	bne.n	800a32a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a2f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a2f8:	b25b      	sxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	da03      	bge.n	800a306 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a2fe:	2306      	movs	r3, #6
 800a300:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a304:	e011      	b.n	800a32a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a306:	79fb      	ldrb	r3, [r7, #7]
 800a308:	f023 0301 	bic.w	r3, r3, #1
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	bf14      	ite	ne
 800a310:	2301      	movne	r3, #1
 800a312:	2300      	moveq	r3, #0
 800a314:	b2db      	uxtb	r3, r3
 800a316:	461a      	mov	r2, r3
 800a318:	f107 0318 	add.w	r3, r7, #24
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fd ff38 	bl	8008194 <chk_lock>
 800a324:	4603      	mov	r3, r0
 800a326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a32a:	79fb      	ldrb	r3, [r7, #7]
 800a32c:	f003 031c 	and.w	r3, r3, #28
 800a330:	2b00      	cmp	r3, #0
 800a332:	d07f      	beq.n	800a434 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a334:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d017      	beq.n	800a36c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a33c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a340:	2b04      	cmp	r3, #4
 800a342:	d10e      	bne.n	800a362 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a344:	f7fd ff82 	bl	800824c <enq_lock>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d006      	beq.n	800a35c <f_open+0xc8>
 800a34e:	f107 0318 	add.w	r3, r7, #24
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff f8dc 	bl	8009510 <dir_register>
 800a358:	4603      	mov	r3, r0
 800a35a:	e000      	b.n	800a35e <f_open+0xca>
 800a35c:	2312      	movs	r3, #18
 800a35e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	f043 0308 	orr.w	r3, r3, #8
 800a368:	71fb      	strb	r3, [r7, #7]
 800a36a:	e010      	b.n	800a38e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a36c:	7fbb      	ldrb	r3, [r7, #30]
 800a36e:	f003 0311 	and.w	r3, r3, #17
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <f_open+0xea>
					res = FR_DENIED;
 800a376:	2307      	movs	r3, #7
 800a378:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a37c:	e007      	b.n	800a38e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <f_open+0xfa>
 800a388:	2308      	movs	r3, #8
 800a38a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a38e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a392:	2b00      	cmp	r3, #0
 800a394:	d168      	bne.n	800a468 <f_open+0x1d4>
 800a396:	79fb      	ldrb	r3, [r7, #7]
 800a398:	f003 0308 	and.w	r3, r3, #8
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d063      	beq.n	800a468 <f_open+0x1d4>
				dw = GET_FATTIME();
 800a3a0:	f7fd fcfa 	bl	8007d98 <get_fattime>
 800a3a4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a8:	330e      	adds	r3, #14
 800a3aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7fd fe47 	bl	8008040 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b4:	3316      	adds	r3, #22
 800a3b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fd fe41 	bl	8008040 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c0:	330b      	adds	r3, #11
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7fe fe17 	bl	8009000 <ld_clust>
 800a3d2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fe fe2f 	bl	800903e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	331c      	adds	r3, #28
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fd fe2a 	bl	8008040 <st_dword>
					fs->wflag = 1;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a3f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d037      	beq.n	800a468 <f_open+0x1d4>
						dw = fs->winsect;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3fc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800a3fe:	f107 0318 	add.w	r3, r7, #24
 800a402:	2200      	movs	r2, #0
 800a404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fb1f 	bl	8008a4a <remove_chain>
 800a40c:	4603      	mov	r3, r0
 800a40e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800a412:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a416:	2b00      	cmp	r3, #0
 800a418:	d126      	bne.n	800a468 <f_open+0x1d4>
							res = move_window(fs, dw);
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe f868 	bl	80084f4 <move_window>
 800a424:	4603      	mov	r3, r0
 800a426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a42e:	3a01      	subs	r2, #1
 800a430:	615a      	str	r2, [r3, #20]
 800a432:	e019      	b.n	800a468 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a434:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d115      	bne.n	800a468 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a43c:	7fbb      	ldrb	r3, [r7, #30]
 800a43e:	f003 0310 	and.w	r3, r3, #16
 800a442:	2b00      	cmp	r3, #0
 800a444:	d003      	beq.n	800a44e <f_open+0x1ba>
					res = FR_NO_FILE;
 800a446:	2304      	movs	r3, #4
 800a448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a44c:	e00c      	b.n	800a468 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a44e:	79fb      	ldrb	r3, [r7, #7]
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d007      	beq.n	800a468 <f_open+0x1d4>
 800a458:	7fbb      	ldrb	r3, [r7, #30]
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d002      	beq.n	800a468 <f_open+0x1d4>
						res = FR_DENIED;
 800a462:	2307      	movs	r3, #7
 800a464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800a468:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d128      	bne.n	800a4c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a470:	79fb      	ldrb	r3, [r7, #7]
 800a472:	f003 0308 	and.w	r3, r3, #8
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a480:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a48a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	f023 0301 	bic.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	bf14      	ite	ne
 800a49a:	2301      	movne	r3, #1
 800a49c:	2300      	moveq	r3, #0
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	f107 0318 	add.w	r3, r7, #24
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fd fef1 	bl	8008290 <inc_lock>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d102      	bne.n	800a4c2 <f_open+0x22e>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a4c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f040 80a3 	bne.w	800a612 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fe fd94 	bl	8009000 <ld_clust>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e0:	331c      	adds	r3, #28
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fd fd6e 	bl	8007fc4 <ld_dword>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	88da      	ldrh	r2, [r3, #6]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	79fa      	ldrb	r2, [r7, #7]
 800a506:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2200      	movs	r2, #0
 800a512:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3330      	adds	r3, #48	; 0x30
 800a51e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a522:	2100      	movs	r1, #0
 800a524:	4618      	mov	r0, r3
 800a526:	f7fd fdd8 	bl	80080da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	f003 0320 	and.w	r3, r3, #32
 800a530:	2b00      	cmp	r3, #0
 800a532:	d06e      	beq.n	800a612 <f_open+0x37e>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d06a      	beq.n	800a612 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	895b      	ldrh	r3, [r3, #10]
 800a548:	461a      	mov	r2, r3
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	899b      	ldrh	r3, [r3, #12]
 800a54e:	fb02 f303 	mul.w	r3, r2, r3
 800a552:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a560:	e016      	b.n	800a590 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe f881 	bl	800866e <get_fat>
 800a56c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800a56e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a570:	2b01      	cmp	r3, #1
 800a572:	d802      	bhi.n	800a57a <f_open+0x2e6>
 800a574:	2302      	movs	r3, #2
 800a576:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a57a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a580:	d102      	bne.n	800a588 <f_open+0x2f4>
 800a582:	2301      	movs	r3, #1
 800a584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a58a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a590:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a594:	2b00      	cmp	r3, #0
 800a596:	d103      	bne.n	800a5a0 <f_open+0x30c>
 800a598:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a59a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d8e0      	bhi.n	800a562 <f_open+0x2ce>
				}
				fp->clust = clst;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a5a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d131      	bne.n	800a612 <f_open+0x37e>
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	899b      	ldrh	r3, [r3, #12]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5ba:	fb01 f202 	mul.w	r2, r1, r2
 800a5be:	1a9b      	subs	r3, r3, r2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d026      	beq.n	800a612 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7fe f831 	bl	8008630 <clust2sect>
 800a5ce:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <f_open+0x34a>
						res = FR_INT_ERR;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800a5dc:	e019      	b.n	800a612 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	899b      	ldrh	r3, [r3, #12]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5ec:	441a      	add	r2, r3
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	7858      	ldrb	r0, [r3, #1]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6a1a      	ldr	r2, [r3, #32]
 800a600:	2301      	movs	r3, #1
 800a602:	f7fd fc69 	bl	8007ed8 <disk_read>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <f_open+0x37e>
 800a60c:	2301      	movs	r3, #1
 800a60e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a612:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <f_open+0x38c>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2200      	movs	r2, #0
 800a61e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a620:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800a624:	4618      	mov	r0, r3
 800a626:	3768      	adds	r7, #104	; 0x68
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b08c      	sub	sp, #48	; 0x30
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f107 0210 	add.w	r2, r7, #16
 800a64a:	4611      	mov	r1, r2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7ff fda5 	bl	800a19c <validate>
 800a652:	4603      	mov	r3, r0
 800a654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d107      	bne.n	800a670 <f_write+0x44>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	7d5b      	ldrb	r3, [r3, #21]
 800a664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a668:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <f_write+0x4a>
 800a670:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a674:	e16a      	b.n	800a94c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	7d1b      	ldrb	r3, [r3, #20]
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <f_write+0x5a>
 800a682:	2307      	movs	r3, #7
 800a684:	e162      	b.n	800a94c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	699a      	ldr	r2, [r3, #24]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	441a      	add	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	429a      	cmp	r2, r3
 800a694:	f080 814c 	bcs.w	800a930 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	699b      	ldr	r3, [r3, #24]
 800a69c:	43db      	mvns	r3, r3
 800a69e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a6a0:	e146      	b.n	800a930 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	8992      	ldrh	r2, [r2, #12]
 800a6aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6ae:	fb01 f202 	mul.w	r2, r1, r2
 800a6b2:	1a9b      	subs	r3, r3, r2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f040 80f1 	bne.w	800a89c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	8992      	ldrh	r2, [r2, #12]
 800a6c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	8952      	ldrh	r2, [r2, #10]
 800a6ca:	3a01      	subs	r2, #1
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d143      	bne.n	800a75e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10c      	bne.n	800a6f8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d11a      	bne.n	800a720 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fa10 	bl	8008b14 <create_chain>
 800a6f4:	62b8      	str	r0, [r7, #40]	; 0x28
 800a6f6:	e013      	b.n	800a720 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d007      	beq.n	800a710 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	4619      	mov	r1, r3
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f7fe fa9c 	bl	8008c44 <clmt_clust>
 800a70c:	62b8      	str	r0, [r7, #40]	; 0x28
 800a70e:	e007      	b.n	800a720 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	4619      	mov	r1, r3
 800a718:	4610      	mov	r0, r2
 800a71a:	f7fe f9fb 	bl	8008b14 <create_chain>
 800a71e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 8109 	beq.w	800a93a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d104      	bne.n	800a738 <f_write+0x10c>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2202      	movs	r2, #2
 800a732:	755a      	strb	r2, [r3, #21]
 800a734:	2302      	movs	r3, #2
 800a736:	e109      	b.n	800a94c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73e:	d104      	bne.n	800a74a <f_write+0x11e>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2201      	movs	r2, #1
 800a744:	755a      	strb	r2, [r3, #21]
 800a746:	2301      	movs	r3, #1
 800a748:	e100      	b.n	800a94c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a74e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d102      	bne.n	800a75e <f_write+0x132>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a75c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	7d1b      	ldrb	r3, [r3, #20]
 800a762:	b25b      	sxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	da18      	bge.n	800a79a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	7858      	ldrb	r0, [r3, #1]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6a1a      	ldr	r2, [r3, #32]
 800a776:	2301      	movs	r3, #1
 800a778:	f7fd fbce 	bl	8007f18 <disk_write>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d004      	beq.n	800a78c <f_write+0x160>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2201      	movs	r2, #1
 800a786:	755a      	strb	r2, [r3, #21]
 800a788:	2301      	movs	r3, #1
 800a78a:	e0df      	b.n	800a94c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	7d1b      	ldrb	r3, [r3, #20]
 800a790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a794:	b2da      	uxtb	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	f7fd ff44 	bl	8008630 <clust2sect>
 800a7a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d104      	bne.n	800a7ba <f_write+0x18e>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	755a      	strb	r2, [r3, #21]
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	e0c8      	b.n	800a94c <f_write+0x320>
			sect += csect;
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	4413      	add	r3, r2
 800a7c0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	899b      	ldrh	r3, [r3, #12]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7ce:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a7d0:	6a3b      	ldr	r3, [r7, #32]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d043      	beq.n	800a85e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a7d6:	69ba      	ldr	r2, [r7, #24]
 800a7d8:	6a3b      	ldr	r3, [r7, #32]
 800a7da:	4413      	add	r3, r2
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	8952      	ldrh	r2, [r2, #10]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d905      	bls.n	800a7f0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	895b      	ldrh	r3, [r3, #10]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	7858      	ldrb	r0, [r3, #1]
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	69f9      	ldr	r1, [r7, #28]
 800a7fa:	f7fd fb8d 	bl	8007f18 <disk_write>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d004      	beq.n	800a80e <f_write+0x1e2>
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2201      	movs	r2, #1
 800a808:	755a      	strb	r2, [r3, #21]
 800a80a:	2301      	movs	r3, #1
 800a80c:	e09e      	b.n	800a94c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6a1a      	ldr	r2, [r3, #32]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	6a3a      	ldr	r2, [r7, #32]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d918      	bls.n	800a84e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6a1a      	ldr	r2, [r3, #32]
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	1ad3      	subs	r3, r2, r3
 800a82a:	693a      	ldr	r2, [r7, #16]
 800a82c:	8992      	ldrh	r2, [r2, #12]
 800a82e:	fb02 f303 	mul.w	r3, r2, r3
 800a832:	69fa      	ldr	r2, [r7, #28]
 800a834:	18d1      	adds	r1, r2, r3
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	899b      	ldrh	r3, [r3, #12]
 800a83a:	461a      	mov	r2, r3
 800a83c:	f7fd fc2c 	bl	8008098 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	7d1b      	ldrb	r3, [r3, #20]
 800a844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a848:	b2da      	uxtb	r2, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	899b      	ldrh	r3, [r3, #12]
 800a852:	461a      	mov	r2, r3
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	fb02 f303 	mul.w	r3, r2, r3
 800a85a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a85c:	e04b      	b.n	800a8f6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	429a      	cmp	r2, r3
 800a866:	d016      	beq.n	800a896 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a870:	429a      	cmp	r2, r3
 800a872:	d210      	bcs.n	800a896 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	7858      	ldrb	r0, [r3, #1]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a87e:	2301      	movs	r3, #1
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	f7fd fb29 	bl	8007ed8 <disk_read>
 800a886:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d004      	beq.n	800a896 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2201      	movs	r2, #1
 800a890:	755a      	strb	r2, [r3, #21]
 800a892:	2301      	movs	r3, #1
 800a894:	e05a      	b.n	800a94c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	697a      	ldr	r2, [r7, #20]
 800a89a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	899b      	ldrh	r3, [r3, #12]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	8992      	ldrh	r2, [r2, #12]
 800a8aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8ae:	fb01 f202 	mul.w	r2, r1, r2
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	1ac3      	subs	r3, r0, r3
 800a8b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d901      	bls.n	800a8c4 <f_write+0x298>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	693a      	ldr	r2, [r7, #16]
 800a8d0:	8992      	ldrh	r2, [r2, #12]
 800a8d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8d6:	fb00 f202 	mul.w	r2, r0, r2
 800a8da:	1a9b      	subs	r3, r3, r2
 800a8dc:	440b      	add	r3, r1
 800a8de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8e0:	69f9      	ldr	r1, [r7, #28]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fd fbd8 	bl	8008098 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	7d1b      	ldrb	r3, [r3, #20]
 800a8ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8f0:	b2da      	uxtb	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a8f6:	69fa      	ldr	r2, [r7, #28]
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	4413      	add	r3, r2
 800a8fc:	61fb      	str	r3, [r7, #28]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	699a      	ldr	r2, [r3, #24]
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	441a      	add	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	619a      	str	r2, [r3, #24]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	429a      	cmp	r2, r3
 800a914:	bf38      	it	cc
 800a916:	461a      	movcc	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	60da      	str	r2, [r3, #12]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	441a      	add	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	601a      	str	r2, [r3, #0]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	1ad3      	subs	r3, r2, r3
 800a92e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f47f aeb5 	bne.w	800a6a2 <f_write+0x76>
 800a938:	e000      	b.n	800a93c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a93a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	7d1b      	ldrb	r3, [r3, #20]
 800a940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a944:	b2da      	uxtb	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3730      	adds	r7, #48	; 0x30
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b086      	sub	sp, #24
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f107 0208 	add.w	r2, r7, #8
 800a962:	4611      	mov	r1, r2
 800a964:	4618      	mov	r0, r3
 800a966:	f7ff fc19 	bl	800a19c <validate>
 800a96a:	4603      	mov	r3, r0
 800a96c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d168      	bne.n	800aa46 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	7d1b      	ldrb	r3, [r3, #20]
 800a978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d062      	beq.n	800aa46 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	7d1b      	ldrb	r3, [r3, #20]
 800a984:	b25b      	sxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	da15      	bge.n	800a9b6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	7858      	ldrb	r0, [r3, #1]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a1a      	ldr	r2, [r3, #32]
 800a998:	2301      	movs	r3, #1
 800a99a:	f7fd fabd 	bl	8007f18 <disk_write>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <f_sync+0x54>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e04f      	b.n	800aa48 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	7d1b      	ldrb	r3, [r3, #20]
 800a9ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9b0:	b2da      	uxtb	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a9b6:	f7fd f9ef 	bl	8007d98 <get_fattime>
 800a9ba:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	4610      	mov	r0, r2
 800a9c6:	f7fd fd95 	bl	80084f4 <move_window>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d138      	bne.n	800aa46 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	330b      	adds	r3, #11
 800a9de:	781a      	ldrb	r2, [r3, #0]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	330b      	adds	r3, #11
 800a9e4:	f042 0220 	orr.w	r2, r2, #32
 800a9e8:	b2d2      	uxtb	r2, r2
 800a9ea:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6818      	ldr	r0, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	68f9      	ldr	r1, [r7, #12]
 800a9f8:	f7fe fb21 	bl	800903e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f103 021c 	add.w	r2, r3, #28
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	4619      	mov	r1, r3
 800aa08:	4610      	mov	r0, r2
 800aa0a:	f7fd fb19 	bl	8008040 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3316      	adds	r3, #22
 800aa12:	6939      	ldr	r1, [r7, #16]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fd fb13 	bl	8008040 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3312      	adds	r3, #18
 800aa1e:	2100      	movs	r1, #0
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7fd faf2 	bl	800800a <st_word>
					fs->wflag = 1;
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fd fd8e 	bl	8008550 <sync_fs>
 800aa34:	4603      	mov	r3, r0
 800aa36:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	7d1b      	ldrb	r3, [r3, #20]
 800aa3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff ff7b 	bl	800a954 <f_sync>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d118      	bne.n	800aa9a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f107 0208 	add.w	r2, r7, #8
 800aa6e:	4611      	mov	r1, r2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff fb93 	bl	800a19c <validate>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10c      	bne.n	800aa9a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fd fc91 	bl	80083ac <dec_lock>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d102      	bne.n	800aa9a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	2b0a      	cmp	r3, #10
 800aab4:	d103      	bne.n	800aabe <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800aab6:	210d      	movs	r1, #13
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff fff3 	bl	800aaa4 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	db25      	blt.n	800ab16 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	60fa      	str	r2, [r7, #12]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	4413      	add	r3, r2
 800aad4:	78fa      	ldrb	r2, [r7, #3]
 800aad6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b3c      	cmp	r3, #60	; 0x3c
 800aadc:	dd12      	ble.n	800ab04 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6818      	ldr	r0, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f103 010c 	add.w	r1, r3, #12
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	f107 0308 	add.w	r3, r7, #8
 800aaee:	f7ff fd9d 	bl	800a62c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d101      	bne.n	800aafe <putc_bfd+0x5a>
 800aafa:	2300      	movs	r3, #0
 800aafc:	e001      	b.n	800ab02 <putc_bfd+0x5e>
 800aafe:	f04f 33ff 	mov.w	r3, #4294967295
 800ab02:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	609a      	str	r2, [r3, #8]
 800ab14:	e000      	b.n	800ab18 <putc_bfd+0x74>
	if (i < 0) return;
 800ab16:	bf00      	nop
}
 800ab18:	3710      	adds	r7, #16
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	db16      	blt.n	800ab5c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f103 010c 	add.w	r1, r3, #12
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	f107 030c 	add.w	r3, r7, #12
 800ab42:	f7ff fd73 	bl	800a62c <f_write>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d107      	bne.n	800ab5c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d102      	bne.n	800ab5c <putc_flush+0x3e>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	e001      	b.n	800ab60 <putc_flush+0x42>
	return EOF;
 800ab5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	605a      	str	r2, [r3, #4]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685a      	ldr	r2, [r3, #4]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	609a      	str	r2, [r3, #8]
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b096      	sub	sp, #88	; 0x58
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ab9c:	f107 030c 	add.w	r3, r7, #12
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff ffe0 	bl	800ab68 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800aba8:	e009      	b.n	800abbe <f_puts+0x2c>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	607a      	str	r2, [r7, #4]
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	f107 030c 	add.w	r3, r7, #12
 800abb6:	4611      	mov	r1, r2
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff ff73 	bl	800aaa4 <putc_bfd>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1f1      	bne.n	800abaa <f_puts+0x18>
	return putc_flush(&pb);
 800abc6:	f107 030c 	add.w	r3, r7, #12
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff ffa7 	bl	800ab1e <putc_flush>
 800abd0:	4603      	mov	r3, r0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3758      	adds	r7, #88	; 0x58
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
	...

0800abdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	4613      	mov	r3, r2
 800abe8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800abea:	2301      	movs	r3, #1
 800abec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800abf2:	4b1f      	ldr	r3, [pc, #124]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800abf4:	7a5b      	ldrb	r3, [r3, #9]
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d131      	bne.n	800ac60 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800abfc:	4b1c      	ldr	r3, [pc, #112]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800abfe:	7a5b      	ldrb	r3, [r3, #9]
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	461a      	mov	r2, r3
 800ac04:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800ac06:	2100      	movs	r1, #0
 800ac08:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac0a:	4b19      	ldr	r3, [pc, #100]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800ac0c:	7a5b      	ldrb	r3, [r3, #9]
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	4a17      	ldr	r2, [pc, #92]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac1a:	4b15      	ldr	r3, [pc, #84]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800ac1c:	7a5b      	ldrb	r3, [r3, #9]
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800ac24:	4413      	add	r3, r2
 800ac26:	79fa      	ldrb	r2, [r7, #7]
 800ac28:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac2a:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800ac2c:	7a5b      	ldrb	r3, [r3, #9]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	b2d1      	uxtb	r1, r2
 800ac34:	4a0e      	ldr	r2, [pc, #56]	; (800ac70 <FATFS_LinkDriverEx+0x94>)
 800ac36:	7251      	strb	r1, [r2, #9]
 800ac38:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac3a:	7dbb      	ldrb	r3, [r7, #22]
 800ac3c:	3330      	adds	r3, #48	; 0x30
 800ac3e:	b2da      	uxtb	r2, r3
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	3301      	adds	r3, #1
 800ac48:	223a      	movs	r2, #58	; 0x3a
 800ac4a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3302      	adds	r3, #2
 800ac50:	222f      	movs	r2, #47	; 0x2f
 800ac52:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	3303      	adds	r3, #3
 800ac58:	2200      	movs	r2, #0
 800ac5a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20002900 	.word	0x20002900

0800ac74 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ac7e:	2200      	movs	r2, #0
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7ff ffaa 	bl	800abdc <FATFS_LinkDriverEx>
 800ac88:	4603      	mov	r3, r0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
	...

0800ac94 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	6039      	str	r1, [r7, #0]
 800ac9e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800aca0:	88fb      	ldrh	r3, [r7, #6]
 800aca2:	2b7f      	cmp	r3, #127	; 0x7f
 800aca4:	d802      	bhi.n	800acac <ff_convert+0x18>
		c = chr;
 800aca6:	88fb      	ldrh	r3, [r7, #6]
 800aca8:	81fb      	strh	r3, [r7, #14]
 800acaa:	e025      	b.n	800acf8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00b      	beq.n	800acca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800acb2:	88fb      	ldrh	r3, [r7, #6]
 800acb4:	2bff      	cmp	r3, #255	; 0xff
 800acb6:	d805      	bhi.n	800acc4 <ff_convert+0x30>
 800acb8:	88fb      	ldrh	r3, [r7, #6]
 800acba:	3b80      	subs	r3, #128	; 0x80
 800acbc:	4a12      	ldr	r2, [pc, #72]	; (800ad08 <ff_convert+0x74>)
 800acbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc2:	e000      	b.n	800acc6 <ff_convert+0x32>
 800acc4:	2300      	movs	r3, #0
 800acc6:	81fb      	strh	r3, [r7, #14]
 800acc8:	e016      	b.n	800acf8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800acca:	2300      	movs	r3, #0
 800accc:	81fb      	strh	r3, [r7, #14]
 800acce:	e009      	b.n	800ace4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800acd0:	89fb      	ldrh	r3, [r7, #14]
 800acd2:	4a0d      	ldr	r2, [pc, #52]	; (800ad08 <ff_convert+0x74>)
 800acd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acd8:	88fa      	ldrh	r2, [r7, #6]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d006      	beq.n	800acec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800acde:	89fb      	ldrh	r3, [r7, #14]
 800ace0:	3301      	adds	r3, #1
 800ace2:	81fb      	strh	r3, [r7, #14]
 800ace4:	89fb      	ldrh	r3, [r7, #14]
 800ace6:	2b7f      	cmp	r3, #127	; 0x7f
 800ace8:	d9f2      	bls.n	800acd0 <ff_convert+0x3c>
 800acea:	e000      	b.n	800acee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800acec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800acee:	89fb      	ldrh	r3, [r7, #14]
 800acf0:	3380      	adds	r3, #128	; 0x80
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800acf8:	89fb      	ldrh	r3, [r7, #14]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	0800c508 	.word	0x0800c508

0800ad0c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b087      	sub	sp, #28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	4603      	mov	r3, r0
 800ad14:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ad16:	88fb      	ldrh	r3, [r7, #6]
 800ad18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad1c:	d201      	bcs.n	800ad22 <ff_wtoupper+0x16>
 800ad1e:	4b3e      	ldr	r3, [pc, #248]	; (800ae18 <ff_wtoupper+0x10c>)
 800ad20:	e000      	b.n	800ad24 <ff_wtoupper+0x18>
 800ad22:	4b3e      	ldr	r3, [pc, #248]	; (800ae1c <ff_wtoupper+0x110>)
 800ad24:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	1c9a      	adds	r2, r3, #2
 800ad2a:	617a      	str	r2, [r7, #20]
 800ad2c:	881b      	ldrh	r3, [r3, #0]
 800ad2e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ad30:	8a7b      	ldrh	r3, [r7, #18]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d068      	beq.n	800ae08 <ff_wtoupper+0xfc>
 800ad36:	88fa      	ldrh	r2, [r7, #6]
 800ad38:	8a7b      	ldrh	r3, [r7, #18]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d364      	bcc.n	800ae08 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	1c9a      	adds	r2, r3, #2
 800ad42:	617a      	str	r2, [r7, #20]
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	823b      	strh	r3, [r7, #16]
 800ad48:	8a3b      	ldrh	r3, [r7, #16]
 800ad4a:	0a1b      	lsrs	r3, r3, #8
 800ad4c:	81fb      	strh	r3, [r7, #14]
 800ad4e:	8a3b      	ldrh	r3, [r7, #16]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ad54:	88fa      	ldrh	r2, [r7, #6]
 800ad56:	8a79      	ldrh	r1, [r7, #18]
 800ad58:	8a3b      	ldrh	r3, [r7, #16]
 800ad5a:	440b      	add	r3, r1
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	da49      	bge.n	800adf4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ad60:	89fb      	ldrh	r3, [r7, #14]
 800ad62:	2b08      	cmp	r3, #8
 800ad64:	d84f      	bhi.n	800ae06 <ff_wtoupper+0xfa>
 800ad66:	a201      	add	r2, pc, #4	; (adr r2, 800ad6c <ff_wtoupper+0x60>)
 800ad68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6c:	0800ad91 	.word	0x0800ad91
 800ad70:	0800ada3 	.word	0x0800ada3
 800ad74:	0800adb9 	.word	0x0800adb9
 800ad78:	0800adc1 	.word	0x0800adc1
 800ad7c:	0800adc9 	.word	0x0800adc9
 800ad80:	0800add1 	.word	0x0800add1
 800ad84:	0800add9 	.word	0x0800add9
 800ad88:	0800ade1 	.word	0x0800ade1
 800ad8c:	0800ade9 	.word	0x0800ade9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ad90:	88fa      	ldrh	r2, [r7, #6]
 800ad92:	8a7b      	ldrh	r3, [r7, #18]
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	80fb      	strh	r3, [r7, #6]
 800ada0:	e027      	b.n	800adf2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ada2:	88fa      	ldrh	r2, [r7, #6]
 800ada4:	8a7b      	ldrh	r3, [r7, #18]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	b29b      	uxth	r3, r3
 800adb0:	88fa      	ldrh	r2, [r7, #6]
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	80fb      	strh	r3, [r7, #6]
 800adb6:	e01c      	b.n	800adf2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800adb8:	88fb      	ldrh	r3, [r7, #6]
 800adba:	3b10      	subs	r3, #16
 800adbc:	80fb      	strh	r3, [r7, #6]
 800adbe:	e018      	b.n	800adf2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800adc0:	88fb      	ldrh	r3, [r7, #6]
 800adc2:	3b20      	subs	r3, #32
 800adc4:	80fb      	strh	r3, [r7, #6]
 800adc6:	e014      	b.n	800adf2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800adc8:	88fb      	ldrh	r3, [r7, #6]
 800adca:	3b30      	subs	r3, #48	; 0x30
 800adcc:	80fb      	strh	r3, [r7, #6]
 800adce:	e010      	b.n	800adf2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800add0:	88fb      	ldrh	r3, [r7, #6]
 800add2:	3b1a      	subs	r3, #26
 800add4:	80fb      	strh	r3, [r7, #6]
 800add6:	e00c      	b.n	800adf2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800add8:	88fb      	ldrh	r3, [r7, #6]
 800adda:	3308      	adds	r3, #8
 800addc:	80fb      	strh	r3, [r7, #6]
 800adde:	e008      	b.n	800adf2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ade0:	88fb      	ldrh	r3, [r7, #6]
 800ade2:	3b50      	subs	r3, #80	; 0x50
 800ade4:	80fb      	strh	r3, [r7, #6]
 800ade6:	e004      	b.n	800adf2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ade8:	88fb      	ldrh	r3, [r7, #6]
 800adea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800adee:	80fb      	strh	r3, [r7, #6]
 800adf0:	bf00      	nop
			}
			break;
 800adf2:	e008      	b.n	800ae06 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800adf4:	89fb      	ldrh	r3, [r7, #14]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d195      	bne.n	800ad26 <ff_wtoupper+0x1a>
 800adfa:	8a3b      	ldrh	r3, [r7, #16]
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	4413      	add	r3, r2
 800ae02:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ae04:	e78f      	b.n	800ad26 <ff_wtoupper+0x1a>
			break;
 800ae06:	bf00      	nop
	}

	return chr;
 800ae08:	88fb      	ldrh	r3, [r7, #6]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	0800c608 	.word	0x0800c608
 800ae1c:	0800c7fc 	.word	0x0800c7fc

0800ae20 <malloc>:
 800ae20:	4b02      	ldr	r3, [pc, #8]	; (800ae2c <malloc+0xc>)
 800ae22:	4601      	mov	r1, r0
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	f000 b82b 	b.w	800ae80 <_malloc_r>
 800ae2a:	bf00      	nop
 800ae2c:	20000080 	.word	0x20000080

0800ae30 <free>:
 800ae30:	4b02      	ldr	r3, [pc, #8]	; (800ae3c <free+0xc>)
 800ae32:	4601      	mov	r1, r0
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	f000 ba73 	b.w	800b320 <_free_r>
 800ae3a:	bf00      	nop
 800ae3c:	20000080 	.word	0x20000080

0800ae40 <sbrk_aligned>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	4e0e      	ldr	r6, [pc, #56]	; (800ae7c <sbrk_aligned+0x3c>)
 800ae44:	460c      	mov	r4, r1
 800ae46:	6831      	ldr	r1, [r6, #0]
 800ae48:	4605      	mov	r5, r0
 800ae4a:	b911      	cbnz	r1, 800ae52 <sbrk_aligned+0x12>
 800ae4c:	f000 fa18 	bl	800b280 <_sbrk_r>
 800ae50:	6030      	str	r0, [r6, #0]
 800ae52:	4621      	mov	r1, r4
 800ae54:	4628      	mov	r0, r5
 800ae56:	f000 fa13 	bl	800b280 <_sbrk_r>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d00a      	beq.n	800ae74 <sbrk_aligned+0x34>
 800ae5e:	1cc4      	adds	r4, r0, #3
 800ae60:	f024 0403 	bic.w	r4, r4, #3
 800ae64:	42a0      	cmp	r0, r4
 800ae66:	d007      	beq.n	800ae78 <sbrk_aligned+0x38>
 800ae68:	1a21      	subs	r1, r4, r0
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f000 fa08 	bl	800b280 <_sbrk_r>
 800ae70:	3001      	adds	r0, #1
 800ae72:	d101      	bne.n	800ae78 <sbrk_aligned+0x38>
 800ae74:	f04f 34ff 	mov.w	r4, #4294967295
 800ae78:	4620      	mov	r0, r4
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}
 800ae7c:	20002910 	.word	0x20002910

0800ae80 <_malloc_r>:
 800ae80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae84:	1ccd      	adds	r5, r1, #3
 800ae86:	f025 0503 	bic.w	r5, r5, #3
 800ae8a:	3508      	adds	r5, #8
 800ae8c:	2d0c      	cmp	r5, #12
 800ae8e:	bf38      	it	cc
 800ae90:	250c      	movcc	r5, #12
 800ae92:	2d00      	cmp	r5, #0
 800ae94:	4607      	mov	r7, r0
 800ae96:	db01      	blt.n	800ae9c <_malloc_r+0x1c>
 800ae98:	42a9      	cmp	r1, r5
 800ae9a:	d905      	bls.n	800aea8 <_malloc_r+0x28>
 800ae9c:	230c      	movs	r3, #12
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	2600      	movs	r6, #0
 800aea2:	4630      	mov	r0, r6
 800aea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aea8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af7c <_malloc_r+0xfc>
 800aeac:	f000 f868 	bl	800af80 <__malloc_lock>
 800aeb0:	f8d8 3000 	ldr.w	r3, [r8]
 800aeb4:	461c      	mov	r4, r3
 800aeb6:	bb5c      	cbnz	r4, 800af10 <_malloc_r+0x90>
 800aeb8:	4629      	mov	r1, r5
 800aeba:	4638      	mov	r0, r7
 800aebc:	f7ff ffc0 	bl	800ae40 <sbrk_aligned>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	4604      	mov	r4, r0
 800aec4:	d155      	bne.n	800af72 <_malloc_r+0xf2>
 800aec6:	f8d8 4000 	ldr.w	r4, [r8]
 800aeca:	4626      	mov	r6, r4
 800aecc:	2e00      	cmp	r6, #0
 800aece:	d145      	bne.n	800af5c <_malloc_r+0xdc>
 800aed0:	2c00      	cmp	r4, #0
 800aed2:	d048      	beq.n	800af66 <_malloc_r+0xe6>
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	4631      	mov	r1, r6
 800aed8:	4638      	mov	r0, r7
 800aeda:	eb04 0903 	add.w	r9, r4, r3
 800aede:	f000 f9cf 	bl	800b280 <_sbrk_r>
 800aee2:	4581      	cmp	r9, r0
 800aee4:	d13f      	bne.n	800af66 <_malloc_r+0xe6>
 800aee6:	6821      	ldr	r1, [r4, #0]
 800aee8:	1a6d      	subs	r5, r5, r1
 800aeea:	4629      	mov	r1, r5
 800aeec:	4638      	mov	r0, r7
 800aeee:	f7ff ffa7 	bl	800ae40 <sbrk_aligned>
 800aef2:	3001      	adds	r0, #1
 800aef4:	d037      	beq.n	800af66 <_malloc_r+0xe6>
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	442b      	add	r3, r5
 800aefa:	6023      	str	r3, [r4, #0]
 800aefc:	f8d8 3000 	ldr.w	r3, [r8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d038      	beq.n	800af76 <_malloc_r+0xf6>
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	42a2      	cmp	r2, r4
 800af08:	d12b      	bne.n	800af62 <_malloc_r+0xe2>
 800af0a:	2200      	movs	r2, #0
 800af0c:	605a      	str	r2, [r3, #4]
 800af0e:	e00f      	b.n	800af30 <_malloc_r+0xb0>
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	1b52      	subs	r2, r2, r5
 800af14:	d41f      	bmi.n	800af56 <_malloc_r+0xd6>
 800af16:	2a0b      	cmp	r2, #11
 800af18:	d917      	bls.n	800af4a <_malloc_r+0xca>
 800af1a:	1961      	adds	r1, r4, r5
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	6025      	str	r5, [r4, #0]
 800af20:	bf18      	it	ne
 800af22:	6059      	strne	r1, [r3, #4]
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	bf08      	it	eq
 800af28:	f8c8 1000 	streq.w	r1, [r8]
 800af2c:	5162      	str	r2, [r4, r5]
 800af2e:	604b      	str	r3, [r1, #4]
 800af30:	4638      	mov	r0, r7
 800af32:	f104 060b 	add.w	r6, r4, #11
 800af36:	f000 f829 	bl	800af8c <__malloc_unlock>
 800af3a:	f026 0607 	bic.w	r6, r6, #7
 800af3e:	1d23      	adds	r3, r4, #4
 800af40:	1af2      	subs	r2, r6, r3
 800af42:	d0ae      	beq.n	800aea2 <_malloc_r+0x22>
 800af44:	1b9b      	subs	r3, r3, r6
 800af46:	50a3      	str	r3, [r4, r2]
 800af48:	e7ab      	b.n	800aea2 <_malloc_r+0x22>
 800af4a:	42a3      	cmp	r3, r4
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	d1dd      	bne.n	800af0c <_malloc_r+0x8c>
 800af50:	f8c8 2000 	str.w	r2, [r8]
 800af54:	e7ec      	b.n	800af30 <_malloc_r+0xb0>
 800af56:	4623      	mov	r3, r4
 800af58:	6864      	ldr	r4, [r4, #4]
 800af5a:	e7ac      	b.n	800aeb6 <_malloc_r+0x36>
 800af5c:	4634      	mov	r4, r6
 800af5e:	6876      	ldr	r6, [r6, #4]
 800af60:	e7b4      	b.n	800aecc <_malloc_r+0x4c>
 800af62:	4613      	mov	r3, r2
 800af64:	e7cc      	b.n	800af00 <_malloc_r+0x80>
 800af66:	230c      	movs	r3, #12
 800af68:	603b      	str	r3, [r7, #0]
 800af6a:	4638      	mov	r0, r7
 800af6c:	f000 f80e 	bl	800af8c <__malloc_unlock>
 800af70:	e797      	b.n	800aea2 <_malloc_r+0x22>
 800af72:	6025      	str	r5, [r4, #0]
 800af74:	e7dc      	b.n	800af30 <_malloc_r+0xb0>
 800af76:	605b      	str	r3, [r3, #4]
 800af78:	deff      	udf	#255	; 0xff
 800af7a:	bf00      	nop
 800af7c:	2000290c 	.word	0x2000290c

0800af80 <__malloc_lock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_lock+0x8>)
 800af82:	f000 b9ca 	b.w	800b31a <__retarget_lock_acquire_recursive>
 800af86:	bf00      	nop
 800af88:	20002a54 	.word	0x20002a54

0800af8c <__malloc_unlock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__malloc_unlock+0x8>)
 800af8e:	f000 b9c5 	b.w	800b31c <__retarget_lock_release_recursive>
 800af92:	bf00      	nop
 800af94:	20002a54 	.word	0x20002a54

0800af98 <std>:
 800af98:	2300      	movs	r3, #0
 800af9a:	b510      	push	{r4, lr}
 800af9c:	4604      	mov	r4, r0
 800af9e:	e9c0 3300 	strd	r3, r3, [r0]
 800afa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afa6:	6083      	str	r3, [r0, #8]
 800afa8:	8181      	strh	r1, [r0, #12]
 800afaa:	6643      	str	r3, [r0, #100]	; 0x64
 800afac:	81c2      	strh	r2, [r0, #14]
 800afae:	6183      	str	r3, [r0, #24]
 800afb0:	4619      	mov	r1, r3
 800afb2:	2208      	movs	r2, #8
 800afb4:	305c      	adds	r0, #92	; 0x5c
 800afb6:	f000 f926 	bl	800b206 <memset>
 800afba:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <std+0x58>)
 800afbc:	6263      	str	r3, [r4, #36]	; 0x24
 800afbe:	4b0d      	ldr	r3, [pc, #52]	; (800aff4 <std+0x5c>)
 800afc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800afc2:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <std+0x60>)
 800afc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afc6:	4b0d      	ldr	r3, [pc, #52]	; (800affc <std+0x64>)
 800afc8:	6323      	str	r3, [r4, #48]	; 0x30
 800afca:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <std+0x68>)
 800afcc:	6224      	str	r4, [r4, #32]
 800afce:	429c      	cmp	r4, r3
 800afd0:	d006      	beq.n	800afe0 <std+0x48>
 800afd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800afd6:	4294      	cmp	r4, r2
 800afd8:	d002      	beq.n	800afe0 <std+0x48>
 800afda:	33d0      	adds	r3, #208	; 0xd0
 800afdc:	429c      	cmp	r4, r3
 800afde:	d105      	bne.n	800afec <std+0x54>
 800afe0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afe8:	f000 b996 	b.w	800b318 <__retarget_lock_init_recursive>
 800afec:	bd10      	pop	{r4, pc}
 800afee:	bf00      	nop
 800aff0:	0800b181 	.word	0x0800b181
 800aff4:	0800b1a3 	.word	0x0800b1a3
 800aff8:	0800b1db 	.word	0x0800b1db
 800affc:	0800b1ff 	.word	0x0800b1ff
 800b000:	20002914 	.word	0x20002914

0800b004 <stdio_exit_handler>:
 800b004:	4a02      	ldr	r2, [pc, #8]	; (800b010 <stdio_exit_handler+0xc>)
 800b006:	4903      	ldr	r1, [pc, #12]	; (800b014 <stdio_exit_handler+0x10>)
 800b008:	4803      	ldr	r0, [pc, #12]	; (800b018 <stdio_exit_handler+0x14>)
 800b00a:	f000 b869 	b.w	800b0e0 <_fwalk_sglue>
 800b00e:	bf00      	nop
 800b010:	20000028 	.word	0x20000028
 800b014:	0800bd1d 	.word	0x0800bd1d
 800b018:	20000034 	.word	0x20000034

0800b01c <cleanup_stdio>:
 800b01c:	6841      	ldr	r1, [r0, #4]
 800b01e:	4b0c      	ldr	r3, [pc, #48]	; (800b050 <cleanup_stdio+0x34>)
 800b020:	4299      	cmp	r1, r3
 800b022:	b510      	push	{r4, lr}
 800b024:	4604      	mov	r4, r0
 800b026:	d001      	beq.n	800b02c <cleanup_stdio+0x10>
 800b028:	f000 fe78 	bl	800bd1c <_fflush_r>
 800b02c:	68a1      	ldr	r1, [r4, #8]
 800b02e:	4b09      	ldr	r3, [pc, #36]	; (800b054 <cleanup_stdio+0x38>)
 800b030:	4299      	cmp	r1, r3
 800b032:	d002      	beq.n	800b03a <cleanup_stdio+0x1e>
 800b034:	4620      	mov	r0, r4
 800b036:	f000 fe71 	bl	800bd1c <_fflush_r>
 800b03a:	68e1      	ldr	r1, [r4, #12]
 800b03c:	4b06      	ldr	r3, [pc, #24]	; (800b058 <cleanup_stdio+0x3c>)
 800b03e:	4299      	cmp	r1, r3
 800b040:	d004      	beq.n	800b04c <cleanup_stdio+0x30>
 800b042:	4620      	mov	r0, r4
 800b044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b048:	f000 be68 	b.w	800bd1c <_fflush_r>
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	bf00      	nop
 800b050:	20002914 	.word	0x20002914
 800b054:	2000297c 	.word	0x2000297c
 800b058:	200029e4 	.word	0x200029e4

0800b05c <global_stdio_init.part.0>:
 800b05c:	b510      	push	{r4, lr}
 800b05e:	4b0b      	ldr	r3, [pc, #44]	; (800b08c <global_stdio_init.part.0+0x30>)
 800b060:	4c0b      	ldr	r4, [pc, #44]	; (800b090 <global_stdio_init.part.0+0x34>)
 800b062:	4a0c      	ldr	r2, [pc, #48]	; (800b094 <global_stdio_init.part.0+0x38>)
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	4620      	mov	r0, r4
 800b068:	2200      	movs	r2, #0
 800b06a:	2104      	movs	r1, #4
 800b06c:	f7ff ff94 	bl	800af98 <std>
 800b070:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b074:	2201      	movs	r2, #1
 800b076:	2109      	movs	r1, #9
 800b078:	f7ff ff8e 	bl	800af98 <std>
 800b07c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b080:	2202      	movs	r2, #2
 800b082:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b086:	2112      	movs	r1, #18
 800b088:	f7ff bf86 	b.w	800af98 <std>
 800b08c:	20002a4c 	.word	0x20002a4c
 800b090:	20002914 	.word	0x20002914
 800b094:	0800b005 	.word	0x0800b005

0800b098 <__sfp_lock_acquire>:
 800b098:	4801      	ldr	r0, [pc, #4]	; (800b0a0 <__sfp_lock_acquire+0x8>)
 800b09a:	f000 b93e 	b.w	800b31a <__retarget_lock_acquire_recursive>
 800b09e:	bf00      	nop
 800b0a0:	20002a55 	.word	0x20002a55

0800b0a4 <__sfp_lock_release>:
 800b0a4:	4801      	ldr	r0, [pc, #4]	; (800b0ac <__sfp_lock_release+0x8>)
 800b0a6:	f000 b939 	b.w	800b31c <__retarget_lock_release_recursive>
 800b0aa:	bf00      	nop
 800b0ac:	20002a55 	.word	0x20002a55

0800b0b0 <__sinit>:
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	f7ff fff0 	bl	800b098 <__sfp_lock_acquire>
 800b0b8:	6a23      	ldr	r3, [r4, #32]
 800b0ba:	b11b      	cbz	r3, 800b0c4 <__sinit+0x14>
 800b0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c0:	f7ff bff0 	b.w	800b0a4 <__sfp_lock_release>
 800b0c4:	4b04      	ldr	r3, [pc, #16]	; (800b0d8 <__sinit+0x28>)
 800b0c6:	6223      	str	r3, [r4, #32]
 800b0c8:	4b04      	ldr	r3, [pc, #16]	; (800b0dc <__sinit+0x2c>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d1f5      	bne.n	800b0bc <__sinit+0xc>
 800b0d0:	f7ff ffc4 	bl	800b05c <global_stdio_init.part.0>
 800b0d4:	e7f2      	b.n	800b0bc <__sinit+0xc>
 800b0d6:	bf00      	nop
 800b0d8:	0800b01d 	.word	0x0800b01d
 800b0dc:	20002a4c 	.word	0x20002a4c

0800b0e0 <_fwalk_sglue>:
 800b0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e4:	4607      	mov	r7, r0
 800b0e6:	4688      	mov	r8, r1
 800b0e8:	4614      	mov	r4, r2
 800b0ea:	2600      	movs	r6, #0
 800b0ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0f0:	f1b9 0901 	subs.w	r9, r9, #1
 800b0f4:	d505      	bpl.n	800b102 <_fwalk_sglue+0x22>
 800b0f6:	6824      	ldr	r4, [r4, #0]
 800b0f8:	2c00      	cmp	r4, #0
 800b0fa:	d1f7      	bne.n	800b0ec <_fwalk_sglue+0xc>
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b102:	89ab      	ldrh	r3, [r5, #12]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d907      	bls.n	800b118 <_fwalk_sglue+0x38>
 800b108:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b10c:	3301      	adds	r3, #1
 800b10e:	d003      	beq.n	800b118 <_fwalk_sglue+0x38>
 800b110:	4629      	mov	r1, r5
 800b112:	4638      	mov	r0, r7
 800b114:	47c0      	blx	r8
 800b116:	4306      	orrs	r6, r0
 800b118:	3568      	adds	r5, #104	; 0x68
 800b11a:	e7e9      	b.n	800b0f0 <_fwalk_sglue+0x10>

0800b11c <iprintf>:
 800b11c:	b40f      	push	{r0, r1, r2, r3}
 800b11e:	b507      	push	{r0, r1, r2, lr}
 800b120:	4906      	ldr	r1, [pc, #24]	; (800b13c <iprintf+0x20>)
 800b122:	ab04      	add	r3, sp, #16
 800b124:	6808      	ldr	r0, [r1, #0]
 800b126:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12a:	6881      	ldr	r1, [r0, #8]
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	f000 fac5 	bl	800b6bc <_vfiprintf_r>
 800b132:	b003      	add	sp, #12
 800b134:	f85d eb04 	ldr.w	lr, [sp], #4
 800b138:	b004      	add	sp, #16
 800b13a:	4770      	bx	lr
 800b13c:	20000080 	.word	0x20000080

0800b140 <siprintf>:
 800b140:	b40e      	push	{r1, r2, r3}
 800b142:	b500      	push	{lr}
 800b144:	b09c      	sub	sp, #112	; 0x70
 800b146:	ab1d      	add	r3, sp, #116	; 0x74
 800b148:	9002      	str	r0, [sp, #8]
 800b14a:	9006      	str	r0, [sp, #24]
 800b14c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b150:	4809      	ldr	r0, [pc, #36]	; (800b178 <siprintf+0x38>)
 800b152:	9107      	str	r1, [sp, #28]
 800b154:	9104      	str	r1, [sp, #16]
 800b156:	4909      	ldr	r1, [pc, #36]	; (800b17c <siprintf+0x3c>)
 800b158:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15c:	9105      	str	r1, [sp, #20]
 800b15e:	6800      	ldr	r0, [r0, #0]
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	a902      	add	r1, sp, #8
 800b164:	f000 f982 	bl	800b46c <_svfiprintf_r>
 800b168:	9b02      	ldr	r3, [sp, #8]
 800b16a:	2200      	movs	r2, #0
 800b16c:	701a      	strb	r2, [r3, #0]
 800b16e:	b01c      	add	sp, #112	; 0x70
 800b170:	f85d eb04 	ldr.w	lr, [sp], #4
 800b174:	b003      	add	sp, #12
 800b176:	4770      	bx	lr
 800b178:	20000080 	.word	0x20000080
 800b17c:	ffff0208 	.word	0xffff0208

0800b180 <__sread>:
 800b180:	b510      	push	{r4, lr}
 800b182:	460c      	mov	r4, r1
 800b184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b188:	f000 f868 	bl	800b25c <_read_r>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	bfab      	itete	ge
 800b190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b192:	89a3      	ldrhlt	r3, [r4, #12]
 800b194:	181b      	addge	r3, r3, r0
 800b196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b19a:	bfac      	ite	ge
 800b19c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b19e:	81a3      	strhlt	r3, [r4, #12]
 800b1a0:	bd10      	pop	{r4, pc}

0800b1a2 <__swrite>:
 800b1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	898b      	ldrh	r3, [r1, #12]
 800b1aa:	05db      	lsls	r3, r3, #23
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	d505      	bpl.n	800b1c0 <__swrite+0x1e>
 800b1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f000 f83c 	bl	800b238 <_lseek_r>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d6:	f000 b863 	b.w	800b2a0 <_write_r>

0800b1da <__sseek>:
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e2:	f000 f829 	bl	800b238 <_lseek_r>
 800b1e6:	1c43      	adds	r3, r0, #1
 800b1e8:	89a3      	ldrh	r3, [r4, #12]
 800b1ea:	bf15      	itete	ne
 800b1ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1f6:	81a3      	strheq	r3, [r4, #12]
 800b1f8:	bf18      	it	ne
 800b1fa:	81a3      	strhne	r3, [r4, #12]
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <__sclose>:
 800b1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b202:	f000 b809 	b.w	800b218 <_close_r>

0800b206 <memset>:
 800b206:	4402      	add	r2, r0
 800b208:	4603      	mov	r3, r0
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d100      	bne.n	800b210 <memset+0xa>
 800b20e:	4770      	bx	lr
 800b210:	f803 1b01 	strb.w	r1, [r3], #1
 800b214:	e7f9      	b.n	800b20a <memset+0x4>
	...

0800b218 <_close_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d06      	ldr	r5, [pc, #24]	; (800b234 <_close_r+0x1c>)
 800b21c:	2300      	movs	r3, #0
 800b21e:	4604      	mov	r4, r0
 800b220:	4608      	mov	r0, r1
 800b222:	602b      	str	r3, [r5, #0]
 800b224:	f7f8 fad3 	bl	80037ce <_close>
 800b228:	1c43      	adds	r3, r0, #1
 800b22a:	d102      	bne.n	800b232 <_close_r+0x1a>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	b103      	cbz	r3, 800b232 <_close_r+0x1a>
 800b230:	6023      	str	r3, [r4, #0]
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	20002a50 	.word	0x20002a50

0800b238 <_lseek_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4d07      	ldr	r5, [pc, #28]	; (800b258 <_lseek_r+0x20>)
 800b23c:	4604      	mov	r4, r0
 800b23e:	4608      	mov	r0, r1
 800b240:	4611      	mov	r1, r2
 800b242:	2200      	movs	r2, #0
 800b244:	602a      	str	r2, [r5, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	f7f8 fae8 	bl	800381c <_lseek>
 800b24c:	1c43      	adds	r3, r0, #1
 800b24e:	d102      	bne.n	800b256 <_lseek_r+0x1e>
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	b103      	cbz	r3, 800b256 <_lseek_r+0x1e>
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	bd38      	pop	{r3, r4, r5, pc}
 800b258:	20002a50 	.word	0x20002a50

0800b25c <_read_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4d07      	ldr	r5, [pc, #28]	; (800b27c <_read_r+0x20>)
 800b260:	4604      	mov	r4, r0
 800b262:	4608      	mov	r0, r1
 800b264:	4611      	mov	r1, r2
 800b266:	2200      	movs	r2, #0
 800b268:	602a      	str	r2, [r5, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	f7f8 fa76 	bl	800375c <_read>
 800b270:	1c43      	adds	r3, r0, #1
 800b272:	d102      	bne.n	800b27a <_read_r+0x1e>
 800b274:	682b      	ldr	r3, [r5, #0]
 800b276:	b103      	cbz	r3, 800b27a <_read_r+0x1e>
 800b278:	6023      	str	r3, [r4, #0]
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	20002a50 	.word	0x20002a50

0800b280 <_sbrk_r>:
 800b280:	b538      	push	{r3, r4, r5, lr}
 800b282:	4d06      	ldr	r5, [pc, #24]	; (800b29c <_sbrk_r+0x1c>)
 800b284:	2300      	movs	r3, #0
 800b286:	4604      	mov	r4, r0
 800b288:	4608      	mov	r0, r1
 800b28a:	602b      	str	r3, [r5, #0]
 800b28c:	f7f8 fad4 	bl	8003838 <_sbrk>
 800b290:	1c43      	adds	r3, r0, #1
 800b292:	d102      	bne.n	800b29a <_sbrk_r+0x1a>
 800b294:	682b      	ldr	r3, [r5, #0]
 800b296:	b103      	cbz	r3, 800b29a <_sbrk_r+0x1a>
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	bd38      	pop	{r3, r4, r5, pc}
 800b29c:	20002a50 	.word	0x20002a50

0800b2a0 <_write_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	4d07      	ldr	r5, [pc, #28]	; (800b2c0 <_write_r+0x20>)
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	4608      	mov	r0, r1
 800b2a8:	4611      	mov	r1, r2
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	602a      	str	r2, [r5, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f7f8 fa71 	bl	8003796 <_write>
 800b2b4:	1c43      	adds	r3, r0, #1
 800b2b6:	d102      	bne.n	800b2be <_write_r+0x1e>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	b103      	cbz	r3, 800b2be <_write_r+0x1e>
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	bd38      	pop	{r3, r4, r5, pc}
 800b2c0:	20002a50 	.word	0x20002a50

0800b2c4 <__errno>:
 800b2c4:	4b01      	ldr	r3, [pc, #4]	; (800b2cc <__errno+0x8>)
 800b2c6:	6818      	ldr	r0, [r3, #0]
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	20000080 	.word	0x20000080

0800b2d0 <__libc_init_array>:
 800b2d0:	b570      	push	{r4, r5, r6, lr}
 800b2d2:	4d0d      	ldr	r5, [pc, #52]	; (800b308 <__libc_init_array+0x38>)
 800b2d4:	4c0d      	ldr	r4, [pc, #52]	; (800b30c <__libc_init_array+0x3c>)
 800b2d6:	1b64      	subs	r4, r4, r5
 800b2d8:	10a4      	asrs	r4, r4, #2
 800b2da:	2600      	movs	r6, #0
 800b2dc:	42a6      	cmp	r6, r4
 800b2de:	d109      	bne.n	800b2f4 <__libc_init_array+0x24>
 800b2e0:	4d0b      	ldr	r5, [pc, #44]	; (800b310 <__libc_init_array+0x40>)
 800b2e2:	4c0c      	ldr	r4, [pc, #48]	; (800b314 <__libc_init_array+0x44>)
 800b2e4:	f000 ffc2 	bl	800c26c <_init>
 800b2e8:	1b64      	subs	r4, r4, r5
 800b2ea:	10a4      	asrs	r4, r4, #2
 800b2ec:	2600      	movs	r6, #0
 800b2ee:	42a6      	cmp	r6, r4
 800b2f0:	d105      	bne.n	800b2fe <__libc_init_array+0x2e>
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
 800b2f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2f8:	4798      	blx	r3
 800b2fa:	3601      	adds	r6, #1
 800b2fc:	e7ee      	b.n	800b2dc <__libc_init_array+0xc>
 800b2fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800b302:	4798      	blx	r3
 800b304:	3601      	adds	r6, #1
 800b306:	e7f2      	b.n	800b2ee <__libc_init_array+0x1e>
 800b308:	0800c8f4 	.word	0x0800c8f4
 800b30c:	0800c8f4 	.word	0x0800c8f4
 800b310:	0800c8f4 	.word	0x0800c8f4
 800b314:	0800c8f8 	.word	0x0800c8f8

0800b318 <__retarget_lock_init_recursive>:
 800b318:	4770      	bx	lr

0800b31a <__retarget_lock_acquire_recursive>:
 800b31a:	4770      	bx	lr

0800b31c <__retarget_lock_release_recursive>:
 800b31c:	4770      	bx	lr
	...

0800b320 <_free_r>:
 800b320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b322:	2900      	cmp	r1, #0
 800b324:	d044      	beq.n	800b3b0 <_free_r+0x90>
 800b326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32a:	9001      	str	r0, [sp, #4]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f1a1 0404 	sub.w	r4, r1, #4
 800b332:	bfb8      	it	lt
 800b334:	18e4      	addlt	r4, r4, r3
 800b336:	f7ff fe23 	bl	800af80 <__malloc_lock>
 800b33a:	4a1e      	ldr	r2, [pc, #120]	; (800b3b4 <_free_r+0x94>)
 800b33c:	9801      	ldr	r0, [sp, #4]
 800b33e:	6813      	ldr	r3, [r2, #0]
 800b340:	b933      	cbnz	r3, 800b350 <_free_r+0x30>
 800b342:	6063      	str	r3, [r4, #4]
 800b344:	6014      	str	r4, [r2, #0]
 800b346:	b003      	add	sp, #12
 800b348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b34c:	f7ff be1e 	b.w	800af8c <__malloc_unlock>
 800b350:	42a3      	cmp	r3, r4
 800b352:	d908      	bls.n	800b366 <_free_r+0x46>
 800b354:	6825      	ldr	r5, [r4, #0]
 800b356:	1961      	adds	r1, r4, r5
 800b358:	428b      	cmp	r3, r1
 800b35a:	bf01      	itttt	eq
 800b35c:	6819      	ldreq	r1, [r3, #0]
 800b35e:	685b      	ldreq	r3, [r3, #4]
 800b360:	1949      	addeq	r1, r1, r5
 800b362:	6021      	streq	r1, [r4, #0]
 800b364:	e7ed      	b.n	800b342 <_free_r+0x22>
 800b366:	461a      	mov	r2, r3
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	b10b      	cbz	r3, 800b370 <_free_r+0x50>
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	d9fa      	bls.n	800b366 <_free_r+0x46>
 800b370:	6811      	ldr	r1, [r2, #0]
 800b372:	1855      	adds	r5, r2, r1
 800b374:	42a5      	cmp	r5, r4
 800b376:	d10b      	bne.n	800b390 <_free_r+0x70>
 800b378:	6824      	ldr	r4, [r4, #0]
 800b37a:	4421      	add	r1, r4
 800b37c:	1854      	adds	r4, r2, r1
 800b37e:	42a3      	cmp	r3, r4
 800b380:	6011      	str	r1, [r2, #0]
 800b382:	d1e0      	bne.n	800b346 <_free_r+0x26>
 800b384:	681c      	ldr	r4, [r3, #0]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	6053      	str	r3, [r2, #4]
 800b38a:	440c      	add	r4, r1
 800b38c:	6014      	str	r4, [r2, #0]
 800b38e:	e7da      	b.n	800b346 <_free_r+0x26>
 800b390:	d902      	bls.n	800b398 <_free_r+0x78>
 800b392:	230c      	movs	r3, #12
 800b394:	6003      	str	r3, [r0, #0]
 800b396:	e7d6      	b.n	800b346 <_free_r+0x26>
 800b398:	6825      	ldr	r5, [r4, #0]
 800b39a:	1961      	adds	r1, r4, r5
 800b39c:	428b      	cmp	r3, r1
 800b39e:	bf04      	itt	eq
 800b3a0:	6819      	ldreq	r1, [r3, #0]
 800b3a2:	685b      	ldreq	r3, [r3, #4]
 800b3a4:	6063      	str	r3, [r4, #4]
 800b3a6:	bf04      	itt	eq
 800b3a8:	1949      	addeq	r1, r1, r5
 800b3aa:	6021      	streq	r1, [r4, #0]
 800b3ac:	6054      	str	r4, [r2, #4]
 800b3ae:	e7ca      	b.n	800b346 <_free_r+0x26>
 800b3b0:	b003      	add	sp, #12
 800b3b2:	bd30      	pop	{r4, r5, pc}
 800b3b4:	2000290c 	.word	0x2000290c

0800b3b8 <__ssputs_r>:
 800b3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3bc:	688e      	ldr	r6, [r1, #8]
 800b3be:	461f      	mov	r7, r3
 800b3c0:	42be      	cmp	r6, r7
 800b3c2:	680b      	ldr	r3, [r1, #0]
 800b3c4:	4682      	mov	sl, r0
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	4690      	mov	r8, r2
 800b3ca:	d82c      	bhi.n	800b426 <__ssputs_r+0x6e>
 800b3cc:	898a      	ldrh	r2, [r1, #12]
 800b3ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3d2:	d026      	beq.n	800b422 <__ssputs_r+0x6a>
 800b3d4:	6965      	ldr	r5, [r4, #20]
 800b3d6:	6909      	ldr	r1, [r1, #16]
 800b3d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3dc:	eba3 0901 	sub.w	r9, r3, r1
 800b3e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3e4:	1c7b      	adds	r3, r7, #1
 800b3e6:	444b      	add	r3, r9
 800b3e8:	106d      	asrs	r5, r5, #1
 800b3ea:	429d      	cmp	r5, r3
 800b3ec:	bf38      	it	cc
 800b3ee:	461d      	movcc	r5, r3
 800b3f0:	0553      	lsls	r3, r2, #21
 800b3f2:	d527      	bpl.n	800b444 <__ssputs_r+0x8c>
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	f7ff fd43 	bl	800ae80 <_malloc_r>
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	b360      	cbz	r0, 800b458 <__ssputs_r+0xa0>
 800b3fe:	6921      	ldr	r1, [r4, #16]
 800b400:	464a      	mov	r2, r9
 800b402:	f000 fd63 	bl	800becc <memcpy>
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b410:	81a3      	strh	r3, [r4, #12]
 800b412:	6126      	str	r6, [r4, #16]
 800b414:	6165      	str	r5, [r4, #20]
 800b416:	444e      	add	r6, r9
 800b418:	eba5 0509 	sub.w	r5, r5, r9
 800b41c:	6026      	str	r6, [r4, #0]
 800b41e:	60a5      	str	r5, [r4, #8]
 800b420:	463e      	mov	r6, r7
 800b422:	42be      	cmp	r6, r7
 800b424:	d900      	bls.n	800b428 <__ssputs_r+0x70>
 800b426:	463e      	mov	r6, r7
 800b428:	6820      	ldr	r0, [r4, #0]
 800b42a:	4632      	mov	r2, r6
 800b42c:	4641      	mov	r1, r8
 800b42e:	f000 fd33 	bl	800be98 <memmove>
 800b432:	68a3      	ldr	r3, [r4, #8]
 800b434:	1b9b      	subs	r3, r3, r6
 800b436:	60a3      	str	r3, [r4, #8]
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	4433      	add	r3, r6
 800b43c:	6023      	str	r3, [r4, #0]
 800b43e:	2000      	movs	r0, #0
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b444:	462a      	mov	r2, r5
 800b446:	f000 fd4f 	bl	800bee8 <_realloc_r>
 800b44a:	4606      	mov	r6, r0
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d1e0      	bne.n	800b412 <__ssputs_r+0x5a>
 800b450:	6921      	ldr	r1, [r4, #16]
 800b452:	4650      	mov	r0, sl
 800b454:	f7ff ff64 	bl	800b320 <_free_r>
 800b458:	230c      	movs	r3, #12
 800b45a:	f8ca 3000 	str.w	r3, [sl]
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b464:	81a3      	strh	r3, [r4, #12]
 800b466:	f04f 30ff 	mov.w	r0, #4294967295
 800b46a:	e7e9      	b.n	800b440 <__ssputs_r+0x88>

0800b46c <_svfiprintf_r>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	4698      	mov	r8, r3
 800b472:	898b      	ldrh	r3, [r1, #12]
 800b474:	061b      	lsls	r3, r3, #24
 800b476:	b09d      	sub	sp, #116	; 0x74
 800b478:	4607      	mov	r7, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	4614      	mov	r4, r2
 800b47e:	d50e      	bpl.n	800b49e <_svfiprintf_r+0x32>
 800b480:	690b      	ldr	r3, [r1, #16]
 800b482:	b963      	cbnz	r3, 800b49e <_svfiprintf_r+0x32>
 800b484:	2140      	movs	r1, #64	; 0x40
 800b486:	f7ff fcfb 	bl	800ae80 <_malloc_r>
 800b48a:	6028      	str	r0, [r5, #0]
 800b48c:	6128      	str	r0, [r5, #16]
 800b48e:	b920      	cbnz	r0, 800b49a <_svfiprintf_r+0x2e>
 800b490:	230c      	movs	r3, #12
 800b492:	603b      	str	r3, [r7, #0]
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	e0d0      	b.n	800b63c <_svfiprintf_r+0x1d0>
 800b49a:	2340      	movs	r3, #64	; 0x40
 800b49c:	616b      	str	r3, [r5, #20]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a2:	2320      	movs	r3, #32
 800b4a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4ac:	2330      	movs	r3, #48	; 0x30
 800b4ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b654 <_svfiprintf_r+0x1e8>
 800b4b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4b6:	f04f 0901 	mov.w	r9, #1
 800b4ba:	4623      	mov	r3, r4
 800b4bc:	469a      	mov	sl, r3
 800b4be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4c2:	b10a      	cbz	r2, 800b4c8 <_svfiprintf_r+0x5c>
 800b4c4:	2a25      	cmp	r2, #37	; 0x25
 800b4c6:	d1f9      	bne.n	800b4bc <_svfiprintf_r+0x50>
 800b4c8:	ebba 0b04 	subs.w	fp, sl, r4
 800b4cc:	d00b      	beq.n	800b4e6 <_svfiprintf_r+0x7a>
 800b4ce:	465b      	mov	r3, fp
 800b4d0:	4622      	mov	r2, r4
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	f7ff ff6f 	bl	800b3b8 <__ssputs_r>
 800b4da:	3001      	adds	r0, #1
 800b4dc:	f000 80a9 	beq.w	800b632 <_svfiprintf_r+0x1c6>
 800b4e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4e2:	445a      	add	r2, fp
 800b4e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 80a1 	beq.w	800b632 <_svfiprintf_r+0x1c6>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4fa:	f10a 0a01 	add.w	sl, sl, #1
 800b4fe:	9304      	str	r3, [sp, #16]
 800b500:	9307      	str	r3, [sp, #28]
 800b502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b506:	931a      	str	r3, [sp, #104]	; 0x68
 800b508:	4654      	mov	r4, sl
 800b50a:	2205      	movs	r2, #5
 800b50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b510:	4850      	ldr	r0, [pc, #320]	; (800b654 <_svfiprintf_r+0x1e8>)
 800b512:	f7f4 fe65 	bl	80001e0 <memchr>
 800b516:	9a04      	ldr	r2, [sp, #16]
 800b518:	b9d8      	cbnz	r0, 800b552 <_svfiprintf_r+0xe6>
 800b51a:	06d0      	lsls	r0, r2, #27
 800b51c:	bf44      	itt	mi
 800b51e:	2320      	movmi	r3, #32
 800b520:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b524:	0711      	lsls	r1, r2, #28
 800b526:	bf44      	itt	mi
 800b528:	232b      	movmi	r3, #43	; 0x2b
 800b52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b52e:	f89a 3000 	ldrb.w	r3, [sl]
 800b532:	2b2a      	cmp	r3, #42	; 0x2a
 800b534:	d015      	beq.n	800b562 <_svfiprintf_r+0xf6>
 800b536:	9a07      	ldr	r2, [sp, #28]
 800b538:	4654      	mov	r4, sl
 800b53a:	2000      	movs	r0, #0
 800b53c:	f04f 0c0a 	mov.w	ip, #10
 800b540:	4621      	mov	r1, r4
 800b542:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b546:	3b30      	subs	r3, #48	; 0x30
 800b548:	2b09      	cmp	r3, #9
 800b54a:	d94d      	bls.n	800b5e8 <_svfiprintf_r+0x17c>
 800b54c:	b1b0      	cbz	r0, 800b57c <_svfiprintf_r+0x110>
 800b54e:	9207      	str	r2, [sp, #28]
 800b550:	e014      	b.n	800b57c <_svfiprintf_r+0x110>
 800b552:	eba0 0308 	sub.w	r3, r0, r8
 800b556:	fa09 f303 	lsl.w	r3, r9, r3
 800b55a:	4313      	orrs	r3, r2
 800b55c:	9304      	str	r3, [sp, #16]
 800b55e:	46a2      	mov	sl, r4
 800b560:	e7d2      	b.n	800b508 <_svfiprintf_r+0x9c>
 800b562:	9b03      	ldr	r3, [sp, #12]
 800b564:	1d19      	adds	r1, r3, #4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	9103      	str	r1, [sp, #12]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	bfbb      	ittet	lt
 800b56e:	425b      	neglt	r3, r3
 800b570:	f042 0202 	orrlt.w	r2, r2, #2
 800b574:	9307      	strge	r3, [sp, #28]
 800b576:	9307      	strlt	r3, [sp, #28]
 800b578:	bfb8      	it	lt
 800b57a:	9204      	strlt	r2, [sp, #16]
 800b57c:	7823      	ldrb	r3, [r4, #0]
 800b57e:	2b2e      	cmp	r3, #46	; 0x2e
 800b580:	d10c      	bne.n	800b59c <_svfiprintf_r+0x130>
 800b582:	7863      	ldrb	r3, [r4, #1]
 800b584:	2b2a      	cmp	r3, #42	; 0x2a
 800b586:	d134      	bne.n	800b5f2 <_svfiprintf_r+0x186>
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	1d1a      	adds	r2, r3, #4
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	9203      	str	r2, [sp, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	bfb8      	it	lt
 800b594:	f04f 33ff 	movlt.w	r3, #4294967295
 800b598:	3402      	adds	r4, #2
 800b59a:	9305      	str	r3, [sp, #20]
 800b59c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b664 <_svfiprintf_r+0x1f8>
 800b5a0:	7821      	ldrb	r1, [r4, #0]
 800b5a2:	2203      	movs	r2, #3
 800b5a4:	4650      	mov	r0, sl
 800b5a6:	f7f4 fe1b 	bl	80001e0 <memchr>
 800b5aa:	b138      	cbz	r0, 800b5bc <_svfiprintf_r+0x150>
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	eba0 000a 	sub.w	r0, r0, sl
 800b5b2:	2240      	movs	r2, #64	; 0x40
 800b5b4:	4082      	lsls	r2, r0
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	3401      	adds	r4, #1
 800b5ba:	9304      	str	r3, [sp, #16]
 800b5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c0:	4825      	ldr	r0, [pc, #148]	; (800b658 <_svfiprintf_r+0x1ec>)
 800b5c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5c6:	2206      	movs	r2, #6
 800b5c8:	f7f4 fe0a 	bl	80001e0 <memchr>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d038      	beq.n	800b642 <_svfiprintf_r+0x1d6>
 800b5d0:	4b22      	ldr	r3, [pc, #136]	; (800b65c <_svfiprintf_r+0x1f0>)
 800b5d2:	bb1b      	cbnz	r3, 800b61c <_svfiprintf_r+0x1b0>
 800b5d4:	9b03      	ldr	r3, [sp, #12]
 800b5d6:	3307      	adds	r3, #7
 800b5d8:	f023 0307 	bic.w	r3, r3, #7
 800b5dc:	3308      	adds	r3, #8
 800b5de:	9303      	str	r3, [sp, #12]
 800b5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5e2:	4433      	add	r3, r6
 800b5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e6:	e768      	b.n	800b4ba <_svfiprintf_r+0x4e>
 800b5e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	e7a6      	b.n	800b540 <_svfiprintf_r+0xd4>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	3401      	adds	r4, #1
 800b5f6:	9305      	str	r3, [sp, #20]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	f04f 0c0a 	mov.w	ip, #10
 800b5fe:	4620      	mov	r0, r4
 800b600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b604:	3a30      	subs	r2, #48	; 0x30
 800b606:	2a09      	cmp	r2, #9
 800b608:	d903      	bls.n	800b612 <_svfiprintf_r+0x1a6>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d0c6      	beq.n	800b59c <_svfiprintf_r+0x130>
 800b60e:	9105      	str	r1, [sp, #20]
 800b610:	e7c4      	b.n	800b59c <_svfiprintf_r+0x130>
 800b612:	fb0c 2101 	mla	r1, ip, r1, r2
 800b616:	4604      	mov	r4, r0
 800b618:	2301      	movs	r3, #1
 800b61a:	e7f0      	b.n	800b5fe <_svfiprintf_r+0x192>
 800b61c:	ab03      	add	r3, sp, #12
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	462a      	mov	r2, r5
 800b622:	4b0f      	ldr	r3, [pc, #60]	; (800b660 <_svfiprintf_r+0x1f4>)
 800b624:	a904      	add	r1, sp, #16
 800b626:	4638      	mov	r0, r7
 800b628:	f3af 8000 	nop.w
 800b62c:	1c42      	adds	r2, r0, #1
 800b62e:	4606      	mov	r6, r0
 800b630:	d1d6      	bne.n	800b5e0 <_svfiprintf_r+0x174>
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	065b      	lsls	r3, r3, #25
 800b636:	f53f af2d 	bmi.w	800b494 <_svfiprintf_r+0x28>
 800b63a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b63c:	b01d      	add	sp, #116	; 0x74
 800b63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b642:	ab03      	add	r3, sp, #12
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	462a      	mov	r2, r5
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <_svfiprintf_r+0x1f4>)
 800b64a:	a904      	add	r1, sp, #16
 800b64c:	4638      	mov	r0, r7
 800b64e:	f000 f9bd 	bl	800b9cc <_printf_i>
 800b652:	e7eb      	b.n	800b62c <_svfiprintf_r+0x1c0>
 800b654:	0800c8b8 	.word	0x0800c8b8
 800b658:	0800c8c2 	.word	0x0800c8c2
 800b65c:	00000000 	.word	0x00000000
 800b660:	0800b3b9 	.word	0x0800b3b9
 800b664:	0800c8be 	.word	0x0800c8be

0800b668 <__sfputc_r>:
 800b668:	6893      	ldr	r3, [r2, #8]
 800b66a:	3b01      	subs	r3, #1
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	b410      	push	{r4}
 800b670:	6093      	str	r3, [r2, #8]
 800b672:	da08      	bge.n	800b686 <__sfputc_r+0x1e>
 800b674:	6994      	ldr	r4, [r2, #24]
 800b676:	42a3      	cmp	r3, r4
 800b678:	db01      	blt.n	800b67e <__sfputc_r+0x16>
 800b67a:	290a      	cmp	r1, #10
 800b67c:	d103      	bne.n	800b686 <__sfputc_r+0x1e>
 800b67e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b682:	f000 bb73 	b.w	800bd6c <__swbuf_r>
 800b686:	6813      	ldr	r3, [r2, #0]
 800b688:	1c58      	adds	r0, r3, #1
 800b68a:	6010      	str	r0, [r2, #0]
 800b68c:	7019      	strb	r1, [r3, #0]
 800b68e:	4608      	mov	r0, r1
 800b690:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <__sfputs_r>:
 800b696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b698:	4606      	mov	r6, r0
 800b69a:	460f      	mov	r7, r1
 800b69c:	4614      	mov	r4, r2
 800b69e:	18d5      	adds	r5, r2, r3
 800b6a0:	42ac      	cmp	r4, r5
 800b6a2:	d101      	bne.n	800b6a8 <__sfputs_r+0x12>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	e007      	b.n	800b6b8 <__sfputs_r+0x22>
 800b6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ac:	463a      	mov	r2, r7
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f7ff ffda 	bl	800b668 <__sfputc_r>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d1f3      	bne.n	800b6a0 <__sfputs_r+0xa>
 800b6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6bc <_vfiprintf_r>:
 800b6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c0:	460d      	mov	r5, r1
 800b6c2:	b09d      	sub	sp, #116	; 0x74
 800b6c4:	4614      	mov	r4, r2
 800b6c6:	4698      	mov	r8, r3
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	b118      	cbz	r0, 800b6d4 <_vfiprintf_r+0x18>
 800b6cc:	6a03      	ldr	r3, [r0, #32]
 800b6ce:	b90b      	cbnz	r3, 800b6d4 <_vfiprintf_r+0x18>
 800b6d0:	f7ff fcee 	bl	800b0b0 <__sinit>
 800b6d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d6:	07d9      	lsls	r1, r3, #31
 800b6d8:	d405      	bmi.n	800b6e6 <_vfiprintf_r+0x2a>
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	059a      	lsls	r2, r3, #22
 800b6de:	d402      	bmi.n	800b6e6 <_vfiprintf_r+0x2a>
 800b6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e2:	f7ff fe1a 	bl	800b31a <__retarget_lock_acquire_recursive>
 800b6e6:	89ab      	ldrh	r3, [r5, #12]
 800b6e8:	071b      	lsls	r3, r3, #28
 800b6ea:	d501      	bpl.n	800b6f0 <_vfiprintf_r+0x34>
 800b6ec:	692b      	ldr	r3, [r5, #16]
 800b6ee:	b99b      	cbnz	r3, 800b718 <_vfiprintf_r+0x5c>
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	f000 fb78 	bl	800bde8 <__swsetup_r>
 800b6f8:	b170      	cbz	r0, 800b718 <_vfiprintf_r+0x5c>
 800b6fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6fc:	07dc      	lsls	r4, r3, #31
 800b6fe:	d504      	bpl.n	800b70a <_vfiprintf_r+0x4e>
 800b700:	f04f 30ff 	mov.w	r0, #4294967295
 800b704:	b01d      	add	sp, #116	; 0x74
 800b706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70a:	89ab      	ldrh	r3, [r5, #12]
 800b70c:	0598      	lsls	r0, r3, #22
 800b70e:	d4f7      	bmi.n	800b700 <_vfiprintf_r+0x44>
 800b710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b712:	f7ff fe03 	bl	800b31c <__retarget_lock_release_recursive>
 800b716:	e7f3      	b.n	800b700 <_vfiprintf_r+0x44>
 800b718:	2300      	movs	r3, #0
 800b71a:	9309      	str	r3, [sp, #36]	; 0x24
 800b71c:	2320      	movs	r3, #32
 800b71e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b722:	f8cd 800c 	str.w	r8, [sp, #12]
 800b726:	2330      	movs	r3, #48	; 0x30
 800b728:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b8dc <_vfiprintf_r+0x220>
 800b72c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b730:	f04f 0901 	mov.w	r9, #1
 800b734:	4623      	mov	r3, r4
 800b736:	469a      	mov	sl, r3
 800b738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b73c:	b10a      	cbz	r2, 800b742 <_vfiprintf_r+0x86>
 800b73e:	2a25      	cmp	r2, #37	; 0x25
 800b740:	d1f9      	bne.n	800b736 <_vfiprintf_r+0x7a>
 800b742:	ebba 0b04 	subs.w	fp, sl, r4
 800b746:	d00b      	beq.n	800b760 <_vfiprintf_r+0xa4>
 800b748:	465b      	mov	r3, fp
 800b74a:	4622      	mov	r2, r4
 800b74c:	4629      	mov	r1, r5
 800b74e:	4630      	mov	r0, r6
 800b750:	f7ff ffa1 	bl	800b696 <__sfputs_r>
 800b754:	3001      	adds	r0, #1
 800b756:	f000 80a9 	beq.w	800b8ac <_vfiprintf_r+0x1f0>
 800b75a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b75c:	445a      	add	r2, fp
 800b75e:	9209      	str	r2, [sp, #36]	; 0x24
 800b760:	f89a 3000 	ldrb.w	r3, [sl]
 800b764:	2b00      	cmp	r3, #0
 800b766:	f000 80a1 	beq.w	800b8ac <_vfiprintf_r+0x1f0>
 800b76a:	2300      	movs	r3, #0
 800b76c:	f04f 32ff 	mov.w	r2, #4294967295
 800b770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b774:	f10a 0a01 	add.w	sl, sl, #1
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	9307      	str	r3, [sp, #28]
 800b77c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b780:	931a      	str	r3, [sp, #104]	; 0x68
 800b782:	4654      	mov	r4, sl
 800b784:	2205      	movs	r2, #5
 800b786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78a:	4854      	ldr	r0, [pc, #336]	; (800b8dc <_vfiprintf_r+0x220>)
 800b78c:	f7f4 fd28 	bl	80001e0 <memchr>
 800b790:	9a04      	ldr	r2, [sp, #16]
 800b792:	b9d8      	cbnz	r0, 800b7cc <_vfiprintf_r+0x110>
 800b794:	06d1      	lsls	r1, r2, #27
 800b796:	bf44      	itt	mi
 800b798:	2320      	movmi	r3, #32
 800b79a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b79e:	0713      	lsls	r3, r2, #28
 800b7a0:	bf44      	itt	mi
 800b7a2:	232b      	movmi	r3, #43	; 0x2b
 800b7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ae:	d015      	beq.n	800b7dc <_vfiprintf_r+0x120>
 800b7b0:	9a07      	ldr	r2, [sp, #28]
 800b7b2:	4654      	mov	r4, sl
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f04f 0c0a 	mov.w	ip, #10
 800b7ba:	4621      	mov	r1, r4
 800b7bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c0:	3b30      	subs	r3, #48	; 0x30
 800b7c2:	2b09      	cmp	r3, #9
 800b7c4:	d94d      	bls.n	800b862 <_vfiprintf_r+0x1a6>
 800b7c6:	b1b0      	cbz	r0, 800b7f6 <_vfiprintf_r+0x13a>
 800b7c8:	9207      	str	r2, [sp, #28]
 800b7ca:	e014      	b.n	800b7f6 <_vfiprintf_r+0x13a>
 800b7cc:	eba0 0308 	sub.w	r3, r0, r8
 800b7d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	9304      	str	r3, [sp, #16]
 800b7d8:	46a2      	mov	sl, r4
 800b7da:	e7d2      	b.n	800b782 <_vfiprintf_r+0xc6>
 800b7dc:	9b03      	ldr	r3, [sp, #12]
 800b7de:	1d19      	adds	r1, r3, #4
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	9103      	str	r1, [sp, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	bfbb      	ittet	lt
 800b7e8:	425b      	neglt	r3, r3
 800b7ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b7ee:	9307      	strge	r3, [sp, #28]
 800b7f0:	9307      	strlt	r3, [sp, #28]
 800b7f2:	bfb8      	it	lt
 800b7f4:	9204      	strlt	r2, [sp, #16]
 800b7f6:	7823      	ldrb	r3, [r4, #0]
 800b7f8:	2b2e      	cmp	r3, #46	; 0x2e
 800b7fa:	d10c      	bne.n	800b816 <_vfiprintf_r+0x15a>
 800b7fc:	7863      	ldrb	r3, [r4, #1]
 800b7fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b800:	d134      	bne.n	800b86c <_vfiprintf_r+0x1b0>
 800b802:	9b03      	ldr	r3, [sp, #12]
 800b804:	1d1a      	adds	r2, r3, #4
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	9203      	str	r2, [sp, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	bfb8      	it	lt
 800b80e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b812:	3402      	adds	r4, #2
 800b814:	9305      	str	r3, [sp, #20]
 800b816:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b8ec <_vfiprintf_r+0x230>
 800b81a:	7821      	ldrb	r1, [r4, #0]
 800b81c:	2203      	movs	r2, #3
 800b81e:	4650      	mov	r0, sl
 800b820:	f7f4 fcde 	bl	80001e0 <memchr>
 800b824:	b138      	cbz	r0, 800b836 <_vfiprintf_r+0x17a>
 800b826:	9b04      	ldr	r3, [sp, #16]
 800b828:	eba0 000a 	sub.w	r0, r0, sl
 800b82c:	2240      	movs	r2, #64	; 0x40
 800b82e:	4082      	lsls	r2, r0
 800b830:	4313      	orrs	r3, r2
 800b832:	3401      	adds	r4, #1
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83a:	4829      	ldr	r0, [pc, #164]	; (800b8e0 <_vfiprintf_r+0x224>)
 800b83c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b840:	2206      	movs	r2, #6
 800b842:	f7f4 fccd 	bl	80001e0 <memchr>
 800b846:	2800      	cmp	r0, #0
 800b848:	d03f      	beq.n	800b8ca <_vfiprintf_r+0x20e>
 800b84a:	4b26      	ldr	r3, [pc, #152]	; (800b8e4 <_vfiprintf_r+0x228>)
 800b84c:	bb1b      	cbnz	r3, 800b896 <_vfiprintf_r+0x1da>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	3307      	adds	r3, #7
 800b852:	f023 0307 	bic.w	r3, r3, #7
 800b856:	3308      	adds	r3, #8
 800b858:	9303      	str	r3, [sp, #12]
 800b85a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b85c:	443b      	add	r3, r7
 800b85e:	9309      	str	r3, [sp, #36]	; 0x24
 800b860:	e768      	b.n	800b734 <_vfiprintf_r+0x78>
 800b862:	fb0c 3202 	mla	r2, ip, r2, r3
 800b866:	460c      	mov	r4, r1
 800b868:	2001      	movs	r0, #1
 800b86a:	e7a6      	b.n	800b7ba <_vfiprintf_r+0xfe>
 800b86c:	2300      	movs	r3, #0
 800b86e:	3401      	adds	r4, #1
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	4619      	mov	r1, r3
 800b874:	f04f 0c0a 	mov.w	ip, #10
 800b878:	4620      	mov	r0, r4
 800b87a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b87e:	3a30      	subs	r2, #48	; 0x30
 800b880:	2a09      	cmp	r2, #9
 800b882:	d903      	bls.n	800b88c <_vfiprintf_r+0x1d0>
 800b884:	2b00      	cmp	r3, #0
 800b886:	d0c6      	beq.n	800b816 <_vfiprintf_r+0x15a>
 800b888:	9105      	str	r1, [sp, #20]
 800b88a:	e7c4      	b.n	800b816 <_vfiprintf_r+0x15a>
 800b88c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b890:	4604      	mov	r4, r0
 800b892:	2301      	movs	r3, #1
 800b894:	e7f0      	b.n	800b878 <_vfiprintf_r+0x1bc>
 800b896:	ab03      	add	r3, sp, #12
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	462a      	mov	r2, r5
 800b89c:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <_vfiprintf_r+0x22c>)
 800b89e:	a904      	add	r1, sp, #16
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f3af 8000 	nop.w
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	1c78      	adds	r0, r7, #1
 800b8aa:	d1d6      	bne.n	800b85a <_vfiprintf_r+0x19e>
 800b8ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ae:	07d9      	lsls	r1, r3, #31
 800b8b0:	d405      	bmi.n	800b8be <_vfiprintf_r+0x202>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	059a      	lsls	r2, r3, #22
 800b8b6:	d402      	bmi.n	800b8be <_vfiprintf_r+0x202>
 800b8b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ba:	f7ff fd2f 	bl	800b31c <__retarget_lock_release_recursive>
 800b8be:	89ab      	ldrh	r3, [r5, #12]
 800b8c0:	065b      	lsls	r3, r3, #25
 800b8c2:	f53f af1d 	bmi.w	800b700 <_vfiprintf_r+0x44>
 800b8c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8c8:	e71c      	b.n	800b704 <_vfiprintf_r+0x48>
 800b8ca:	ab03      	add	r3, sp, #12
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	462a      	mov	r2, r5
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <_vfiprintf_r+0x22c>)
 800b8d2:	a904      	add	r1, sp, #16
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f000 f879 	bl	800b9cc <_printf_i>
 800b8da:	e7e4      	b.n	800b8a6 <_vfiprintf_r+0x1ea>
 800b8dc:	0800c8b8 	.word	0x0800c8b8
 800b8e0:	0800c8c2 	.word	0x0800c8c2
 800b8e4:	00000000 	.word	0x00000000
 800b8e8:	0800b697 	.word	0x0800b697
 800b8ec:	0800c8be 	.word	0x0800c8be

0800b8f0 <_printf_common>:
 800b8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8f4:	4616      	mov	r6, r2
 800b8f6:	4699      	mov	r9, r3
 800b8f8:	688a      	ldr	r2, [r1, #8]
 800b8fa:	690b      	ldr	r3, [r1, #16]
 800b8fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b900:	4293      	cmp	r3, r2
 800b902:	bfb8      	it	lt
 800b904:	4613      	movlt	r3, r2
 800b906:	6033      	str	r3, [r6, #0]
 800b908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b90c:	4607      	mov	r7, r0
 800b90e:	460c      	mov	r4, r1
 800b910:	b10a      	cbz	r2, 800b916 <_printf_common+0x26>
 800b912:	3301      	adds	r3, #1
 800b914:	6033      	str	r3, [r6, #0]
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	0699      	lsls	r1, r3, #26
 800b91a:	bf42      	ittt	mi
 800b91c:	6833      	ldrmi	r3, [r6, #0]
 800b91e:	3302      	addmi	r3, #2
 800b920:	6033      	strmi	r3, [r6, #0]
 800b922:	6825      	ldr	r5, [r4, #0]
 800b924:	f015 0506 	ands.w	r5, r5, #6
 800b928:	d106      	bne.n	800b938 <_printf_common+0x48>
 800b92a:	f104 0a19 	add.w	sl, r4, #25
 800b92e:	68e3      	ldr	r3, [r4, #12]
 800b930:	6832      	ldr	r2, [r6, #0]
 800b932:	1a9b      	subs	r3, r3, r2
 800b934:	42ab      	cmp	r3, r5
 800b936:	dc26      	bgt.n	800b986 <_printf_common+0x96>
 800b938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b93c:	1e13      	subs	r3, r2, #0
 800b93e:	6822      	ldr	r2, [r4, #0]
 800b940:	bf18      	it	ne
 800b942:	2301      	movne	r3, #1
 800b944:	0692      	lsls	r2, r2, #26
 800b946:	d42b      	bmi.n	800b9a0 <_printf_common+0xb0>
 800b948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b94c:	4649      	mov	r1, r9
 800b94e:	4638      	mov	r0, r7
 800b950:	47c0      	blx	r8
 800b952:	3001      	adds	r0, #1
 800b954:	d01e      	beq.n	800b994 <_printf_common+0xa4>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	6922      	ldr	r2, [r4, #16]
 800b95a:	f003 0306 	and.w	r3, r3, #6
 800b95e:	2b04      	cmp	r3, #4
 800b960:	bf02      	ittt	eq
 800b962:	68e5      	ldreq	r5, [r4, #12]
 800b964:	6833      	ldreq	r3, [r6, #0]
 800b966:	1aed      	subeq	r5, r5, r3
 800b968:	68a3      	ldr	r3, [r4, #8]
 800b96a:	bf0c      	ite	eq
 800b96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b970:	2500      	movne	r5, #0
 800b972:	4293      	cmp	r3, r2
 800b974:	bfc4      	itt	gt
 800b976:	1a9b      	subgt	r3, r3, r2
 800b978:	18ed      	addgt	r5, r5, r3
 800b97a:	2600      	movs	r6, #0
 800b97c:	341a      	adds	r4, #26
 800b97e:	42b5      	cmp	r5, r6
 800b980:	d11a      	bne.n	800b9b8 <_printf_common+0xc8>
 800b982:	2000      	movs	r0, #0
 800b984:	e008      	b.n	800b998 <_printf_common+0xa8>
 800b986:	2301      	movs	r3, #1
 800b988:	4652      	mov	r2, sl
 800b98a:	4649      	mov	r1, r9
 800b98c:	4638      	mov	r0, r7
 800b98e:	47c0      	blx	r8
 800b990:	3001      	adds	r0, #1
 800b992:	d103      	bne.n	800b99c <_printf_common+0xac>
 800b994:	f04f 30ff 	mov.w	r0, #4294967295
 800b998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b99c:	3501      	adds	r5, #1
 800b99e:	e7c6      	b.n	800b92e <_printf_common+0x3e>
 800b9a0:	18e1      	adds	r1, r4, r3
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	2030      	movs	r0, #48	; 0x30
 800b9a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9aa:	4422      	add	r2, r4
 800b9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9b4:	3302      	adds	r3, #2
 800b9b6:	e7c7      	b.n	800b948 <_printf_common+0x58>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	4649      	mov	r1, r9
 800b9be:	4638      	mov	r0, r7
 800b9c0:	47c0      	blx	r8
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d0e6      	beq.n	800b994 <_printf_common+0xa4>
 800b9c6:	3601      	adds	r6, #1
 800b9c8:	e7d9      	b.n	800b97e <_printf_common+0x8e>
	...

0800b9cc <_printf_i>:
 800b9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	7e0f      	ldrb	r7, [r1, #24]
 800b9d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9d4:	2f78      	cmp	r7, #120	; 0x78
 800b9d6:	4691      	mov	r9, r2
 800b9d8:	4680      	mov	r8, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	469a      	mov	sl, r3
 800b9de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9e2:	d807      	bhi.n	800b9f4 <_printf_i+0x28>
 800b9e4:	2f62      	cmp	r7, #98	; 0x62
 800b9e6:	d80a      	bhi.n	800b9fe <_printf_i+0x32>
 800b9e8:	2f00      	cmp	r7, #0
 800b9ea:	f000 80d4 	beq.w	800bb96 <_printf_i+0x1ca>
 800b9ee:	2f58      	cmp	r7, #88	; 0x58
 800b9f0:	f000 80c0 	beq.w	800bb74 <_printf_i+0x1a8>
 800b9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9fc:	e03a      	b.n	800ba74 <_printf_i+0xa8>
 800b9fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ba02:	2b15      	cmp	r3, #21
 800ba04:	d8f6      	bhi.n	800b9f4 <_printf_i+0x28>
 800ba06:	a101      	add	r1, pc, #4	; (adr r1, 800ba0c <_printf_i+0x40>)
 800ba08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba0c:	0800ba65 	.word	0x0800ba65
 800ba10:	0800ba79 	.word	0x0800ba79
 800ba14:	0800b9f5 	.word	0x0800b9f5
 800ba18:	0800b9f5 	.word	0x0800b9f5
 800ba1c:	0800b9f5 	.word	0x0800b9f5
 800ba20:	0800b9f5 	.word	0x0800b9f5
 800ba24:	0800ba79 	.word	0x0800ba79
 800ba28:	0800b9f5 	.word	0x0800b9f5
 800ba2c:	0800b9f5 	.word	0x0800b9f5
 800ba30:	0800b9f5 	.word	0x0800b9f5
 800ba34:	0800b9f5 	.word	0x0800b9f5
 800ba38:	0800bb7d 	.word	0x0800bb7d
 800ba3c:	0800baa5 	.word	0x0800baa5
 800ba40:	0800bb37 	.word	0x0800bb37
 800ba44:	0800b9f5 	.word	0x0800b9f5
 800ba48:	0800b9f5 	.word	0x0800b9f5
 800ba4c:	0800bb9f 	.word	0x0800bb9f
 800ba50:	0800b9f5 	.word	0x0800b9f5
 800ba54:	0800baa5 	.word	0x0800baa5
 800ba58:	0800b9f5 	.word	0x0800b9f5
 800ba5c:	0800b9f5 	.word	0x0800b9f5
 800ba60:	0800bb3f 	.word	0x0800bb3f
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	1d1a      	adds	r2, r3, #4
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	602a      	str	r2, [r5, #0]
 800ba6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba74:	2301      	movs	r3, #1
 800ba76:	e09f      	b.n	800bbb8 <_printf_i+0x1ec>
 800ba78:	6820      	ldr	r0, [r4, #0]
 800ba7a:	682b      	ldr	r3, [r5, #0]
 800ba7c:	0607      	lsls	r7, r0, #24
 800ba7e:	f103 0104 	add.w	r1, r3, #4
 800ba82:	6029      	str	r1, [r5, #0]
 800ba84:	d501      	bpl.n	800ba8a <_printf_i+0xbe>
 800ba86:	681e      	ldr	r6, [r3, #0]
 800ba88:	e003      	b.n	800ba92 <_printf_i+0xc6>
 800ba8a:	0646      	lsls	r6, r0, #25
 800ba8c:	d5fb      	bpl.n	800ba86 <_printf_i+0xba>
 800ba8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba92:	2e00      	cmp	r6, #0
 800ba94:	da03      	bge.n	800ba9e <_printf_i+0xd2>
 800ba96:	232d      	movs	r3, #45	; 0x2d
 800ba98:	4276      	negs	r6, r6
 800ba9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba9e:	485a      	ldr	r0, [pc, #360]	; (800bc08 <_printf_i+0x23c>)
 800baa0:	230a      	movs	r3, #10
 800baa2:	e012      	b.n	800baca <_printf_i+0xfe>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	6820      	ldr	r0, [r4, #0]
 800baa8:	1d19      	adds	r1, r3, #4
 800baaa:	6029      	str	r1, [r5, #0]
 800baac:	0605      	lsls	r5, r0, #24
 800baae:	d501      	bpl.n	800bab4 <_printf_i+0xe8>
 800bab0:	681e      	ldr	r6, [r3, #0]
 800bab2:	e002      	b.n	800baba <_printf_i+0xee>
 800bab4:	0641      	lsls	r1, r0, #25
 800bab6:	d5fb      	bpl.n	800bab0 <_printf_i+0xe4>
 800bab8:	881e      	ldrh	r6, [r3, #0]
 800baba:	4853      	ldr	r0, [pc, #332]	; (800bc08 <_printf_i+0x23c>)
 800babc:	2f6f      	cmp	r7, #111	; 0x6f
 800babe:	bf0c      	ite	eq
 800bac0:	2308      	moveq	r3, #8
 800bac2:	230a      	movne	r3, #10
 800bac4:	2100      	movs	r1, #0
 800bac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baca:	6865      	ldr	r5, [r4, #4]
 800bacc:	60a5      	str	r5, [r4, #8]
 800bace:	2d00      	cmp	r5, #0
 800bad0:	bfa2      	ittt	ge
 800bad2:	6821      	ldrge	r1, [r4, #0]
 800bad4:	f021 0104 	bicge.w	r1, r1, #4
 800bad8:	6021      	strge	r1, [r4, #0]
 800bada:	b90e      	cbnz	r6, 800bae0 <_printf_i+0x114>
 800badc:	2d00      	cmp	r5, #0
 800bade:	d04b      	beq.n	800bb78 <_printf_i+0x1ac>
 800bae0:	4615      	mov	r5, r2
 800bae2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bae6:	fb03 6711 	mls	r7, r3, r1, r6
 800baea:	5dc7      	ldrb	r7, [r0, r7]
 800baec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800baf0:	4637      	mov	r7, r6
 800baf2:	42bb      	cmp	r3, r7
 800baf4:	460e      	mov	r6, r1
 800baf6:	d9f4      	bls.n	800bae2 <_printf_i+0x116>
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d10b      	bne.n	800bb14 <_printf_i+0x148>
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	07de      	lsls	r6, r3, #31
 800bb00:	d508      	bpl.n	800bb14 <_printf_i+0x148>
 800bb02:	6923      	ldr	r3, [r4, #16]
 800bb04:	6861      	ldr	r1, [r4, #4]
 800bb06:	4299      	cmp	r1, r3
 800bb08:	bfde      	ittt	le
 800bb0a:	2330      	movle	r3, #48	; 0x30
 800bb0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb14:	1b52      	subs	r2, r2, r5
 800bb16:	6122      	str	r2, [r4, #16]
 800bb18:	f8cd a000 	str.w	sl, [sp]
 800bb1c:	464b      	mov	r3, r9
 800bb1e:	aa03      	add	r2, sp, #12
 800bb20:	4621      	mov	r1, r4
 800bb22:	4640      	mov	r0, r8
 800bb24:	f7ff fee4 	bl	800b8f0 <_printf_common>
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d14a      	bne.n	800bbc2 <_printf_i+0x1f6>
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	b004      	add	sp, #16
 800bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	f043 0320 	orr.w	r3, r3, #32
 800bb3c:	6023      	str	r3, [r4, #0]
 800bb3e:	4833      	ldr	r0, [pc, #204]	; (800bc0c <_printf_i+0x240>)
 800bb40:	2778      	movs	r7, #120	; 0x78
 800bb42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb46:	6823      	ldr	r3, [r4, #0]
 800bb48:	6829      	ldr	r1, [r5, #0]
 800bb4a:	061f      	lsls	r7, r3, #24
 800bb4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb50:	d402      	bmi.n	800bb58 <_printf_i+0x18c>
 800bb52:	065f      	lsls	r7, r3, #25
 800bb54:	bf48      	it	mi
 800bb56:	b2b6      	uxthmi	r6, r6
 800bb58:	07df      	lsls	r7, r3, #31
 800bb5a:	bf48      	it	mi
 800bb5c:	f043 0320 	orrmi.w	r3, r3, #32
 800bb60:	6029      	str	r1, [r5, #0]
 800bb62:	bf48      	it	mi
 800bb64:	6023      	strmi	r3, [r4, #0]
 800bb66:	b91e      	cbnz	r6, 800bb70 <_printf_i+0x1a4>
 800bb68:	6823      	ldr	r3, [r4, #0]
 800bb6a:	f023 0320 	bic.w	r3, r3, #32
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	2310      	movs	r3, #16
 800bb72:	e7a7      	b.n	800bac4 <_printf_i+0xf8>
 800bb74:	4824      	ldr	r0, [pc, #144]	; (800bc08 <_printf_i+0x23c>)
 800bb76:	e7e4      	b.n	800bb42 <_printf_i+0x176>
 800bb78:	4615      	mov	r5, r2
 800bb7a:	e7bd      	b.n	800baf8 <_printf_i+0x12c>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	6826      	ldr	r6, [r4, #0]
 800bb80:	6961      	ldr	r1, [r4, #20]
 800bb82:	1d18      	adds	r0, r3, #4
 800bb84:	6028      	str	r0, [r5, #0]
 800bb86:	0635      	lsls	r5, r6, #24
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	d501      	bpl.n	800bb90 <_printf_i+0x1c4>
 800bb8c:	6019      	str	r1, [r3, #0]
 800bb8e:	e002      	b.n	800bb96 <_printf_i+0x1ca>
 800bb90:	0670      	lsls	r0, r6, #25
 800bb92:	d5fb      	bpl.n	800bb8c <_printf_i+0x1c0>
 800bb94:	8019      	strh	r1, [r3, #0]
 800bb96:	2300      	movs	r3, #0
 800bb98:	6123      	str	r3, [r4, #16]
 800bb9a:	4615      	mov	r5, r2
 800bb9c:	e7bc      	b.n	800bb18 <_printf_i+0x14c>
 800bb9e:	682b      	ldr	r3, [r5, #0]
 800bba0:	1d1a      	adds	r2, r3, #4
 800bba2:	602a      	str	r2, [r5, #0]
 800bba4:	681d      	ldr	r5, [r3, #0]
 800bba6:	6862      	ldr	r2, [r4, #4]
 800bba8:	2100      	movs	r1, #0
 800bbaa:	4628      	mov	r0, r5
 800bbac:	f7f4 fb18 	bl	80001e0 <memchr>
 800bbb0:	b108      	cbz	r0, 800bbb6 <_printf_i+0x1ea>
 800bbb2:	1b40      	subs	r0, r0, r5
 800bbb4:	6060      	str	r0, [r4, #4]
 800bbb6:	6863      	ldr	r3, [r4, #4]
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbc0:	e7aa      	b.n	800bb18 <_printf_i+0x14c>
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	462a      	mov	r2, r5
 800bbc6:	4649      	mov	r1, r9
 800bbc8:	4640      	mov	r0, r8
 800bbca:	47d0      	blx	sl
 800bbcc:	3001      	adds	r0, #1
 800bbce:	d0ad      	beq.n	800bb2c <_printf_i+0x160>
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	079b      	lsls	r3, r3, #30
 800bbd4:	d413      	bmi.n	800bbfe <_printf_i+0x232>
 800bbd6:	68e0      	ldr	r0, [r4, #12]
 800bbd8:	9b03      	ldr	r3, [sp, #12]
 800bbda:	4298      	cmp	r0, r3
 800bbdc:	bfb8      	it	lt
 800bbde:	4618      	movlt	r0, r3
 800bbe0:	e7a6      	b.n	800bb30 <_printf_i+0x164>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	4640      	mov	r0, r8
 800bbea:	47d0      	blx	sl
 800bbec:	3001      	adds	r0, #1
 800bbee:	d09d      	beq.n	800bb2c <_printf_i+0x160>
 800bbf0:	3501      	adds	r5, #1
 800bbf2:	68e3      	ldr	r3, [r4, #12]
 800bbf4:	9903      	ldr	r1, [sp, #12]
 800bbf6:	1a5b      	subs	r3, r3, r1
 800bbf8:	42ab      	cmp	r3, r5
 800bbfa:	dcf2      	bgt.n	800bbe2 <_printf_i+0x216>
 800bbfc:	e7eb      	b.n	800bbd6 <_printf_i+0x20a>
 800bbfe:	2500      	movs	r5, #0
 800bc00:	f104 0619 	add.w	r6, r4, #25
 800bc04:	e7f5      	b.n	800bbf2 <_printf_i+0x226>
 800bc06:	bf00      	nop
 800bc08:	0800c8c9 	.word	0x0800c8c9
 800bc0c:	0800c8da 	.word	0x0800c8da

0800bc10 <__sflush_r>:
 800bc10:	898a      	ldrh	r2, [r1, #12]
 800bc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc16:	4605      	mov	r5, r0
 800bc18:	0710      	lsls	r0, r2, #28
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	d458      	bmi.n	800bcd0 <__sflush_r+0xc0>
 800bc1e:	684b      	ldr	r3, [r1, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	dc05      	bgt.n	800bc30 <__sflush_r+0x20>
 800bc24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	dc02      	bgt.n	800bc30 <__sflush_r+0x20>
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc32:	2e00      	cmp	r6, #0
 800bc34:	d0f9      	beq.n	800bc2a <__sflush_r+0x1a>
 800bc36:	2300      	movs	r3, #0
 800bc38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc3c:	682f      	ldr	r7, [r5, #0]
 800bc3e:	6a21      	ldr	r1, [r4, #32]
 800bc40:	602b      	str	r3, [r5, #0]
 800bc42:	d032      	beq.n	800bcaa <__sflush_r+0x9a>
 800bc44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	075a      	lsls	r2, r3, #29
 800bc4a:	d505      	bpl.n	800bc58 <__sflush_r+0x48>
 800bc4c:	6863      	ldr	r3, [r4, #4]
 800bc4e:	1ac0      	subs	r0, r0, r3
 800bc50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc52:	b10b      	cbz	r3, 800bc58 <__sflush_r+0x48>
 800bc54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc56:	1ac0      	subs	r0, r0, r3
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc5e:	6a21      	ldr	r1, [r4, #32]
 800bc60:	4628      	mov	r0, r5
 800bc62:	47b0      	blx	r6
 800bc64:	1c43      	adds	r3, r0, #1
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	d106      	bne.n	800bc78 <__sflush_r+0x68>
 800bc6a:	6829      	ldr	r1, [r5, #0]
 800bc6c:	291d      	cmp	r1, #29
 800bc6e:	d82b      	bhi.n	800bcc8 <__sflush_r+0xb8>
 800bc70:	4a29      	ldr	r2, [pc, #164]	; (800bd18 <__sflush_r+0x108>)
 800bc72:	410a      	asrs	r2, r1
 800bc74:	07d6      	lsls	r6, r2, #31
 800bc76:	d427      	bmi.n	800bcc8 <__sflush_r+0xb8>
 800bc78:	2200      	movs	r2, #0
 800bc7a:	6062      	str	r2, [r4, #4]
 800bc7c:	04d9      	lsls	r1, r3, #19
 800bc7e:	6922      	ldr	r2, [r4, #16]
 800bc80:	6022      	str	r2, [r4, #0]
 800bc82:	d504      	bpl.n	800bc8e <__sflush_r+0x7e>
 800bc84:	1c42      	adds	r2, r0, #1
 800bc86:	d101      	bne.n	800bc8c <__sflush_r+0x7c>
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	b903      	cbnz	r3, 800bc8e <__sflush_r+0x7e>
 800bc8c:	6560      	str	r0, [r4, #84]	; 0x54
 800bc8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc90:	602f      	str	r7, [r5, #0]
 800bc92:	2900      	cmp	r1, #0
 800bc94:	d0c9      	beq.n	800bc2a <__sflush_r+0x1a>
 800bc96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc9a:	4299      	cmp	r1, r3
 800bc9c:	d002      	beq.n	800bca4 <__sflush_r+0x94>
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f7ff fb3e 	bl	800b320 <_free_r>
 800bca4:	2000      	movs	r0, #0
 800bca6:	6360      	str	r0, [r4, #52]	; 0x34
 800bca8:	e7c0      	b.n	800bc2c <__sflush_r+0x1c>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	4628      	mov	r0, r5
 800bcae:	47b0      	blx	r6
 800bcb0:	1c41      	adds	r1, r0, #1
 800bcb2:	d1c8      	bne.n	800bc46 <__sflush_r+0x36>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d0c5      	beq.n	800bc46 <__sflush_r+0x36>
 800bcba:	2b1d      	cmp	r3, #29
 800bcbc:	d001      	beq.n	800bcc2 <__sflush_r+0xb2>
 800bcbe:	2b16      	cmp	r3, #22
 800bcc0:	d101      	bne.n	800bcc6 <__sflush_r+0xb6>
 800bcc2:	602f      	str	r7, [r5, #0]
 800bcc4:	e7b1      	b.n	800bc2a <__sflush_r+0x1a>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bccc:	81a3      	strh	r3, [r4, #12]
 800bcce:	e7ad      	b.n	800bc2c <__sflush_r+0x1c>
 800bcd0:	690f      	ldr	r7, [r1, #16]
 800bcd2:	2f00      	cmp	r7, #0
 800bcd4:	d0a9      	beq.n	800bc2a <__sflush_r+0x1a>
 800bcd6:	0793      	lsls	r3, r2, #30
 800bcd8:	680e      	ldr	r6, [r1, #0]
 800bcda:	bf08      	it	eq
 800bcdc:	694b      	ldreq	r3, [r1, #20]
 800bcde:	600f      	str	r7, [r1, #0]
 800bce0:	bf18      	it	ne
 800bce2:	2300      	movne	r3, #0
 800bce4:	eba6 0807 	sub.w	r8, r6, r7
 800bce8:	608b      	str	r3, [r1, #8]
 800bcea:	f1b8 0f00 	cmp.w	r8, #0
 800bcee:	dd9c      	ble.n	800bc2a <__sflush_r+0x1a>
 800bcf0:	6a21      	ldr	r1, [r4, #32]
 800bcf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcf4:	4643      	mov	r3, r8
 800bcf6:	463a      	mov	r2, r7
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	47b0      	blx	r6
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	dc06      	bgt.n	800bd0e <__sflush_r+0xfe>
 800bd00:	89a3      	ldrh	r3, [r4, #12]
 800bd02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd06:	81a3      	strh	r3, [r4, #12]
 800bd08:	f04f 30ff 	mov.w	r0, #4294967295
 800bd0c:	e78e      	b.n	800bc2c <__sflush_r+0x1c>
 800bd0e:	4407      	add	r7, r0
 800bd10:	eba8 0800 	sub.w	r8, r8, r0
 800bd14:	e7e9      	b.n	800bcea <__sflush_r+0xda>
 800bd16:	bf00      	nop
 800bd18:	dfbffffe 	.word	0xdfbffffe

0800bd1c <_fflush_r>:
 800bd1c:	b538      	push	{r3, r4, r5, lr}
 800bd1e:	690b      	ldr	r3, [r1, #16]
 800bd20:	4605      	mov	r5, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	b913      	cbnz	r3, 800bd2c <_fflush_r+0x10>
 800bd26:	2500      	movs	r5, #0
 800bd28:	4628      	mov	r0, r5
 800bd2a:	bd38      	pop	{r3, r4, r5, pc}
 800bd2c:	b118      	cbz	r0, 800bd36 <_fflush_r+0x1a>
 800bd2e:	6a03      	ldr	r3, [r0, #32]
 800bd30:	b90b      	cbnz	r3, 800bd36 <_fflush_r+0x1a>
 800bd32:	f7ff f9bd 	bl	800b0b0 <__sinit>
 800bd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d0f3      	beq.n	800bd26 <_fflush_r+0xa>
 800bd3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd40:	07d0      	lsls	r0, r2, #31
 800bd42:	d404      	bmi.n	800bd4e <_fflush_r+0x32>
 800bd44:	0599      	lsls	r1, r3, #22
 800bd46:	d402      	bmi.n	800bd4e <_fflush_r+0x32>
 800bd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd4a:	f7ff fae6 	bl	800b31a <__retarget_lock_acquire_recursive>
 800bd4e:	4628      	mov	r0, r5
 800bd50:	4621      	mov	r1, r4
 800bd52:	f7ff ff5d 	bl	800bc10 <__sflush_r>
 800bd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd58:	07da      	lsls	r2, r3, #31
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	d4e4      	bmi.n	800bd28 <_fflush_r+0xc>
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	059b      	lsls	r3, r3, #22
 800bd62:	d4e1      	bmi.n	800bd28 <_fflush_r+0xc>
 800bd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd66:	f7ff fad9 	bl	800b31c <__retarget_lock_release_recursive>
 800bd6a:	e7dd      	b.n	800bd28 <_fflush_r+0xc>

0800bd6c <__swbuf_r>:
 800bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6e:	460e      	mov	r6, r1
 800bd70:	4614      	mov	r4, r2
 800bd72:	4605      	mov	r5, r0
 800bd74:	b118      	cbz	r0, 800bd7e <__swbuf_r+0x12>
 800bd76:	6a03      	ldr	r3, [r0, #32]
 800bd78:	b90b      	cbnz	r3, 800bd7e <__swbuf_r+0x12>
 800bd7a:	f7ff f999 	bl	800b0b0 <__sinit>
 800bd7e:	69a3      	ldr	r3, [r4, #24]
 800bd80:	60a3      	str	r3, [r4, #8]
 800bd82:	89a3      	ldrh	r3, [r4, #12]
 800bd84:	071a      	lsls	r2, r3, #28
 800bd86:	d525      	bpl.n	800bdd4 <__swbuf_r+0x68>
 800bd88:	6923      	ldr	r3, [r4, #16]
 800bd8a:	b31b      	cbz	r3, 800bdd4 <__swbuf_r+0x68>
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	6922      	ldr	r2, [r4, #16]
 800bd90:	1a98      	subs	r0, r3, r2
 800bd92:	6963      	ldr	r3, [r4, #20]
 800bd94:	b2f6      	uxtb	r6, r6
 800bd96:	4283      	cmp	r3, r0
 800bd98:	4637      	mov	r7, r6
 800bd9a:	dc04      	bgt.n	800bda6 <__swbuf_r+0x3a>
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f7ff ffbc 	bl	800bd1c <_fflush_r>
 800bda4:	b9e0      	cbnz	r0, 800bde0 <__swbuf_r+0x74>
 800bda6:	68a3      	ldr	r3, [r4, #8]
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	60a3      	str	r3, [r4, #8]
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	6022      	str	r2, [r4, #0]
 800bdb2:	701e      	strb	r6, [r3, #0]
 800bdb4:	6962      	ldr	r2, [r4, #20]
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d004      	beq.n	800bdc6 <__swbuf_r+0x5a>
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	07db      	lsls	r3, r3, #31
 800bdc0:	d506      	bpl.n	800bdd0 <__swbuf_r+0x64>
 800bdc2:	2e0a      	cmp	r6, #10
 800bdc4:	d104      	bne.n	800bdd0 <__swbuf_r+0x64>
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7ff ffa7 	bl	800bd1c <_fflush_r>
 800bdce:	b938      	cbnz	r0, 800bde0 <__swbuf_r+0x74>
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f000 f806 	bl	800bde8 <__swsetup_r>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d0d5      	beq.n	800bd8c <__swbuf_r+0x20>
 800bde0:	f04f 37ff 	mov.w	r7, #4294967295
 800bde4:	e7f4      	b.n	800bdd0 <__swbuf_r+0x64>
	...

0800bde8 <__swsetup_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4b2a      	ldr	r3, [pc, #168]	; (800be94 <__swsetup_r+0xac>)
 800bdec:	4605      	mov	r5, r0
 800bdee:	6818      	ldr	r0, [r3, #0]
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	b118      	cbz	r0, 800bdfc <__swsetup_r+0x14>
 800bdf4:	6a03      	ldr	r3, [r0, #32]
 800bdf6:	b90b      	cbnz	r3, 800bdfc <__swsetup_r+0x14>
 800bdf8:	f7ff f95a 	bl	800b0b0 <__sinit>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be02:	0718      	lsls	r0, r3, #28
 800be04:	d422      	bmi.n	800be4c <__swsetup_r+0x64>
 800be06:	06d9      	lsls	r1, r3, #27
 800be08:	d407      	bmi.n	800be1a <__swsetup_r+0x32>
 800be0a:	2309      	movs	r3, #9
 800be0c:	602b      	str	r3, [r5, #0]
 800be0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be12:	81a3      	strh	r3, [r4, #12]
 800be14:	f04f 30ff 	mov.w	r0, #4294967295
 800be18:	e034      	b.n	800be84 <__swsetup_r+0x9c>
 800be1a:	0758      	lsls	r0, r3, #29
 800be1c:	d512      	bpl.n	800be44 <__swsetup_r+0x5c>
 800be1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be20:	b141      	cbz	r1, 800be34 <__swsetup_r+0x4c>
 800be22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be26:	4299      	cmp	r1, r3
 800be28:	d002      	beq.n	800be30 <__swsetup_r+0x48>
 800be2a:	4628      	mov	r0, r5
 800be2c:	f7ff fa78 	bl	800b320 <_free_r>
 800be30:	2300      	movs	r3, #0
 800be32:	6363      	str	r3, [r4, #52]	; 0x34
 800be34:	89a3      	ldrh	r3, [r4, #12]
 800be36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be3a:	81a3      	strh	r3, [r4, #12]
 800be3c:	2300      	movs	r3, #0
 800be3e:	6063      	str	r3, [r4, #4]
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	6023      	str	r3, [r4, #0]
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	f043 0308 	orr.w	r3, r3, #8
 800be4a:	81a3      	strh	r3, [r4, #12]
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	b94b      	cbnz	r3, 800be64 <__swsetup_r+0x7c>
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be5a:	d003      	beq.n	800be64 <__swsetup_r+0x7c>
 800be5c:	4621      	mov	r1, r4
 800be5e:	4628      	mov	r0, r5
 800be60:	f000 f897 	bl	800bf92 <__smakebuf_r>
 800be64:	89a0      	ldrh	r0, [r4, #12]
 800be66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be6a:	f010 0301 	ands.w	r3, r0, #1
 800be6e:	d00a      	beq.n	800be86 <__swsetup_r+0x9e>
 800be70:	2300      	movs	r3, #0
 800be72:	60a3      	str	r3, [r4, #8]
 800be74:	6963      	ldr	r3, [r4, #20]
 800be76:	425b      	negs	r3, r3
 800be78:	61a3      	str	r3, [r4, #24]
 800be7a:	6923      	ldr	r3, [r4, #16]
 800be7c:	b943      	cbnz	r3, 800be90 <__swsetup_r+0xa8>
 800be7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be82:	d1c4      	bne.n	800be0e <__swsetup_r+0x26>
 800be84:	bd38      	pop	{r3, r4, r5, pc}
 800be86:	0781      	lsls	r1, r0, #30
 800be88:	bf58      	it	pl
 800be8a:	6963      	ldrpl	r3, [r4, #20]
 800be8c:	60a3      	str	r3, [r4, #8]
 800be8e:	e7f4      	b.n	800be7a <__swsetup_r+0x92>
 800be90:	2000      	movs	r0, #0
 800be92:	e7f7      	b.n	800be84 <__swsetup_r+0x9c>
 800be94:	20000080 	.word	0x20000080

0800be98 <memmove>:
 800be98:	4288      	cmp	r0, r1
 800be9a:	b510      	push	{r4, lr}
 800be9c:	eb01 0402 	add.w	r4, r1, r2
 800bea0:	d902      	bls.n	800bea8 <memmove+0x10>
 800bea2:	4284      	cmp	r4, r0
 800bea4:	4623      	mov	r3, r4
 800bea6:	d807      	bhi.n	800beb8 <memmove+0x20>
 800bea8:	1e43      	subs	r3, r0, #1
 800beaa:	42a1      	cmp	r1, r4
 800beac:	d008      	beq.n	800bec0 <memmove+0x28>
 800beae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beb6:	e7f8      	b.n	800beaa <memmove+0x12>
 800beb8:	4402      	add	r2, r0
 800beba:	4601      	mov	r1, r0
 800bebc:	428a      	cmp	r2, r1
 800bebe:	d100      	bne.n	800bec2 <memmove+0x2a>
 800bec0:	bd10      	pop	{r4, pc}
 800bec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beca:	e7f7      	b.n	800bebc <memmove+0x24>

0800becc <memcpy>:
 800becc:	440a      	add	r2, r1
 800bece:	4291      	cmp	r1, r2
 800bed0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bed4:	d100      	bne.n	800bed8 <memcpy+0xc>
 800bed6:	4770      	bx	lr
 800bed8:	b510      	push	{r4, lr}
 800beda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bede:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bee2:	4291      	cmp	r1, r2
 800bee4:	d1f9      	bne.n	800beda <memcpy+0xe>
 800bee6:	bd10      	pop	{r4, pc}

0800bee8 <_realloc_r>:
 800bee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beec:	4680      	mov	r8, r0
 800beee:	4614      	mov	r4, r2
 800bef0:	460e      	mov	r6, r1
 800bef2:	b921      	cbnz	r1, 800befe <_realloc_r+0x16>
 800bef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bef8:	4611      	mov	r1, r2
 800befa:	f7fe bfc1 	b.w	800ae80 <_malloc_r>
 800befe:	b92a      	cbnz	r2, 800bf0c <_realloc_r+0x24>
 800bf00:	f7ff fa0e 	bl	800b320 <_free_r>
 800bf04:	4625      	mov	r5, r4
 800bf06:	4628      	mov	r0, r5
 800bf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf0c:	f000 f8a0 	bl	800c050 <_malloc_usable_size_r>
 800bf10:	4284      	cmp	r4, r0
 800bf12:	4607      	mov	r7, r0
 800bf14:	d802      	bhi.n	800bf1c <_realloc_r+0x34>
 800bf16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf1a:	d812      	bhi.n	800bf42 <_realloc_r+0x5a>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4640      	mov	r0, r8
 800bf20:	f7fe ffae 	bl	800ae80 <_malloc_r>
 800bf24:	4605      	mov	r5, r0
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d0ed      	beq.n	800bf06 <_realloc_r+0x1e>
 800bf2a:	42bc      	cmp	r4, r7
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	4631      	mov	r1, r6
 800bf30:	bf28      	it	cs
 800bf32:	463a      	movcs	r2, r7
 800bf34:	f7ff ffca 	bl	800becc <memcpy>
 800bf38:	4631      	mov	r1, r6
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	f7ff f9f0 	bl	800b320 <_free_r>
 800bf40:	e7e1      	b.n	800bf06 <_realloc_r+0x1e>
 800bf42:	4635      	mov	r5, r6
 800bf44:	e7df      	b.n	800bf06 <_realloc_r+0x1e>

0800bf46 <__swhatbuf_r>:
 800bf46:	b570      	push	{r4, r5, r6, lr}
 800bf48:	460c      	mov	r4, r1
 800bf4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	b096      	sub	sp, #88	; 0x58
 800bf52:	4615      	mov	r5, r2
 800bf54:	461e      	mov	r6, r3
 800bf56:	da0d      	bge.n	800bf74 <__swhatbuf_r+0x2e>
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bf5e:	f04f 0100 	mov.w	r1, #0
 800bf62:	bf0c      	ite	eq
 800bf64:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bf68:	2340      	movne	r3, #64	; 0x40
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	6031      	str	r1, [r6, #0]
 800bf6e:	602b      	str	r3, [r5, #0]
 800bf70:	b016      	add	sp, #88	; 0x58
 800bf72:	bd70      	pop	{r4, r5, r6, pc}
 800bf74:	466a      	mov	r2, sp
 800bf76:	f000 f849 	bl	800c00c <_fstat_r>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	dbec      	blt.n	800bf58 <__swhatbuf_r+0x12>
 800bf7e:	9901      	ldr	r1, [sp, #4]
 800bf80:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bf84:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bf88:	4259      	negs	r1, r3
 800bf8a:	4159      	adcs	r1, r3
 800bf8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf90:	e7eb      	b.n	800bf6a <__swhatbuf_r+0x24>

0800bf92 <__smakebuf_r>:
 800bf92:	898b      	ldrh	r3, [r1, #12]
 800bf94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf96:	079d      	lsls	r5, r3, #30
 800bf98:	4606      	mov	r6, r0
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	d507      	bpl.n	800bfae <__smakebuf_r+0x1c>
 800bf9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	6123      	str	r3, [r4, #16]
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	6163      	str	r3, [r4, #20]
 800bfaa:	b002      	add	sp, #8
 800bfac:	bd70      	pop	{r4, r5, r6, pc}
 800bfae:	ab01      	add	r3, sp, #4
 800bfb0:	466a      	mov	r2, sp
 800bfb2:	f7ff ffc8 	bl	800bf46 <__swhatbuf_r>
 800bfb6:	9900      	ldr	r1, [sp, #0]
 800bfb8:	4605      	mov	r5, r0
 800bfba:	4630      	mov	r0, r6
 800bfbc:	f7fe ff60 	bl	800ae80 <_malloc_r>
 800bfc0:	b948      	cbnz	r0, 800bfd6 <__smakebuf_r+0x44>
 800bfc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc6:	059a      	lsls	r2, r3, #22
 800bfc8:	d4ef      	bmi.n	800bfaa <__smakebuf_r+0x18>
 800bfca:	f023 0303 	bic.w	r3, r3, #3
 800bfce:	f043 0302 	orr.w	r3, r3, #2
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	e7e3      	b.n	800bf9e <__smakebuf_r+0xc>
 800bfd6:	89a3      	ldrh	r3, [r4, #12]
 800bfd8:	6020      	str	r0, [r4, #0]
 800bfda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfde:	81a3      	strh	r3, [r4, #12]
 800bfe0:	9b00      	ldr	r3, [sp, #0]
 800bfe2:	6163      	str	r3, [r4, #20]
 800bfe4:	9b01      	ldr	r3, [sp, #4]
 800bfe6:	6120      	str	r0, [r4, #16]
 800bfe8:	b15b      	cbz	r3, 800c002 <__smakebuf_r+0x70>
 800bfea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfee:	4630      	mov	r0, r6
 800bff0:	f000 f81e 	bl	800c030 <_isatty_r>
 800bff4:	b128      	cbz	r0, 800c002 <__smakebuf_r+0x70>
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	f023 0303 	bic.w	r3, r3, #3
 800bffc:	f043 0301 	orr.w	r3, r3, #1
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	431d      	orrs	r5, r3
 800c006:	81a5      	strh	r5, [r4, #12]
 800c008:	e7cf      	b.n	800bfaa <__smakebuf_r+0x18>
	...

0800c00c <_fstat_r>:
 800c00c:	b538      	push	{r3, r4, r5, lr}
 800c00e:	4d07      	ldr	r5, [pc, #28]	; (800c02c <_fstat_r+0x20>)
 800c010:	2300      	movs	r3, #0
 800c012:	4604      	mov	r4, r0
 800c014:	4608      	mov	r0, r1
 800c016:	4611      	mov	r1, r2
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	f7f7 fbe4 	bl	80037e6 <_fstat>
 800c01e:	1c43      	adds	r3, r0, #1
 800c020:	d102      	bne.n	800c028 <_fstat_r+0x1c>
 800c022:	682b      	ldr	r3, [r5, #0]
 800c024:	b103      	cbz	r3, 800c028 <_fstat_r+0x1c>
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	bd38      	pop	{r3, r4, r5, pc}
 800c02a:	bf00      	nop
 800c02c:	20002a50 	.word	0x20002a50

0800c030 <_isatty_r>:
 800c030:	b538      	push	{r3, r4, r5, lr}
 800c032:	4d06      	ldr	r5, [pc, #24]	; (800c04c <_isatty_r+0x1c>)
 800c034:	2300      	movs	r3, #0
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	f7f7 fbe3 	bl	8003806 <_isatty>
 800c040:	1c43      	adds	r3, r0, #1
 800c042:	d102      	bne.n	800c04a <_isatty_r+0x1a>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	b103      	cbz	r3, 800c04a <_isatty_r+0x1a>
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	bd38      	pop	{r3, r4, r5, pc}
 800c04c:	20002a50 	.word	0x20002a50

0800c050 <_malloc_usable_size_r>:
 800c050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c054:	1f18      	subs	r0, r3, #4
 800c056:	2b00      	cmp	r3, #0
 800c058:	bfbc      	itt	lt
 800c05a:	580b      	ldrlt	r3, [r1, r0]
 800c05c:	18c0      	addlt	r0, r0, r3
 800c05e:	4770      	bx	lr

0800c060 <sqrt>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	ed2d 8b02 	vpush	{d8}
 800c066:	ec55 4b10 	vmov	r4, r5, d0
 800c06a:	f000 f825 	bl	800c0b8 <__ieee754_sqrt>
 800c06e:	4622      	mov	r2, r4
 800c070:	462b      	mov	r3, r5
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	eeb0 8a40 	vmov.f32	s16, s0
 800c07a:	eef0 8a60 	vmov.f32	s17, s1
 800c07e:	f7f4 fd55 	bl	8000b2c <__aeabi_dcmpun>
 800c082:	b990      	cbnz	r0, 800c0aa <sqrt+0x4a>
 800c084:	2200      	movs	r2, #0
 800c086:	2300      	movs	r3, #0
 800c088:	4620      	mov	r0, r4
 800c08a:	4629      	mov	r1, r5
 800c08c:	f7f4 fd26 	bl	8000adc <__aeabi_dcmplt>
 800c090:	b158      	cbz	r0, 800c0aa <sqrt+0x4a>
 800c092:	f7ff f917 	bl	800b2c4 <__errno>
 800c096:	2321      	movs	r3, #33	; 0x21
 800c098:	6003      	str	r3, [r0, #0]
 800c09a:	2200      	movs	r2, #0
 800c09c:	2300      	movs	r3, #0
 800c09e:	4610      	mov	r0, r2
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	f7f4 fbd3 	bl	800084c <__aeabi_ddiv>
 800c0a6:	ec41 0b18 	vmov	d8, r0, r1
 800c0aa:	eeb0 0a48 	vmov.f32	s0, s16
 800c0ae:	eef0 0a68 	vmov.f32	s1, s17
 800c0b2:	ecbd 8b02 	vpop	{d8}
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}

0800c0b8 <__ieee754_sqrt>:
 800c0b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0bc:	ec55 4b10 	vmov	r4, r5, d0
 800c0c0:	4e67      	ldr	r6, [pc, #412]	; (800c260 <__ieee754_sqrt+0x1a8>)
 800c0c2:	43ae      	bics	r6, r5
 800c0c4:	ee10 0a10 	vmov	r0, s0
 800c0c8:	ee10 2a10 	vmov	r2, s0
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	d10d      	bne.n	800c0ee <__ieee754_sqrt+0x36>
 800c0d2:	f7f4 fa91 	bl	80005f8 <__aeabi_dmul>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4620      	mov	r0, r4
 800c0dc:	4629      	mov	r1, r5
 800c0de:	f7f4 f8d5 	bl	800028c <__adddf3>
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	ec45 4b10 	vmov	d0, r4, r5
 800c0ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ee:	2d00      	cmp	r5, #0
 800c0f0:	dc0b      	bgt.n	800c10a <__ieee754_sqrt+0x52>
 800c0f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0f6:	4326      	orrs	r6, r4
 800c0f8:	d0f5      	beq.n	800c0e6 <__ieee754_sqrt+0x2e>
 800c0fa:	b135      	cbz	r5, 800c10a <__ieee754_sqrt+0x52>
 800c0fc:	f7f4 f8c4 	bl	8000288 <__aeabi_dsub>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	f7f4 fba2 	bl	800084c <__aeabi_ddiv>
 800c108:	e7eb      	b.n	800c0e2 <__ieee754_sqrt+0x2a>
 800c10a:	1509      	asrs	r1, r1, #20
 800c10c:	f000 808d 	beq.w	800c22a <__ieee754_sqrt+0x172>
 800c110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c114:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c11c:	07c9      	lsls	r1, r1, #31
 800c11e:	bf5c      	itt	pl
 800c120:	005b      	lslpl	r3, r3, #1
 800c122:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c126:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c12a:	bf58      	it	pl
 800c12c:	0052      	lslpl	r2, r2, #1
 800c12e:	2500      	movs	r5, #0
 800c130:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c134:	1076      	asrs	r6, r6, #1
 800c136:	0052      	lsls	r2, r2, #1
 800c138:	f04f 0e16 	mov.w	lr, #22
 800c13c:	46ac      	mov	ip, r5
 800c13e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c142:	eb0c 0001 	add.w	r0, ip, r1
 800c146:	4298      	cmp	r0, r3
 800c148:	bfde      	ittt	le
 800c14a:	1a1b      	suble	r3, r3, r0
 800c14c:	eb00 0c01 	addle.w	ip, r0, r1
 800c150:	186d      	addle	r5, r5, r1
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	f1be 0e01 	subs.w	lr, lr, #1
 800c158:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c15c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c160:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c164:	d1ed      	bne.n	800c142 <__ieee754_sqrt+0x8a>
 800c166:	4674      	mov	r4, lr
 800c168:	2720      	movs	r7, #32
 800c16a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c16e:	4563      	cmp	r3, ip
 800c170:	eb01 000e 	add.w	r0, r1, lr
 800c174:	dc02      	bgt.n	800c17c <__ieee754_sqrt+0xc4>
 800c176:	d113      	bne.n	800c1a0 <__ieee754_sqrt+0xe8>
 800c178:	4290      	cmp	r0, r2
 800c17a:	d811      	bhi.n	800c1a0 <__ieee754_sqrt+0xe8>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	eb00 0e01 	add.w	lr, r0, r1
 800c182:	da57      	bge.n	800c234 <__ieee754_sqrt+0x17c>
 800c184:	f1be 0f00 	cmp.w	lr, #0
 800c188:	db54      	blt.n	800c234 <__ieee754_sqrt+0x17c>
 800c18a:	f10c 0801 	add.w	r8, ip, #1
 800c18e:	eba3 030c 	sub.w	r3, r3, ip
 800c192:	4290      	cmp	r0, r2
 800c194:	bf88      	it	hi
 800c196:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c19a:	1a12      	subs	r2, r2, r0
 800c19c:	440c      	add	r4, r1
 800c19e:	46c4      	mov	ip, r8
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	3f01      	subs	r7, #1
 800c1a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c1a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c1ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c1b0:	d1dd      	bne.n	800c16e <__ieee754_sqrt+0xb6>
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	d01b      	beq.n	800c1ee <__ieee754_sqrt+0x136>
 800c1b6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c264 <__ieee754_sqrt+0x1ac>
 800c1ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c268 <__ieee754_sqrt+0x1b0>
 800c1be:	e9da 0100 	ldrd	r0, r1, [sl]
 800c1c2:	e9db 2300 	ldrd	r2, r3, [fp]
 800c1c6:	f7f4 f85f 	bl	8000288 <__aeabi_dsub>
 800c1ca:	e9da 8900 	ldrd	r8, r9, [sl]
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	4649      	mov	r1, r9
 800c1d6:	f7f4 fc8b 	bl	8000af0 <__aeabi_dcmple>
 800c1da:	b140      	cbz	r0, 800c1ee <__ieee754_sqrt+0x136>
 800c1dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c1e0:	e9da 0100 	ldrd	r0, r1, [sl]
 800c1e4:	e9db 2300 	ldrd	r2, r3, [fp]
 800c1e8:	d126      	bne.n	800c238 <__ieee754_sqrt+0x180>
 800c1ea:	3501      	adds	r5, #1
 800c1ec:	463c      	mov	r4, r7
 800c1ee:	106a      	asrs	r2, r5, #1
 800c1f0:	0863      	lsrs	r3, r4, #1
 800c1f2:	07e9      	lsls	r1, r5, #31
 800c1f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c1f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c1fc:	bf48      	it	mi
 800c1fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c202:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c206:	461c      	mov	r4, r3
 800c208:	e76d      	b.n	800c0e6 <__ieee754_sqrt+0x2e>
 800c20a:	0ad3      	lsrs	r3, r2, #11
 800c20c:	3815      	subs	r0, #21
 800c20e:	0552      	lsls	r2, r2, #21
 800c210:	2b00      	cmp	r3, #0
 800c212:	d0fa      	beq.n	800c20a <__ieee754_sqrt+0x152>
 800c214:	02dc      	lsls	r4, r3, #11
 800c216:	d50a      	bpl.n	800c22e <__ieee754_sqrt+0x176>
 800c218:	f1c1 0420 	rsb	r4, r1, #32
 800c21c:	fa22 f404 	lsr.w	r4, r2, r4
 800c220:	1e4d      	subs	r5, r1, #1
 800c222:	408a      	lsls	r2, r1
 800c224:	4323      	orrs	r3, r4
 800c226:	1b41      	subs	r1, r0, r5
 800c228:	e772      	b.n	800c110 <__ieee754_sqrt+0x58>
 800c22a:	4608      	mov	r0, r1
 800c22c:	e7f0      	b.n	800c210 <__ieee754_sqrt+0x158>
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	3101      	adds	r1, #1
 800c232:	e7ef      	b.n	800c214 <__ieee754_sqrt+0x15c>
 800c234:	46e0      	mov	r8, ip
 800c236:	e7aa      	b.n	800c18e <__ieee754_sqrt+0xd6>
 800c238:	f7f4 f828 	bl	800028c <__adddf3>
 800c23c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c240:	4602      	mov	r2, r0
 800c242:	460b      	mov	r3, r1
 800c244:	4640      	mov	r0, r8
 800c246:	4649      	mov	r1, r9
 800c248:	f7f4 fc48 	bl	8000adc <__aeabi_dcmplt>
 800c24c:	b120      	cbz	r0, 800c258 <__ieee754_sqrt+0x1a0>
 800c24e:	1ca0      	adds	r0, r4, #2
 800c250:	bf08      	it	eq
 800c252:	3501      	addeq	r5, #1
 800c254:	3402      	adds	r4, #2
 800c256:	e7ca      	b.n	800c1ee <__ieee754_sqrt+0x136>
 800c258:	3401      	adds	r4, #1
 800c25a:	f024 0401 	bic.w	r4, r4, #1
 800c25e:	e7c6      	b.n	800c1ee <__ieee754_sqrt+0x136>
 800c260:	7ff00000 	.word	0x7ff00000
 800c264:	20000088 	.word	0x20000088
 800c268:	20000090 	.word	0x20000090

0800c26c <_init>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	bf00      	nop
 800c270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c272:	bc08      	pop	{r3}
 800c274:	469e      	mov	lr, r3
 800c276:	4770      	bx	lr

0800c278 <_fini>:
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	bf00      	nop
 800c27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27e:	bc08      	pop	{r3}
 800c280:	469e      	mov	lr, r3
 800c282:	4770      	bx	lr
